db_id,query,query_toks,query_toks_no_value,question,question_toks,sql
concert_singer,SELECT count(*) FROM singer,"['SELECT', 'count', '(', '*', ')', 'FROM', 'singer']","['select', 'count', '(', '*', ')', 'from', 'singer']",How many singers do we have?,"['How', 'many', 'singers', 'do', 'we', 'have', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,SELECT count(*) FROM singer,"['SELECT', 'count', '(', '*', ')', 'FROM', 'singer']","['select', 'count', '(', '*', ')', 'from', 'singer']",What is the total number of singers?,"['What', 'is', 'the', 'total', 'number', 'of', 'singers', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"SELECT name ,  country ,  age FROM singer ORDER BY age DESC","['SELECT', 'name', ',', 'country', ',', 'age', 'FROM', 'singer', 'ORDER', 'BY', 'age', 'DESC']","['select', 'name', ',', 'country', ',', 'age', 'from', 'singer', 'order', 'by', 'age', 'desc']","Show name, country, age for all singers ordered by age from the oldest to the youngest.","['Show', 'name', ',', 'country', ',', 'age', 'for', 'all', 'singers', 'ordered', 'by', 'age', 'from', 'the', 'oldest', 'to', 'the', 'youngest', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]], [0, [0, [0, 13, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 13, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"SELECT name ,  country ,  age FROM singer ORDER BY age DESC","['SELECT', 'name', ',', 'country', ',', 'age', 'FROM', 'singer', 'ORDER', 'BY', 'age', 'DESC']","['select', 'name', ',', 'country', ',', 'age', 'from', 'singer', 'order', 'by', 'age', 'desc']","What are the names, countries, and ages for every singer in descending order of age?","['What', 'are', 'the', 'names', ',', 'countries', ',', 'and', 'ages', 'for', 'every', 'singer', 'in', 'descending', 'order', 'of', 'age', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]], [0, [0, [0, 13, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 13, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'","['SELECT', 'avg', '(', 'age', ')', ',', 'min', '(', 'age', ')', ',', 'max', '(', 'age', ')', 'FROM', 'singer', 'WHERE', 'country', '=', ""'France"", ""'""]","['select', 'avg', '(', 'age', ')', ',', 'min', '(', 'age', ')', ',', 'max', '(', 'age', ')', 'from', 'singer', 'where', 'country', '=', 'value']","What is the average, minimum, and maximum age of all singers from France?","['What', 'is', 'the', 'average', ',', 'minimum', ',', 'and', 'maximum', 'age', 'of', 'all', 'singers', 'from', 'France', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[5, [0, [0, 13, False], None]], [2, [0, [0, 13, False], None]], [1, [0, [0, 13, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""France""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'","['SELECT', 'avg', '(', 'age', ')', ',', 'min', '(', 'age', ')', ',', 'max', '(', 'age', ')', 'FROM', 'singer', 'WHERE', 'country', '=', ""'France"", ""'""]","['select', 'avg', '(', 'age', ')', ',', 'min', '(', 'age', ')', ',', 'max', '(', 'age', ')', 'from', 'singer', 'where', 'country', '=', 'value']","What is the average, minimum, and maximum age for all French singers?","['What', 'is', 'the', 'average', ',', 'minimum', ',', 'and', 'maximum', 'age', 'for', 'all', 'French', 'singers', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[5, [0, [0, 13, False], None]], [2, [0, [0, 13, False], None]], [1, [0, [0, 13, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""France""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1","['SELECT', 'song_name', ',', 'song_release_year', 'FROM', 'singer', 'ORDER', 'BY', 'age', 'LIMIT', '1']","['select', 'song_name', ',', 'song_release_year', 'from', 'singer', 'order', 'by', 'age', 'limit', 'value']",Show the name and the release year of the song by the youngest singer.,"['Show', 'the', 'name', 'and', 'the', 'release', 'year', 'of', 'the', 'song', 'by', 'the', 'youngest', 'singer', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1","['SELECT', 'song_name', ',', 'song_release_year', 'FROM', 'singer', 'ORDER', 'BY', 'age', 'LIMIT', '1']","['select', 'song_name', ',', 'song_release_year', 'from', 'singer', 'order', 'by', 'age', 'limit', 'value']",What are the names and release years for all the songs of the youngest singer?,"['What', 'are', 'the', 'names', 'and', 'release', 'years', 'for', 'all', 'the', 'songs', 'of', 'the', 'youngest', 'singer', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
concert_singer,SELECT DISTINCT country FROM singer WHERE age  >  20,"['SELECT', 'DISTINCT', 'country', 'FROM', 'singer', 'WHERE', 'age', '>', '20']","['select', 'distinct', 'country', 'from', 'singer', 'where', 'age', '>', 'value']",What are all distinct countries where singers above age 20 are from?,"['What', 'are', 'all', 'distinct', 'countries', 'where', 'singers', 'above', 'age', '20', 'are', 'from', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [True, [[0, [0, [0, 10, False], None]]]], 'where': [[False, 3, [0, [0, 13, False], None], 20.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,SELECT DISTINCT country FROM singer WHERE age  >  20,"['SELECT', 'DISTINCT', 'country', 'FROM', 'singer', 'WHERE', 'age', '>', '20']","['select', 'distinct', 'country', 'from', 'singer', 'where', 'age', '>', 'value']",What are  the different countries with singers above age 20?,"['What', 'are', 'the', 'different', 'countries', 'with', 'singers', 'above', 'age', '20', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [True, [[0, [0, [0, 10, False], None]]]], 'where': [[False, 3, [0, [0, 13, False], None], 20.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"SELECT country ,  count(*) FROM singer GROUP BY country","['SELECT', 'country', ',', 'count', '(', '*', ')', 'FROM', 'singer', 'GROUP', 'BY', 'country']","['select', 'country', ',', 'count', '(', '*', ')', 'from', 'singer', 'group', 'by', 'country']",Show all countries and the number of singers in each country.,"['Show', 'all', 'countries', 'and', 'the', 'number', 'of', 'singers', 'in', 'each', 'country', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 10, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 10, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"SELECT country ,  count(*) FROM singer GROUP BY country","['SELECT', 'country', ',', 'count', '(', '*', ')', 'FROM', 'singer', 'GROUP', 'BY', 'country']","['select', 'country', ',', 'count', '(', '*', ')', 'from', 'singer', 'group', 'by', 'country']",How many singers are from each country?,"['How', 'many', 'singers', 'are', 'from', 'each', 'country', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 10, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 10, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer),"['SELECT', 'song_name', 'FROM', 'singer', 'WHERE', 'age', '>', '(', 'SELECT', 'avg', '(', 'age', ')', 'FROM', 'singer', ')']","['select', 'song_name', 'from', 'singer', 'where', 'age', '>', '(', 'select', 'avg', '(', 'age', ')', 'from', 'singer', ')']",List all song names by singers above the average age.,"['List', 'all', 'song', 'names', 'by', 'singers', 'above', 'the', 'average', 'age', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [[False, 3, [0, [0, 13, False], None], {'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[5, [0, [0, 13, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer),"['SELECT', 'song_name', 'FROM', 'singer', 'WHERE', 'age', '>', '(', 'SELECT', 'avg', '(', 'age', ')', 'FROM', 'singer', ')']","['select', 'song_name', 'from', 'singer', 'where', 'age', '>', '(', 'select', 'avg', '(', 'age', ')', 'from', 'singer', ')']",What are all the song names by singers who are older than average?,"['What', 'are', 'all', 'the', 'song', 'names', 'by', 'singers', 'who', 'are', 'older', 'than', 'average', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [[False, 3, [0, [0, 13, False], None], {'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[5, [0, [0, 13, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000","['SELECT', 'LOCATION', ',', 'name', 'FROM', 'stadium', 'WHERE', 'capacity', 'BETWEEN', '5000', 'AND', '10000']","['select', 'location', ',', 'name', 'from', 'stadium', 'where', 'capacity', 'between', 'value', 'and', 'value']",Show location and name for all stadiums with a capacity between 5000 and 10000.,"['Show', 'location', 'and', 'name', 'for', 'all', 'stadiums', 'with', 'a', 'capacity', 'between', '5000', 'and', '10000', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [[False, 1, [0, [0, 4, False], None], 5000.0, 10000.0]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000","['SELECT', 'LOCATION', ',', 'name', 'FROM', 'stadium', 'WHERE', 'capacity', 'BETWEEN', '5000', 'AND', '10000']","['select', 'location', ',', 'name', 'from', 'stadium', 'where', 'capacity', 'between', 'value', 'and', 'value']",What are the locations and names of all stations with capacity between 5000 and 10000?,"['What', 'are', 'the', 'locations', 'and', 'names', 'of', 'all', 'stations', 'with', 'capacity', 'between', '5000', 'and', '10000', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [[False, 1, [0, [0, 4, False], None], 5000.0, 10000.0]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"select max(capacity), average from stadium","['select', 'max', '(', 'capacity', ')', ',', 'average', 'from', 'stadium']","['select', 'max', '(', 'capacity', ')', ',', 'average', 'from', 'stadium']",What is the maximum capacity and the average of all stadiums ?,"['What', 'is', 'the', 'maximum', 'capacity', 'and', 'the', 'average', 'of', 'all', 'stadiums', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[1, [0, [0, 4, False], None]], [0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"select avg(capacity) ,  max(capacity) from stadium","['select', 'avg', '(', 'capacity', ')', ',', 'max', '(', 'capacity', ')', 'from', 'stadium']","['select', 'avg', '(', 'capacity', ')', ',', 'max', '(', 'capacity', ')', 'from', 'stadium']",What is the average and maximum capacities for all stadiums ?,"['What', 'is', 'the', 'average', 'and', 'maximum', 'capacities', 'for', 'all', 'stadiums', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[5, [0, [0, 4, False], None]], [1, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1","['SELECT', 'name', ',', 'capacity', 'FROM', 'stadium', 'ORDER', 'BY', 'average', 'DESC', 'LIMIT', '1']","['select', 'name', ',', 'capacity', 'from', 'stadium', 'order', 'by', 'average', 'desc', 'limit', 'value']",What is the name and capacity for the stadium with highest average attendance?,"['What', 'is', 'the', 'name', 'and', 'capacity', 'for', 'the', 'stadium', 'with', 'highest', 'average', 'attendance', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 7, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1","['SELECT', 'name', ',', 'capacity', 'FROM', 'stadium', 'ORDER', 'BY', 'average', 'DESC', 'LIMIT', '1']","['select', 'name', ',', 'capacity', 'from', 'stadium', 'order', 'by', 'average', 'desc', 'limit', 'value']",What is the name and capacity for the stadium with the highest average attendance?,"['What', 'is', 'the', 'name', 'and', 'capacity', 'for', 'the', 'stadium', 'with', 'the', 'highest', 'average', 'attendance', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 7, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
concert_singer,SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015,"['SELECT', 'count', '(', '*', ')', 'FROM', 'concert', 'WHERE', 'YEAR', '=', '2014', 'OR', 'YEAR', '=', '2015']","['select', 'count', '(', '*', ')', 'from', 'concert', 'where', 'year', '=', 'value', 'or', 'year', '=', 'value']",How many concerts are there in year 2014 or 2015?,"['How', 'many', 'concerts', 'are', 'there', 'in', 'year', '2014', 'or', '2015', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None], 'or', [False, 2, [0, [0, 19, False], None], 2015.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015,"['SELECT', 'count', '(', '*', ')', 'FROM', 'concert', 'WHERE', 'YEAR', '=', '2014', 'OR', 'YEAR', '=', '2015']","['select', 'count', '(', '*', ')', 'from', 'concert', 'where', 'year', '=', 'value', 'or', 'year', '=', 'value']",How many concerts occurred in 2014 or 2015?,"['How', 'many', 'concerts', 'occurred', 'in', '2014', 'or', '2015', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None], 'or', [False, 2, [0, [0, 19, False], None], 2015.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id","['SELECT', 'T2.name', ',', 'count', '(', '*', ')', 'FROM', 'concert', 'AS', 'T1', 'JOIN', 'stadium', 'AS', 'T2', 'ON', 'T1.stadium_id', '=', 'T2.stadium_id', 'GROUP', 'BY', 'T1.stadium_id']","['select', 't2', '.', 'name', ',', 'count', '(', '*', ')', 'from', 'concert', 'as', 't1', 'join', 'stadium', 'as', 't2', 'on', 't1', '.', 'stadium_id', '=', 't2', '.', 'stadium_id', 'group', 'by', 't1', '.', 'stadium_id']",Show the stadium name and the number of concerts in each stadium.,"['Show', 'the', 'stadium', 'name', 'and', 'the', 'number', 'of', 'concerts', 'in', 'each', 'stadium', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 18, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id","['SELECT', 'T2.name', ',', 'count', '(', '*', ')', 'FROM', 'concert', 'AS', 'T1', 'JOIN', 'stadium', 'AS', 'T2', 'ON', 'T1.stadium_id', '=', 'T2.stadium_id', 'GROUP', 'BY', 'T1.stadium_id']","['select', 't2', '.', 'name', ',', 'count', '(', '*', ')', 'from', 'concert', 'as', 't1', 'join', 'stadium', 'as', 't2', 'on', 't1', '.', 'stadium_id', '=', 't2', '.', 'stadium_id', 'group', 'by', 't1', '.', 'stadium_id']","For each stadium, how many concerts play there?","['For', 'each', 'stadium', ',', 'how', 'many', 'concerts', 'play', 'there', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 18, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'T2.name', ',', 'T2.capacity', 'FROM', 'concert', 'AS', 'T1', 'JOIN', 'stadium', 'AS', 'T2', 'ON', 'T1.stadium_id', '=', 'T2.stadium_id', 'WHERE', 'T1.year', '>', '=', '2014', 'GROUP', 'BY', 'T2.stadium_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't2', '.', 'name', ',', 't2', '.', 'capacity', 'from', 'concert', 'as', 't1', 'join', 'stadium', 'as', 't2', 'on', 't1', '.', 'stadium_id', '=', 't2', '.', 'stadium_id', 'where', 't1', '.', 'year', '>', '=', 'value', 'group', 'by', 't2', '.', 'stadium_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Show the stadium name and capacity with most number of concerts in year 2014 or after.,"['Show', 'the', 'stadium', 'name', 'and', 'capacity', 'with', 'most', 'number', 'of', 'concerts', 'in', 'year', '2014', 'or', 'after', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [[False, 5, [0, [0, 19, False], None], 2014.0, None]], 'groupBy': [[0, 1, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1","['select', 't2.name', ',', 't2.capacity', 'from', 'concert', 'as', 't1', 'join', 'stadium', 'as', 't2', 'on', 't1.stadium_id', '=', 't2.stadium_id', 'where', 't1.year', '>', '2013', 'group', 'by', 't2.stadium_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', '1']","['select', 't2', '.', 'name', ',', 't2', '.', 'capacity', 'from', 'concert', 'as', 't1', 'join', 'stadium', 'as', 't2', 'on', 't1', '.', 'stadium_id', '=', 't2', '.', 'stadium_id', 'where', 't1', '.', 'year', '>', 'value', 'group', 'by', 't2', '.', 'stadium_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the name and capacity of the stadium with the most concerts after 2013 ?,"['What', 'is', 'the', 'name', 'and', 'capacity', 'of', 'the', 'stadium', 'with', 'the', 'most', 'concerts', 'after', '2013', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [[False, 3, [0, [0, 19, False], None], 2013.0, None]], 'groupBy': [[0, 1, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
concert_singer,SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'YEAR', 'FROM', 'concert', 'GROUP', 'BY', 'YEAR', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'year', 'from', 'concert', 'group', 'by', 'year', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which year has most number of concerts?,"['Which', 'year', 'has', 'most', 'number', 'of', 'concerts', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 19, False], None]]]], 'where': [], 'groupBy': [[0, 19, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
concert_singer,SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'YEAR', 'FROM', 'concert', 'GROUP', 'BY', 'YEAR', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'year', 'from', 'concert', 'group', 'by', 'year', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the year that had the most concerts?,"['What', 'is', 'the', 'year', 'that', 'had', 'the', 'most', 'concerts', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 19, False], None]]]], 'where': [], 'groupBy': [[0, 19, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
concert_singer,SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert),"['SELECT', 'name', 'FROM', 'stadium', 'WHERE', 'stadium_id', 'NOT', 'IN', '(', 'SELECT', 'stadium_id', 'FROM', 'concert', ')']","['select', 'name', 'from', 'stadium', 'where', 'stadium_id', 'not', 'in', '(', 'select', 'stadium_id', 'from', 'concert', ')']",Show the stadium names without any concert.,"['Show', 'the', 'stadium', 'names', 'without', 'any', 'concert', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [[True, 8, [0, [0, 1, False], None], {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 18, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert),"['SELECT', 'name', 'FROM', 'stadium', 'WHERE', 'stadium_id', 'NOT', 'IN', '(', 'SELECT', 'stadium_id', 'FROM', 'concert', ')']","['select', 'name', 'from', 'stadium', 'where', 'stadium_id', 'not', 'in', '(', 'select', 'stadium_id', 'from', 'concert', ')']",What are the names of the stadiums without any concerts?,"['What', 'are', 'the', 'names', 'of', 'the', 'stadiums', 'without', 'any', 'concerts', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [[True, 8, [0, [0, 1, False], None], {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 18, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30,"['SELECT', 'country', 'FROM', 'singer', 'WHERE', 'age', '>', '40', 'INTERSECT', 'SELECT', 'country', 'FROM', 'singer', 'WHERE', 'age', '<', '30']","['select', 'country', 'from', 'singer', 'where', 'age', '>', 'value', 'intersect', 'select', 'country', 'from', 'singer', 'where', 'age', '<', 'value']",Show countries where a singer above age 40 and a singer below 30 are from.,"['Show', 'countries', 'where', 'a', 'singer', 'above', 'age', '40', 'and', 'a', 'singer', 'below', '30', 'are', 'from', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 10, False], None]]]], 'where': [[False, 3, [0, [0, 13, False], None], 40.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 10, False], None]]]], 'where': [[False, 4, [0, [0, 13, False], None], 30.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
concert_singer,SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014,"['SELECT', 'name', 'FROM', 'stadium', 'EXCEPT', 'SELECT', 'T2.name', 'FROM', 'concert', 'AS', 'T1', 'JOIN', 'stadium', 'AS', 'T2', 'ON', 'T1.stadium_id', '=', 'T2.stadium_id', 'WHERE', 'T1.year', '=', '2014']","['select', 'name', 'from', 'stadium', 'except', 'select', 't2', '.', 'name', 'from', 'concert', 'as', 't1', 'join', 'stadium', 'as', 't2', 'on', 't1', '.', 'stadium_id', '=', 't2', '.', 'stadium_id', 'where', 't1', '.', 'year', '=', 'value']",Show names for all stadiums except for stadiums having a concert in year 2014.,"['Show', 'names', 'for', 'all', 'stadiums', 'except', 'for', 'stadiums', 'having', 'a', 'concert', 'in', 'year', '2014', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
concert_singer,SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014,"['SELECT', 'name', 'FROM', 'stadium', 'EXCEPT', 'SELECT', 'T2.name', 'FROM', 'concert', 'AS', 'T1', 'JOIN', 'stadium', 'AS', 'T2', 'ON', 'T1.stadium_id', '=', 'T2.stadium_id', 'WHERE', 'T1.year', '=', '2014']","['select', 'name', 'from', 'stadium', 'except', 'select', 't2', '.', 'name', 'from', 'concert', 'as', 't1', 'join', 'stadium', 'as', 't2', 'on', 't1', '.', 'stadium_id', '=', 't2', '.', 'stadium_id', 'where', 't1', '.', 'year', '=', 'value']",What are the names of all stadiums that did not have a concert in 2014?,"['What', 'are', 'the', 'names', 'of', 'all', 'stadiums', 'that', 'did', 'not', 'have', 'a', 'concert', 'in', '2014', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
concert_singer,"SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id","['SELECT', 'T2.concert_name', ',', 'T2.theme', ',', 'count', '(', '*', ')', 'FROM', 'singer_in_concert', 'AS', 'T1', 'JOIN', 'concert', 'AS', 'T2', 'ON', 'T1.concert_id', '=', 'T2.concert_id', 'GROUP', 'BY', 'T2.concert_id']","['select', 't2', '.', 'concert_name', ',', 't2', '.', 'theme', ',', 'count', '(', '*', ')', 'from', 'singer_in_concert', 'as', 't1', 'join', 'concert', 'as', 't2', 'on', 't1', '.', 'concert_id', '=', 't2', '.', 'concert_id', 'group', 'by', 't2', '.', 'concert_id']",Show the name and theme for all concerts and the number of singers in each concert.,"['Show', 'the', 'name', 'and', 'theme', 'for', 'all', 'concerts', 'and', 'the', 'number', 'of', 'singers', 'in', 'each', 'concert', '.']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 20, False], None], [0, 15, False], None]]}, 'select': [False, [[0, [0, [0, 16, False], None]], [0, [0, [0, 17, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 15, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id","['select', 't2.concert_name', ',', 't2.theme', ',', 'count', '(', '*', ')', 'from', 'singer_in_concert', 'as', 't1', 'join', 'concert', 'as', 't2', 'on', 't1.concert_id', '=', 't2.concert_id', 'group', 'by', 't2.concert_id']","['select', 't2', '.', 'concert_name', ',', 't2', '.', 'theme', ',', 'count', '(', '*', ')', 'from', 'singer_in_concert', 'as', 't1', 'join', 'concert', 'as', 't2', 'on', 't1', '.', 'concert_id', '=', 't2', '.', 'concert_id', 'group', 'by', 't2', '.', 'concert_id']","What are the names , themes , and number of singers for every concert ?","['What', 'are', 'the', 'names', ',', 'themes', ',', 'and', 'number', 'of', 'singers', 'for', 'every', 'concert', '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 20, False], None], [0, 15, False], None]]}, 'select': [False, [[0, [0, [0, 16, False], None]], [0, [0, [0, 17, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 15, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id","['SELECT', 'T2.name', ',', 'count', '(', '*', ')', 'FROM', 'singer_in_concert', 'AS', 'T1', 'JOIN', 'singer', 'AS', 'T2', 'ON', 'T1.singer_id', '=', 'T2.singer_id', 'GROUP', 'BY', 'T2.singer_id']","['select', 't2', '.', 'name', ',', 'count', '(', '*', ')', 'from', 'singer_in_concert', 'as', 't1', 'join', 'singer', 'as', 't2', 'on', 't1', '.', 'singer_id', '=', 't2', '.', 'singer_id', 'group', 'by', 't2', '.', 'singer_id']",List singer names and number of concerts for each singer.,"['List', 'singer', 'names', 'and', 'number', 'of', 'concerts', 'for', 'each', 'singer', '.']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 21, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 8, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id","['SELECT', 'T2.name', ',', 'count', '(', '*', ')', 'FROM', 'singer_in_concert', 'AS', 'T1', 'JOIN', 'singer', 'AS', 'T2', 'ON', 'T1.singer_id', '=', 'T2.singer_id', 'GROUP', 'BY', 'T2.singer_id']","['select', 't2', '.', 'name', ',', 'count', '(', '*', ')', 'from', 'singer_in_concert', 'as', 't1', 'join', 'singer', 'as', 't2', 'on', 't1', '.', 'singer_id', '=', 't2', '.', 'singer_id', 'group', 'by', 't2', '.', 'singer_id']",What are the names of the singers and number of concerts for each person?,"['What', 'are', 'the', 'names', 'of', 'the', 'singers', 'and', 'number', 'of', 'concerts', 'for', 'each', 'person', '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 21, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 8, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014,"['SELECT', 'T2.name', 'FROM', 'singer_in_concert', 'AS', 'T1', 'JOIN', 'singer', 'AS', 'T2', 'ON', 'T1.singer_id', '=', 'T2.singer_id', 'JOIN', 'concert', 'AS', 'T3', 'ON', 'T1.concert_id', '=', 'T3.concert_id', 'WHERE', 'T3.year', '=', '2014']","['select', 't2', '.', 'name', 'from', 'singer_in_concert', 'as', 't1', 'join', 'singer', 'as', 't2', 'on', 't1', '.', 'singer_id', '=', 't2', '.', 'singer_id', 'join', 'concert', 'as', 't3', 'on', 't1', '.', 'concert_id', '=', 't3', '.', 'concert_id', 'where', 't3', '.', 'year', '=', 'value']",List all singer names in concerts in year 2014.,"['List', 'all', 'singer', 'names', 'in', 'concerts', 'in', 'year', '2014', '.']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 21, False], None], [0, 8, False], None], 'and', [False, 2, [0, [0, 20, False], None], [0, 15, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014,"['SELECT', 'T2.name', 'FROM', 'singer_in_concert', 'AS', 'T1', 'JOIN', 'singer', 'AS', 'T2', 'ON', 'T1.singer_id', '=', 'T2.singer_id', 'JOIN', 'concert', 'AS', 'T3', 'ON', 'T1.concert_id', '=', 'T3.concert_id', 'WHERE', 'T3.year', '=', '2014']","['select', 't2', '.', 'name', 'from', 'singer_in_concert', 'as', 't1', 'join', 'singer', 'as', 't2', 'on', 't1', '.', 'singer_id', '=', 't2', '.', 'singer_id', 'join', 'concert', 'as', 't3', 'on', 't1', '.', 'concert_id', '=', 't3', '.', 'concert_id', 'where', 't3', '.', 'year', '=', 'value']",What are the names of the singers who performed in a concert in 2014?,"['What', 'are', 'the', 'names', 'of', 'the', 'singers', 'who', 'performed', 'in', 'a', 'concert', 'in', '2014', '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 21, False], None], [0, 8, False], None], 'and', [False, 2, [0, [0, 20, False], None], [0, 15, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'","['SELECT', 'name', ',', 'country', 'FROM', 'singer', 'WHERE', 'song_name', 'LIKE', ""'"", '%', 'Hey', '%', ""'""]","['select', 'name', ',', 'country', 'from', 'singer', 'where', 'song_name', 'like', 'value']",what is the name and nation of the singer who have a song having 'Hey' in its name?,"['what', 'is', 'the', 'name', 'and', 'nation', 'of', 'the', 'singer', 'who', 'have', 'a', 'song', 'having', ""'Hey"", ""'"", 'in', 'its', 'name', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]]]], 'where': [[False, 9, [0, [0, 11, False], None], '""%Hey%""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'","['SELECT', 'name', ',', 'country', 'FROM', 'singer', 'WHERE', 'song_name', 'LIKE', ""'"", '%', 'Hey', '%', ""'""]","['select', 'name', ',', 'country', 'from', 'singer', 'where', 'song_name', 'like', 'value']",What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?,"['What', 'is', 'the', 'name', 'and', 'country', 'of', 'origin', 'of', 'every', 'singer', 'who', 'has', 'a', 'song', 'with', 'the', 'word', ""'Hey"", ""'"", 'in', 'its', 'title', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]]]], 'where': [[False, 9, [0, [0, 11, False], None], '""%Hey%""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015","['SELECT', 'T2.name', ',', 'T2.location', 'FROM', 'concert', 'AS', 'T1', 'JOIN', 'stadium', 'AS', 'T2', 'ON', 'T1.stadium_id', '=', 'T2.stadium_id', 'WHERE', 'T1.Year', '=', '2014', 'INTERSECT', 'SELECT', 'T2.name', ',', 'T2.location', 'FROM', 'concert', 'AS', 'T1', 'JOIN', 'stadium', 'AS', 'T2', 'ON', 'T1.stadium_id', '=', 'T2.stadium_id', 'WHERE', 'T1.Year', '=', '2015']","['select', 't2', '.', 'name', ',', 't2', '.', 'location', 'from', 'concert', 'as', 't1', 'join', 'stadium', 'as', 't2', 'on', 't1', '.', 'stadium_id', '=', 't2', '.', 'stadium_id', 'where', 't1', '.', 'year', '=', 'value', 'intersect', 'select', 't2', '.', 'name', ',', 't2', '.', 'location', 'from', 'concert', 'as', 't1', 'join', 'stadium', 'as', 't2', 'on', 't1', '.', 'stadium_id', '=', 't2', '.', 'stadium_id', 'where', 't1', '.', 'year', '=', 'value']",Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.,"['Find', 'the', 'name', 'and', 'location', 'of', 'the', 'stadiums', 'which', 'some', 'concerts', 'happened', 'in', 'the', 'years', 'of', 'both', '2014', 'and', '2015', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 19, False], None], 2015.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
concert_singer,"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015","['SELECT', 'T2.name', ',', 'T2.location', 'FROM', 'concert', 'AS', 'T1', 'JOIN', 'stadium', 'AS', 'T2', 'ON', 'T1.stadium_id', '=', 'T2.stadium_id', 'WHERE', 'T1.Year', '=', '2014', 'INTERSECT', 'SELECT', 'T2.name', ',', 'T2.location', 'FROM', 'concert', 'AS', 'T1', 'JOIN', 'stadium', 'AS', 'T2', 'ON', 'T1.stadium_id', '=', 'T2.stadium_id', 'WHERE', 'T1.Year', '=', '2015']","['select', 't2', '.', 'name', ',', 't2', '.', 'location', 'from', 'concert', 'as', 't1', 'join', 'stadium', 'as', 't2', 'on', 't1', '.', 'stadium_id', '=', 't2', '.', 'stadium_id', 'where', 't1', '.', 'year', '=', 'value', 'intersect', 'select', 't2', '.', 'name', ',', 't2', '.', 'location', 'from', 'concert', 'as', 't1', 'join', 'stadium', 'as', 't2', 'on', 't1', '.', 'stadium_id', '=', 't2', '.', 'stadium_id', 'where', 't1', '.', 'year', '=', 'value']",What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?,"['What', 'are', 'the', 'names', 'and', 'locations', 'of', 'the', 'stadiums', 'that', 'had', 'concerts', 'that', 'occurred', 'in', 'both', '2014', 'and', '2015', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 19, False], None], 2014.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 18, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 19, False], None], 2015.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
concert_singer,select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1),"['select', 'count', '(', '*', ')', 'from', 'concert', 'where', 'stadium_id', '=', '(', 'select', 'stadium_id', 'from', 'stadium', 'order', 'by', 'capacity', 'desc', 'limit', '1', ')']","['select', 'count', '(', '*', ')', 'from', 'concert', 'where', 'stadium_id', '=', '(', 'select', 'stadium_id', 'from', 'stadium', 'order', 'by', 'capacity', 'desc', 'limit', 'value', ')']",Find the number of concerts happened in the stadium with the highest capacity .,"['Find', 'the', 'number', 'of', 'concerts', 'happened', 'in', 'the', 'stadium', 'with', 'the', 'highest', 'capacity', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 18, False], None], {'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 4, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
concert_singer,select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1),"['select', 'count', '(', '*', ')', 'from', 'concert', 'where', 'stadium_id', '=', '(', 'select', 'stadium_id', 'from', 'stadium', 'order', 'by', 'capacity', 'desc', 'limit', '1', ')']","['select', 'count', '(', '*', ')', 'from', 'concert', 'where', 'stadium_id', '=', '(', 'select', 'stadium_id', 'from', 'stadium', 'order', 'by', 'capacity', 'desc', 'limit', 'value', ')']",What are the number of concerts that occurred in the stadium with the largest capacity ?,"['What', 'are', 'the', 'number', 'of', 'concerts', 'that', 'occurred', 'in', 'the', 'stadium', 'with', 'the', 'largest', 'capacity', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 18, False], None], {'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 4, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,SELECT count(*) FROM pets WHERE weight  >  10,"['SELECT', 'count', '(', '*', ')', 'FROM', 'pets', 'WHERE', 'weight', '>', '10']","['select', 'count', '(', '*', ')', 'from', 'pets', 'where', 'weight', '>', 'value']",Find the number of pets whose weight is heavier than 10.,"['Find', 'the', 'number', 'of', 'pets', 'whose', 'weight', 'is', 'heavier', 'than', '10', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 3, [0, [0, 14, False], None], 10.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,SELECT count(*) FROM pets WHERE weight  >  10,"['SELECT', 'count', '(', '*', ')', 'FROM', 'pets', 'WHERE', 'weight', '>', '10']","['select', 'count', '(', '*', ')', 'from', 'pets', 'where', 'weight', '>', 'value']",How many pets have a greater weight than 10?,"['How', 'many', 'pets', 'have', 'a', 'greater', 'weight', 'than', '10', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 3, [0, [0, 14, False], None], 10.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,SELECT weight FROM pets ORDER BY pet_age LIMIT 1,"['SELECT', 'weight', 'FROM', 'pets', 'ORDER', 'BY', 'pet_age', 'LIMIT', '1']","['select', 'weight', 'from', 'pets', 'order', 'by', 'pet_age', 'limit', 'value']",Find the weight of the youngest dog.,"['Find', 'the', 'weight', 'of', 'the', 'youngest', 'dog', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 14, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
pets_1,SELECT weight FROM pets ORDER BY pet_age LIMIT 1,"['SELECT', 'weight', 'FROM', 'pets', 'ORDER', 'BY', 'pet_age', 'LIMIT', '1']","['select', 'weight', 'from', 'pets', 'order', 'by', 'pet_age', 'limit', 'value']",How much does the youngest dog weigh?,"['How', 'much', 'does', 'the', 'youngest', 'dog', 'weigh', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 14, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
pets_1,"SELECT max(weight) ,  petType FROM pets GROUP BY petType","['SELECT', 'max', '(', 'weight', ')', ',', 'petType', 'FROM', 'pets', 'GROUP', 'BY', 'petType']","['select', 'max', '(', 'weight', ')', ',', 'pettype', 'from', 'pets', 'group', 'by', 'pettype']",Find the maximum weight for each type of pet. List the maximum weight and pet type.,"['Find', 'the', 'maximum', 'weight', 'for', 'each', 'type', 'of', 'pet', '.', 'List', 'the', 'maximum', 'weight', 'and', 'pet', 'type', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[1, [0, [0, 14, False], None]], [0, [0, [0, 12, False], None]]]], 'where': [], 'groupBy': [[0, 12, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,"SELECT max(weight) ,  petType FROM pets GROUP BY petType","['SELECT', 'max', '(', 'weight', ')', ',', 'petType', 'FROM', 'pets', 'GROUP', 'BY', 'petType']","['select', 'max', '(', 'weight', ')', ',', 'pettype', 'from', 'pets', 'group', 'by', 'pettype']",List the maximum weight and type for each type of pet.,"['List', 'the', 'maximum', 'weight', 'and', 'type', 'for', 'each', 'type', 'of', 'pet', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[1, [0, [0, 14, False], None]], [0, [0, [0, 12, False], None]]]], 'where': [], 'groupBy': [[0, 12, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20,"['SELECT', 'count', '(', '*', ')', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'WHERE', 'T1.age', '>', '20']","['select', 'count', '(', '*', ')', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'where', 't1', '.', 'age', '>', 'value']",Find number of pets owned by students who are older than 20.,"['Find', 'number', 'of', 'pets', 'owned', 'by', 'students', 'who', 'are', 'older', 'than', '20', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 3, [0, [0, 4, False], None], 20.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20,"['SELECT', 'count', '(', '*', ')', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'WHERE', 'T1.age', '>', '20']","['select', 'count', '(', '*', ')', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'where', 't1', '.', 'age', '>', 'value']",How many pets are owned by students that have an age greater than 20?,"['How', 'many', 'pets', 'are', 'owned', 'by', 'students', 'that', 'have', 'an', 'age', 'greater', 'than', '20', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 3, [0, [0, 4, False], None], 20.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog',"['SELECT', 'count', '(', '*', ')', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'JOIN', 'pets', 'AS', 'T3', 'ON', 'T2.petid', '=', 'T3.petid', 'WHERE', 'T1.sex', '=', ""'F"", ""'"", 'AND', 'T3.pettype', '=', ""'dog"", ""'""]","['select', 'count', '(', '*', ')', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'join', 'pets', 'as', 't3', 'on', 't2', '.', 'petid', '=', 't3', '.', 'petid', 'where', 't1', '.', 'sex', '=', 'value', 'and', 't3', '.', 'pettype', '=', 'value']",Find the number of dog pets that are raised by female students (with sex F).,"['Find', 'the', 'number', 'of', 'dog', 'pets', 'that', 'are', 'raised', 'by', 'female', 'students', '(', 'with', 'sex', 'F', ')', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None], 'and', [False, 2, [0, [0, 10, False], None], [0, 11, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""F""', None], 'and', [False, 2, [0, [0, 12, False], None], '""dog""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog',"['SELECT', 'count', '(', '*', ')', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'JOIN', 'pets', 'AS', 'T3', 'ON', 'T2.petid', '=', 'T3.petid', 'WHERE', 'T1.sex', '=', ""'F"", ""'"", 'AND', 'T3.pettype', '=', ""'dog"", ""'""]","['select', 'count', '(', '*', ')', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'join', 'pets', 'as', 't3', 'on', 't2', '.', 'petid', '=', 't3', '.', 'petid', 'where', 't1', '.', 'sex', '=', 'value', 'and', 't3', '.', 'pettype', '=', 'value']",How many dog pets are raised by female students?,"['How', 'many', 'dog', 'pets', 'are', 'raised', 'by', 'female', 'students', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None], 'and', [False, 2, [0, [0, 10, False], None], [0, 11, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""F""', None], 'and', [False, 2, [0, [0, 12, False], None], '""dog""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,SELECT count(DISTINCT pettype) FROM pets,"['SELECT', 'count', '(', 'DISTINCT', 'pettype', ')', 'FROM', 'pets']","['select', 'count', '(', 'distinct', 'pettype', ')', 'from', 'pets']",Find the number of distinct type of pets.,"['Find', 'the', 'number', 'of', 'distinct', 'type', 'of', 'pets', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 12, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,SELECT count(DISTINCT pettype) FROM pets,"['SELECT', 'count', '(', 'DISTINCT', 'pettype', ')', 'FROM', 'pets']","['select', 'count', '(', 'distinct', 'pettype', ')', 'from', 'pets']",How many different types of pet are there?,"['How', 'many', 'different', 'types', 'of', 'pet', 'are', 'there', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 12, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog',"['SELECT', 'DISTINCT', 'T1.Fname', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'JOIN', 'pets', 'AS', 'T3', 'ON', 'T3.petid', '=', 'T2.petid', 'WHERE', 'T3.pettype', '=', ""'cat"", ""'"", 'OR', 'T3.pettype', '=', ""'dog"", ""'""]","['select', 'distinct', 't1', '.', 'fname', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'join', 'pets', 'as', 't3', 'on', 't3', '.', 'petid', '=', 't2', '.', 'petid', 'where', 't3', '.', 'pettype', '=', 'value', 'or', 't3', '.', 'pettype', '=', 'value']",Find the first name of students who have cat or dog pet.,"['Find', 'the', 'first', 'name', 'of', 'students', 'who', 'have', 'cat', 'or', 'dog', 'pet', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None], 'and', [False, 2, [0, [0, 11, False], None], [0, 10, False], None]]}, 'select': [True, [[0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""cat""', None], 'or', [False, 2, [0, [0, 12, False], None], '""dog""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog',"['SELECT', 'DISTINCT', 'T1.Fname', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'JOIN', 'pets', 'AS', 'T3', 'ON', 'T3.petid', '=', 'T2.petid', 'WHERE', 'T3.pettype', '=', ""'cat"", ""'"", 'OR', 'T3.pettype', '=', ""'dog"", ""'""]","['select', 'distinct', 't1', '.', 'fname', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'join', 'pets', 'as', 't3', 'on', 't3', '.', 'petid', '=', 't2', '.', 'petid', 'where', 't3', '.', 'pettype', '=', 'value', 'or', 't3', '.', 'pettype', '=', 'value']",What are the first names of every student who has a cat or dog as a pet?,"['What', 'are', 'the', 'first', 'names', 'of', 'every', 'student', 'who', 'has', 'a', 'cat', 'or', 'dog', 'as', 'a', 'pet', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None], 'and', [False, 2, [0, [0, 11, False], None], [0, 10, False], None]]}, 'select': [True, [[0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""cat""', None], 'or', [False, 2, [0, [0, 12, False], None], '""dog""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog',"['select', 't1.fname', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1.stuid', '=', 't2.stuid', 'join', 'pets', 'as', 't3', 'on', 't3.petid', '=', 't2.petid', 'where', 't3.pettype', '=', '""cat""', 'intersect', 'select', 't1.fname', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1.stuid', '=', 't2.stuid', 'join', 'pets', 'as', 't3', 'on', 't3.petid', '=', 't2.petid', 'where', 't3.pettype', '=', '""dog""']","['select', 't1', '.', 'fname', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'join', 'pets', 'as', 't3', 'on', 't3', '.', 'petid', '=', 't2', '.', 'petid', 'where', 't3', '.', 'pettype', '=', 'value', 'intersect', 'select', 't1', '.', 'fname', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'join', 'pets', 'as', 't3', 'on', 't3', '.', 'petid', '=', 't2', '.', 'petid', 'where', 't3', '.', 'pettype', '=', 'value']",Find the first name of students who have both cat and dog pets .,"['Find', 'the', 'first', 'name', 'of', 'students', 'who', 'have', 'both', 'cat', 'and', 'dog', 'pets', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None], 'and', [False, 2, [0, [0, 11, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""cat""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None], 'and', [False, 2, [0, [0, 11, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""dog""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
pets_1,SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog',"['SELECT', 'T1.Fname', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'JOIN', 'pets', 'AS', 'T3', 'ON', 'T3.petid', '=', 'T2.petid', 'WHERE', 'T3.pettype', '=', ""'cat"", ""'"", 'INTERSECT', 'SELECT', 'T1.Fname', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'JOIN', 'pets', 'AS', 'T3', 'ON', 'T3.petid', '=', 'T2.petid', 'WHERE', 'T3.pettype', '=', ""'dog"", ""'""]","['select', 't1', '.', 'fname', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'join', 'pets', 'as', 't3', 'on', 't3', '.', 'petid', '=', 't2', '.', 'petid', 'where', 't3', '.', 'pettype', '=', 'value', 'intersect', 'select', 't1', '.', 'fname', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'join', 'pets', 'as', 't3', 'on', 't3', '.', 'petid', '=', 't2', '.', 'petid', 'where', 't3', '.', 'pettype', '=', 'value']",What are the students' first names who have both cats and dogs as pets?,"['What', 'are', 'the', 'students', ""'"", 'first', 'names', 'who', 'have', 'both', 'cats', 'and', 'dogs', 'as', 'pets', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None], 'and', [False, 2, [0, [0, 11, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""cat""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None], 'and', [False, 2, [0, [0, 11, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""dog""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
pets_1,"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","['SELECT', 'major', ',', 'age', 'FROM', 'student', 'WHERE', 'stuid', 'NOT', 'IN', '(', 'SELECT', 'T1.stuid', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'JOIN', 'pets', 'AS', 'T3', 'ON', 'T3.petid', '=', 'T2.petid', 'WHERE', 'T3.pettype', '=', ""'cat"", ""'"", ')']","['select', 'major', ',', 'age', 'from', 'student', 'where', 'stuid', 'not', 'in', '(', 'select', 't1', '.', 'stuid', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'join', 'pets', 'as', 't3', 'on', 't3', '.', 'petid', '=', 't2', '.', 'petid', 'where', 't3', '.', 'pettype', '=', 'value', ')']",Find the major and age of students who do not have a cat pet.,"['Find', 'the', 'major', 'and', 'age', 'of', 'students', 'who', 'do', 'not', 'have', 'a', 'cat', 'pet', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [[True, 8, [0, [0, 1, False], None], {'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None], 'and', [False, 2, [0, [0, 11, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""cat""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","['SELECT', 'major', ',', 'age', 'FROM', 'student', 'WHERE', 'stuid', 'NOT', 'IN', '(', 'SELECT', 'T1.stuid', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'JOIN', 'pets', 'AS', 'T3', 'ON', 'T3.petid', '=', 'T2.petid', 'WHERE', 'T3.pettype', '=', ""'cat"", ""'"", ')']","['select', 'major', ',', 'age', 'from', 'student', 'where', 'stuid', 'not', 'in', '(', 'select', 't1', '.', 'stuid', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'join', 'pets', 'as', 't3', 'on', 't3', '.', 'petid', '=', 't2', '.', 'petid', 'where', 't3', '.', 'pettype', '=', 'value', ')']","What major is every student who does not own a cat as a pet, and also how old are they?","['What', 'major', 'is', 'every', 'student', 'who', 'does', 'not', 'own', 'a', 'cat', 'as', 'a', 'pet', ',', 'and', 'also', 'how', 'old', 'are', 'they', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [[True, 8, [0, [0, 1, False], None], {'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None], 'and', [False, 2, [0, [0, 11, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""cat""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat',"['SELECT', 'stuid', 'FROM', 'student', 'EXCEPT', 'SELECT', 'T1.stuid', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'JOIN', 'pets', 'AS', 'T3', 'ON', 'T3.petid', '=', 'T2.petid', 'WHERE', 'T3.pettype', '=', ""'cat"", ""'""]","['select', 'stuid', 'from', 'student', 'except', 'select', 't1', '.', 'stuid', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'join', 'pets', 'as', 't3', 'on', 't3', '.', 'petid', '=', 't2', '.', 'petid', 'where', 't3', '.', 'pettype', '=', 'value']",Find the id of students who do not have a cat pet.,"['Find', 'the', 'id', 'of', 'students', 'who', 'do', 'not', 'have', 'a', 'cat', 'pet', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None], 'and', [False, 2, [0, [0, 11, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""cat""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
pets_1,SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat',"['SELECT', 'stuid', 'FROM', 'student', 'EXCEPT', 'SELECT', 'T1.stuid', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'JOIN', 'pets', 'AS', 'T3', 'ON', 'T3.petid', '=', 'T2.petid', 'WHERE', 'T3.pettype', '=', ""'cat"", ""'""]","['select', 'stuid', 'from', 'student', 'except', 'select', 't1', '.', 'stuid', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'join', 'pets', 'as', 't3', 'on', 't3', '.', 'petid', '=', 't2', '.', 'petid', 'where', 't3', '.', 'pettype', '=', 'value']",What are the ids of the students who do not own cats as pets?,"['What', 'are', 'the', 'ids', 'of', 'the', 'students', 'who', 'do', 'not', 'own', 'cats', 'as', 'pets', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None], 'and', [False, 2, [0, [0, 11, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""cat""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
pets_1,"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","['SELECT', 'T1.fname', ',', 'T1.age', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'JOIN', 'pets', 'AS', 'T3', 'ON', 'T3.petid', '=', 'T2.petid', 'WHERE', 'T3.pettype', '=', ""'dog"", ""'"", 'AND', 'T1.stuid', 'NOT', 'IN', '(', 'SELECT', 'T1.stuid', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'JOIN', 'pets', 'AS', 'T3', 'ON', 'T3.petid', '=', 'T2.petid', 'WHERE', 'T3.pettype', '=', ""'cat"", ""'"", ')']","['select', 't1', '.', 'fname', ',', 't1', '.', 'age', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'join', 'pets', 'as', 't3', 'on', 't3', '.', 'petid', '=', 't2', '.', 'petid', 'where', 't3', '.', 'pettype', '=', 'value', 'and', 't1', '.', 'stuid', 'not', 'in', '(', 'select', 't1', '.', 'stuid', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'join', 'pets', 'as', 't3', 'on', 't3', '.', 'petid', '=', 't2', '.', 'petid', 'where', 't3', '.', 'pettype', '=', 'value', ')']",Find the first name and age of students who have a dog but do not have a cat as a pet.,"['Find', 'the', 'first', 'name', 'and', 'age', 'of', 'students', 'who', 'have', 'a', 'dog', 'but', 'do', 'not', 'have', 'a', 'cat', 'as', 'a', 'pet', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None], 'and', [False, 2, [0, [0, 11, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""dog""', None], 'and', [True, 8, [0, [0, 1, False], None], {'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None], 'and', [False, 2, [0, [0, 11, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""cat""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","['SELECT', 'T1.fname', ',', 'T1.age', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'JOIN', 'pets', 'AS', 'T3', 'ON', 'T3.petid', '=', 'T2.petid', 'WHERE', 'T3.pettype', '=', ""'dog"", ""'"", 'AND', 'T1.stuid', 'NOT', 'IN', '(', 'SELECT', 'T1.stuid', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'JOIN', 'pets', 'AS', 'T3', 'ON', 'T3.petid', '=', 'T2.petid', 'WHERE', 'T3.pettype', '=', ""'cat"", ""'"", ')']","['select', 't1', '.', 'fname', ',', 't1', '.', 'age', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'join', 'pets', 'as', 't3', 'on', 't3', '.', 'petid', '=', 't2', '.', 'petid', 'where', 't3', '.', 'pettype', '=', 'value', 'and', 't1', '.', 'stuid', 'not', 'in', '(', 'select', 't1', '.', 'stuid', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'join', 'pets', 'as', 't3', 'on', 't3', '.', 'petid', '=', 't2', '.', 'petid', 'where', 't3', '.', 'pettype', '=', 'value', ')']",What is the first name of every student who has a dog but does not have a cat?,"['What', 'is', 'the', 'first', 'name', 'of', 'every', 'student', 'who', 'has', 'a', 'dog', 'but', 'does', 'not', 'have', 'a', 'cat', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None], 'and', [False, 2, [0, [0, 11, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""dog""', None], 'and', [True, 8, [0, [0, 1, False], None], {'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None], 'and', [False, 2, [0, [0, 11, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""cat""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1","['SELECT', 'pettype', ',', 'weight', 'FROM', 'pets', 'ORDER', 'BY', 'pet_age', 'LIMIT', '1']","['select', 'pettype', ',', 'weight', 'from', 'pets', 'order', 'by', 'pet_age', 'limit', 'value']",Find the type and weight of the youngest pet.,"['Find', 'the', 'type', 'and', 'weight', 'of', 'the', 'youngest', 'pet', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 12, False], None]], [0, [0, [0, 14, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
pets_1,"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1","['SELECT', 'pettype', ',', 'weight', 'FROM', 'pets', 'ORDER', 'BY', 'pet_age', 'LIMIT', '1']","['select', 'pettype', ',', 'weight', 'from', 'pets', 'order', 'by', 'pet_age', 'limit', 'value']","What type of pet is the youngest animal, and how much does it weigh?","['What', 'type', 'of', 'pet', 'is', 'the', 'youngest', 'animal', ',', 'and', 'how', 'much', 'does', 'it', 'weigh', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 12, False], None]], [0, [0, [0, 14, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
pets_1,"SELECT petid ,  weight FROM pets WHERE pet_age  >  1","['SELECT', 'petid', ',', 'weight', 'FROM', 'pets', 'WHERE', 'pet_age', '>', '1']","['select', 'petid', ',', 'weight', 'from', 'pets', 'where', 'pet_age', '>', 'value']",Find the id and weight of all pets whose age is older than 1.,"['Find', 'the', 'id', 'and', 'weight', 'of', 'all', 'pets', 'whose', 'age', 'is', 'older', 'than', '1', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 14, False], None]]]], 'where': [[False, 3, [0, [0, 13, False], None], 1.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,"SELECT petid ,  weight FROM pets WHERE pet_age  >  1","['SELECT', 'petid', ',', 'weight', 'FROM', 'pets', 'WHERE', 'pet_age', '>', '1']","['select', 'petid', ',', 'weight', 'from', 'pets', 'where', 'pet_age', '>', 'value']",What is the id and weight of every pet who is older than 1?,"['What', 'is', 'the', 'id', 'and', 'weight', 'of', 'every', 'pet', 'who', 'is', 'older', 'than', '1', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 14, False], None]]]], 'where': [[False, 3, [0, [0, 13, False], None], 1.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype","['SELECT', 'avg', '(', 'pet_age', ')', ',', 'max', '(', 'pet_age', ')', ',', 'pettype', 'FROM', 'pets', 'GROUP', 'BY', 'pettype']","['select', 'avg', '(', 'pet_age', ')', ',', 'max', '(', 'pet_age', ')', ',', 'pettype', 'from', 'pets', 'group', 'by', 'pettype']",Find the average and maximum age for each type of pet.,"['Find', 'the', 'average', 'and', 'maximum', 'age', 'for', 'each', 'type', 'of', 'pet', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[5, [0, [0, 13, False], None]], [1, [0, [0, 13, False], None]], [0, [0, [0, 12, False], None]]]], 'where': [], 'groupBy': [[0, 12, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype","['SELECT', 'avg', '(', 'pet_age', ')', ',', 'max', '(', 'pet_age', ')', ',', 'pettype', 'FROM', 'pets', 'GROUP', 'BY', 'pettype']","['select', 'avg', '(', 'pet_age', ')', ',', 'max', '(', 'pet_age', ')', ',', 'pettype', 'from', 'pets', 'group', 'by', 'pettype']",What is the average and maximum age for each pet type?,"['What', 'is', 'the', 'average', 'and', 'maximum', 'age', 'for', 'each', 'pet', 'type', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[5, [0, [0, 13, False], None]], [1, [0, [0, 13, False], None]], [0, [0, [0, 12, False], None]]]], 'where': [], 'groupBy': [[0, 12, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype","['SELECT', 'avg', '(', 'weight', ')', ',', 'pettype', 'FROM', 'pets', 'GROUP', 'BY', 'pettype']","['select', 'avg', '(', 'weight', ')', ',', 'pettype', 'from', 'pets', 'group', 'by', 'pettype']",Find the average weight for each pet type.,"['Find', 'the', 'average', 'weight', 'for', 'each', 'pet', 'type', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[5, [0, [0, 14, False], None]], [0, [0, [0, 12, False], None]]]], 'where': [], 'groupBy': [[0, 12, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype","['SELECT', 'avg', '(', 'weight', ')', ',', 'pettype', 'FROM', 'pets', 'GROUP', 'BY', 'pettype']","['select', 'avg', '(', 'weight', ')', ',', 'pettype', 'from', 'pets', 'group', 'by', 'pettype']",What is the average weight for each type of pet?,"['What', 'is', 'the', 'average', 'weight', 'for', 'each', 'type', 'of', 'pet', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[5, [0, [0, 14, False], None]], [0, [0, [0, 12, False], None]]]], 'where': [], 'groupBy': [[0, 12, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid","['SELECT', 'DISTINCT', 'T1.fname', ',', 'T1.age', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid']","['select', 'distinct', 't1', '.', 'fname', ',', 't1', '.', 'age', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid']",Find the first name and age of students who have a pet.,"['Find', 'the', 'first', 'name', 'and', 'age', 'of', 'students', 'who', 'have', 'a', 'pet', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]]}, 'select': [True, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid","['SELECT', 'DISTINCT', 'T1.fname', ',', 'T1.age', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid']","['select', 'distinct', 't1', '.', 'fname', ',', 't1', '.', 'age', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid']",What are the different first names and ages of the students who do have pets?,"['What', 'are', 'the', 'different', 'first', 'names', 'and', 'ages', 'of', 'the', 'students', 'who', 'do', 'have', 'pets', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]]}, 'select': [True, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith',"['SELECT', 'T2.petid', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'WHERE', 'T1.Lname', '=', ""'Smith"", ""'""]","['select', 't2', '.', 'petid', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'where', 't1', '.', 'lname', '=', 'value']",Find the id of the pet owned by student whose last name is ‘Smith’.,"['Find', 'the', 'id', 'of', 'the', 'pet', 'owned', 'by', 'student', 'whose', 'last', 'name', 'is', '‘Smith’', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 10, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Smith""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith',"['SELECT', 'T2.petid', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'WHERE', 'T1.Lname', '=', ""'Smith"", ""'""]","['select', 't2', '.', 'petid', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'where', 't1', '.', 'lname', '=', 'value']",What is the id of the pet owned by the student whose last name is 'Smith'?,"['What', 'is', 'the', 'id', 'of', 'the', 'pet', 'owned', 'by', 'the', 'student', 'whose', 'last', 'name', 'is', ""'Smith"", ""'"", '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 10, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Smith""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,"SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid","['SELECT', 'count', '(', '*', ')', ',', 'T1.stuid', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'GROUP', 'BY', 'T1.stuid']","['select', 'count', '(', '*', ')', ',', 't1', '.', 'stuid', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'group', 'by', 't1', '.', 'stuid']",Find the number of pets for each student who has any pet and student id.,"['Find', 'the', 'number', 'of', 'pets', 'for', 'each', 'student', 'who', 'has', 'any', 'pet', 'and', 'student', 'id', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 1, False], None]]]], 'where': [], 'groupBy': [[0, 1, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,"select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid","['select', 'count', '(', '*', ')', ',', 't1.stuid', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1.stuid', '=', 't2.stuid', 'group', 'by', 't1.stuid']","['select', 'count', '(', '*', ')', ',', 't1', '.', 'stuid', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'group', 'by', 't1', '.', 'stuid']","For students who have pets , how many pets does each student have ? list their ids instead of names .","['For', 'students', 'who', 'have', 'pets', ',', 'how', 'many', 'pets', 'does', 'each', 'student', 'have', '?', 'list', 'their', 'ids', 'instead', 'of', 'names', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 1, False], None]]]], 'where': [], 'groupBy': [[0, 1, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1","['SELECT', 'T1.fname', ',', 'T1.sex', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'GROUP', 'BY', 'T1.stuid', 'HAVING', 'count', '(', '*', ')', '>', '1']","['select', 't1', '.', 'fname', ',', 't1', '.', 'sex', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'group', 'by', 't1', '.', 'stuid', 'having', 'count', '(', '*', ')', '>', 'value']",Find the first name and gender of student who have more than one pet.,"['Find', 'the', 'first', 'name', 'and', 'gender', 'of', 'student', 'who', 'have', 'more', 'than', 'one', 'pet', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [[0, 1, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1","['SELECT', 'T1.fname', ',', 'T1.sex', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'GROUP', 'BY', 'T1.stuid', 'HAVING', 'count', '(', '*', ')', '>', '1']","['select', 't1', '.', 'fname', ',', 't1', '.', 'sex', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'group', 'by', 't1', '.', 'stuid', 'having', 'count', '(', '*', ')', '>', 'value']",What is the first name and gender of the all the students who have more than one pet?,"['What', 'is', 'the', 'first', 'name', 'and', 'gender', 'of', 'the', 'all', 'the', 'students', 'who', 'have', 'more', 'than', 'one', 'pet', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [[0, 1, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat',"['SELECT', 'T1.lname', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'JOIN', 'pets', 'AS', 'T3', 'ON', 'T3.petid', '=', 'T2.petid', 'WHERE', 'T3.pet_age', '=', '3', 'AND', 'T3.pettype', '=', ""'cat"", ""'""]","['select', 't1', '.', 'lname', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'join', 'pets', 'as', 't3', 'on', 't3', '.', 'petid', '=', 't2', '.', 'petid', 'where', 't3', '.', 'pet_age', '=', 'value', 'and', 't3', '.', 'pettype', '=', 'value']",Find the last name of the student who has a cat that is age 3.,"['Find', 'the', 'last', 'name', 'of', 'the', 'student', 'who', 'has', 'a', 'cat', 'that', 'is', 'age', '3', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None], 'and', [False, 2, [0, [0, 11, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 13, False], None], 3.0, None], 'and', [False, 2, [0, [0, 12, False], None], '""cat""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat',"['SELECT', 'T1.lname', 'FROM', 'student', 'AS', 'T1', 'JOIN', 'has_pet', 'AS', 'T2', 'ON', 'T1.stuid', '=', 'T2.stuid', 'JOIN', 'pets', 'AS', 'T3', 'ON', 'T3.petid', '=', 'T2.petid', 'WHERE', 'T3.pet_age', '=', '3', 'AND', 'T3.pettype', '=', ""'cat"", ""'""]","['select', 't1', '.', 'lname', 'from', 'student', 'as', 't1', 'join', 'has_pet', 'as', 't2', 'on', 't1', '.', 'stuid', '=', 't2', '.', 'stuid', 'join', 'pets', 'as', 't3', 'on', 't3', '.', 'petid', '=', 't2', '.', 'petid', 'where', 't3', '.', 'pet_age', '=', 'value', 'and', 't3', '.', 'pettype', '=', 'value']",What is the last name of the student who has a cat that is 3 years old?,"['What', 'is', 'the', 'last', 'name', 'of', 'the', 'student', 'who', 'has', 'a', 'cat', 'that', 'is', '3', 'years', 'old', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None], 'and', [False, 2, [0, [0, 11, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 13, False], None], 3.0, None], 'and', [False, 2, [0, [0, 12, False], None], '""cat""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,select avg(age) from student where stuid not in (select stuid from has_pet),"['select', 'avg', '(', 'age', ')', 'from', 'student', 'where', 'stuid', 'not', 'in', '(', 'select', 'stuid', 'from', 'has_pet', ')']","['select', 'avg', '(', 'age', ')', 'from', 'student', 'where', 'stuid', 'not', 'in', '(', 'select', 'stuid', 'from', 'has_pet', ')']",Find the average age of students who do not have any pet .,"['Find', 'the', 'average', 'age', 'of', 'students', 'who', 'do', 'not', 'have', 'any', 'pet', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[5, [0, [0, 4, False], None]]]], 'where': [[True, 8, [0, [0, 1, False], None], {'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
pets_1,select avg(age) from student where stuid not in (select stuid from has_pet),"['select', 'avg', '(', 'age', ')', 'from', 'student', 'where', 'stuid', 'not', 'in', '(', 'select', 'stuid', 'from', 'has_pet', ')']","['select', 'avg', '(', 'age', ')', 'from', 'student', 'where', 'stuid', 'not', 'in', '(', 'select', 'stuid', 'from', 'has_pet', ')']",What is the average age for all students who do not own any pets ?,"['What', 'is', 'the', 'average', 'age', 'for', 'all', 'students', 'who', 'do', 'not', 'own', 'any', 'pets', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[5, [0, [0, 4, False], None]]]], 'where': [[True, 8, [0, [0, 1, False], None], {'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT count(*) FROM CONTINENTS;,"['SELECT', 'count', '(', '*', ')', 'FROM', 'CONTINENTS', ';']","['select', 'count', '(', '*', ')', 'from', 'continents']",How many continents are there?,"['How', 'many', 'continents', 'are', 'there', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT count(*) FROM CONTINENTS;,"['SELECT', 'count', '(', '*', ')', 'FROM', 'CONTINENTS', ';']","['select', 'count', '(', '*', ')', 'from', 'continents']",What is the number of continents?,"['What', 'is', 'the', 'number', 'of', 'continents', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;","['SELECT', 'T1.ContId', ',', 'T1.Continent', ',', 'count', '(', '*', ')', 'FROM', 'CONTINENTS', 'AS', 'T1', 'JOIN', 'COUNTRIES', 'AS', 'T2', 'ON', 'T1.ContId', '=', 'T2.Continent', 'GROUP', 'BY', 'T1.ContId', ';']","['select', 't1', '.', 'contid', ',', 't1', '.', 'continent', ',', 'count', '(', '*', ')', 'from', 'continents', 'as', 't1', 'join', 'countries', 'as', 't2', 'on', 't1', '.', 'contid', '=', 't2', '.', 'continent', 'group', 'by', 't1', '.', 'contid']","How many countries does each continent have? List the continent id, continent name and the number of countries.","['How', 'many', 'countries', 'does', 'each', 'continent', 'have', '?', 'List', 'the', 'continent', 'id', ',', 'continent', 'name', 'and', 'the', 'number', 'of', 'countries', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None]]}, 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 1, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;","['SELECT', 'T1.ContId', ',', 'T1.Continent', ',', 'count', '(', '*', ')', 'FROM', 'CONTINENTS', 'AS', 'T1', 'JOIN', 'COUNTRIES', 'AS', 'T2', 'ON', 'T1.ContId', '=', 'T2.Continent', 'GROUP', 'BY', 'T1.ContId', ';']","['select', 't1', '.', 'contid', ',', 't1', '.', 'continent', ',', 'count', '(', '*', ')', 'from', 'continents', 'as', 't1', 'join', 'countries', 'as', 't2', 'on', 't1', '.', 'contid', '=', 't2', '.', 'continent', 'group', 'by', 't1', '.', 'contid']","For each continent, list its id, name, and how many countries it has?","['For', 'each', 'continent', ',', 'list', 'its', 'id', ',', 'name', ',', 'and', 'how', 'many', 'countries', 'it', 'has', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None]]}, 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 1, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT count(*) FROM COUNTRIES;,"['SELECT', 'count', '(', '*', ')', 'FROM', 'COUNTRIES', ';']","['select', 'count', '(', '*', ')', 'from', 'countries']",How many countries are listed?,"['How', 'many', 'countries', 'are', 'listed', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT count(*) FROM COUNTRIES;,"['SELECT', 'count', '(', '*', ')', 'FROM', 'COUNTRIES', ';']","['select', 'count', '(', '*', ')', 'from', 'countries']",How many countries exist?,"['How', 'many', 'countries', 'exist', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;","['SELECT', 'T1.FullName', ',', 'T1.Id', ',', 'count', '(', '*', ')', 'FROM', 'CAR_MAKERS', 'AS', 'T1', 'JOIN', 'MODEL_LIST', 'AS', 'T2', 'ON', 'T1.Id', '=', 'T2.Maker', 'GROUP', 'BY', 'T1.Id', ';']","['select', 't1', '.', 'fullname', ',', 't1', '.', 'id', ',', 'count', '(', '*', ')', 'from', 'car_makers', 'as', 't1', 'join', 'model_list', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'maker', 'group', 'by', 't1', '.', 'id']","How many models does each car maker produce? List maker full name, id and the number.","['How', 'many', 'models', 'does', 'each', 'car', 'maker', 'produce', '?', 'List', 'maker', 'full', 'name', ',', 'id', 'and', 'the', 'number', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]]}, 'select': [False, [[0, [0, [0, 8, False], None]], [0, [0, [0, 6, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;","['SELECT', 'T1.FullName', ',', 'T1.Id', ',', 'count', '(', '*', ')', 'FROM', 'CAR_MAKERS', 'AS', 'T1', 'JOIN', 'MODEL_LIST', 'AS', 'T2', 'ON', 'T1.Id', '=', 'T2.Maker', 'GROUP', 'BY', 'T1.Id', ';']","['select', 't1', '.', 'fullname', ',', 't1', '.', 'id', ',', 'count', '(', '*', ')', 'from', 'car_makers', 'as', 't1', 'join', 'model_list', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'maker', 'group', 'by', 't1', '.', 'id']","What is the full name of each car maker, along with its id and how many models it produces?","['What', 'is', 'the', 'full', 'name', 'of', 'each', 'car', 'maker', ',', 'along', 'with', 'its', 'id', 'and', 'how', 'many', 'models', 'it', 'produces', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]]}, 'select': [False, [[0, [0, [0, 8, False], None]], [0, [0, [0, 6, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;,"['SELECT', 'T1.Model', 'FROM', 'CAR_NAMES', 'AS', 'T1', 'JOIN', 'CARS_DATA', 'AS', 'T2', 'ON', 'T1.MakeId', '=', 'T2.Id', 'ORDER', 'BY', 'T2.horsepower', 'ASC', 'LIMIT', '1', ';']","['select', 't1', '.', 'model', 'from', 'car_names', 'as', 't1', 'join', 'cars_data', 'as', 't2', 'on', 't1', '.', 'makeid', '=', 't2', '.', 'id', 'order', 'by', 't2', '.', 'horsepower', 'asc', 'limit', 'value']",Which model of the car has the minimum horsepower?,"['Which', 'model', 'of', 'the', 'car', 'has', 'the', 'minimum', 'horsepower', '?']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]]}, 'select': [False, [[0, [0, [0, 14, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 20, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;,"['SELECT', 'T1.Model', 'FROM', 'CAR_NAMES', 'AS', 'T1', 'JOIN', 'CARS_DATA', 'AS', 'T2', 'ON', 'T1.MakeId', '=', 'T2.Id', 'ORDER', 'BY', 'T2.horsepower', 'ASC', 'LIMIT', '1', ';']","['select', 't1', '.', 'model', 'from', 'car_names', 'as', 't1', 'join', 'cars_data', 'as', 't2', 'on', 't1', '.', 'makeid', '=', 't2', '.', 'id', 'order', 'by', 't2', '.', 'horsepower', 'asc', 'limit', 'value']",What is the model of the car with the smallest amount of horsepower?,"['What', 'is', 'the', 'model', 'of', 'the', 'car', 'with', 'the', 'smallest', 'amount', 'of', 'horsepower', '?']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]]}, 'select': [False, [[0, [0, [0, 14, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 20, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA),"['SELECT', 'T1.model', 'FROM', 'CAR_NAMES', 'AS', 'T1', 'JOIN', 'CARS_DATA', 'AS', 'T2', 'ON', 'T1.MakeId', '=', 'T2.Id', 'WHERE', 'T2.Weight', '<', '(', 'SELECT', 'avg', '(', 'Weight', ')', 'FROM', 'CARS_DATA', ')']","['select', 't1', '.', 'model', 'from', 'car_names', 'as', 't1', 'join', 'cars_data', 'as', 't2', 'on', 't1', '.', 'makeid', '=', 't2', '.', 'id', 'where', 't2', '.', 'weight', '<', '(', 'select', 'avg', '(', 'weight', ')', 'from', 'cars_data', ')']",Find the model of the car whose weight is below the average weight.,"['Find', 'the', 'model', 'of', 'the', 'car', 'whose', 'weight', 'is', 'below', 'the', 'average', 'weight', '.']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]]}, 'select': [False, [[0, [0, [0, 14, False], None]]]], 'where': [[False, 4, [0, [0, 21, False], None], {'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[5, [0, [0, 21, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA),"['SELECT', 'T1.model', 'FROM', 'CAR_NAMES', 'AS', 'T1', 'JOIN', 'CARS_DATA', 'AS', 'T2', 'ON', 'T1.MakeId', '=', 'T2.Id', 'WHERE', 'T2.Weight', '<', '(', 'SELECT', 'avg', '(', 'Weight', ')', 'FROM', 'CARS_DATA', ')']","['select', 't1', '.', 'model', 'from', 'car_names', 'as', 't1', 'join', 'cars_data', 'as', 't2', 'on', 't1', '.', 'makeid', '=', 't2', '.', 'id', 'where', 't2', '.', 'weight', '<', '(', 'select', 'avg', '(', 'weight', ')', 'from', 'cars_data', ')']",What is the model for the car with a weight smaller than the average?,"['What', 'is', 'the', 'model', 'for', 'the', 'car', 'with', 'a', 'weight', 'smaller', 'than', 'the', 'average', '?']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]]}, 'select': [False, [[0, [0, [0, 14, False], None]]]], 'where': [[False, 4, [0, [0, 21, False], None], {'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[5, [0, [0, 21, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';,"['SELECT', 'DISTINCT', 'T1.Maker', 'FROM', 'CAR_MAKERS', 'AS', 'T1', 'JOIN', 'MODEL_LIST', 'AS', 'T2', 'ON', 'T1.Id', '=', 'T2.Maker', 'JOIN', 'CAR_NAMES', 'AS', 'T3', 'ON', 'T2.model', '=', 'T3.model', 'JOIN', 'CARS_DATA', 'AS', 'T4', 'ON', 'T3.MakeId', '=', 'T4.id', 'WHERE', 'T4.year', '=', ""'1970"", ""'"", ';']","['select', 'distinct', 't1', '.', 'maker', 'from', 'car_makers', 'as', 't1', 'join', 'model_list', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'maker', 'join', 'car_names', 'as', 't3', 'on', 't2', '.', 'model', '=', 't3', '.', 'model', 'join', 'cars_data', 'as', 't4', 'on', 't3', '.', 'makeid', '=', 't4', '.', 'id', 'where', 't4', '.', 'year', '=', 'value']",Find the name of the makers that produced some cars in the year of 1970?,"['Find', 'the', 'name', 'of', 'the', 'makers', 'that', 'produced', 'some', 'cars', 'in', 'the', 'year', 'of', '1970', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3], ['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None], 'and', [False, 2, [0, [0, 12, False], None], [0, 14, False], None], 'and', [False, 2, [0, [0, 13, False], None], [0, 16, False], None]]}, 'select': [True, [[0, [0, [0, 7, False], None]]]], 'where': [[False, 2, [0, [0, 23, False], None], '""1970""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';,"['SELECT', 'DISTINCT', 'T1.Maker', 'FROM', 'CAR_MAKERS', 'AS', 'T1', 'JOIN', 'MODEL_LIST', 'AS', 'T2', 'ON', 'T1.Id', '=', 'T2.Maker', 'JOIN', 'CAR_NAMES', 'AS', 'T3', 'ON', 'T2.model', '=', 'T3.model', 'JOIN', 'CARS_DATA', 'AS', 'T4', 'ON', 'T3.MakeId', '=', 'T4.id', 'WHERE', 'T4.year', '=', ""'1970"", ""'"", ';']","['select', 'distinct', 't1', '.', 'maker', 'from', 'car_makers', 'as', 't1', 'join', 'model_list', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'maker', 'join', 'car_names', 'as', 't3', 'on', 't2', '.', 'model', '=', 't3', '.', 'model', 'join', 'cars_data', 'as', 't4', 'on', 't3', '.', 'makeid', '=', 't4', '.', 'id', 'where', 't4', '.', 'year', '=', 'value']",What is the name of the different car makers who produced a car in 1970?,"['What', 'is', 'the', 'name', 'of', 'the', 'different', 'car', 'makers', 'who', 'produced', 'a', 'car', 'in', '1970', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3], ['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None], 'and', [False, 2, [0, [0, 12, False], None], [0, 14, False], None], 'and', [False, 2, [0, [0, 13, False], None], [0, 16, False], None]]}, 'select': [True, [[0, [0, [0, 7, False], None]]]], 'where': [[False, 2, [0, [0, 23, False], None], '""1970""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);","['SELECT', 'T2.Make', ',', 'T1.Year', 'FROM', 'CARS_DATA', 'AS', 'T1', 'JOIN', 'CAR_NAMES', 'AS', 'T2', 'ON', 'T1.Id', '=', 'T2.MakeId', 'WHERE', 'T1.Year', '=', '(', 'SELECT', 'min', '(', 'YEAR', ')', 'FROM', 'CARS_DATA', ')', ';']","['select', 't2', '.', 'make', ',', 't1', '.', 'year', 'from', 'cars_data', 'as', 't1', 'join', 'car_names', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'makeid', 'where', 't1', '.', 'year', '=', '(', 'select', 'min', '(', 'year', ')', 'from', 'cars_data', ')']",Find the make and production time of the cars that were produced in the earliest year?,"['Find', 'the', 'make', 'and', 'production', 'time', 'of', 'the', 'cars', 'that', 'were', 'produced', 'in', 'the', 'earliest', 'year', '?']","{'from': {'table_units': [['table_unit', 5], ['table_unit', 4]], 'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]]}, 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 23, False], None]]]], 'where': [[False, 2, [0, [0, 23, False], None], {'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[2, [0, [0, 23, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);","['SELECT', 'T2.Make', ',', 'T1.Year', 'FROM', 'CARS_DATA', 'AS', 'T1', 'JOIN', 'CAR_NAMES', 'AS', 'T2', 'ON', 'T1.Id', '=', 'T2.MakeId', 'WHERE', 'T1.Year', '=', '(', 'SELECT', 'min', '(', 'YEAR', ')', 'FROM', 'CARS_DATA', ')', ';']","['select', 't2', '.', 'make', ',', 't1', '.', 'year', 'from', 'cars_data', 'as', 't1', 'join', 'car_names', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'makeid', 'where', 't1', '.', 'year', '=', '(', 'select', 'min', '(', 'year', ')', 'from', 'cars_data', ')']",What is the maker of the carr produced in the earliest year and what year was it?,"['What', 'is', 'the', 'maker', 'of', 'the', 'carr', 'produced', 'in', 'the', 'earliest', 'year', 'and', 'what', 'year', 'was', 'it', '?']","{'from': {'table_units': [['table_unit', 5], ['table_unit', 4]], 'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]]}, 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 23, False], None]]]], 'where': [[False, 2, [0, [0, 23, False], None], {'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[2, [0, [0, 23, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;,"['SELECT', 'DISTINCT', 'T1.model', 'FROM', 'MODEL_LIST', 'AS', 'T1', 'JOIN', 'CAR_NAMES', 'AS', 'T2', 'ON', 'T1.model', '=', 'T2.model', 'JOIN', 'CARS_DATA', 'AS', 'T3', 'ON', 'T2.MakeId', '=', 'T3.id', 'WHERE', 'T3.year', '>', '1980', ';']","['select', 'distinct', 't1', '.', 'model', 'from', 'model_list', 'as', 't1', 'join', 'car_names', 'as', 't2', 'on', 't1', '.', 'model', '=', 't2', '.', 'model', 'join', 'cars_data', 'as', 't3', 'on', 't2', '.', 'makeid', '=', 't3', '.', 'id', 'where', 't3', '.', 'year', '>', 'value']",Which distinct car models are the produced after 1980?,"['Which', 'distinct', 'car', 'models', 'are', 'the', 'produced', 'after', '1980', '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 12, False], None], [0, 14, False], None], 'and', [False, 2, [0, [0, 13, False], None], [0, 16, False], None]]}, 'select': [True, [[0, [0, [0, 12, False], None]]]], 'where': [[False, 3, [0, [0, 23, False], None], 1980.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;,"['SELECT', 'DISTINCT', 'T1.model', 'FROM', 'MODEL_LIST', 'AS', 'T1', 'JOIN', 'CAR_NAMES', 'AS', 'T2', 'ON', 'T1.model', '=', 'T2.model', 'JOIN', 'CARS_DATA', 'AS', 'T3', 'ON', 'T2.MakeId', '=', 'T3.id', 'WHERE', 'T3.year', '>', '1980', ';']","['select', 'distinct', 't1', '.', 'model', 'from', 'model_list', 'as', 't1', 'join', 'car_names', 'as', 't2', 'on', 't1', '.', 'model', '=', 't2', '.', 'model', 'join', 'cars_data', 'as', 't3', 'on', 't2', '.', 'makeid', '=', 't3', '.', 'id', 'where', 't3', '.', 'year', '>', 'value']",What are the different models for the cards produced after 1980?,"['What', 'are', 'the', 'different', 'models', 'for', 'the', 'cards', 'produced', 'after', '1980', '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 12, False], None], [0, 14, False], None], 'and', [False, 2, [0, [0, 13, False], None], [0, 16, False], None]]}, 'select': [True, [[0, [0, [0, 12, False], None]]]], 'where': [[False, 3, [0, [0, 23, False], None], 1980.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;","['SELECT', 'T1.Continent', ',', 'count', '(', '*', ')', 'FROM', 'CONTINENTS', 'AS', 'T1', 'JOIN', 'COUNTRIES', 'AS', 'T2', 'ON', 'T1.ContId', '=', 'T2.continent', 'JOIN', 'car_makers', 'AS', 'T3', 'ON', 'T2.CountryId', '=', 'T3.Country', 'GROUP', 'BY', 'T1.Continent', ';']","['select', 't1', '.', 'continent', ',', 'count', '(', '*', ')', 'from', 'continents', 'as', 't1', 'join', 'countries', 'as', 't2', 'on', 't1', '.', 'contid', '=', 't2', '.', 'continent', 'join', 'car_makers', 'as', 't3', 'on', 't2', '.', 'countryid', '=', 't3', '.', 'country', 'group', 'by', 't1', '.', 'continent']",How many car makers are there in each continents? List the continent name and the count.,"['How', 'many', 'car', 'makers', 'are', 'there', 'in', 'each', 'continents', '?', 'List', 'the', 'continent', 'name', 'and', 'the', 'count', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None], 'and', [False, 2, [0, [0, 3, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 2, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;","['SELECT', 'T1.Continent', ',', 'count', '(', '*', ')', 'FROM', 'CONTINENTS', 'AS', 'T1', 'JOIN', 'COUNTRIES', 'AS', 'T2', 'ON', 'T1.ContId', '=', 'T2.continent', 'JOIN', 'car_makers', 'AS', 'T3', 'ON', 'T2.CountryId', '=', 'T3.Country', 'GROUP', 'BY', 'T1.Continent', ';']","['select', 't1', '.', 'continent', ',', 'count', '(', '*', ')', 'from', 'continents', 'as', 't1', 'join', 'countries', 'as', 't2', 'on', 't1', '.', 'contid', '=', 't2', '.', 'continent', 'join', 'car_makers', 'as', 't3', 'on', 't2', '.', 'countryid', '=', 't3', '.', 'country', 'group', 'by', 't1', '.', 'continent']",What is the name of each continent and how many car makers are there in each one?,"['What', 'is', 'the', 'name', 'of', 'each', 'continent', 'and', 'how', 'many', 'car', 'makers', 'are', 'there', 'in', 'each', 'one', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None], 'and', [False, 2, [0, [0, 3, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 2, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;,"['SELECT', 'T2.CountryName', 'FROM', 'CAR_MAKERS', 'AS', 'T1', 'JOIN', 'COUNTRIES', 'AS', 'T2', 'ON', 'T1.Country', '=', 'T2.CountryId', 'GROUP', 'BY', 'T1.Country', 'ORDER', 'BY', 'Count', '(', '*', ')', 'DESC', 'LIMIT', '1', ';']","['select', 't2', '.', 'countryname', 'from', 'car_makers', 'as', 't1', 'join', 'countries', 'as', 't2', 'on', 't1', '.', 'country', '=', 't2', '.', 'countryid', 'group', 'by', 't1', '.', 'country', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which of the countries has the most car makers? List the country name.,"['Which', 'of', 'the', 'countries', 'has', 'the', 'most', 'car', 'makers', '?', 'List', 'the', 'country', 'name', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 9, False], None], [0, 3, False], None]]}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [[0, 9, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;,"['SELECT', 'T2.CountryName', 'FROM', 'CAR_MAKERS', 'AS', 'T1', 'JOIN', 'COUNTRIES', 'AS', 'T2', 'ON', 'T1.Country', '=', 'T2.CountryId', 'GROUP', 'BY', 'T1.Country', 'ORDER', 'BY', 'Count', '(', '*', ')', 'DESC', 'LIMIT', '1', ';']","['select', 't2', '.', 'countryname', 'from', 'car_makers', 'as', 't1', 'join', 'countries', 'as', 't2', 'on', 't1', '.', 'country', '=', 't2', '.', 'countryid', 'group', 'by', 't1', '.', 'country', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the name of the country with the most car makers?,"['What', 'is', 'the', 'name', 'of', 'the', 'country', 'with', 'the', 'most', 'car', 'makers', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 9, False], None], [0, 3, False], None]]}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [[0, 9, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
car_1,"select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;","['select', 'count', '(', '*', ')', ',', 't2.fullname', 'from', 'model_list', 'as', 't1', 'join', 'car_makers', 'as', 't2', 'on', 't1.maker', '=', 't2.id', 'group', 'by', 't2.id', ';']","['select', 'count', '(', '*', ')', ',', 't2', '.', 'fullname', 'from', 'model_list', 'as', 't1', 'join', 'car_makers', 'as', 't2', 'on', 't1', '.', 'maker', '=', 't2', '.', 'id', 'group', 'by', 't2', '.', 'id']",How many car models are produced by each maker ? Only list the count and the maker full name .,"['How', 'many', 'car', 'models', 'are', 'produced', 'by', 'each', 'maker', '?', 'Only', 'list', 'the', 'count', 'and', 'the', 'maker', 'full', 'name', '.']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 11, False], None], [0, 6, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 8, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;","['SELECT', 'Count', '(', '*', ')', ',', 'T2.FullName', ',', 'T2.id', 'FROM', 'MODEL_LIST', 'AS', 'T1', 'JOIN', 'CAR_MAKERS', 'AS', 'T2', 'ON', 'T1.Maker', '=', 'T2.Id', 'GROUP', 'BY', 'T2.id', ';']","['select', 'count', '(', '*', ')', ',', 't2', '.', 'fullname', ',', 't2', '.', 'id', 'from', 'model_list', 'as', 't1', 'join', 'car_makers', 'as', 't2', 'on', 't1', '.', 'maker', '=', 't2', '.', 'id', 'group', 'by', 't2', '.', 'id']",What is the number of car models that are produced by each maker and what is the id and full name of each maker?,"['What', 'is', 'the', 'number', 'of', 'car', 'models', 'that', 'are', 'produced', 'by', 'each', 'maker', 'and', 'what', 'is', 'the', 'id', 'and', 'full', 'name', 'of', 'each', 'maker', '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 11, False], None], [0, 6, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 8, False], None]], [0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';,"['SELECT', 'T1.Accelerate', 'FROM', 'CARS_DATA', 'AS', 'T1', 'JOIN', 'CAR_NAMES', 'AS', 'T2', 'ON', 'T1.Id', '=', 'T2.MakeId', 'WHERE', 'T2.Make', '=', ""'amc"", 'hornet', 'sportabout', '(', 'sw', ')', ""'"", ';']","['select', 't1', '.', 'accelerate', 'from', 'cars_data', 'as', 't1', 'join', 'car_names', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'makeid', 'where', 't2', '.', 'make', '=', 'value']",What is the accelerate of the car make amc hornet sportabout (sw)?,"['What', 'is', 'the', 'accelerate', 'of', 'the', 'car', 'make', 'amc', 'hornet', 'sportabout', '(', 'sw', ')', '?']","{'from': {'table_units': [['table_unit', 5], ['table_unit', 4]], 'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]]}, 'select': [False, [[0, [0, [0, 22, False], None]]]], 'where': [[False, 2, [0, [0, 15, False], None], '""amc hornet sportabout (sw)""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';,"['SELECT', 'T1.Accelerate', 'FROM', 'CARS_DATA', 'AS', 'T1', 'JOIN', 'CAR_NAMES', 'AS', 'T2', 'ON', 'T1.Id', '=', 'T2.MakeId', 'WHERE', 'T2.Make', '=', ""'amc"", 'hornet', 'sportabout', '(', 'sw', ')', ""'"", ';']","['select', 't1', '.', 'accelerate', 'from', 'cars_data', 'as', 't1', 'join', 'car_names', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'makeid', 'where', 't2', '.', 'make', '=', 'value']",How much does the car accelerate that makes amc hornet sportabout (sw)?,"['How', 'much', 'does', 'the', 'car', 'accelerate', 'that', 'makes', 'amc', 'hornet', 'sportabout', '(', 'sw', ')', '?']","{'from': {'table_units': [['table_unit', 5], ['table_unit', 4]], 'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]]}, 'select': [False, [[0, [0, [0, 22, False], None]]]], 'where': [[False, 2, [0, [0, 15, False], None], '""amc hornet sportabout (sw)""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';,"['SELECT', 'count', '(', '*', ')', 'FROM', 'CAR_MAKERS', 'AS', 'T1', 'JOIN', 'COUNTRIES', 'AS', 'T2', 'ON', 'T1.Country', '=', 'T2.CountryId', 'WHERE', 'T2.CountryName', '=', ""'france"", ""'"", ';']","['select', 'count', '(', '*', ')', 'from', 'car_makers', 'as', 't1', 'join', 'countries', 'as', 't2', 'on', 't1', '.', 'country', '=', 't2', '.', 'countryid', 'where', 't2', '.', 'countryname', '=', 'value']",How many car makers are there in france?,"['How', 'many', 'car', 'makers', 'are', 'there', 'in', 'france', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 9, False], None], [0, 3, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 4, False], None], '""france""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';,"['SELECT', 'count', '(', '*', ')', 'FROM', 'CAR_MAKERS', 'AS', 'T1', 'JOIN', 'COUNTRIES', 'AS', 'T2', 'ON', 'T1.Country', '=', 'T2.CountryId', 'WHERE', 'T2.CountryName', '=', ""'france"", ""'"", ';']","['select', 'count', '(', '*', ')', 'from', 'car_makers', 'as', 't1', 'join', 'countries', 'as', 't2', 'on', 't1', '.', 'country', '=', 't2', '.', 'countryid', 'where', 't2', '.', 'countryname', '=', 'value']",What is the number of makers of care in France?,"['What', 'is', 'the', 'number', 'of', 'makers', 'of', 'care', 'in', 'France', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 9, False], None], [0, 3, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 4, False], None], '""france""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';,"['SELECT', 'count', '(', '*', ')', 'FROM', 'MODEL_LIST', 'AS', 'T1', 'JOIN', 'CAR_MAKERS', 'AS', 'T2', 'ON', 'T1.Maker', '=', 'T2.Id', 'JOIN', 'COUNTRIES', 'AS', 'T3', 'ON', 'T2.Country', '=', 'T3.CountryId', 'WHERE', 'T3.CountryName', '=', ""'usa"", ""'"", ';']","['select', 'count', '(', '*', ')', 'from', 'model_list', 'as', 't1', 'join', 'car_makers', 'as', 't2', 'on', 't1', '.', 'maker', '=', 't2', '.', 'id', 'join', 'countries', 'as', 't3', 'on', 't2', '.', 'country', '=', 't3', '.', 'countryid', 'where', 't3', '.', 'countryname', '=', 'value']",How many car models are produced in the usa?,"['How', 'many', 'car', 'models', 'are', 'produced', 'in', 'the', 'usa', '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 11, False], None], [0, 6, False], None], 'and', [False, 2, [0, [0, 9, False], None], [0, 3, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 4, False], None], '""usa""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';,"['SELECT', 'count', '(', '*', ')', 'FROM', 'MODEL_LIST', 'AS', 'T1', 'JOIN', 'CAR_MAKERS', 'AS', 'T2', 'ON', 'T1.Maker', '=', 'T2.Id', 'JOIN', 'COUNTRIES', 'AS', 'T3', 'ON', 'T2.Country', '=', 'T3.CountryId', 'WHERE', 'T3.CountryName', '=', ""'usa"", ""'"", ';']","['select', 'count', '(', '*', ')', 'from', 'model_list', 'as', 't1', 'join', 'car_makers', 'as', 't2', 'on', 't1', '.', 'maker', '=', 't2', '.', 'id', 'join', 'countries', 'as', 't3', 'on', 't2', '.', 'country', '=', 't3', '.', 'countryid', 'where', 't3', '.', 'countryname', '=', 'value']",What is the count of the car models produced in the United States?,"['What', 'is', 'the', 'count', 'of', 'the', 'car', 'models', 'produced', 'in', 'the', 'United', 'States', '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 11, False], None], [0, 6, False], None], 'and', [False, 2, [0, [0, 9, False], None], [0, 3, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 4, False], None], '""usa""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;,"['SELECT', 'avg', '(', 'mpg', ')', 'FROM', 'CARS_DATA', 'WHERE', 'Cylinders', '=', '4', ';']","['select', 'avg', '(', 'mpg', ')', 'from', 'cars_data', 'where', 'cylinders', '=', 'value']",What is the average miles per gallon(mpg) of the cars with 4 cylinders?,"['What', 'is', 'the', 'average', 'miles', 'per', 'gallon', '(', 'mpg', ')', 'of', 'the', 'cars', 'with', '4', 'cylinders', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[5, [0, [0, 17, False], None]]]], 'where': [[False, 2, [0, [0, 18, False], None], 4.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;,"['SELECT', 'avg', '(', 'mpg', ')', 'FROM', 'CARS_DATA', 'WHERE', 'Cylinders', '=', '4', ';']","['select', 'avg', '(', 'mpg', ')', 'from', 'cars_data', 'where', 'cylinders', '=', 'value']",What is the average miles per gallon of all the cards with 4 cylinders?,"['What', 'is', 'the', 'average', 'miles', 'per', 'gallon', 'of', 'all', 'the', 'cards', 'with', '4', 'cylinders', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[5, [0, [0, 17, False], None]]]], 'where': [[False, 2, [0, [0, 18, False], None], 4.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,select min(weight) from cars_data where cylinders  =  8 and year  =  1974,"['select', 'min', '(', 'weight', ')', 'from', 'cars_data', 'where', 'cylinders', '=', '8', 'and', 'year', '=', '1974']","['select', 'min', '(', 'weight', ')', 'from', 'cars_data', 'where', 'cylinders', '=', 'value', 'and', 'year', '=', 'value']",What is the smallest weight of the car produced with 8 cylinders on 1974 ?,"['What', 'is', 'the', 'smallest', 'weight', 'of', 'the', 'car', 'produced', 'with', '8', 'cylinders', 'on', '1974', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[2, [0, [0, 21, False], None]]]], 'where': [[False, 2, [0, [0, 18, False], None], 8.0, None], 'and', [False, 2, [0, [0, 23, False], None], 1974.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,select min(weight) from cars_data where cylinders  =  8 and year  =  1974,"['select', 'min', '(', 'weight', ')', 'from', 'cars_data', 'where', 'cylinders', '=', '8', 'and', 'year', '=', '1974']","['select', 'min', '(', 'weight', ')', 'from', 'cars_data', 'where', 'cylinders', '=', 'value', 'and', 'year', '=', 'value']",What is the minimum weight of the car with 8 cylinders produced in 1974 ?,"['What', 'is', 'the', 'minimum', 'weight', 'of', 'the', 'car', 'with', '8', 'cylinders', 'produced', 'in', '1974', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[2, [0, [0, 21, False], None]]]], 'where': [[False, 2, [0, [0, 18, False], None], 8.0, None], 'and', [False, 2, [0, [0, 23, False], None], 1974.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT Maker ,  Model FROM MODEL_LIST;","['SELECT', 'Maker', ',', 'Model', 'FROM', 'MODEL_LIST', ';']","['select', 'maker', ',', 'model', 'from', 'model_list']",What are all the makers and models?,"['What', 'are', 'all', 'the', 'makers', 'and', 'models', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT Maker ,  Model FROM MODEL_LIST;","['SELECT', 'Maker', ',', 'Model', 'FROM', 'MODEL_LIST', ';']","['select', 'maker', ',', 'model', 'from', 'model_list']",What are the makers and models?,"['What', 'are', 'the', 'makers', 'and', 'models', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;","['SELECT', 'T1.CountryName', ',', 'T1.CountryId', 'FROM', 'COUNTRIES', 'AS', 'T1', 'JOIN', 'CAR_MAKERS', 'AS', 'T2', 'ON', 'T1.CountryId', '=', 'T2.Country', 'GROUP', 'BY', 'T1.CountryId', 'HAVING', 'count', '(', '*', ')', '>', '=', '1', ';']","['select', 't1', '.', 'countryname', ',', 't1', '.', 'countryid', 'from', 'countries', 'as', 't1', 'join', 'car_makers', 'as', 't2', 'on', 't1', '.', 'countryid', '=', 't2', '.', 'country', 'group', 'by', 't1', '.', 'countryid', 'having', 'count', '(', '*', ')', '>', '=', 'value']",What are the countries having at least one car maker? List name and id.,"['What', 'are', 'the', 'countries', 'having', 'at', 'least', 'one', 'car', 'maker', '?', 'List', 'name', 'and', 'id', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 4, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [[0, 3, False]], 'having': [[False, 5, [0, [3, 0, False], None], 1.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;","['SELECT', 'T1.CountryName', ',', 'T1.CountryId', 'FROM', 'COUNTRIES', 'AS', 'T1', 'JOIN', 'CAR_MAKERS', 'AS', 'T2', 'ON', 'T1.CountryId', '=', 'T2.Country', 'GROUP', 'BY', 'T1.CountryId', 'HAVING', 'count', '(', '*', ')', '>', '=', '1', ';']","['select', 't1', '.', 'countryname', ',', 't1', '.', 'countryid', 'from', 'countries', 'as', 't1', 'join', 'car_makers', 'as', 't2', 'on', 't1', '.', 'countryid', '=', 't2', '.', 'country', 'group', 'by', 't1', '.', 'countryid', 'having', 'count', '(', '*', ')', '>', '=', 'value']",What are the names and ids of all countries with at least one car maker?,"['What', 'are', 'the', 'names', 'and', 'ids', 'of', 'all', 'countries', 'with', 'at', 'least', 'one', 'car', 'maker', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 4, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [[0, 3, False]], 'having': [[False, 5, [0, [3, 0, False], None], 1.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;,"['SELECT', 'count', '(', '*', ')', 'FROM', 'CARS_DATA', 'WHERE', 'horsepower', '>', '150', ';']","['select', 'count', '(', '*', ')', 'from', 'cars_data', 'where', 'horsepower', '>', 'value']",What is the number of the cars with horsepower more than 150?,"['What', 'is', 'the', 'number', 'of', 'the', 'cars', 'with', 'horsepower', 'more', 'than', '150', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 3, [0, [0, 20, False], None], 150.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;,"['SELECT', 'count', '(', '*', ')', 'FROM', 'CARS_DATA', 'WHERE', 'horsepower', '>', '150', ';']","['select', 'count', '(', '*', ')', 'from', 'cars_data', 'where', 'horsepower', '>', 'value']",What is the number of cars with a horsepower greater than 150?,"['What', 'is', 'the', 'number', 'of', 'cars', 'with', 'a', 'horsepower', 'greater', 'than', '150', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 3, [0, [0, 20, False], None], 150.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;","['SELECT', 'avg', '(', 'Weight', ')', ',', 'YEAR', 'FROM', 'CARS_DATA', 'GROUP', 'BY', 'YEAR', ';']","['select', 'avg', '(', 'weight', ')', ',', 'year', 'from', 'cars_data', 'group', 'by', 'year']",What is the average weight of cars each year?,"['What', 'is', 'the', 'average', 'weight', 'of', 'cars', 'each', 'year', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[5, [0, [0, 21, False], None]], [0, [0, [0, 23, False], None]]]], 'where': [], 'groupBy': [[0, 23, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;","['SELECT', 'avg', '(', 'Weight', ')', ',', 'YEAR', 'FROM', 'CARS_DATA', 'GROUP', 'BY', 'YEAR', ';']","['select', 'avg', '(', 'weight', ')', ',', 'year', 'from', 'cars_data', 'group', 'by', 'year']",What is the average weight and year for each year?,"['What', 'is', 'the', 'average', 'weight', 'and', 'year', 'for', 'each', 'year', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[5, [0, [0, 21, False], None]], [0, [0, [0, 23, False], None]]]], 'where': [], 'groupBy': [[0, 23, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;,"['SELECT', 'T1.CountryName', 'FROM', 'COUNTRIES', 'AS', 'T1', 'JOIN', 'CONTINENTS', 'AS', 'T2', 'ON', 'T1.Continent', '=', 'T2.ContId', 'JOIN', 'CAR_MAKERS', 'AS', 'T3', 'ON', 'T1.CountryId', '=', 'T3.Country', 'WHERE', 'T2.Continent', '=', ""'europe"", ""'"", 'GROUP', 'BY', 'T1.CountryName', 'HAVING', 'count', '(', '*', ')', '>', '=', '3', ';']","['select', 't1', '.', 'countryname', 'from', 'countries', 'as', 't1', 'join', 'continents', 'as', 't2', 'on', 't1', '.', 'continent', '=', 't2', '.', 'contid', 'join', 'car_makers', 'as', 't3', 'on', 't1', '.', 'countryid', '=', 't3', '.', 'country', 'where', 't2', '.', 'continent', '=', 'value', 'group', 'by', 't1', '.', 'countryname', 'having', 'count', '(', '*', ')', '>', '=', 'value']",Which countries in europe have at least 3 car manufacturers?,"['Which', 'countries', 'in', 'europe', 'have', 'at', 'least', '3', 'car', 'manufacturers', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 5, False], None], [0, 1, False], None], 'and', [False, 2, [0, [0, 3, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""europe""', None]], 'groupBy': [[0, 4, False]], 'having': [[False, 5, [0, [3, 0, False], None], 3.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;,"['SELECT', 'T1.CountryName', 'FROM', 'COUNTRIES', 'AS', 'T1', 'JOIN', 'CONTINENTS', 'AS', 'T2', 'ON', 'T1.Continent', '=', 'T2.ContId', 'JOIN', 'CAR_MAKERS', 'AS', 'T3', 'ON', 'T1.CountryId', '=', 'T3.Country', 'WHERE', 'T2.Continent', '=', ""'europe"", ""'"", 'GROUP', 'BY', 'T1.CountryName', 'HAVING', 'count', '(', '*', ')', '>', '=', '3', ';']","['select', 't1', '.', 'countryname', 'from', 'countries', 'as', 't1', 'join', 'continents', 'as', 't2', 'on', 't1', '.', 'continent', '=', 't2', '.', 'contid', 'join', 'car_makers', 'as', 't3', 'on', 't1', '.', 'countryid', '=', 't3', '.', 'country', 'where', 't2', '.', 'continent', '=', 'value', 'group', 'by', 't1', '.', 'countryname', 'having', 'count', '(', '*', ')', '>', '=', 'value']",What are the names of all European countries with at least 3 manufacturers?,"['What', 'are', 'the', 'names', 'of', 'all', 'European', 'countries', 'with', 'at', 'least', '3', 'manufacturers', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 5, False], None], [0, 1, False], None], 'and', [False, 2, [0, [0, 3, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""europe""', None]], 'groupBy': [[0, 4, False]], 'having': [[False, 5, [0, [3, 0, False], None], 3.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;","['SELECT', 'T2.horsepower', ',', 'T1.Make', 'FROM', 'CAR_NAMES', 'AS', 'T1', 'JOIN', 'CARS_DATA', 'AS', 'T2', 'ON', 'T1.MakeId', '=', 'T2.Id', 'WHERE', 'T2.cylinders', '=', '3', 'ORDER', 'BY', 'T2.horsepower', 'DESC', 'LIMIT', '1', ';']","['select', 't2', '.', 'horsepower', ',', 't1', '.', 'make', 'from', 'car_names', 'as', 't1', 'join', 'cars_data', 'as', 't2', 'on', 't1', '.', 'makeid', '=', 't2', '.', 'id', 'where', 't2', '.', 'cylinders', '=', 'value', 'order', 'by', 't2', '.', 'horsepower', 'desc', 'limit', 'value']",What is the maximum horsepower and the make of the car models with 3 cylinders?,"['What', 'is', 'the', 'maximum', 'horsepower', 'and', 'the', 'make', 'of', 'the', 'car', 'models', 'with', '3', 'cylinders', '?']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]]}, 'select': [False, [[0, [0, [0, 20, False], None]], [0, [0, [0, 15, False], None]]]], 'where': [[False, 2, [0, [0, 18, False], None], 3.0, None]], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;","['SELECT', 'T2.horsepower', ',', 'T1.Make', 'FROM', 'CAR_NAMES', 'AS', 'T1', 'JOIN', 'CARS_DATA', 'AS', 'T2', 'ON', 'T1.MakeId', '=', 'T2.Id', 'WHERE', 'T2.cylinders', '=', '3', 'ORDER', 'BY', 'T2.horsepower', 'DESC', 'LIMIT', '1', ';']","['select', 't2', '.', 'horsepower', ',', 't1', '.', 'make', 'from', 'car_names', 'as', 't1', 'join', 'cars_data', 'as', 't2', 'on', 't1', '.', 'makeid', '=', 't2', '.', 'id', 'where', 't2', '.', 'cylinders', '=', 'value', 'order', 'by', 't2', '.', 'horsepower', 'desc', 'limit', 'value']",What is the largest amount of horsepower for the models with 3 cylinders and what make is it?,"['What', 'is', 'the', 'largest', 'amount', 'of', 'horsepower', 'for', 'the', 'models', 'with', '3', 'cylinders', 'and', 'what', 'make', 'is', 'it', '?']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]]}, 'select': [False, [[0, [0, [0, 20, False], None]], [0, [0, [0, 15, False], None]]]], 'where': [[False, 2, [0, [0, 18, False], None], 3.0, None]], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;,"['SELECT', 'T1.Model', 'FROM', 'CAR_NAMES', 'AS', 'T1', 'JOIN', 'CARS_DATA', 'AS', 'T2', 'ON', 'T1.MakeId', '=', 'T2.Id', 'ORDER', 'BY', 'T2.mpg', 'DESC', 'LIMIT', '1', ';']","['select', 't1', '.', 'model', 'from', 'car_names', 'as', 't1', 'join', 'cars_data', 'as', 't2', 'on', 't1', '.', 'makeid', '=', 't2', '.', 'id', 'order', 'by', 't2', '.', 'mpg', 'desc', 'limit', 'value']","Which model saves the most gasoline? That is to say, have the maximum miles per gallon.","['Which', 'model', 'saves', 'the', 'most', 'gasoline', '?', 'That', 'is', 'to', 'say', ',', 'have', 'the', 'maximum', 'miles', 'per', 'gallon', '.']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]]}, 'select': [False, [[0, [0, [0, 14, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 17, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
car_1,select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;,"['select', 't1.model', 'from', 'car_names', 'as', 't1', 'join', 'cars_data', 'as', 't2', 'on', 't1.makeid', '=', 't2.id', 'order', 'by', 't2.mpg', 'desc', 'limit', '1', ';']","['select', 't1', '.', 'model', 'from', 'car_names', 'as', 't1', 'join', 'cars_data', 'as', 't2', 'on', 't1', '.', 'makeid', '=', 't2', '.', 'id', 'order', 'by', 't2', '.', 'mpg', 'desc', 'limit', 'value']",What is the car model with the highest mpg ?,"['What', 'is', 'the', 'car', 'model', 'with', 'the', 'highest', 'mpg', '?']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]]}, 'select': [False, [[0, [0, [0, 14, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 17, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;,"['SELECT', 'avg', '(', 'horsepower', ')', 'FROM', 'CARS_DATA', 'WHERE', 'YEAR', '<', '1980', ';']","['select', 'avg', '(', 'horsepower', ')', 'from', 'cars_data', 'where', 'year', '<', 'value']",What is the average horsepower of the cars before 1980?,"['What', 'is', 'the', 'average', 'horsepower', 'of', 'the', 'cars', 'before', '1980', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[5, [0, [0, 20, False], None]]]], 'where': [[False, 4, [0, [0, 23, False], None], 1980.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,select avg(horsepower) from cars_data where year  <  1980;,"['select', 'avg', '(', 'horsepower', ')', 'from', 'cars_data', 'where', 'year', '<', '1980', ';']","['select', 'avg', '(', 'horsepower', ')', 'from', 'cars_data', 'where', 'year', '<', 'value']",What is the average horsepower for all cars produced before 1980 ?,"['What', 'is', 'the', 'average', 'horsepower', 'for', 'all', 'cars', 'produced', 'before', '1980', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[5, [0, [0, 20, False], None]]]], 'where': [[False, 4, [0, [0, 23, False], None], 1980.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';,"['SELECT', 'avg', '(', 'T2.edispl', ')', 'FROM', 'CAR_NAMES', 'AS', 'T1', 'JOIN', 'CARS_DATA', 'AS', 'T2', 'ON', 'T1.MakeId', '=', 'T2.Id', 'WHERE', 'T1.Model', '=', ""'volvo"", ""'"", ';']","['select', 'avg', '(', 't2', '.', 'edispl', ')', 'from', 'car_names', 'as', 't1', 'join', 'cars_data', 'as', 't2', 'on', 't1', '.', 'makeid', '=', 't2', '.', 'id', 'where', 't1', '.', 'model', '=', 'value']",What is the average edispl of the cars of model volvo?,"['What', 'is', 'the', 'average', 'edispl', 'of', 'the', 'cars', 'of', 'model', 'volvo', '?']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]]}, 'select': [False, [[5, [0, [0, 19, False], None]]]], 'where': [[False, 2, [0, [0, 14, False], None], '""volvo""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';,"['SELECT', 'avg', '(', 'T2.edispl', ')', 'FROM', 'CAR_NAMES', 'AS', 'T1', 'JOIN', 'CARS_DATA', 'AS', 'T2', 'ON', 'T1.MakeId', '=', 'T2.Id', 'WHERE', 'T1.Model', '=', ""'volvo"", ""'"", ';']","['select', 'avg', '(', 't2', '.', 'edispl', ')', 'from', 'car_names', 'as', 't1', 'join', 'cars_data', 'as', 't2', 'on', 't1', '.', 'makeid', '=', 't2', '.', 'id', 'where', 't1', '.', 'model', '=', 'value']",What is the average edispl for all volvos?,"['What', 'is', 'the', 'average', 'edispl', 'for', 'all', 'volvos', '?']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]]}, 'select': [False, [[5, [0, [0, 19, False], None]]]], 'where': [[False, 2, [0, [0, 14, False], None], '""volvo""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;","['SELECT', 'max', '(', 'Accelerate', ')', ',', 'Cylinders', 'FROM', 'CARS_DATA', 'GROUP', 'BY', 'Cylinders', ';']","['select', 'max', '(', 'accelerate', ')', ',', 'cylinders', 'from', 'cars_data', 'group', 'by', 'cylinders']",What is the maximum accelerate for different number of cylinders?,"['What', 'is', 'the', 'maximum', 'accelerate', 'for', 'different', 'number', 'of', 'cylinders', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[1, [0, [0, 22, False], None]], [0, [0, [0, 18, False], None]]]], 'where': [], 'groupBy': [[0, 18, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;","['SELECT', 'max', '(', 'Accelerate', ')', ',', 'Cylinders', 'FROM', 'CARS_DATA', 'GROUP', 'BY', 'Cylinders', ';']","['select', 'max', '(', 'accelerate', ')', ',', 'cylinders', 'from', 'cars_data', 'group', 'by', 'cylinders']",What is the maximum accelerate for all the different cylinders?,"['What', 'is', 'the', 'maximum', 'accelerate', 'for', 'all', 'the', 'different', 'cylinders', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[1, [0, [0, 22, False], None]], [0, [0, [0, 18, False], None]]]], 'where': [], 'groupBy': [[0, 18, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;,"['SELECT', 'Model', 'FROM', 'CAR_NAMES', 'GROUP', 'BY', 'Model', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1', ';']","['select', 'model', 'from', 'car_names', 'group', 'by', 'model', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which model has the most version(make) of cars?,"['Which', 'model', 'has', 'the', 'most', 'version', '(', 'make', ')', 'of', 'cars', '?']","{'from': {'table_units': [['table_unit', 4]], 'conds': []}, 'select': [False, [[0, [0, [0, 14, False], None]]]], 'where': [], 'groupBy': [[0, 14, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;,"['SELECT', 'Model', 'FROM', 'CAR_NAMES', 'GROUP', 'BY', 'Model', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1', ';']","['select', 'model', 'from', 'car_names', 'group', 'by', 'model', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What model has the most different versions?,"['What', 'model', 'has', 'the', 'most', 'different', 'versions', '?']","{'from': {'table_units': [['table_unit', 4]], 'conds': []}, 'select': [False, [[0, [0, [0, 14, False], None]]]], 'where': [], 'groupBy': [[0, 14, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;,"['SELECT', 'count', '(', '*', ')', 'FROM', 'CARS_DATA', 'WHERE', 'Cylinders', '>', '4', ';']","['select', 'count', '(', '*', ')', 'from', 'cars_data', 'where', 'cylinders', '>', 'value']",How many cars have more than 4 cylinders?,"['How', 'many', 'cars', 'have', 'more', 'than', '4', 'cylinders', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 3, [0, [0, 18, False], None], 4.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;,"['SELECT', 'count', '(', '*', ')', 'FROM', 'CARS_DATA', 'WHERE', 'Cylinders', '>', '4', ';']","['select', 'count', '(', '*', ')', 'from', 'cars_data', 'where', 'cylinders', '>', 'value']",What is the number of cars with more than 4 cylinders?,"['What', 'is', 'the', 'number', 'of', 'cars', 'with', 'more', 'than', '4', 'cylinders', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 3, [0, [0, 18, False], None], 4.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;,"['SELECT', 'count', '(', '*', ')', 'FROM', 'CARS_DATA', 'WHERE', 'YEAR', '=', '1980', ';']","['select', 'count', '(', '*', ')', 'from', 'cars_data', 'where', 'year', '=', 'value']",how many cars were produced in 1980?,"['how', 'many', 'cars', 'were', 'produced', 'in', '1980', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 23, False], None], 1980.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;,"['SELECT', 'count', '(', '*', ')', 'FROM', 'CARS_DATA', 'WHERE', 'YEAR', '=', '1980', ';']","['select', 'count', '(', '*', ')', 'from', 'cars_data', 'where', 'year', '=', 'value']","In 1980, how many cars were made?","['In', '1980', ',', 'how', 'many', 'cars', 'were', 'made', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 23, False], None], 1980.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';,"['SELECT', 'count', '(', '*', ')', 'FROM', 'CAR_MAKERS', 'AS', 'T1', 'JOIN', 'MODEL_LIST', 'AS', 'T2', 'ON', 'T1.Id', '=', 'T2.Maker', 'WHERE', 'T1.FullName', '=', ""'American"", 'Motor', 'Company', ""'"", ';']","['select', 'count', '(', '*', ')', 'from', 'car_makers', 'as', 't1', 'join', 'model_list', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'maker', 'where', 't1', '.', 'fullname', '=', 'value']",How many car models were produced by the maker with full name American Motor Company?,"['How', 'many', 'car', 'models', 'were', 'produced', 'by', 'the', 'maker', 'with', 'full', 'name', 'American', 'Motor', 'Company', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 8, False], None], '""American Motor Company""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';,"['SELECT', 'count', '(', '*', ')', 'FROM', 'CAR_MAKERS', 'AS', 'T1', 'JOIN', 'MODEL_LIST', 'AS', 'T2', 'ON', 'T1.Id', '=', 'T2.Maker', 'WHERE', 'T1.FullName', '=', ""'American"", 'Motor', 'Company', ""'"", ';']","['select', 'count', '(', '*', ')', 'from', 'car_makers', 'as', 't1', 'join', 'model_list', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'maker', 'where', 't1', '.', 'fullname', '=', 'value']",What is the number of car models created by the car maker American Motor Company?,"['What', 'is', 'the', 'number', 'of', 'car', 'models', 'created', 'by', 'the', 'car', 'maker', 'American', 'Motor', 'Company', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 8, False], None], '""American Motor Company""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;","['SELECT', 'T1.FullName', ',', 'T1.Id', 'FROM', 'CAR_MAKERS', 'AS', 'T1', 'JOIN', 'MODEL_LIST', 'AS', 'T2', 'ON', 'T1.Id', '=', 'T2.Maker', 'GROUP', 'BY', 'T1.Id', 'HAVING', 'count', '(', '*', ')', '>', '3', ';']","['select', 't1', '.', 'fullname', ',', 't1', '.', 'id', 'from', 'car_makers', 'as', 't1', 'join', 'model_list', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'maker', 'group', 'by', 't1', '.', 'id', 'having', 'count', '(', '*', ')', '>', 'value']",Which makers designed more than 3 car models? List full name and the id.,"['Which', 'makers', 'designed', 'more', 'than', '3', 'car', 'models', '?', 'List', 'full', 'name', 'and', 'the', 'id', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]]}, 'select': [False, [[0, [0, [0, 8, False], None]], [0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [[False, 3, [0, [3, 0, False], None], 3.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;","['SELECT', 'T1.FullName', ',', 'T1.Id', 'FROM', 'CAR_MAKERS', 'AS', 'T1', 'JOIN', 'MODEL_LIST', 'AS', 'T2', 'ON', 'T1.Id', '=', 'T2.Maker', 'GROUP', 'BY', 'T1.Id', 'HAVING', 'count', '(', '*', ')', '>', '3', ';']","['select', 't1', '.', 'fullname', ',', 't1', '.', 'id', 'from', 'car_makers', 'as', 't1', 'join', 'model_list', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'maker', 'group', 'by', 't1', '.', 'id', 'having', 'count', '(', '*', ')', '>', 'value']",What are the names and ids of all makers with more than 3 models?,"['What', 'are', 'the', 'names', 'and', 'ids', 'of', 'all', 'makers', 'with', 'more', 'than', '3', 'models', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]]}, 'select': [False, [[0, [0, [0, 8, False], None]], [0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [[False, 3, [0, [3, 0, False], None], 3.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;,"['SELECT', 'DISTINCT', 'T2.Model', 'FROM', 'CAR_NAMES', 'AS', 'T1', 'JOIN', 'MODEL_LIST', 'AS', 'T2', 'ON', 'T1.Model', '=', 'T2.Model', 'JOIN', 'CAR_MAKERS', 'AS', 'T3', 'ON', 'T2.Maker', '=', 'T3.Id', 'JOIN', 'CARS_DATA', 'AS', 'T4', 'ON', 'T1.MakeId', '=', 'T4.Id', 'WHERE', 'T3.FullName', '=', ""'General"", 'Motors', ""'"", 'OR', 'T4.weight', '>', '3500', ';']","['select', 'distinct', 't2', '.', 'model', 'from', 'car_names', 'as', 't1', 'join', 'model_list', 'as', 't2', 'on', 't1', '.', 'model', '=', 't2', '.', 'model', 'join', 'car_makers', 'as', 't3', 'on', 't2', '.', 'maker', '=', 't3', '.', 'id', 'join', 'cars_data', 'as', 't4', 'on', 't1', '.', 'makeid', '=', 't4', '.', 'id', 'where', 't3', '.', 'fullname', '=', 'value', 'or', 't4', '.', 'weight', '>', 'value']",Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?,"['Which', 'distinctive', 'models', 'are', 'produced', 'by', 'maker', 'with', 'the', 'full', 'name', 'General', 'Motors', 'or', 'weighing', 'more', 'than', '3500', '?']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 3], ['table_unit', 2], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 14, False], None], [0, 12, False], None], 'and', [False, 2, [0, [0, 11, False], None], [0, 6, False], None], 'and', [False, 2, [0, [0, 13, False], None], [0, 16, False], None]]}, 'select': [True, [[0, [0, [0, 12, False], None]]]], 'where': [[False, 2, [0, [0, 8, False], None], '""General Motors""', None], 'or', [False, 3, [0, [0, 21, False], None], 3500.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;,"['SELECT', 'DISTINCT', 'T2.Model', 'FROM', 'CAR_NAMES', 'AS', 'T1', 'JOIN', 'MODEL_LIST', 'AS', 'T2', 'ON', 'T1.Model', '=', 'T2.Model', 'JOIN', 'CAR_MAKERS', 'AS', 'T3', 'ON', 'T2.Maker', '=', 'T3.Id', 'JOIN', 'CARS_DATA', 'AS', 'T4', 'ON', 'T1.MakeId', '=', 'T4.Id', 'WHERE', 'T3.FullName', '=', ""'General"", 'Motors', ""'"", 'OR', 'T4.weight', '>', '3500', ';']","['select', 'distinct', 't2', '.', 'model', 'from', 'car_names', 'as', 't1', 'join', 'model_list', 'as', 't2', 'on', 't1', '.', 'model', '=', 't2', '.', 'model', 'join', 'car_makers', 'as', 't3', 'on', 't2', '.', 'maker', '=', 't3', '.', 'id', 'join', 'cars_data', 'as', 't4', 'on', 't1', '.', 'makeid', '=', 't4', '.', 'id', 'where', 't3', '.', 'fullname', '=', 'value', 'or', 't4', '.', 'weight', '>', 'value']",What are the different models created by either the car maker General Motors or weighed more than 3500?,"['What', 'are', 'the', 'different', 'models', 'created', 'by', 'either', 'the', 'car', 'maker', 'General', 'Motors', 'or', 'weighed', 'more', 'than', '3500', '?']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 3], ['table_unit', 2], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 14, False], None], [0, 12, False], None], 'and', [False, 2, [0, [0, 11, False], None], [0, 6, False], None], 'and', [False, 2, [0, [0, 13, False], None], [0, 16, False], None]]}, 'select': [True, [[0, [0, [0, 12, False], None]]]], 'where': [[False, 2, [0, [0, 8, False], None], '""General Motors""', None], 'or', [False, 3, [0, [0, 21, False], None], 3500.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,select distinct year from cars_data where weight between 3000 and 4000;,"['select', 'distinct', 'year', 'from', 'cars_data', 'where', 'weight', 'between', '3000', 'and', '4000', ';']","['select', 'distinct', 'year', 'from', 'cars_data', 'where', 'weight', 'between', 'value', 'and', 'value']",In which years cars were produced weighing no less than 3000 and no more than 4000 ?,"['In', 'which', 'years', 'cars', 'were', 'produced', 'weighing', 'no', 'less', 'than', '3000', 'and', 'no', 'more', 'than', '4000', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [True, [[0, [0, [0, 23, False], None]]]], 'where': [[False, 1, [0, [0, 21, False], None], 3000.0, 4000.0]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,select distinct year from cars_data where weight between 3000 and 4000;,"['select', 'distinct', 'year', 'from', 'cars_data', 'where', 'weight', 'between', '3000', 'and', '4000', ';']","['select', 'distinct', 'year', 'from', 'cars_data', 'where', 'weight', 'between', 'value', 'and', 'value']",What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?,"['What', 'are', 'the', 'different', 'years', 'in', 'which', 'there', 'were', 'cars', 'produced', 'that', 'weighed', 'less', 'than', '4000', 'and', 'also', 'cars', 'that', 'weighted', 'more', 'than', '3000', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [True, [[0, [0, [0, 23, False], None]]]], 'where': [[False, 1, [0, [0, 21, False], None], 3000.0, 4000.0]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;,"['SELECT', 'T1.horsepower', 'FROM', 'CARS_DATA', 'AS', 'T1', 'ORDER', 'BY', 'T1.accelerate', 'DESC', 'LIMIT', '1', ';']","['select', 't1', '.', 'horsepower', 'from', 'cars_data', 'as', 't1', 'order', 'by', 't1', '.', 'accelerate', 'desc', 'limit', 'value']",What is the horsepower of the car with the largest accelerate?,"['What', 'is', 'the', 'horsepower', 'of', 'the', 'car', 'with', 'the', 'largest', 'accelerate', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[0, [0, [0, 20, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 22, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;,"['SELECT', 'T1.horsepower', 'FROM', 'CARS_DATA', 'AS', 'T1', 'ORDER', 'BY', 'T1.accelerate', 'DESC', 'LIMIT', '1', ';']","['select', 't1', '.', 'horsepower', 'from', 'cars_data', 'as', 't1', 'order', 'by', 't1', '.', 'accelerate', 'desc', 'limit', 'value']",What is the horsepower of the car with the greatest accelerate?,"['What', 'is', 'the', 'horsepower', 'of', 'the', 'car', 'with', 'the', 'greatest', 'accelerate', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[0, [0, [0, 20, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 22, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;,"['SELECT', 'T1.cylinders', 'FROM', 'CARS_DATA', 'AS', 'T1', 'JOIN', 'CAR_NAMES', 'AS', 'T2', 'ON', 'T1.Id', '=', 'T2.MakeId', 'WHERE', 'T2.Model', '=', ""'volvo"", ""'"", 'ORDER', 'BY', 'T1.accelerate', 'ASC', 'LIMIT', '1', ';']","['select', 't1', '.', 'cylinders', 'from', 'cars_data', 'as', 't1', 'join', 'car_names', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'makeid', 'where', 't2', '.', 'model', '=', 'value', 'order', 'by', 't1', '.', 'accelerate', 'asc', 'limit', 'value']","For model volvo, how many cylinders does the car with the least accelerate have?","['For', 'model', 'volvo', ',', 'how', 'many', 'cylinders', 'does', 'the', 'car', 'with', 'the', 'least', 'accelerate', 'have', '?']","{'from': {'table_units': [['table_unit', 5], ['table_unit', 4]], 'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]]}, 'select': [False, [[0, [0, [0, 18, False], None]]]], 'where': [[False, 2, [0, [0, 14, False], None], '""volvo""', None]], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 22, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;,"['SELECT', 'T1.cylinders', 'FROM', 'CARS_DATA', 'AS', 'T1', 'JOIN', 'CAR_NAMES', 'AS', 'T2', 'ON', 'T1.Id', '=', 'T2.MakeId', 'WHERE', 'T2.Model', '=', ""'volvo"", ""'"", 'ORDER', 'BY', 'T1.accelerate', 'ASC', 'LIMIT', '1', ';']","['select', 't1', '.', 'cylinders', 'from', 'cars_data', 'as', 't1', 'join', 'car_names', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'makeid', 'where', 't2', '.', 'model', '=', 'value', 'order', 'by', 't1', '.', 'accelerate', 'asc', 'limit', 'value']","For a volvo model, how many cylinders does the version with least accelerate have?","['For', 'a', 'volvo', 'model', ',', 'how', 'many', 'cylinders', 'does', 'the', 'version', 'with', 'least', 'accelerate', 'have', '?']","{'from': {'table_units': [['table_unit', 5], ['table_unit', 4]], 'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]]}, 'select': [False, [[0, [0, [0, 18, False], None]]]], 'where': [[False, 2, [0, [0, 14, False], None], '""volvo""', None]], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 22, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );,"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'CARS_DATA', 'WHERE', 'Accelerate', '>', '(', 'SELECT', 'Accelerate', 'FROM', 'CARS_DATA', 'ORDER', 'BY', 'Horsepower', 'DESC', 'LIMIT', '1', ')', ';']","['select', 'count', '(', '*', ')', 'from', 'cars_data', 'where', 'accelerate', '>', '(', 'select', 'accelerate', 'from', 'cars_data', 'order', 'by', 'horsepower', 'desc', 'limit', 'value', ')']",How many cars have a larger accelerate than the car with the largest horsepower?,"['How', 'many', 'cars', 'have', 'a', 'larger', 'accelerate', 'than', 'the', 'car', 'with', 'the', 'largest', 'horsepower', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 3, [0, [0, 22, False], None], {'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[0, [0, [0, 22, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );,"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'CARS_DATA', 'WHERE', 'Accelerate', '>', '(', 'SELECT', 'Accelerate', 'FROM', 'CARS_DATA', 'ORDER', 'BY', 'Horsepower', 'DESC', 'LIMIT', '1', ')', ';']","['select', 'count', '(', '*', ')', 'from', 'cars_data', 'where', 'accelerate', '>', '(', 'select', 'accelerate', 'from', 'cars_data', 'order', 'by', 'horsepower', 'desc', 'limit', 'value', ')']",What is the number of cars with a greater accelerate than the one with the most horsepower?,"['What', 'is', 'the', 'number', 'of', 'cars', 'with', 'a', 'greater', 'accelerate', 'than', 'the', 'one', 'with', 'the', 'most', 'horsepower', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 3, [0, [0, 22, False], None], {'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[0, [0, [0, 22, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2,"['select', 'count', '(', '*', ')', 'from', 'countries', 'as', 't1', 'join', 'car_makers', 'as', 't2', 'on', 't1.countryid', '=', 't2.country', 'group', 'by', 't1.countryid', 'having', 'count', '(', '*', ')', '>', '2']","['select', 'count', '(', '*', ')', 'from', 'countries', 'as', 't1', 'join', 'car_makers', 'as', 't2', 'on', 't1', '.', 'countryid', '=', 't2', '.', 'country', 'group', 'by', 't1', '.', 'countryid', 'having', 'count', '(', '*', ')', '>', 'value']",How many countries has more than 2 car makers ?,"['How', 'many', 'countries', 'has', 'more', 'than', '2', 'car', 'makers', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 3, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2,"['select', 'count', '(', '*', ')', 'from', 'countries', 'as', 't1', 'join', 'car_makers', 'as', 't2', 'on', 't1.countryid', '=', 't2.country', 'group', 'by', 't1.countryid', 'having', 'count', '(', '*', ')', '>', '2']","['select', 'count', '(', '*', ')', 'from', 'countries', 'as', 't1', 'join', 'car_makers', 'as', 't2', 'on', 't1', '.', 'countryid', '=', 't2', '.', 'country', 'group', 'by', 't1', '.', 'countryid', 'having', 'count', '(', '*', ')', '>', 'value']",What is the number of countries with more than 2 car makers ?,"['What', 'is', 'the', 'number', 'of', 'countries', 'with', 'more', 'than', '2', 'car', 'makers', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 3, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;,"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'CARS_DATA', 'WHERE', 'Cylinders', '>', '6', ';']","['select', 'count', '(', '*', ')', 'from', 'cars_data', 'where', 'cylinders', '>', 'value']",How many cars has over 6 cylinders?,"['How', 'many', 'cars', 'has', 'over', '6', 'cylinders', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 3, [0, [0, 18, False], None], 6.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;,"['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'CARS_DATA', 'WHERE', 'Cylinders', '>', '6', ';']","['select', 'count', '(', '*', ')', 'from', 'cars_data', 'where', 'cylinders', '>', 'value']",What is the number of carsw ith over 6 cylinders?,"['What', 'is', 'the', 'number', 'of', 'carsw', 'ith', 'over', '6', 'cylinders', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 3, [0, [0, 18, False], None], 6.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;,"['SELECT', 'T1.Model', 'FROM', 'CAR_NAMES', 'AS', 'T1', 'JOIN', 'CARS_DATA', 'AS', 'T2', 'ON', 'T1.MakeId', '=', 'T2.Id', 'WHERE', 'T2.Cylinders', '=', '4', 'ORDER', 'BY', 'T2.horsepower', 'DESC', 'LIMIT', '1', ';']","['select', 't1', '.', 'model', 'from', 'car_names', 'as', 't1', 'join', 'cars_data', 'as', 't2', 'on', 't1', '.', 'makeid', '=', 't2', '.', 'id', 'where', 't2', '.', 'cylinders', '=', 'value', 'order', 'by', 't2', '.', 'horsepower', 'desc', 'limit', 'value']","For the cars with 4 cylinders, which model has the largest horsepower?","['For', 'the', 'cars', 'with', '4', 'cylinders', ',', 'which', 'model', 'has', 'the', 'largest', 'horsepower', '?']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]]}, 'select': [False, [[0, [0, [0, 14, False], None]]]], 'where': [[False, 2, [0, [0, 18, False], None], 4.0, None]], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;,"['SELECT', 'T1.Model', 'FROM', 'CAR_NAMES', 'AS', 'T1', 'JOIN', 'CARS_DATA', 'AS', 'T2', 'ON', 'T1.MakeId', '=', 'T2.Id', 'WHERE', 'T2.Cylinders', '=', '4', 'ORDER', 'BY', 'T2.horsepower', 'DESC', 'LIMIT', '1', ';']","['select', 't1', '.', 'model', 'from', 'car_names', 'as', 't1', 'join', 'cars_data', 'as', 't2', 'on', 't1', '.', 'makeid', '=', 't2', '.', 'id', 'where', 't2', '.', 'cylinders', '=', 'value', 'order', 'by', 't2', '.', 'horsepower', 'desc', 'limit', 'value']","For all of the 4 cylinder cars, which model has the most horsepower?","['For', 'all', 'of', 'the', '4', 'cylinder', 'cars', ',', 'which', 'model', 'has', 'the', 'most', 'horsepower', '?']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 16, False], None]]}, 'select': [False, [[0, [0, [0, 14, False], None]]]], 'where': [[False, 2, [0, [0, 18, False], None], 4.0, None]], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
car_1,"SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;","['SELECT', 'T2.MakeId', ',', 'T2.Make', 'FROM', 'CARS_DATA', 'AS', 'T1', 'JOIN', 'CAR_NAMES', 'AS', 'T2', 'ON', 'T1.Id', '=', 'T2.MakeId', 'WHERE', 'T1.Horsepower', '>', '(', 'SELECT', 'min', '(', 'Horsepower', ')', 'FROM', 'CARS_DATA', ')', 'AND', 'T1.Cylinders', '<', '=', '3', ';']","['select', 't2', '.', 'makeid', ',', 't2', '.', 'make', 'from', 'cars_data', 'as', 't1', 'join', 'car_names', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'makeid', 'where', 't1', '.', 'horsepower', '>', '(', 'select', 'min', '(', 'horsepower', ')', 'from', 'cars_data', ')', 'and', 't1', '.', 'cylinders', '<', '=', 'value']","Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.","['Among', 'the', 'cars', 'with', 'more', 'than', 'lowest', 'horsepower', ',', 'which', 'ones', 'do', 'not', 'have', 'more', 'than', '3', 'cylinders', '?', 'List', 'the', 'car', 'makeid', 'and', 'make', 'name', '.']","{'from': {'table_units': [['table_unit', 5], ['table_unit', 4]], 'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]]}, 'select': [False, [[0, [0, [0, 13, False], None]], [0, [0, [0, 15, False], None]]]], 'where': [[False, 3, [0, [0, 20, False], None], {'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[2, [0, [0, 20, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None], 'and', [False, 6, [0, [0, 18, False], None], 3.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,"select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;","['select', 't2.makeid', ',', 't2.make', 'from', 'cars_data', 'as', 't1', 'join', 'car_names', 'as', 't2', 'on', 't1.id', '=', 't2.makeid', 'where', 't1.horsepower', '>', '(', 'select', 'min', '(', 'horsepower', ')', 'from', 'cars_data', ')', 'and', 't1.cylinders', '<', '4', ';']","['select', 't2', '.', 'makeid', ',', 't2', '.', 'make', 'from', 'cars_data', 'as', 't1', 'join', 'car_names', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'makeid', 'where', 't1', '.', 'horsepower', '>', '(', 'select', 'min', '(', 'horsepower', ')', 'from', 'cars_data', ')', 'and', 't1', '.', 'cylinders', '<', 'value']","Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?","['Among', 'the', 'cars', 'that', 'do', 'not', 'have', 'the', 'minimum', 'horsepower', ',', 'what', 'are', 'the', 'make', 'ids', 'and', 'names', 'of', 'all', 'those', 'with', 'less', 'than', '4', 'cylinders', '?']","{'from': {'table_units': [['table_unit', 5], ['table_unit', 4]], 'conds': [[False, 2, [0, [0, 16, False], None], [0, 13, False], None]]}, 'select': [False, [[0, [0, [0, 13, False], None]], [0, [0, [0, 15, False], None]]]], 'where': [[False, 3, [0, [0, 20, False], None], {'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[2, [0, [0, 20, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None], 'and', [False, 4, [0, [0, 18, False], None], 4.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,select max(mpg) from cars_data where cylinders  =  8 or year  <  1980,"['select', 'max', '(', 'mpg', ')', 'from', 'cars_data', 'where', 'cylinders', '=', '8', 'or', 'year', '<', '1980']","['select', 'max', '(', 'mpg', ')', 'from', 'cars_data', 'where', 'cylinders', '=', 'value', 'or', 'year', '<', 'value']",What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?,"['What', 'is', 'the', 'maximum', 'miles', 'per', 'gallon', 'of', 'the', 'car', 'with', '8', 'cylinders', 'or', 'produced', 'before', '1980', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[1, [0, [0, 17, False], None]]]], 'where': [[False, 2, [0, [0, 18, False], None], 8.0, None], 'or', [False, 4, [0, [0, 23, False], None], 1980.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,select max(mpg) from cars_data where cylinders  =  8 or year  <  1980,"['select', 'max', '(', 'mpg', ')', 'from', 'cars_data', 'where', 'cylinders', '=', '8', 'or', 'year', '<', '1980']","['select', 'max', '(', 'mpg', ')', 'from', 'cars_data', 'where', 'cylinders', '=', 'value', 'or', 'year', '<', 'value']",What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?,"['What', 'is', 'the', 'maximum', 'mpg', 'of', 'the', 'cars', 'that', 'had', '8', 'cylinders', 'or', 'that', 'were', 'produced', 'before', '1980', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[1, [0, [0, 17, False], None]]]], 'where': [[False, 2, [0, [0, 18, False], None], 8.0, None], 'or', [False, 4, [0, [0, 23, False], None], 1980.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';,"['SELECT', 'DISTINCT', 'T1.model', 'FROM', 'MODEL_LIST', 'AS', 'T1', 'JOIN', 'CAR_NAMES', 'AS', 'T2', 'ON', 'T1.Model', '=', 'T2.Model', 'JOIN', 'CARS_DATA', 'AS', 'T3', 'ON', 'T2.MakeId', '=', 'T3.Id', 'JOIN', 'CAR_MAKERS', 'AS', 'T4', 'ON', 'T1.Maker', '=', 'T4.Id', 'WHERE', 'T3.weight', '<', '3500', 'AND', 'T4.FullName', '!', '=', ""'Ford"", 'Motor', 'Company', ""'"", ';']","['select', 'distinct', 't1', '.', 'model', 'from', 'model_list', 'as', 't1', 'join', 'car_names', 'as', 't2', 'on', 't1', '.', 'model', '=', 't2', '.', 'model', 'join', 'cars_data', 'as', 't3', 'on', 't2', '.', 'makeid', '=', 't3', '.', 'id', 'join', 'car_makers', 'as', 't4', 'on', 't1', '.', 'maker', '=', 't4', '.', 'id', 'where', 't3', '.', 'weight', '<', 'value', 'and', 't4', '.', 'fullname', '!', '=', 'value']",Which models are lighter than 3500 but not built by the 'Ford Motor Company'?,"['Which', 'models', 'are', 'lighter', 'than', '3500', 'but', 'not', 'built', 'by', 'the', ""'Ford"", 'Motor', 'Company', ""'"", '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 4], ['table_unit', 5], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 12, False], None], [0, 14, False], None], 'and', [False, 2, [0, [0, 13, False], None], [0, 16, False], None], 'and', [False, 2, [0, [0, 11, False], None], [0, 6, False], None]]}, 'select': [True, [[0, [0, [0, 12, False], None]]]], 'where': [[False, 4, [0, [0, 21, False], None], 3500.0, None], 'and', [False, 7, [0, [0, 8, False], None], '""Ford Motor Company""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';,"['SELECT', 'DISTINCT', 'T1.model', 'FROM', 'MODEL_LIST', 'AS', 'T1', 'JOIN', 'CAR_NAMES', 'AS', 'T2', 'ON', 'T1.Model', '=', 'T2.Model', 'JOIN', 'CARS_DATA', 'AS', 'T3', 'ON', 'T2.MakeId', '=', 'T3.Id', 'JOIN', 'CAR_MAKERS', 'AS', 'T4', 'ON', 'T1.Maker', '=', 'T4.Id', 'WHERE', 'T3.weight', '<', '3500', 'AND', 'T4.FullName', '!', '=', ""'Ford"", 'Motor', 'Company', ""'"", ';']","['select', 'distinct', 't1', '.', 'model', 'from', 'model_list', 'as', 't1', 'join', 'car_names', 'as', 't2', 'on', 't1', '.', 'model', '=', 't2', '.', 'model', 'join', 'cars_data', 'as', 't3', 'on', 't2', '.', 'makeid', '=', 't3', '.', 'id', 'join', 'car_makers', 'as', 't4', 'on', 't1', '.', 'maker', '=', 't4', '.', 'id', 'where', 't3', '.', 'weight', '<', 'value', 'and', 't4', '.', 'fullname', '!', '=', 'value']",What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?,"['What', 'are', 'the', 'different', 'models', 'wthat', 'are', 'lighter', 'than', '3500', 'but', 'were', 'not', 'built', 'by', 'the', 'Ford', 'Motor', 'Company', '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 4], ['table_unit', 5], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 12, False], None], [0, 14, False], None], 'and', [False, 2, [0, [0, 13, False], None], [0, 16, False], None], 'and', [False, 2, [0, [0, 11, False], None], [0, 6, False], None]]}, 'select': [True, [[0, [0, [0, 12, False], None]]]], 'where': [[False, 4, [0, [0, 21, False], None], 3500.0, None], 'and', [False, 7, [0, [0, 8, False], None], '""Ford Motor Company""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
car_1,SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;,"['SELECT', 'CountryName', 'FROM', 'countries', 'EXCEPT', 'SELECT', 'T1.CountryName', 'FROM', 'countries', 'AS', 'T1', 'JOIN', 'CAR_MAKERS', 'AS', 'T2', 'ON', 'T1.countryId', '=', 'T2.Country', ';']","['select', 'countryname', 'from', 'countries', 'except', 'select', 't1', '.', 'countryname', 'from', 'countries', 'as', 't1', 'join', 'car_makers', 'as', 't2', 'on', 't1', '.', 'countryid', '=', 't2', '.', 'country']",What are the name of the countries where there is not a single car maker?,"['What', 'are', 'the', 'name', 'of', 'the', 'countries', 'where', 'there', 'is', 'not', 'a', 'single', 'car', 'maker', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
car_1,SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;,"['SELECT', 'CountryName', 'FROM', 'countries', 'EXCEPT', 'SELECT', 'T1.CountryName', 'FROM', 'countries', 'AS', 'T1', 'JOIN', 'CAR_MAKERS', 'AS', 'T2', 'ON', 'T1.countryId', '=', 'T2.Country', ';']","['select', 'countryname', 'from', 'countries', 'except', 'select', 't1', '.', 'countryname', 'from', 'countries', 'as', 't1', 'join', 'car_makers', 'as', 't2', 'on', 't1', '.', 'countryid', '=', 't2', '.', 'country']",What are the names of the countries with no car makers?,"['What', 'are', 'the', 'names', 'of', 'the', 'countries', 'with', 'no', 'car', 'makers', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
car_1,"select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;","['select', 't1.id', ',', 't1.maker', 'from', 'car_makers', 'as', 't1', 'join', 'model_list', 'as', 't2', 'on', 't1.id', '=', 't2.maker', 'group', 'by', 't1.id', 'having', 'count', '(', '*', ')', '>=', '2', 'intersect', 'select', 't1.id', ',', 't1.maker', 'from', 'car_makers', 'as', 't1', 'join', 'model_list', 'as', 't2', 'on', 't1.id', '=', 't2.maker', 'join', 'car_names', 'as', 't3', 'on', 't2.model', '=', 't3.model', 'group', 'by', 't1.id', 'having', 'count', '(', '*', ')', '>', '3', ';']","['select', 't1', '.', 'id', ',', 't1', '.', 'maker', 'from', 'car_makers', 'as', 't1', 'join', 'model_list', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'maker', 'group', 'by', 't1', '.', 'id', 'having', 'count', '(', '*', ')', '>', '=', 'value', 'intersect', 'select', 't1', '.', 'id', ',', 't1', '.', 'maker', 'from', 'car_makers', 'as', 't1', 'join', 'model_list', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'maker', 'join', 'car_names', 'as', 't3', 'on', 't2', '.', 'model', '=', 't3', '.', 'model', 'group', 'by', 't1', '.', 'id', 'having', 'count', '(', '*', ')', '>', 'value']",Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .,"['Which', 'are', 'the', 'car', 'makers', 'which', 'produce', 'at', 'least', '2', 'models', 'and', 'more', 'than', '3', 'car', 'makers', '?', 'List', 'the', 'id', 'and', 'the', 'maker', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]]}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 2], ['table_unit', 3], ['table_unit', 4]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None], 'and', [False, 2, [0, [0, 12, False], None], [0, 14, False], None]]}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [[False, 3, [0, [3, 0, False], None], 3.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
car_1,"SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;","['SELECT', 'T1.Id', ',', 'T1.Maker', 'FROM', 'CAR_MAKERS', 'AS', 'T1', 'JOIN', 'MODEL_LIST', 'AS', 'T2', 'ON', 'T1.Id', '=', 'T2.Maker', 'GROUP', 'BY', 'T1.Id', 'HAVING', 'count', '(', '*', ')', '>', '=', '2', 'INTERSECT', 'SELECT', 'T1.Id', ',', 'T1.Maker', 'FROM', 'CAR_MAKERS', 'AS', 'T1', 'JOIN', 'MODEL_LIST', 'AS', 'T2', 'ON', 'T1.Id', '=', 'T2.Maker', 'JOIN', 'CAR_NAMES', 'AS', 'T3', 'ON', 'T2.model', '=', 'T3.model', 'GROUP', 'BY', 'T1.Id', 'HAVING', 'count', '(', '*', ')', '>', '3', ';']","['select', 't1', '.', 'id', ',', 't1', '.', 'maker', 'from', 'car_makers', 'as', 't1', 'join', 'model_list', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'maker', 'group', 'by', 't1', '.', 'id', 'having', 'count', '(', '*', ')', '>', '=', 'value', 'intersect', 'select', 't1', '.', 'id', ',', 't1', '.', 'maker', 'from', 'car_makers', 'as', 't1', 'join', 'model_list', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'maker', 'join', 'car_names', 'as', 't3', 'on', 't2', '.', 'model', '=', 't3', '.', 'model', 'group', 'by', 't1', '.', 'id', 'having', 'count', '(', '*', ')', '>', 'value']",What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?,"['What', 'are', 'the', 'ids', 'and', 'makers', 'of', 'all', 'car', 'makers', 'that', 'produce', 'at', 'least', '2', 'models', 'and', 'make', 'more', 'than', '3', 'cars', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None]]}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 2], ['table_unit', 3], ['table_unit', 4]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 11, False], None], 'and', [False, 2, [0, [0, 12, False], None], [0, 14, False], None]]}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [[False, 3, [0, [3, 0, False], None], 3.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
car_1,"SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';","['SELECT', 'T1.countryId', ',', 'T1.CountryName', 'FROM', 'Countries', 'AS', 'T1', 'JOIN', 'CAR_MAKERS', 'AS', 'T2', 'ON', 'T1.CountryId', '=', 'T2.Country', 'GROUP', 'BY', 'T1.countryId', 'HAVING', 'count', '(', '*', ')', '>', '3', 'UNION', 'SELECT', 'T1.countryId', ',', 'T1.CountryName', 'FROM', 'Countries', 'AS', 'T1', 'JOIN', 'CAR_MAKERS', 'AS', 'T2', 'ON', 'T1.CountryId', '=', 'T2.Country', 'JOIN', 'MODEL_LIST', 'AS', 'T3', 'ON', 'T2.Id', '=', 'T3.Maker', 'WHERE', 'T3.Model', '=', ""'fiat"", ""'"", ';']","['select', 't1', '.', 'countryid', ',', 't1', '.', 'countryname', 'from', 'countries', 'as', 't1', 'join', 'car_makers', 'as', 't2', 'on', 't1', '.', 'countryid', '=', 't2', '.', 'country', 'group', 'by', 't1', '.', 'countryid', 'having', 'count', '(', '*', ')', '>', 'value', 'union', 'select', 't1', '.', 'countryid', ',', 't1', '.', 'countryname', 'from', 'countries', 'as', 't1', 'join', 'car_makers', 'as', 't2', 'on', 't1', '.', 'countryid', '=', 't2', '.', 'country', 'join', 'model_list', 'as', 't3', 'on', 't2', '.', 'id', '=', 't3', '.', 'maker', 'where', 't3', '.', 'model', '=', 'value']",What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?,"['What', 'are', 'the', 'id', 'and', 'names', 'of', 'the', 'countries', 'which', 'have', 'more', 'than', '3', 'car', 'makers', 'or', 'produce', 'the', ""'fiat"", ""'"", 'model', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [[0, 3, False]], 'having': [[False, 3, [0, [3, 0, False], None], 3.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': {'from': {'table_units': [['table_unit', 1], ['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None], 'and', [False, 2, [0, [0, 6, False], None], [0, 11, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""fiat""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'except': None}"
car_1,"select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';","['select', 't1.countryid', ',', 't1.countryname', 'from', 'countries', 'as', 't1', 'join', 'car_makers', 'as', 't2', 'on', 't1.countryid', '=', 't2.country', 'group', 'by', 't1.countryid', 'having', 'count', '(', '*', ')', '>', '3', 'union', 'select', 't1.countryid', ',', 't1.countryname', 'from', 'countries', 'as', 't1', 'join', 'car_makers', 'as', 't2', 'on', 't1.countryid', '=', 't2.country', 'join', 'model_list', 'as', 't3', 'on', 't2.id', '=', 't3.maker', 'where', 't3.model', '=', '""fiat""', ';']","['select', 't1', '.', 'countryid', ',', 't1', '.', 'countryname', 'from', 'countries', 'as', 't1', 'join', 'car_makers', 'as', 't2', 'on', 't1', '.', 'countryid', '=', 't2', '.', 'country', 'group', 'by', 't1', '.', 'countryid', 'having', 'count', '(', '*', ')', '>', 'value', 'union', 'select', 't1', '.', 'countryid', ',', 't1', '.', 'countryname', 'from', 'countries', 'as', 't1', 'join', 'car_makers', 'as', 't2', 'on', 't1', '.', 'countryid', '=', 't2', '.', 'country', 'join', 'model_list', 'as', 't3', 'on', 't2', '.', 'id', '=', 't3', '.', 'maker', 'where', 't3', '.', 'model', '=', 'value']",What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?,"['What', 'are', 'the', 'ids', 'and', 'names', 'of', 'all', 'countries', 'that', 'either', 'have', 'more', 'than', '3', 'car', 'makers', 'or', 'produce', 'fiat', 'model', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [[0, 3, False]], 'having': [[False, 3, [0, [3, 0, False], None], 3.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': {'from': {'table_units': [['table_unit', 1], ['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 9, False], None], 'and', [False, 2, [0, [0, 6, False], None], [0, 11, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""fiat""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'except': None}"
flight_2,"SELECT Country FROM AIRLINES WHERE Airline  =  ""JetBlue Airways""","['SELECT', 'Country', 'FROM', 'AIRLINES', 'WHERE', 'Airline', '=', '``', 'JetBlue', 'Airways', ""''""]","['select', 'country', 'from', 'airlines', 'where', 'airline', '=', 'value']","Which country does Airline ""JetBlue Airways"" belong to?","['Which', 'country', 'does', 'Airline', '``', 'JetBlue', 'Airways', ""''"", 'belong', 'to', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""JetBlue Airways""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT Country FROM AIRLINES WHERE Airline  =  ""JetBlue Airways""","['SELECT', 'Country', 'FROM', 'AIRLINES', 'WHERE', 'Airline', '=', '``', 'JetBlue', 'Airways', ""''""]","['select', 'country', 'from', 'airlines', 'where', 'airline', '=', 'value']",What country is Jetblue Airways affiliated with?,"['What', 'country', 'is', 'Jetblue', 'Airways', 'affiliated', 'with', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""JetBlue Airways""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  ""JetBlue Airways""","['SELECT', 'Abbreviation', 'FROM', 'AIRLINES', 'WHERE', 'Airline', '=', '``', 'JetBlue', 'Airways', ""''""]","['select', 'abbreviation', 'from', 'airlines', 'where', 'airline', '=', 'value']","What is the abbreviation of Airline ""JetBlue Airways""?","['What', 'is', 'the', 'abbreviation', 'of', 'Airline', '``', 'JetBlue', 'Airways', ""''"", '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""JetBlue Airways""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  ""JetBlue Airways""","['SELECT', 'Abbreviation', 'FROM', 'AIRLINES', 'WHERE', 'Airline', '=', '``', 'JetBlue', 'Airways', ""''""]","['select', 'abbreviation', 'from', 'airlines', 'where', 'airline', '=', 'value']",Which abbreviation corresponds to Jetblue Airways?,"['Which', 'abbreviation', 'corresponds', 'to', 'Jetblue', 'Airways', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""JetBlue Airways""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  ""USA""","['SELECT', 'Airline', ',', 'Abbreviation', 'FROM', 'AIRLINES', 'WHERE', 'Country', '=', '``', 'USA', ""''""]","['select', 'airline', ',', 'abbreviation', 'from', 'airlines', 'where', 'country', '=', 'value']","List all airline names and their abbreviations in ""USA"".","['List', 'all', 'airline', 'names', 'and', 'their', 'abbreviations', 'in', '``', 'USA', ""''"", '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 4, False], None], '""USA""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  ""USA""","['SELECT', 'Airline', ',', 'Abbreviation', 'FROM', 'AIRLINES', 'WHERE', 'Country', '=', '``', 'USA', ""''""]","['select', 'airline', ',', 'abbreviation', 'from', 'airlines', 'where', 'country', '=', 'value']",What are the airline names and abbreviations for airlines in the USA?,"['What', 'are', 'the', 'airline', 'names', 'and', 'abbreviations', 'for', 'airlines', 'in', 'the', 'USA', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 4, False], None], '""USA""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  ""Anthony""","['SELECT', 'AirportCode', ',', 'AirportName', 'FROM', 'AIRPORTS', 'WHERE', 'city', '=', '``', 'Anthony', ""''""]","['select', 'airportcode', ',', 'airportname', 'from', 'airports', 'where', 'city', '=', 'value']",List the airport code and name in the city of Anthony.,"['List', 'the', 'airport', 'code', 'and', 'name', 'in', 'the', 'city', 'of', 'Anthony', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""Anthony""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  ""Anthony""","['SELECT', 'AirportCode', ',', 'AirportName', 'FROM', 'AIRPORTS', 'WHERE', 'city', '=', '``', 'Anthony', ""''""]","['select', 'airportcode', ',', 'airportname', 'from', 'airports', 'where', 'city', '=', 'value']",Give the airport code and airport name corresonding to the city Anthony.,"['Give', 'the', 'airport', 'code', 'and', 'airport', 'name', 'corresonding', 'to', 'the', 'city', 'Anthony', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""Anthony""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT count(*) FROM AIRLINES,"['SELECT', 'count', '(', '*', ')', 'FROM', 'AIRLINES']","['select', 'count', '(', '*', ')', 'from', 'airlines']",How many airlines do we have?,"['How', 'many', 'airlines', 'do', 'we', 'have', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT count(*) FROM AIRLINES,"['SELECT', 'count', '(', '*', ')', 'FROM', 'AIRLINES']","['select', 'count', '(', '*', ')', 'from', 'airlines']",What is the total number of airlines?,"['What', 'is', 'the', 'total', 'number', 'of', 'airlines', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT count(*) FROM AIRPORTS,"['SELECT', 'count', '(', '*', ')', 'FROM', 'AIRPORTS']","['select', 'count', '(', '*', ')', 'from', 'airports']",How many airports do we have?,"['How', 'many', 'airports', 'do', 'we', 'have', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT count(*) FROM AIRPORTS,"['SELECT', 'count', '(', '*', ')', 'FROM', 'AIRPORTS']","['select', 'count', '(', '*', ')', 'from', 'airports']",Return the number of  airports.,"['Return', 'the', 'number', 'of', 'airports', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT count(*) FROM FLIGHTS,"['SELECT', 'count', '(', '*', ')', 'FROM', 'FLIGHTS']","['select', 'count', '(', '*', ')', 'from', 'flights']",How many flights do we have?,"['How', 'many', 'flights', 'do', 'we', 'have', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT count(*) FROM FLIGHTS,"['SELECT', 'count', '(', '*', ')', 'FROM', 'FLIGHTS']","['select', 'count', '(', '*', ')', 'from', 'flights']",Return the number of flights.,"['Return', 'the', 'number', 'of', 'flights', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT Airline FROM AIRLINES WHERE Abbreviation  =  ""UAL""","['SELECT', 'Airline', 'FROM', 'AIRLINES', 'WHERE', 'Abbreviation', '=', '``', 'UAL', ""''""]","['select', 'airline', 'from', 'airlines', 'where', 'abbreviation', '=', 'value']",Which airline has abbreviation 'UAL'?,"['Which', 'airline', 'has', 'abbreviation', ""'UAL"", ""'"", '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 3, False], None], '""UAL""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT Airline FROM AIRLINES WHERE Abbreviation  =  ""UAL""","['SELECT', 'Airline', 'FROM', 'AIRLINES', 'WHERE', 'Abbreviation', '=', '``', 'UAL', ""''""]","['select', 'airline', 'from', 'airlines', 'where', 'abbreviation', '=', 'value']",Give the airline with abbreviation 'UAL'.,"['Give', 'the', 'airline', 'with', 'abbreviation', ""'UAL"", ""'"", '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 3, False], None], '""UAL""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM AIRLINES WHERE Country  =  ""USA""","['SELECT', 'count', '(', '*', ')', 'FROM', 'AIRLINES', 'WHERE', 'Country', '=', '``', 'USA', ""''""]","['select', 'count', '(', '*', ')', 'from', 'airlines', 'where', 'country', '=', 'value']",How many airlines are from USA?,"['How', 'many', 'airlines', 'are', 'from', 'USA', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 4, False], None], '""USA""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM AIRLINES WHERE Country  =  ""USA""","['SELECT', 'count', '(', '*', ')', 'FROM', 'AIRLINES', 'WHERE', 'Country', '=', '``', 'USA', ""''""]","['select', 'count', '(', '*', ')', 'from', 'airlines', 'where', 'country', '=', 'value']",Return the number of airlines in the USA.,"['Return', 'the', 'number', 'of', 'airlines', 'in', 'the', 'USA', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 4, False], None], '""USA""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  ""Alton""","['SELECT', 'City', ',', 'Country', 'FROM', 'AIRPORTS', 'WHERE', 'AirportName', '=', '``', 'Alton', ""''""]","['select', 'city', ',', 'country', 'from', 'airports', 'where', 'airportname', '=', 'value']",Which city and country is the Alton airport at?,"['Which', 'city', 'and', 'country', 'is', 'the', 'Alton', 'airport', 'at', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 8, False], None]]]], 'where': [[False, 2, [0, [0, 7, False], None], '""Alton""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  ""Alton""","['SELECT', 'City', ',', 'Country', 'FROM', 'AIRPORTS', 'WHERE', 'AirportName', '=', '``', 'Alton', ""''""]","['select', 'city', ',', 'country', 'from', 'airports', 'where', 'airportname', '=', 'value']",Give the city and country for the Alton airport.,"['Give', 'the', 'city', 'and', 'country', 'for', 'the', 'Alton', 'airport', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 8, False], None]]]], 'where': [[False, 2, [0, [0, 7, False], None], '""Alton""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  ""AKO""","['SELECT', 'AirportName', 'FROM', 'AIRPORTS', 'WHERE', 'AirportCode', '=', '``', 'AKO', ""''""]","['select', 'airportname', 'from', 'airports', 'where', 'airportcode', '=', 'value']",What is the airport name for airport 'AKO'?,"['What', 'is', 'the', 'airport', 'name', 'for', 'airport', ""'AKO"", ""'"", '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 7, False], None]]]], 'where': [[False, 2, [0, [0, 6, False], None], '""AKO""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  ""AKO""","['SELECT', 'AirportName', 'FROM', 'AIRPORTS', 'WHERE', 'AirportCode', '=', '``', 'AKO', ""''""]","['select', 'airportname', 'from', 'airports', 'where', 'airportcode', '=', 'value']",Return the name of the airport with code 'AKO'.,"['Return', 'the', 'name', 'of', 'the', 'airport', 'with', 'code', ""'AKO"", ""'"", '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 7, False], None]]]], 'where': [[False, 2, [0, [0, 6, False], None], '""AKO""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT AirportName FROM AIRPORTS WHERE City = ""Aberdeen""","['SELECT', 'AirportName', 'FROM', 'AIRPORTS', 'WHERE', 'City', '=', '``', 'Aberdeen', ""''""]","['select', 'airportname', 'from', 'airports', 'where', 'city', '=', 'value']",What are airport names at City 'Aberdeen'?,"['What', 'are', 'airport', 'names', 'at', 'City', ""'Aberdeen"", ""'"", '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 7, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""Aberdeen""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT AirportName FROM AIRPORTS WHERE City = ""Aberdeen""","['SELECT', 'AirportName', 'FROM', 'AIRPORTS', 'WHERE', 'City', '=', '``', 'Aberdeen', ""''""]","['select', 'airportname', 'from', 'airports', 'where', 'city', '=', 'value']",What are the names of airports in Aberdeen?,"['What', 'are', 'the', 'names', 'of', 'airports', 'in', 'Aberdeen', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 7, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""Aberdeen""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  ""APG""","['SELECT', 'count', '(', '*', ')', 'FROM', 'FLIGHTS', 'WHERE', 'SourceAirport', '=', '``', 'APG', ""''""]","['select', 'count', '(', '*', ')', 'from', 'flights', 'where', 'sourceairport', '=', 'value']",How many flights depart from 'APG'?,"['How', 'many', 'flights', 'depart', 'from', ""'APG"", ""'"", '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""APG""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  ""APG""","['SELECT', 'count', '(', '*', ')', 'FROM', 'FLIGHTS', 'WHERE', 'SourceAirport', '=', '``', 'APG', ""''""]","['select', 'count', '(', '*', ')', 'from', 'flights', 'where', 'sourceairport', '=', 'value']",Count the number of flights departing from 'APG'.,"['Count', 'the', 'number', 'of', 'flights', 'departing', 'from', ""'APG"", ""'"", '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""APG""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  ""ATO""","['SELECT', 'count', '(', '*', ')', 'FROM', 'FLIGHTS', 'WHERE', 'DestAirport', '=', '``', 'ATO', ""''""]","['select', 'count', '(', '*', ')', 'from', 'flights', 'where', 'destairport', '=', 'value']",How many flights have destination ATO?,"['How', 'many', 'flights', 'have', 'destination', 'ATO', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 13, False], None], '""ATO""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  ""ATO""","['SELECT', 'count', '(', '*', ')', 'FROM', 'FLIGHTS', 'WHERE', 'DestAirport', '=', '``', 'ATO', ""''""]","['select', 'count', '(', '*', ')', 'from', 'flights', 'where', 'destairport', '=', 'value']",Count the number of flights into ATO.,"['Count', 'the', 'number', 'of', 'flights', 'into', 'ATO', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 13, False], None], '""ATO""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","['SELECT', 'count', '(', '*', ')', 'FROM', 'FLIGHTS', 'AS', 'T1', 'JOIN', 'AIRPORTS', 'AS', 'T2', 'ON', 'T1.SourceAirport', '=', 'T2.AirportCode', 'WHERE', 'T2.City', '=', '``', 'Aberdeen', ""''""]","['select', 'count', '(', '*', ')', 'from', 'flights', 'as', 't1', 'join', 'airports', 'as', 't2', 'on', 't1', '.', 'sourceairport', '=', 't2', '.', 'airportcode', 'where', 't2', '.', 'city', '=', 'value']",How many flights depart from City Aberdeen?,"['How', 'many', 'flights', 'depart', 'from', 'City', 'Aberdeen', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 12, False], None], [0, 6, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""Aberdeen""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","['SELECT', 'count', '(', '*', ')', 'FROM', 'FLIGHTS', 'AS', 'T1', 'JOIN', 'AIRPORTS', 'AS', 'T2', 'ON', 'T1.SourceAirport', '=', 'T2.AirportCode', 'WHERE', 'T2.City', '=', '``', 'Aberdeen', ""''""]","['select', 'count', '(', '*', ')', 'from', 'flights', 'as', 't1', 'join', 'airports', 'as', 't2', 'on', 't1', '.', 'sourceairport', '=', 't2', '.', 'airportcode', 'where', 't2', '.', 'city', '=', 'value']",Return the number of flights departing from Aberdeen.,"['Return', 'the', 'number', 'of', 'flights', 'departing', 'from', 'Aberdeen', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 12, False], None], [0, 6, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""Aberdeen""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","['SELECT', 'count', '(', '*', ')', 'FROM', 'FLIGHTS', 'AS', 'T1', 'JOIN', 'AIRPORTS', 'AS', 'T2', 'ON', 'T1.DestAirport', '=', 'T2.AirportCode', 'WHERE', 'T2.City', '=', '``', 'Aberdeen', ""''""]","['select', 'count', '(', '*', ')', 'from', 'flights', 'as', 't1', 'join', 'airports', 'as', 't2', 'on', 't1', '.', 'destairport', '=', 't2', '.', 'airportcode', 'where', 't2', '.', 'city', '=', 'value']",How many flights arriving in Aberdeen city?,"['How', 'many', 'flights', 'arriving', 'in', 'Aberdeen', 'city', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""Aberdeen""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","['SELECT', 'count', '(', '*', ')', 'FROM', 'FLIGHTS', 'AS', 'T1', 'JOIN', 'AIRPORTS', 'AS', 'T2', 'ON', 'T1.DestAirport', '=', 'T2.AirportCode', 'WHERE', 'T2.City', '=', '``', 'Aberdeen', ""''""]","['select', 'count', '(', '*', ')', 'from', 'flights', 'as', 't1', 'join', 'airports', 'as', 't2', 'on', 't1', '.', 'destairport', '=', 't2', '.', 'airportcode', 'where', 't2', '.', 'city', '=', 'value']",Return the number of flights arriving in Aberdeen.,"['Return', 'the', 'number', 'of', 'flights', 'arriving', 'in', 'Aberdeen', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""Aberdeen""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  ""Ashley"" AND T3.City  =  ""Aberdeen""","['SELECT', 'count', '(', '*', ')', 'FROM', 'FLIGHTS', 'AS', 'T1', 'JOIN', 'AIRPORTS', 'AS', 'T2', 'ON', 'T1.DestAirport', '=', 'T2.AirportCode', 'JOIN', 'AIRPORTS', 'AS', 'T3', 'ON', 'T1.SourceAirport', '=', 'T3.AirportCode', 'WHERE', 'T2.City', '=', '``', 'Ashley', ""''"", 'AND', 'T3.City', '=', '``', 'Aberdeen', ""''""]","['select', 'count', '(', '*', ')', 'from', 'flights', 'as', 't1', 'join', 'airports', 'as', 't2', 'on', 't1', '.', 'destairport', '=', 't2', '.', 'airportcode', 'join', 'airports', 'as', 't3', 'on', 't1', '.', 'sourceairport', '=', 't3', '.', 'airportcode', 'where', 't2', '.', 'city', '=', 'value', 'and', 't3', '.', 'city', '=', 'value']",How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?,"['How', 'many', 'flights', 'depart', 'from', 'City', ""'Aberdeen"", ""'"", 'and', 'have', 'destination', 'City', ""'Ashley"", ""'"", '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None], 'and', [False, 2, [0, [0, 12, False], None], [0, 6, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""Ashley""', None], 'and', [False, 2, [0, [0, 5, False], None], '""Aberdeen""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  ""Ashley"" AND T3.City  =  ""Aberdeen""","['SELECT', 'count', '(', '*', ')', 'FROM', 'FLIGHTS', 'AS', 'T1', 'JOIN', 'AIRPORTS', 'AS', 'T2', 'ON', 'T1.DestAirport', '=', 'T2.AirportCode', 'JOIN', 'AIRPORTS', 'AS', 'T3', 'ON', 'T1.SourceAirport', '=', 'T3.AirportCode', 'WHERE', 'T2.City', '=', '``', 'Ashley', ""''"", 'AND', 'T3.City', '=', '``', 'Aberdeen', ""''""]","['select', 'count', '(', '*', ')', 'from', 'flights', 'as', 't1', 'join', 'airports', 'as', 't2', 'on', 't1', '.', 'destairport', '=', 't2', '.', 'airportcode', 'join', 'airports', 'as', 't3', 'on', 't1', '.', 'sourceairport', '=', 't3', '.', 'airportcode', 'where', 't2', '.', 'city', '=', 'value', 'and', 't3', '.', 'city', '=', 'value']",How many flights fly from Aberdeen to Ashley?,"['How', 'many', 'flights', 'fly', 'from', 'Aberdeen', 'to', 'Ashley', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None], 'and', [False, 2, [0, [0, 12, False], None], [0, 6, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""Ashley""', None], 'and', [False, 2, [0, [0, 5, False], None], '""Aberdeen""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = ""JetBlue Airways""","['SELECT', 'count', '(', '*', ')', 'FROM', 'FLIGHTS', 'AS', 'T1', 'JOIN', 'AIRLINES', 'AS', 'T2', 'ON', 'T1.Airline', '=', 'T2.uid', 'WHERE', 'T2.Airline', '=', '``', 'JetBlue', 'Airways', ""''""]","['select', 'count', '(', '*', ')', 'from', 'flights', 'as', 't1', 'join', 'airlines', 'as', 't2', 'on', 't1', '.', 'airline', '=', 't2', '.', 'uid', 'where', 't2', '.', 'airline', '=', 'value']",How many flights does airline 'JetBlue Airways' have?,"['How', 'many', 'flights', 'does', 'airline', ""'JetBlue"", 'Airways', ""'"", 'have', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 1, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""JetBlue Airways""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = ""JetBlue Airways""","['SELECT', 'count', '(', '*', ')', 'FROM', 'FLIGHTS', 'AS', 'T1', 'JOIN', 'AIRLINES', 'AS', 'T2', 'ON', 'T1.Airline', '=', 'T2.uid', 'WHERE', 'T2.Airline', '=', '``', 'JetBlue', 'Airways', ""''""]","['select', 'count', '(', '*', ')', 'from', 'flights', 'as', 't1', 'join', 'airlines', 'as', 't2', 'on', 't1', '.', 'airline', '=', 't2', '.', 'uid', 'where', 't2', '.', 'airline', '=', 'value']",Give the number of Jetblue Airways flights.,"['Give', 'the', 'number', 'of', 'Jetblue', 'Airways', 'flights', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 1, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""JetBlue Airways""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  ""United Airlines"" AND T2.DestAirport  =  ""ASY""","['SELECT', 'count', '(', '*', ')', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T2.Airline', '=', 'T1.uid', 'WHERE', 'T1.Airline', '=', '``', 'United', 'Airlines', ""''"", 'AND', 'T2.DestAirport', '=', '``', 'ASY', ""''""]","['select', 'count', '(', '*', ')', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't2', '.', 'airline', '=', 't1', '.', 'uid', 'where', 't1', '.', 'airline', '=', 'value', 'and', 't2', '.', 'destairport', '=', 'value']",How many 'United Airlines' flights go to Airport 'ASY'?,"['How', 'many', ""'United"", 'Airlines', ""'"", 'flights', 'go', 'to', 'Airport', ""'ASY"", ""'"", '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 1, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""United Airlines""', None], 'and', [False, 2, [0, [0, 13, False], None], '""ASY""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  ""United Airlines"" AND T2.DestAirport  =  ""ASY""","['SELECT', 'count', '(', '*', ')', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T2.Airline', '=', 'T1.uid', 'WHERE', 'T1.Airline', '=', '``', 'United', 'Airlines', ""''"", 'AND', 'T2.DestAirport', '=', '``', 'ASY', ""''""]","['select', 'count', '(', '*', ')', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't2', '.', 'airline', '=', 't1', '.', 'uid', 'where', 't1', '.', 'airline', '=', 'value', 'and', 't2', '.', 'destairport', '=', 'value']",Count the number of United Airlines flights arriving in ASY Airport.,"['Count', 'the', 'number', 'of', 'United', 'Airlines', 'flights', 'arriving', 'in', 'ASY', 'Airport', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 1, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""United Airlines""', None], 'and', [False, 2, [0, [0, 13, False], None], '""ASY""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  ""United Airlines"" AND T2.SourceAirport  =  ""AHD""","['SELECT', 'count', '(', '*', ')', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T2.Airline', '=', 'T1.uid', 'WHERE', 'T1.Airline', '=', '``', 'United', 'Airlines', ""''"", 'AND', 'T2.SourceAirport', '=', '``', 'AHD', ""''""]","['select', 'count', '(', '*', ')', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't2', '.', 'airline', '=', 't1', '.', 'uid', 'where', 't1', '.', 'airline', '=', 'value', 'and', 't2', '.', 'sourceairport', '=', 'value']",How many 'United Airlines' flights depart from Airport 'AHD'?,"['How', 'many', ""'United"", 'Airlines', ""'"", 'flights', 'depart', 'from', 'Airport', ""'AHD"", ""'"", '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 1, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""United Airlines""', None], 'and', [False, 2, [0, [0, 12, False], None], '""AHD""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  ""United Airlines"" AND T2.SourceAirport  =  ""AHD""","['SELECT', 'count', '(', '*', ')', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T2.Airline', '=', 'T1.uid', 'WHERE', 'T1.Airline', '=', '``', 'United', 'Airlines', ""''"", 'AND', 'T2.SourceAirport', '=', '``', 'AHD', ""''""]","['select', 'count', '(', '*', ')', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't2', '.', 'airline', '=', 't1', '.', 'uid', 'where', 't1', '.', 'airline', '=', 'value', 'and', 't2', '.', 'sourceairport', '=', 'value']",Return the number of United Airlines flights leaving from AHD Airport.,"['Return', 'the', 'number', 'of', 'United', 'Airlines', 'flights', 'leaving', 'from', 'AHD', 'Airport', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 1, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""United Airlines""', None], 'and', [False, 2, [0, [0, 12, False], None], '""AHD""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  ""Aberdeen"" AND T3.Airline  =  ""United Airlines""","['SELECT', 'count', '(', '*', ')', 'FROM', 'FLIGHTS', 'AS', 'T1', 'JOIN', 'AIRPORTS', 'AS', 'T2', 'ON', 'T1.DestAirport', '=', 'T2.AirportCode', 'JOIN', 'AIRLINES', 'AS', 'T3', 'ON', 'T3.uid', '=', 'T1.Airline', 'WHERE', 'T2.City', '=', '``', 'Aberdeen', ""''"", 'AND', 'T3.Airline', '=', '``', 'United', 'Airlines', ""''""]","['select', 'count', '(', '*', ')', 'from', 'flights', 'as', 't1', 'join', 'airports', 'as', 't2', 'on', 't1', '.', 'destairport', '=', 't2', '.', 'airportcode', 'join', 'airlines', 'as', 't3', 'on', 't3', '.', 'uid', '=', 't1', '.', 'airline', 'where', 't2', '.', 'city', '=', 'value', 'and', 't3', '.', 'airline', '=', 'value']",How many United Airlines flights go to City 'Aberdeen'?,"['How', 'many', 'United', 'Airlines', 'flights', 'go', 'to', 'City', ""'Aberdeen"", ""'"", '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None], 'and', [False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""Aberdeen""', None], 'and', [False, 2, [0, [0, 2, False], None], '""United Airlines""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  ""Aberdeen"" AND T3.Airline  =  ""United Airlines""","['SELECT', 'count', '(', '*', ')', 'FROM', 'FLIGHTS', 'AS', 'T1', 'JOIN', 'AIRPORTS', 'AS', 'T2', 'ON', 'T1.DestAirport', '=', 'T2.AirportCode', 'JOIN', 'AIRLINES', 'AS', 'T3', 'ON', 'T3.uid', '=', 'T1.Airline', 'WHERE', 'T2.City', '=', '``', 'Aberdeen', ""''"", 'AND', 'T3.Airline', '=', '``', 'United', 'Airlines', ""''""]","['select', 'count', '(', '*', ')', 'from', 'flights', 'as', 't1', 'join', 'airports', 'as', 't2', 'on', 't1', '.', 'destairport', '=', 't2', '.', 'airportcode', 'join', 'airlines', 'as', 't3', 'on', 't3', '.', 'uid', '=', 't1', '.', 'airline', 'where', 't2', '.', 'city', '=', 'value', 'and', 't3', '.', 'airline', '=', 'value']",Count the number of United Airlines flights that arrive in Aberdeen.,"['Count', 'the', 'number', 'of', 'United', 'Airlines', 'flights', 'that', 'arrive', 'in', 'Aberdeen', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None], 'and', [False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""Aberdeen""', None], 'and', [False, 2, [0, [0, 2, False], None], '""United Airlines""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T1.City', 'FROM', 'AIRPORTS', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.AirportCode', '=', 'T2.DestAirport', 'GROUP', 'BY', 'T1.City', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'city', 'from', 'airports', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'airportcode', '=', 't2', '.', 'destairport', 'group', 'by', 't1', '.', 'city', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which city has most number of arriving flights?,"['Which', 'city', 'has', 'most', 'number', 'of', 'arriving', 'flights', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T1.City', 'FROM', 'AIRPORTS', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.AirportCode', '=', 'T2.DestAirport', 'GROUP', 'BY', 'T1.City', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'city', 'from', 'airports', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'airportcode', '=', 't2', '.', 'destairport', 'group', 'by', 't1', '.', 'city', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which city has the most frequent destination airport?,"['Which', 'city', 'has', 'the', 'most', 'frequent', 'destination', 'airport', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T1.City', 'FROM', 'AIRPORTS', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.AirportCode', '=', 'T2.SourceAirport', 'GROUP', 'BY', 'T1.City', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'city', 'from', 'airports', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'airportcode', '=', 't2', '.', 'sourceairport', 'group', 'by', 't1', '.', 'city', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which city has most number of departing flights?,"['Which', 'city', 'has', 'most', 'number', 'of', 'departing', 'flights', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 12, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T1.City', 'FROM', 'AIRPORTS', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.AirportCode', '=', 'T2.SourceAirport', 'GROUP', 'BY', 'T1.City', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'city', 'from', 'airports', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'airportcode', '=', 't2', '.', 'sourceairport', 'group', 'by', 't1', '.', 'city', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which city is the most frequent source airport?,"['Which', 'city', 'is', 'the', 'most', 'frequent', 'source', 'airport', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 12, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T1.AirportCode', 'FROM', 'AIRPORTS', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.AirportCode', '=', 'T2.DestAirport', 'OR', 'T1.AirportCode', '=', 'T2.SourceAirport', 'GROUP', 'BY', 'T1.AirportCode', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'airportcode', 'from', 'airports', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'airportcode', '=', 't2', '.', 'destairport', 'or', 't1', '.', 'airportcode', '=', 't2', '.', 'sourceairport', 'group', 'by', 't1', '.', 'airportcode', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the code of airport that has the highest number of flights?,"['What', 'is', 'the', 'code', 'of', 'airport', 'that', 'has', 'the', 'highest', 'number', 'of', 'flights', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]]}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T1.AirportCode', 'FROM', 'AIRPORTS', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.AirportCode', '=', 'T2.DestAirport', 'OR', 'T1.AirportCode', '=', 'T2.SourceAirport', 'GROUP', 'BY', 'T1.AirportCode', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'airportcode', 'from', 'airports', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'airportcode', '=', 't2', '.', 'destairport', 'or', 't1', '.', 'airportcode', '=', 't2', '.', 'sourceairport', 'group', 'by', 't1', '.', 'airportcode', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the airport code of the airport with the most flights?,"['What', 'is', 'the', 'airport', 'code', 'of', 'the', 'airport', 'with', 'the', 'most', 'flights', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]]}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1,"['SELECT', 'T1.AirportCode', 'FROM', 'AIRPORTS', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.AirportCode', '=', 'T2.DestAirport', 'OR', 'T1.AirportCode', '=', 'T2.SourceAirport', 'GROUP', 'BY', 'T1.AirportCode', 'ORDER', 'BY', 'count', '(', '*', ')', 'LIMIT', '1']","['select', 't1', '.', 'airportcode', 'from', 'airports', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'airportcode', '=', 't2', '.', 'destairport', 'or', 't1', '.', 'airportcode', '=', 't2', '.', 'sourceairport', 'group', 'by', 't1', '.', 'airportcode', 'order', 'by', 'count', '(', '*', ')', 'limit', 'value']",What is the code of airport that has fewest number of flights?,"['What', 'is', 'the', 'code', 'of', 'airport', 'that', 'has', 'fewest', 'number', 'of', 'flights', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]]}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [], 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1,"['SELECT', 'T1.AirportCode', 'FROM', 'AIRPORTS', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.AirportCode', '=', 'T2.DestAirport', 'OR', 'T1.AirportCode', '=', 'T2.SourceAirport', 'GROUP', 'BY', 'T1.AirportCode', 'ORDER', 'BY', 'count', '(', '*', ')', 'LIMIT', '1']","['select', 't1', '.', 'airportcode', 'from', 'airports', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'airportcode', '=', 't2', '.', 'destairport', 'or', 't1', '.', 'airportcode', '=', 't2', '.', 'sourceairport', 'group', 'by', 't1', '.', 'airportcode', 'order', 'by', 'count', '(', '*', ')', 'limit', 'value']",Give the code of the airport with the least flights.,"['Give', 'the', 'code', 'of', 'the', 'airport', 'with', 'the', 'least', 'flights', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]]}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [], 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T1.Airline', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.uid', '=', 'T2.Airline', 'GROUP', 'BY', 'T1.Airline', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'airline', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'uid', '=', 't2', '.', 'airline', 'group', 'by', 't1', '.', 'airline', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which airline has most number of flights?,"['Which', 'airline', 'has', 'most', 'number', 'of', 'flights', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 2, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T1.Airline', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.uid', '=', 'T2.Airline', 'GROUP', 'BY', 'T1.Airline', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'airline', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'uid', '=', 't2', '.', 'airline', 'group', 'by', 't1', '.', 'airline', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What airline serves the most flights?,"['What', 'airline', 'serves', 'the', 'most', 'flights', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 2, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1","['SELECT', 'T1.Abbreviation', ',', 'T1.Country', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.uid', '=', 'T2.Airline', 'GROUP', 'BY', 'T1.Airline', 'ORDER', 'BY', 'count', '(', '*', ')', 'LIMIT', '1']","['select', 't1', '.', 'abbreviation', ',', 't1', '.', 'country', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'uid', '=', 't2', '.', 'airline', 'group', 'by', 't1', '.', 'airline', 'order', 'by', 'count', '(', '*', ')', 'limit', 'value']",Find the abbreviation and country of the airline that has fewest number of flights?,"['Find', 'the', 'abbreviation', 'and', 'country', 'of', 'the', 'airline', 'that', 'has', 'fewest', 'number', 'of', 'flights', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [[0, 2, False]], 'having': [], 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1","['SELECT', 'T1.Abbreviation', ',', 'T1.Country', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.uid', '=', 'T2.Airline', 'GROUP', 'BY', 'T1.Airline', 'ORDER', 'BY', 'count', '(', '*', ')', 'LIMIT', '1']","['select', 't1', '.', 'abbreviation', ',', 't1', '.', 'country', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'uid', '=', 't2', '.', 'airline', 'group', 'by', 't1', '.', 'airline', 'order', 'by', 'count', '(', '*', ')', 'limit', 'value']",What is the abbreviation of the airilne has the fewest flights and what country is it in?,"['What', 'is', 'the', 'abbreviation', 'of', 'the', 'airilne', 'has', 'the', 'fewest', 'flights', 'and', 'what', 'country', 'is', 'it', 'in', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [[0, 2, False]], 'having': [], 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""AHD""","['SELECT', 'T1.Airline', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.uid', '=', 'T2.Airline', 'WHERE', 'T2.SourceAirport', '=', '``', 'AHD', ""''""]","['select', 't1', '.', 'airline', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'uid', '=', 't2', '.', 'airline', 'where', 't2', '.', 'sourceairport', '=', 'value']",What are airlines that have some flight departing from airport 'AHD'?,"['What', 'are', 'airlines', 'that', 'have', 'some', 'flight', 'departing', 'from', 'airport', ""'AHD"", ""'"", '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""AHD""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""AHD""","['SELECT', 'T1.Airline', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.uid', '=', 'T2.Airline', 'WHERE', 'T2.SourceAirport', '=', '``', 'AHD', ""''""]","['select', 't1', '.', 'airline', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'uid', '=', 't2', '.', 'airline', 'where', 't2', '.', 'sourceairport', '=', 'value']",Which airlines have a flight with source airport AHD?,"['Which', 'airlines', 'have', 'a', 'flight', 'with', 'source', 'airport', 'AHD', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""AHD""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  ""AHD""","['SELECT', 'T1.Airline', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.uid', '=', 'T2.Airline', 'WHERE', 'T2.DestAirport', '=', '``', 'AHD', ""''""]","['select', 't1', '.', 'airline', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'uid', '=', 't2', '.', 'airline', 'where', 't2', '.', 'destairport', '=', 'value']",What are airlines that have flights arriving at airport 'AHD'?,"['What', 'are', 'airlines', 'that', 'have', 'flights', 'arriving', 'at', 'airport', ""'AHD"", ""'"", '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 13, False], None], '""AHD""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  ""AHD""","['SELECT', 'T1.Airline', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.uid', '=', 'T2.Airline', 'WHERE', 'T2.DestAirport', '=', '``', 'AHD', ""''""]","['select', 't1', '.', 'airline', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'uid', '=', 't2', '.', 'airline', 'where', 't2', '.', 'destairport', '=', 'value']",Which airlines have a flight with destination airport AHD?,"['Which', 'airlines', 'have', 'a', 'flight', 'with', 'destination', 'airport', 'AHD', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 13, False], None], '""AHD""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""APG"" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""CVO""","['SELECT', 'T1.Airline', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.uid', '=', 'T2.Airline', 'WHERE', 'T2.SourceAirport', '=', '``', 'APG', ""''"", 'INTERSECT', 'SELECT', 'T1.Airline', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.uid', '=', 'T2.Airline', 'WHERE', 'T2.SourceAirport', '=', '``', 'CVO', ""''""]","['select', 't1', '.', 'airline', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'uid', '=', 't2', '.', 'airline', 'where', 't2', '.', 'sourceairport', '=', 'value', 'intersect', 'select', 't1', '.', 'airline', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'uid', '=', 't2', '.', 'airline', 'where', 't2', '.', 'sourceairport', '=', 'value']",Find all airlines that have flights from both airports 'APG' and 'CVO'.,"['Find', 'all', 'airlines', 'that', 'have', 'flights', 'from', 'both', 'airports', ""'APG"", ""'"", 'and', ""'CVO"", ""'"", '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""APG""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""CVO""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
flight_2,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""APG"" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""CVO""","['SELECT', 'T1.Airline', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.uid', '=', 'T2.Airline', 'WHERE', 'T2.SourceAirport', '=', '``', 'APG', ""''"", 'INTERSECT', 'SELECT', 'T1.Airline', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.uid', '=', 'T2.Airline', 'WHERE', 'T2.SourceAirport', '=', '``', 'CVO', ""''""]","['select', 't1', '.', 'airline', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'uid', '=', 't2', '.', 'airline', 'where', 't2', '.', 'sourceairport', '=', 'value', 'intersect', 'select', 't1', '.', 'airline', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'uid', '=', 't2', '.', 'airline', 'where', 't2', '.', 'sourceairport', '=', 'value']",Which airlines have departing flights from both APG and CVO airports?,"['Which', 'airlines', 'have', 'departing', 'flights', 'from', 'both', 'APG', 'and', 'CVO', 'airports', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""APG""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""CVO""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
flight_2,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""CVO"" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""APG""","['SELECT', 'T1.Airline', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.uid', '=', 'T2.Airline', 'WHERE', 'T2.SourceAirport', '=', '``', 'CVO', ""''"", 'EXCEPT', 'SELECT', 'T1.Airline', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.uid', '=', 'T2.Airline', 'WHERE', 'T2.SourceAirport', '=', '``', 'APG', ""''""]","['select', 't1', '.', 'airline', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'uid', '=', 't2', '.', 'airline', 'where', 't2', '.', 'sourceairport', '=', 'value', 'except', 'select', 't1', '.', 'airline', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'uid', '=', 't2', '.', 'airline', 'where', 't2', '.', 'sourceairport', '=', 'value']",Find all airlines that have flights from airport 'CVO' but not from 'APG'.,"['Find', 'all', 'airlines', 'that', 'have', 'flights', 'from', 'airport', ""'CVO"", ""'"", 'but', 'not', 'from', ""'APG"", ""'"", '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""CVO""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""APG""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
flight_2,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""CVO"" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""APG""","['SELECT', 'T1.Airline', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.uid', '=', 'T2.Airline', 'WHERE', 'T2.SourceAirport', '=', '``', 'CVO', ""''"", 'EXCEPT', 'SELECT', 'T1.Airline', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.uid', '=', 'T2.Airline', 'WHERE', 'T2.SourceAirport', '=', '``', 'APG', ""''""]","['select', 't1', '.', 'airline', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'uid', '=', 't2', '.', 'airline', 'where', 't2', '.', 'sourceairport', '=', 'value', 'except', 'select', 't1', '.', 'airline', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'uid', '=', 't2', '.', 'airline', 'where', 't2', '.', 'sourceairport', '=', 'value']",Which airlines have departures from CVO but not from APG airports?,"['Which', 'airlines', 'have', 'departures', 'from', 'CVO', 'but', 'not', 'from', 'APG', 'airports', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""CVO""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""APG""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
flight_2,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10,"['SELECT', 'T1.Airline', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.uid', '=', 'T2.Airline', 'GROUP', 'BY', 'T1.Airline', 'HAVING', 'count', '(', '*', ')', '>', '10']","['select', 't1', '.', 'airline', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'uid', '=', 't2', '.', 'airline', 'group', 'by', 't1', '.', 'airline', 'having', 'count', '(', '*', ')', '>', 'value']",Find all airlines that have at least 10 flights.,"['Find', 'all', 'airlines', 'that', 'have', 'at', 'least', '10', 'flights', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 2, False]], 'having': [[False, 3, [0, [3, 0, False], None], 10.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10,"['SELECT', 'T1.Airline', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.uid', '=', 'T2.Airline', 'GROUP', 'BY', 'T1.Airline', 'HAVING', 'count', '(', '*', ')', '>', '10']","['select', 't1', '.', 'airline', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'uid', '=', 't2', '.', 'airline', 'group', 'by', 't1', '.', 'airline', 'having', 'count', '(', '*', ')', '>', 'value']",Which airlines have at least 10 flights?,"['Which', 'airlines', 'have', 'at', 'least', '10', 'flights', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 2, False]], 'having': [[False, 3, [0, [3, 0, False], None], 10.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200,"['SELECT', 'T1.Airline', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.uid', '=', 'T2.Airline', 'GROUP', 'BY', 'T1.Airline', 'HAVING', 'count', '(', '*', ')', '<', '200']","['select', 't1', '.', 'airline', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'uid', '=', 't2', '.', 'airline', 'group', 'by', 't1', '.', 'airline', 'having', 'count', '(', '*', ')', '<', 'value']",Find all airlines that have fewer than 200 flights.,"['Find', 'all', 'airlines', 'that', 'have', 'fewer', 'than', '200', 'flights', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 2, False]], 'having': [[False, 4, [0, [3, 0, False], None], 200.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200,"['SELECT', 'T1.Airline', 'FROM', 'AIRLINES', 'AS', 'T1', 'JOIN', 'FLIGHTS', 'AS', 'T2', 'ON', 'T1.uid', '=', 'T2.Airline', 'GROUP', 'BY', 'T1.Airline', 'HAVING', 'count', '(', '*', ')', '<', '200']","['select', 't1', '.', 'airline', 'from', 'airlines', 'as', 't1', 'join', 'flights', 'as', 't2', 'on', 't1', '.', 'uid', '=', 't2', '.', 'airline', 'group', 'by', 't1', '.', 'airline', 'having', 'count', '(', '*', ')', '<', 'value']",Which airlines have less than 200 flights?,"['Which', 'airlines', 'have', 'less', 'than', '200', 'flights', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 2, False]], 'having': [[False, 4, [0, [3, 0, False], None], 200.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  ""United Airlines""","['SELECT', 'T1.FlightNo', 'FROM', 'FLIGHTS', 'AS', 'T1', 'JOIN', 'AIRLINES', 'AS', 'T2', 'ON', 'T2.uid', '=', 'T1.Airline', 'WHERE', 'T2.Airline', '=', '``', 'United', 'Airlines', ""''""]","['select', 't1', '.', 'flightno', 'from', 'flights', 'as', 't1', 'join', 'airlines', 'as', 't2', 'on', 't2', '.', 'uid', '=', 't1', '.', 'airline', 'where', 't2', '.', 'airline', '=', 'value']","What are flight numbers of Airline ""United Airlines""?","['What', 'are', 'flight', 'numbers', 'of', 'Airline', '``', 'United', 'Airlines', ""''"", '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""United Airlines""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  ""United Airlines""","['SELECT', 'T1.FlightNo', 'FROM', 'FLIGHTS', 'AS', 'T1', 'JOIN', 'AIRLINES', 'AS', 'T2', 'ON', 'T2.uid', '=', 'T1.Airline', 'WHERE', 'T2.Airline', '=', '``', 'United', 'Airlines', ""''""]","['select', 't1', '.', 'flightno', 'from', 'flights', 'as', 't1', 'join', 'airlines', 'as', 't2', 'on', 't2', '.', 'uid', '=', 't1', '.', 'airline', 'where', 't2', '.', 'airline', '=', 'value']",Which flight numbers correspond to United Airlines flights?,"['Which', 'flight', 'numbers', 'correspond', 'to', 'United', 'Airlines', 'flights', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""United Airlines""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  ""APG""","['SELECT', 'FlightNo', 'FROM', 'FLIGHTS', 'WHERE', 'SourceAirport', '=', '``', 'APG', ""''""]","['select', 'flightno', 'from', 'flights', 'where', 'sourceairport', '=', 'value']","What are flight numbers of flights departing from Airport ""APG""?","['What', 'are', 'flight', 'numbers', 'of', 'flights', 'departing', 'from', 'Airport', '``', 'APG', ""''"", '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""APG""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  ""APG""","['SELECT', 'FlightNo', 'FROM', 'FLIGHTS', 'WHERE', 'SourceAirport', '=', '``', 'APG', ""''""]","['select', 'flightno', 'from', 'flights', 'where', 'sourceairport', '=', 'value']",Give the flight numbers of flights leaving from APG.,"['Give', 'the', 'flight', 'numbers', 'of', 'flights', 'leaving', 'from', 'APG', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""APG""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  ""APG""","['SELECT', 'FlightNo', 'FROM', 'FLIGHTS', 'WHERE', 'DestAirport', '=', '``', 'APG', ""''""]","['select', 'flightno', 'from', 'flights', 'where', 'destairport', '=', 'value']","What are flight numbers of flights arriving at Airport ""APG""?","['What', 'are', 'flight', 'numbers', 'of', 'flights', 'arriving', 'at', 'Airport', '``', 'APG', ""''"", '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [[False, 2, [0, [0, 13, False], None], '""APG""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  ""APG""","['SELECT', 'FlightNo', 'FROM', 'FLIGHTS', 'WHERE', 'DestAirport', '=', '``', 'APG', ""''""]","['select', 'flightno', 'from', 'flights', 'where', 'destairport', '=', 'value']",Give the flight numbers of flights landing at APG.,"['Give', 'the', 'flight', 'numbers', 'of', 'flights', 'landing', 'at', 'APG', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [[False, 2, [0, [0, 13, False], None], '""APG""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","['SELECT', 'T1.FlightNo', 'FROM', 'FLIGHTS', 'AS', 'T1', 'JOIN', 'AIRPORTS', 'AS', 'T2', 'ON', 'T1.SourceAirport', '=', 'T2.AirportCode', 'WHERE', 'T2.City', '=', '``', 'Aberdeen', ""''""]","['select', 't1', '.', 'flightno', 'from', 'flights', 'as', 't1', 'join', 'airports', 'as', 't2', 'on', 't1', '.', 'sourceairport', '=', 't2', '.', 'airportcode', 'where', 't2', '.', 'city', '=', 'value']","What are flight numbers of flights departing from City ""Aberdeen ""?","['What', 'are', 'flight', 'numbers', 'of', 'flights', 'departing', 'from', 'City', '``', 'Aberdeen', '``', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 12, False], None], [0, 6, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""Aberdeen""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","['SELECT', 'T1.FlightNo', 'FROM', 'FLIGHTS', 'AS', 'T1', 'JOIN', 'AIRPORTS', 'AS', 'T2', 'ON', 'T1.SourceAirport', '=', 'T2.AirportCode', 'WHERE', 'T2.City', '=', '``', 'Aberdeen', ""''""]","['select', 't1', '.', 'flightno', 'from', 'flights', 'as', 't1', 'join', 'airports', 'as', 't2', 'on', 't1', '.', 'sourceairport', '=', 't2', '.', 'airportcode', 'where', 't2', '.', 'city', '=', 'value']",Give the flight numbers of flights leaving from Aberdeen.,"['Give', 'the', 'flight', 'numbers', 'of', 'flights', 'leaving', 'from', 'Aberdeen', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 12, False], None], [0, 6, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""Aberdeen""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","['SELECT', 'T1.FlightNo', 'FROM', 'FLIGHTS', 'AS', 'T1', 'JOIN', 'AIRPORTS', 'AS', 'T2', 'ON', 'T1.DestAirport', '=', 'T2.AirportCode', 'WHERE', 'T2.City', '=', '``', 'Aberdeen', ""''""]","['select', 't1', '.', 'flightno', 'from', 'flights', 'as', 't1', 'join', 'airports', 'as', 't2', 'on', 't1', '.', 'destairport', '=', 't2', '.', 'airportcode', 'where', 't2', '.', 'city', '=', 'value']","What are flight numbers of flights arriving at City ""Aberdeen""?","['What', 'are', 'flight', 'numbers', 'of', 'flights', 'arriving', 'at', 'City', '``', 'Aberdeen', ""''"", '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""Aberdeen""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","['SELECT', 'T1.FlightNo', 'FROM', 'FLIGHTS', 'AS', 'T1', 'JOIN', 'AIRPORTS', 'AS', 'T2', 'ON', 'T1.DestAirport', '=', 'T2.AirportCode', 'WHERE', 'T2.City', '=', '``', 'Aberdeen', ""''""]","['select', 't1', '.', 'flightno', 'from', 'flights', 'as', 't1', 'join', 'airports', 'as', 't2', 'on', 't1', '.', 'destairport', '=', 't2', '.', 'airportcode', 'where', 't2', '.', 'city', '=', 'value']",Give the flight numbers of flights arriving in Aberdeen.,"['Give', 'the', 'flight', 'numbers', 'of', 'flights', 'arriving', 'in', 'Aberdeen', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""Aberdeen""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  ""Aberdeen"" OR T2.city  =  ""Abilene""","['SELECT', 'count', '(', '*', ')', 'FROM', 'Flights', 'AS', 'T1', 'JOIN', 'Airports', 'AS', 'T2', 'ON', 'T1.DestAirport', '=', 'T2.AirportCode', 'WHERE', 'T2.city', '=', '``', 'Aberdeen', ""''"", 'OR', 'T2.city', '=', '``', 'Abilene', ""''""]","['select', 'count', '(', '*', ')', 'from', 'flights', 'as', 't1', 'join', 'airports', 'as', 't2', 'on', 't1', '.', 'destairport', '=', 't2', '.', 'airportcode', 'where', 't2', '.', 'city', '=', 'value', 'or', 't2', '.', 'city', '=', 'value']",Find the number of flights landing in the city of Aberdeen or Abilene.,"['Find', 'the', 'number', 'of', 'flights', 'landing', 'in', 'the', 'city', 'of', 'Aberdeen', 'or', 'Abilene', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""Aberdeen""', None], 'or', [False, 2, [0, [0, 5, False], None], '""Abilene""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  ""Aberdeen"" OR T2.city  =  ""Abilene""","['SELECT', 'count', '(', '*', ')', 'FROM', 'Flights', 'AS', 'T1', 'JOIN', 'Airports', 'AS', 'T2', 'ON', 'T1.DestAirport', '=', 'T2.AirportCode', 'WHERE', 'T2.city', '=', '``', 'Aberdeen', ""''"", 'OR', 'T2.city', '=', '``', 'Abilene', ""''""]","['select', 'count', '(', '*', ')', 'from', 'flights', 'as', 't1', 'join', 'airports', 'as', 't2', 'on', 't1', '.', 'destairport', '=', 't2', '.', 'airportcode', 'where', 't2', '.', 'city', '=', 'value', 'or', 't2', '.', 'city', '=', 'value']",How many flights land in Aberdeen or Abilene?,"['How', 'many', 'flights', 'land', 'in', 'Aberdeen', 'or', 'Abilene', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 13, False], None], [0, 6, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""Aberdeen""', None], 'or', [False, 2, [0, [0, 5, False], None], '""Abilene""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights),"['SELECT', 'AirportName', 'FROM', 'Airports', 'WHERE', 'AirportCode', 'NOT', 'IN', '(', 'SELECT', 'SourceAirport', 'FROM', 'Flights', 'UNION', 'SELECT', 'DestAirport', 'FROM', 'Flights', ')']","['select', 'airportname', 'from', 'airports', 'where', 'airportcode', 'not', 'in', '(', 'select', 'sourceairport', 'from', 'flights', 'union', 'select', 'destairport', 'from', 'flights', ')']",Find the name of airports which do not have any flight in and out.,"['Find', 'the', 'name', 'of', 'airports', 'which', 'do', 'not', 'have', 'any', 'flight', 'in', 'and', 'out', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 7, False], None]]]], 'where': [[True, 8, [0, [0, 6, False], None], {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 12, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 13, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
flight_2,SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights),"['SELECT', 'AirportName', 'FROM', 'Airports', 'WHERE', 'AirportCode', 'NOT', 'IN', '(', 'SELECT', 'SourceAirport', 'FROM', 'Flights', 'UNION', 'SELECT', 'DestAirport', 'FROM', 'Flights', ')']","['select', 'airportname', 'from', 'airports', 'where', 'airportcode', 'not', 'in', '(', 'select', 'sourceairport', 'from', 'flights', 'union', 'select', 'destairport', 'from', 'flights', ')']",Which airports do not have departing or arriving flights?,"['Which', 'airports', 'do', 'not', 'have', 'departing', 'or', 'arriving', 'flights', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 7, False], None]]]], 'where': [[True, 8, [0, [0, 6, False], None], {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 12, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 13, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT count(*) FROM employee,"['SELECT', 'count', '(', '*', ')', 'FROM', 'employee']","['select', 'count', '(', '*', ')', 'from', 'employee']",How many employees are there?,"['How', 'many', 'employees', 'are', 'there', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT count(*) FROM employee,"['SELECT', 'count', '(', '*', ')', 'FROM', 'employee']","['select', 'count', '(', '*', ')', 'from', 'employee']",Count the number of employees,"['Count', 'the', 'number', 'of', 'employees']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT name FROM employee ORDER BY age,"['SELECT', 'name', 'FROM', 'employee', 'ORDER', 'BY', 'age']","['select', 'name', 'from', 'employee', 'order', 'by', 'age']",Sort employee names by their age in ascending order.,"['Sort', 'employee', 'names', 'by', 'their', 'age', 'in', 'ascending', 'order', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 3, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT name FROM employee ORDER BY age,"['SELECT', 'name', 'FROM', 'employee', 'ORDER', 'BY', 'age']","['select', 'name', 'from', 'employee', 'order', 'by', 'age']",List the names of employees and sort in ascending order of age.,"['List', 'the', 'names', 'of', 'employees', 'and', 'sort', 'in', 'ascending', 'order', 'of', 'age', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 3, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,"SELECT count(*) ,  city FROM employee GROUP BY city","['SELECT', 'count', '(', '*', ')', ',', 'city', 'FROM', 'employee', 'GROUP', 'BY', 'city']","['select', 'count', '(', '*', ')', ',', 'city', 'from', 'employee', 'group', 'by', 'city']",What is the number of employees from each city?,"['What', 'is', 'the', 'number', 'of', 'employees', 'from', 'each', 'city', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [[0, 4, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,"SELECT count(*) ,  city FROM employee GROUP BY city","['SELECT', 'count', '(', '*', ')', ',', 'city', 'FROM', 'employee', 'GROUP', 'BY', 'city']","['select', 'count', '(', '*', ')', ',', 'city', 'from', 'employee', 'group', 'by', 'city']",Count the number of employees for each city.,"['Count', 'the', 'number', 'of', 'employees', 'for', 'each', 'city', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [[0, 4, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1,"['SELECT', 'city', 'FROM', 'employee', 'WHERE', 'age', '<', '30', 'GROUP', 'BY', 'city', 'HAVING', 'count', '(', '*', ')', '>', '1']","['select', 'city', 'from', 'employee', 'where', 'age', '<', 'value', 'group', 'by', 'city', 'having', 'count', '(', '*', ')', '>', 'value']",Which cities do more than one employee under age 30 come from?,"['Which', 'cities', 'do', 'more', 'than', 'one', 'employee', 'under', 'age', '30', 'come', 'from', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [[False, 4, [0, [0, 3, False], None], 30.0, None]], 'groupBy': [[0, 4, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1,"['SELECT', 'city', 'FROM', 'employee', 'WHERE', 'age', '<', '30', 'GROUP', 'BY', 'city', 'HAVING', 'count', '(', '*', ')', '>', '1']","['select', 'city', 'from', 'employee', 'where', 'age', '<', 'value', 'group', 'by', 'city', 'having', 'count', '(', '*', ')', '>', 'value']",Find the cities that have more than one employee under age 30.,"['Find', 'the', 'cities', 'that', 'have', 'more', 'than', 'one', 'employee', 'under', 'age', '30', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [[False, 4, [0, [0, 3, False], None], 30.0, None]], 'groupBy': [[0, 4, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION","['SELECT', 'count', '(', '*', ')', ',', 'LOCATION', 'FROM', 'shop', 'GROUP', 'BY', 'LOCATION']","['select', 'count', '(', '*', ')', ',', 'location', 'from', 'shop', 'group', 'by', 'location']",Find the number of shops in each location.,"['Find', 'the', 'number', 'of', 'shops', 'in', 'each', 'location', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [[0, 7, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION","['SELECT', 'count', '(', '*', ')', ',', 'LOCATION', 'FROM', 'shop', 'GROUP', 'BY', 'LOCATION']","['select', 'count', '(', '*', ')', ',', 'location', 'from', 'shop', 'group', 'by', 'location']",How many shops are there in each location?,"['How', 'many', 'shops', 'are', 'there', 'in', 'each', 'location', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [[0, 7, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1","['SELECT', 'manager_name', ',', 'district', 'FROM', 'shop', 'ORDER', 'BY', 'number_products', 'DESC', 'LIMIT', '1']","['select', 'manager_name', ',', 'district', 'from', 'shop', 'order', 'by', 'number_products', 'desc', 'limit', 'value']",Find the manager name and district of the shop whose number of products is the largest.,"['Find', 'the', 'manager', 'name', 'and', 'district', 'of', 'the', 'shop', 'whose', 'number', 'of', 'products', 'is', 'the', 'largest', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 8, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 9, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1","['SELECT', 'manager_name', ',', 'district', 'FROM', 'shop', 'ORDER', 'BY', 'number_products', 'DESC', 'LIMIT', '1']","['select', 'manager_name', ',', 'district', 'from', 'shop', 'order', 'by', 'number_products', 'desc', 'limit', 'value']",What are the manager name and district of the shop that sells the largest number of products?,"['What', 'are', 'the', 'manager', 'name', 'and', 'district', 'of', 'the', 'shop', 'that', 'sells', 'the', 'largest', 'number', 'of', 'products', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 8, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 9, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,"SELECT min(Number_products) ,  max(Number_products) FROM shop","['SELECT', 'min', '(', 'Number_products', ')', ',', 'max', '(', 'Number_products', ')', 'FROM', 'shop']","['select', 'min', '(', 'number_products', ')', ',', 'max', '(', 'number_products', ')', 'from', 'shop']",find the minimum and maximum number of products of all stores.,"['find', 'the', 'minimum', 'and', 'maximum', 'number', 'of', 'products', 'of', 'all', 'stores', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[2, [0, [0, 9, False], None]], [1, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,"SELECT min(Number_products) ,  max(Number_products) FROM shop","['SELECT', 'min', '(', 'Number_products', ')', ',', 'max', '(', 'Number_products', ')', 'FROM', 'shop']","['select', 'min', '(', 'number_products', ')', ',', 'max', '(', 'number_products', ')', 'from', 'shop']",What are the minimum and maximum number of products across all the shops?,"['What', 'are', 'the', 'minimum', 'and', 'maximum', 'number', 'of', 'products', 'across', 'all', 'the', 'shops', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[2, [0, [0, 9, False], None]], [1, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC","['SELECT', 'name', ',', 'LOCATION', ',', 'district', 'FROM', 'shop', 'ORDER', 'BY', 'number_products', 'DESC']","['select', 'name', ',', 'location', ',', 'district', 'from', 'shop', 'order', 'by', 'number_products', 'desc']","Return the name, location and district of all shops in descending order of number of products.","['Return', 'the', 'name', ',', 'location', 'and', 'district', 'of', 'all', 'shops', 'in', 'descending', 'order', 'of', 'number', 'of', 'products', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]], [0, [0, [0, 8, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 9, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC","['SELECT', 'name', ',', 'LOCATION', ',', 'district', 'FROM', 'shop', 'ORDER', 'BY', 'number_products', 'DESC']","['select', 'name', ',', 'location', ',', 'district', 'from', 'shop', 'order', 'by', 'number_products', 'desc']","Sort all the shops by number products in descending order, and return the name, location and district of each shop.","['Sort', 'all', 'the', 'shops', 'by', 'number', 'products', 'in', 'descending', 'order', ',', 'and', 'return', 'the', 'name', ',', 'location', 'and', 'district', 'of', 'each', 'shop', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]], [0, [0, [0, 8, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 9, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop),"['SELECT', 'name', 'FROM', 'shop', 'WHERE', 'number_products', '>', '(', 'SELECT', 'avg', '(', 'number_products', ')', 'FROM', 'shop', ')']","['select', 'name', 'from', 'shop', 'where', 'number_products', '>', '(', 'select', 'avg', '(', 'number_products', ')', 'from', 'shop', ')']",Find the names of stores whose number products is more than the average number of products.,"['Find', 'the', 'names', 'of', 'stores', 'whose', 'number', 'products', 'is', 'more', 'than', 'the', 'average', 'number', 'of', 'products', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [[False, 3, [0, [0, 9, False], None], {'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[5, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop),"['SELECT', 'name', 'FROM', 'shop', 'WHERE', 'number_products', '>', '(', 'SELECT', 'avg', '(', 'number_products', ')', 'FROM', 'shop', ')']","['select', 'name', 'from', 'shop', 'where', 'number_products', '>', '(', 'select', 'avg', '(', 'number_products', ')', 'from', 'shop', ')']",Which shops' number products is above the average? Give me the shop names.,"['Which', 'shops', ""'"", 'number', 'products', 'is', 'above', 'the', 'average', '?', 'Give', 'me', 'the', 'shop', 'names', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [[False, 3, [0, [0, 9, False], None], {'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[5, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1,"['SELECT', 't1.name', 'FROM', 'employee', 'AS', 't1', 'JOIN', 'evaluation', 'AS', 't2', 'ON', 't1.Employee_ID', '=', 't2.Employee_ID', 'GROUP', 'BY', 't2.Employee_ID', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'name', 'from', 'employee', 'as', 't1', 'join', 'evaluation', 'as', 't2', 'on', 't1', '.', 'employee_id', '=', 't2', '.', 'employee_id', 'group', 'by', 't2', '.', 'employee_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",find the name of employee who was awarded the most times in the evaluation.,"['find', 'the', 'name', 'of', 'employee', 'who', 'was', 'awarded', 'the', 'most', 'times', 'in', 'the', 'evaluation', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 15, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 15, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1,"['SELECT', 't1.name', 'FROM', 'employee', 'AS', 't1', 'JOIN', 'evaluation', 'AS', 't2', 'ON', 't1.Employee_ID', '=', 't2.Employee_ID', 'GROUP', 'BY', 't2.Employee_ID', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'name', 'from', 'employee', 'as', 't1', 'join', 'evaluation', 'as', 't2', 'on', 't1', '.', 'employee_id', '=', 't2', '.', 'employee_id', 'group', 'by', 't2', '.', 'employee_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which employee received the most awards in evaluations? Give me the employee name.,"['Which', 'employee', 'received', 'the', 'most', 'awards', 'in', 'evaluations', '?', 'Give', 'me', 'the', 'employee', 'name', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 15, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 15, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1,"['SELECT', 't1.name', 'FROM', 'employee', 'AS', 't1', 'JOIN', 'evaluation', 'AS', 't2', 'ON', 't1.Employee_ID', '=', 't2.Employee_ID', 'ORDER', 'BY', 't2.bonus', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'name', 'from', 'employee', 'as', 't1', 'join', 'evaluation', 'as', 't2', 'on', 't1', '.', 'employee_id', '=', 't2', '.', 'employee_id', 'order', 'by', 't2', '.', 'bonus', 'desc', 'limit', 'value']",Find the name of the employee who got the highest one time bonus.,"['Find', 'the', 'name', 'of', 'the', 'employee', 'who', 'got', 'the', 'highest', 'one', 'time', 'bonus', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 15, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 17, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1,"['SELECT', 't1.name', 'FROM', 'employee', 'AS', 't1', 'JOIN', 'evaluation', 'AS', 't2', 'ON', 't1.Employee_ID', '=', 't2.Employee_ID', 'ORDER', 'BY', 't2.bonus', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'name', 'from', 'employee', 'as', 't1', 'join', 'evaluation', 'as', 't2', 'on', 't1', '.', 'employee_id', '=', 't2', '.', 'employee_id', 'order', 'by', 't2', '.', 'bonus', 'desc', 'limit', 'value']",Which employee received the biggest bonus? Give me the employee name.,"['Which', 'employee', 'received', 'the', 'biggest', 'bonus', '?', 'Give', 'me', 'the', 'employee', 'name', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 15, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 17, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),"['SELECT', 'name', 'FROM', 'employee', 'WHERE', 'Employee_ID', 'NOT', 'IN', '(', 'SELECT', 'Employee_ID', 'FROM', 'evaluation', ')']","['select', 'name', 'from', 'employee', 'where', 'employee_id', 'not', 'in', '(', 'select', 'employee_id', 'from', 'evaluation', ')']",Find the names of employees who never won any award in the evaluation.,"['Find', 'the', 'names', 'of', 'employees', 'who', 'never', 'won', 'any', 'award', 'in', 'the', 'evaluation', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[True, 8, [0, [0, 1, False], None], {'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 15, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),"['SELECT', 'name', 'FROM', 'employee', 'WHERE', 'Employee_ID', 'NOT', 'IN', '(', 'SELECT', 'Employee_ID', 'FROM', 'evaluation', ')']","['select', 'name', 'from', 'employee', 'where', 'employee_id', 'not', 'in', '(', 'select', 'employee_id', 'from', 'evaluation', ')']",What are the names of the employees who never received any evaluation?,"['What', 'are', 'the', 'names', 'of', 'the', 'employees', 'who', 'never', 'received', 'any', 'evaluation', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[True, 8, [0, [0, 1, False], None], {'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 15, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1,"['SELECT', 't2.name', 'FROM', 'hiring', 'AS', 't1', 'JOIN', 'shop', 'AS', 't2', 'ON', 't1.shop_id', '=', 't2.shop_id', 'GROUP', 'BY', 't1.shop_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't2', '.', 'name', 'from', 'hiring', 'as', 't1', 'join', 'shop', 'as', 't2', 'on', 't1', '.', 'shop_id', '=', 't2', '.', 'shop_id', 'group', 'by', 't1', '.', 'shop_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the name of the shop that is hiring the largest number of employees?,"['What', 'is', 'the', 'name', 'of', 'the', 'shop', 'that', 'is', 'hiring', 'the', 'largest', 'number', 'of', 'employees', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 11, False], None], [0, 5, False], None]]}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [[0, 11, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1,"['SELECT', 't2.name', 'FROM', 'hiring', 'AS', 't1', 'JOIN', 'shop', 'AS', 't2', 'ON', 't1.shop_id', '=', 't2.shop_id', 'GROUP', 'BY', 't1.shop_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't2', '.', 'name', 'from', 'hiring', 'as', 't1', 'join', 'shop', 'as', 't2', 'on', 't1', '.', 'shop_id', '=', 't2', '.', 'shop_id', 'group', 'by', 't1', '.', 'shop_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which shop has the most employees? Give me the shop name.,"['Which', 'shop', 'has', 'the', 'most', 'employees', '?', 'Give', 'me', 'the', 'shop', 'name', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 11, False], None], [0, 5, False], None]]}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [[0, 11, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring),"['SELECT', 'name', 'FROM', 'shop', 'WHERE', 'shop_id', 'NOT', 'IN', '(', 'SELECT', 'shop_id', 'FROM', 'hiring', ')']","['select', 'name', 'from', 'shop', 'where', 'shop_id', 'not', 'in', '(', 'select', 'shop_id', 'from', 'hiring', ')']",Find the name of the shops that do not hire any employee.,"['Find', 'the', 'name', 'of', 'the', 'shops', 'that', 'do', 'not', 'hire', 'any', 'employee', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [[True, 8, [0, [0, 5, False], None], {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring),"['SELECT', 'name', 'FROM', 'shop', 'WHERE', 'shop_id', 'NOT', 'IN', '(', 'SELECT', 'shop_id', 'FROM', 'hiring', ')']","['select', 'name', 'from', 'shop', 'where', 'shop_id', 'not', 'in', '(', 'select', 'shop_id', 'from', 'hiring', ')']",Which shops run with no employees? Find the shop names,"['Which', 'shops', 'run', 'with', 'no', 'employees', '?', 'Find', 'the', 'shop', 'names']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [[True, 8, [0, [0, 5, False], None], {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name","['SELECT', 'count', '(', '*', ')', ',', 't2.name', 'FROM', 'hiring', 'AS', 't1', 'JOIN', 'shop', 'AS', 't2', 'ON', 't1.shop_id', '=', 't2.shop_id', 'GROUP', 'BY', 't2.name']","['select', 'count', '(', '*', ')', ',', 't2', '.', 'name', 'from', 'hiring', 'as', 't1', 'join', 'shop', 'as', 't2', 'on', 't1', '.', 'shop_id', '=', 't2', '.', 'shop_id', 'group', 'by', 't2', '.', 'name']",Find the number of employees hired in each shop; show the shop name as well.,"['Find', 'the', 'number', 'of', 'employees', 'hired', 'in', 'each', 'shop', ';', 'show', 'the', 'shop', 'name', 'as', 'well', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 11, False], None], [0, 5, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name","['SELECT', 'count', '(', '*', ')', ',', 't2.name', 'FROM', 'hiring', 'AS', 't1', 'JOIN', 'shop', 'AS', 't2', 'ON', 't1.shop_id', '=', 't2.shop_id', 'GROUP', 'BY', 't2.name']","['select', 'count', '(', '*', ')', ',', 't2', '.', 'name', 'from', 'hiring', 'as', 't1', 'join', 'shop', 'as', 't2', 'on', 't1', '.', 'shop_id', '=', 't2', '.', 'shop_id', 'group', 'by', 't2', '.', 'name']","For each shop, return the number of employees working there and the name of the shop.","['For', 'each', 'shop', ',', 'return', 'the', 'number', 'of', 'employees', 'working', 'there', 'and', 'the', 'name', 'of', 'the', 'shop', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 11, False], None], [0, 5, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT sum(bonus) FROM evaluation,"['SELECT', 'sum', '(', 'bonus', ')', 'FROM', 'evaluation']","['select', 'sum', '(', 'bonus', ')', 'from', 'evaluation']",What is total bonus given in all evaluations?,"['What', 'is', 'total', 'bonus', 'given', 'in', 'all', 'evaluations', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[4, [0, [0, 17, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT sum(bonus) FROM evaluation,"['SELECT', 'sum', '(', 'bonus', ')', 'FROM', 'evaluation']","['select', 'sum', '(', 'bonus', ')', 'from', 'evaluation']",Find the total amount of bonus given in all the evaluations.,"['Find', 'the', 'total', 'amount', 'of', 'bonus', 'given', 'in', 'all', 'the', 'evaluations', '.']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[4, [0, [0, 17, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT * FROM hiring,"['SELECT', '*', 'FROM', 'hiring']","['select', '*', 'from', 'hiring']",Give me all the information about hiring.,"['Give', 'me', 'all', 'the', 'information', 'about', 'hiring', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT * FROM hiring,"['SELECT', '*', 'FROM', 'hiring']","['select', '*', 'from', 'hiring']",What is all the information about hiring?,"['What', 'is', 'all', 'the', 'information', 'about', 'hiring', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000,"['SELECT', 'district', 'FROM', 'shop', 'WHERE', 'Number_products', '<', '3000', 'INTERSECT', 'SELECT', 'district', 'FROM', 'shop', 'WHERE', 'Number_products', '>', '10000']","['select', 'district', 'from', 'shop', 'where', 'number_products', '<', 'value', 'intersect', 'select', 'district', 'from', 'shop', 'where', 'number_products', '>', 'value']",Which district has both stores with less than 3000 products and stores with more than 10000 products?,"['Which', 'district', 'has', 'both', 'stores', 'with', 'less', 'than', '3000', 'products', 'and', 'stores', 'with', 'more', 'than', '10000', 'products', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 8, False], None]]]], 'where': [[False, 4, [0, [0, 9, False], None], 3000.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 8, False], None]]]], 'where': [[False, 3, [0, [0, 9, False], None], 10000.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000,"['SELECT', 'district', 'FROM', 'shop', 'WHERE', 'Number_products', '<', '3000', 'INTERSECT', 'SELECT', 'district', 'FROM', 'shop', 'WHERE', 'Number_products', '>', '10000']","['select', 'district', 'from', 'shop', 'where', 'number_products', '<', 'value', 'intersect', 'select', 'district', 'from', 'shop', 'where', 'number_products', '>', 'value']",Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.,"['Find', 'the', 'districts', 'in', 'which', 'there', 'are', 'both', 'shops', 'selling', 'less', 'than', '3000', 'products', 'and', 'shops', 'selling', 'more', 'than', '10000', 'products', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 8, False], None]]]], 'where': [[False, 4, [0, [0, 9, False], None], 3000.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 8, False], None]]]], 'where': [[False, 3, [0, [0, 9, False], None], 10000.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT count(DISTINCT LOCATION) FROM shop,"['SELECT', 'count', '(', 'DISTINCT', 'LOCATION', ')', 'FROM', 'shop']","['select', 'count', '(', 'distinct', 'location', ')', 'from', 'shop']",How many different store locations are there?,"['How', 'many', 'different', 'store', 'locations', 'are', 'there', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 7, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
employee_hire_evaluation,SELECT count(DISTINCT LOCATION) FROM shop,"['SELECT', 'count', '(', 'DISTINCT', 'LOCATION', ')', 'FROM', 'shop']","['select', 'count', '(', 'distinct', 'location', ')', 'from', 'shop']",Count the number of distinct store locations.,"['Count', 'the', 'number', 'of', 'distinct', 'store', 'locations', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 7, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT count(*) FROM Documents,"['SELECT', 'count', '(', '*', ')', 'FROM', 'Documents']","['select', 'count', '(', '*', ')', 'from', 'documents']",How many documents do we have?,"['How', 'many', 'documents', 'do', 'we', 'have', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT count(*) FROM Documents,"['SELECT', 'count', '(', '*', ')', 'FROM', 'Documents']","['select', 'count', '(', '*', ')', 'from', 'documents']",Count the number of documents.,"['Count', 'the', 'number', 'of', 'documents', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT document_id ,  document_name ,  document_description FROM Documents","['SELECT', 'document_id', ',', 'document_name', ',', 'document_description', 'FROM', 'Documents']","['select', 'document_id', ',', 'document_name', ',', 'document_description', 'from', 'documents']","List document IDs, document names, and document descriptions for all documents.","['List', 'document', 'IDs', ',', 'document', 'names', ',', 'and', 'document', 'descriptions', 'for', 'all', 'documents', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT document_id ,  document_name ,  document_description FROM Documents","['SELECT', 'document_id', ',', 'document_name', ',', 'document_description', 'FROM', 'Documents']","['select', 'document_id', ',', 'document_name', ',', 'document_description', 'from', 'documents']","What are the ids, names, and descriptions for all documents?","['What', 'are', 'the', 'ids', ',', 'names', ',', 'and', 'descriptions', 'for', 'all', 'documents', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE ""%w%""","['SELECT', 'document_name', ',', 'template_id', 'FROM', 'Documents', 'WHERE', 'Document_Description', 'LIKE', '``', '%', 'w', '%', ""''""]","['select', 'document_name', ',', 'template_id', 'from', 'documents', 'where', 'document_description', 'like', 'value']",What is the document name and template id for document with description with the letter 'w' in it?,"['What', 'is', 'the', 'document', 'name', 'and', 'template', 'id', 'for', 'document', 'with', 'description', 'with', 'the', 'letter', ""'w"", ""'"", 'in', 'it', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 10, False], None]]]], 'where': [[False, 9, [0, [0, 12, False], None], '""%w%""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE ""%w%""","['SELECT', 'document_name', ',', 'template_id', 'FROM', 'Documents', 'WHERE', 'Document_Description', 'LIKE', '``', '%', 'w', '%', ""''""]","['select', 'document_name', ',', 'template_id', 'from', 'documents', 'where', 'document_description', 'like', 'value']",Return the names and template ids for documents that contain the letter w in their description.,"['Return', 'the', 'names', 'and', 'template', 'ids', 'for', 'documents', 'that', 'contain', 'the', 'letter', 'w', 'in', 'their', 'description', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 10, False], None]]]], 'where': [[False, 9, [0, [0, 12, False], None], '""%w%""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  ""Robbin CV""","['SELECT', 'document_id', ',', 'template_id', ',', 'Document_Description', 'FROM', 'Documents', 'WHERE', 'document_name', '=', '``', 'Robbin', 'CV', ""''""]","['select', 'document_id', ',', 'template_id', ',', 'document_description', 'from', 'documents', 'where', 'document_name', '=', 'value']","What is the document id, template id and description for document named ""Robbin CV""?","['What', 'is', 'the', 'document', 'id', ',', 'template', 'id', 'and', 'description', 'for', 'document', 'named', '``', 'Robbin', 'CV', ""''"", '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]], [0, [0, [0, 12, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""Robbin CV""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  ""Robbin CV""","['SELECT', 'document_id', ',', 'template_id', ',', 'Document_Description', 'FROM', 'Documents', 'WHERE', 'document_name', '=', '``', 'Robbin', 'CV', ""''""]","['select', 'document_id', ',', 'template_id', ',', 'document_description', 'from', 'documents', 'where', 'document_name', '=', 'value']","Return the document id, template id, and description for the document with the name Robbin CV.","['Return', 'the', 'document', 'id', ',', 'template', 'id', ',', 'and', 'description', 'for', 'the', 'document', 'with', 'the', 'name', 'Robbin', 'CV', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]], [0, [0, [0, 12, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""Robbin CV""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT count(DISTINCT template_id) FROM Documents,"['SELECT', 'count', '(', 'DISTINCT', 'template_id', ')', 'FROM', 'Documents']","['select', 'count', '(', 'distinct', 'template_id', ')', 'from', 'documents']",How many different templates do all document use?,"['How', 'many', 'different', 'templates', 'do', 'all', 'document', 'use', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 10, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT count(DISTINCT template_id) FROM Documents,"['SELECT', 'count', '(', 'DISTINCT', 'template_id', ')', 'FROM', 'Documents']","['select', 'count', '(', 'distinct', 'template_id', ')', 'from', 'documents']",Count the number of different templates used for documents.,"['Count', 'the', 'number', 'of', 'different', 'templates', 'used', 'for', 'documents', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 10, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT',"['SELECT', 'count', '(', '*', ')', 'FROM', 'Documents', 'AS', 'T1', 'JOIN', 'Templates', 'AS', 'T2', 'ON', 'T1.Template_ID', '=', 'T2.Template_ID', 'WHERE', 'T2.Template_Type_Code', '=', ""'PPT"", ""'""]","['select', 'count', '(', '*', ')', 'from', 'documents', 'as', 't1', 'join', 'templates', 'as', 't2', 'on', 't1', '.', 'template_id', '=', 't2', '.', 'template_id', 'where', 't2', '.', 'template_type_code', '=', 'value']",How many documents are using the template with type code 'PPT'?,"['How', 'many', 'documents', 'are', 'using', 'the', 'template', 'with', 'type', 'code', ""'PPT"", ""'"", '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 3, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""PPT""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT',"['SELECT', 'count', '(', '*', ')', 'FROM', 'Documents', 'AS', 'T1', 'JOIN', 'Templates', 'AS', 'T2', 'ON', 'T1.Template_ID', '=', 'T2.Template_ID', 'WHERE', 'T2.Template_Type_Code', '=', ""'PPT"", ""'""]","['select', 'count', '(', '*', ')', 'from', 'documents', 'as', 't1', 'join', 'templates', 'as', 't2', 'on', 't1', '.', 'template_id', '=', 't2', '.', 'template_id', 'where', 't2', '.', 'template_type_code', '=', 'value']",Count the number of documents that use the PPT template type.,"['Count', 'the', 'number', 'of', 'documents', 'that', 'use', 'the', 'PPT', 'template', 'type', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 3, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""PPT""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT template_id ,  count(*) FROM Documents GROUP BY template_id","['SELECT', 'template_id', ',', 'count', '(', '*', ')', 'FROM', 'Documents', 'GROUP', 'BY', 'template_id']","['select', 'template_id', ',', 'count', '(', '*', ')', 'from', 'documents', 'group', 'by', 'template_id']",Show all template ids and number of documents using each template.,"['Show', 'all', 'template', 'ids', 'and', 'number', 'of', 'documents', 'using', 'each', 'template', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 10, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 10, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT template_id ,  count(*) FROM Documents GROUP BY template_id","['SELECT', 'template_id', ',', 'count', '(', '*', ')', 'FROM', 'Documents', 'GROUP', 'BY', 'template_id']","['select', 'template_id', ',', 'count', '(', '*', ')', 'from', 'documents', 'group', 'by', 'template_id']","What are all different template ids used for documents, and how many times were each of them used?","['What', 'are', 'all', 'different', 'template', 'ids', 'used', 'for', 'documents', ',', 'and', 'how', 'many', 'times', 'were', 'each', 'of', 'them', 'used', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 10, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 10, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'T1.template_id', ',', 'T2.Template_Type_Code', 'FROM', 'Documents', 'AS', 'T1', 'JOIN', 'Templates', 'AS', 'T2', 'ON', 'T1.template_id', '=', 'T2.template_id', 'GROUP', 'BY', 'T1.template_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'template_id', ',', 't2', '.', 'template_type_code', 'from', 'documents', 'as', 't1', 'join', 'templates', 'as', 't2', 'on', 't1', '.', 'template_id', '=', 't2', '.', 'template_id', 'group', 'by', 't1', '.', 'template_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the id and type code for the template used by the most documents?,"['What', 'is', 'the', 'id', 'and', 'type', 'code', 'for', 'the', 'template', 'used', 'by', 'the', 'most', 'documents', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 3, False], None]]}, 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [[0, 10, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'T1.template_id', ',', 'T2.Template_Type_Code', 'FROM', 'Documents', 'AS', 'T1', 'JOIN', 'Templates', 'AS', 'T2', 'ON', 'T1.template_id', '=', 'T2.template_id', 'GROUP', 'BY', 'T1.template_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'template_id', ',', 't2', '.', 'template_type_code', 'from', 'documents', 'as', 't1', 'join', 'templates', 'as', 't2', 'on', 't1', '.', 'template_id', '=', 't2', '.', 'template_id', 'group', 'by', 't1', '.', 'template_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Return the id and type code of the template that is used for the greatest number of documents.,"['Return', 'the', 'id', 'and', 'type', 'code', 'of', 'the', 'template', 'that', 'is', 'used', 'for', 'the', 'greatest', 'number', 'of', 'documents', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 3, False], None]]}, 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [[0, 10, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1,"['SELECT', 'template_id', 'FROM', 'Documents', 'GROUP', 'BY', 'template_id', 'HAVING', 'count', '(', '*', ')', '>', '1']","['select', 'template_id', 'from', 'documents', 'group', 'by', 'template_id', 'having', 'count', '(', '*', ')', '>', 'value']",Show ids for all templates that are used by more than one document.,"['Show', 'ids', 'for', 'all', 'templates', 'that', 'are', 'used', 'by', 'more', 'than', 'one', 'document', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 10, False], None]]]], 'where': [], 'groupBy': [[0, 10, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1,"['SELECT', 'template_id', 'FROM', 'Documents', 'GROUP', 'BY', 'template_id', 'HAVING', 'count', '(', '*', ')', '>', '1']","['select', 'template_id', 'from', 'documents', 'group', 'by', 'template_id', 'having', 'count', '(', '*', ')', '>', 'value']",What are the template ids of any templates used in more than a single document?,"['What', 'are', 'the', 'template', 'ids', 'of', 'any', 'templates', 'used', 'in', 'more', 'than', 'a', 'single', 'document', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 10, False], None]]]], 'where': [], 'groupBy': [[0, 10, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents,"['SELECT', 'template_id', 'FROM', 'Templates', 'EXCEPT', 'SELECT', 'template_id', 'FROM', 'Documents']","['select', 'template_id', 'from', 'templates', 'except', 'select', 'template_id', 'from', 'documents']",Show ids for all templates not used by any document.,"['Show', 'ids', 'for', 'all', 'templates', 'not', 'used', 'by', 'any', 'document', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 10, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
cre_Doc_Template_Mgt,SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents,"['SELECT', 'template_id', 'FROM', 'Templates', 'EXCEPT', 'SELECT', 'template_id', 'FROM', 'Documents']","['select', 'template_id', 'from', 'templates', 'except', 'select', 'template_id', 'from', 'documents']",What are the ids for templates that are not used in any documents?,"['What', 'are', 'the', 'ids', 'for', 'templates', 'that', 'are', 'not', 'used', 'in', 'any', 'documents', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 10, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
cre_Doc_Template_Mgt,SELECT count(*) FROM Templates,"['SELECT', 'count', '(', '*', ')', 'FROM', 'Templates']","['select', 'count', '(', '*', ')', 'from', 'templates']",How many templates do we have?,"['How', 'many', 'templates', 'do', 'we', 'have', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT count(*) FROM Templates,"['SELECT', 'count', '(', '*', ')', 'FROM', 'Templates']","['select', 'count', '(', '*', ')', 'from', 'templates']",Count the number of templates.,"['Count', 'the', 'number', 'of', 'templates', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT template_id ,  version_number ,  template_type_code FROM Templates","['SELECT', 'template_id', ',', 'version_number', ',', 'template_type_code', 'FROM', 'Templates']","['select', 'template_id', ',', 'version_number', ',', 'template_type_code', 'from', 'templates']","Show template ids, version numbers, and template type codes for all templates.","['Show', 'template', 'ids', ',', 'version', 'numbers', ',', 'and', 'template', 'type', 'codes', 'for', 'all', 'templates', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT template_id ,  version_number ,  template_type_code FROM Templates","['SELECT', 'template_id', ',', 'version_number', ',', 'template_type_code', 'FROM', 'Templates']","['select', 'template_id', ',', 'version_number', ',', 'template_type_code', 'from', 'templates']","What are the ids, version numbers, and type codes for each template?","['What', 'are', 'the', 'ids', ',', 'version', 'numbers', ',', 'and', 'type', 'codes', 'for', 'each', 'template', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT DISTINCT template_type_code FROM Templates,"['SELECT', 'DISTINCT', 'template_type_code', 'FROM', 'Templates']","['select', 'distinct', 'template_type_code', 'from', 'templates']",Show all distinct template type codes for all templates.,"['Show', 'all', 'distinct', 'template', 'type', 'codes', 'for', 'all', 'templates', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [True, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT DISTINCT template_type_code FROM Templates,"['SELECT', 'DISTINCT', 'template_type_code', 'FROM', 'Templates']","['select', 'distinct', 'template_type_code', 'from', 'templates']",What are the different template type codes?,"['What', 'are', 'the', 'different', 'template', 'type', 'codes', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [True, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT template_id FROM Templates WHERE template_type_code  =  ""PP"" OR template_type_code  =  ""PPT""","['SELECT', 'template_id', 'FROM', 'Templates', 'WHERE', 'template_type_code', '=', '``', 'PP', ""''"", 'OR', 'template_type_code', '=', '``', 'PPT', ""''""]","['select', 'template_id', 'from', 'templates', 'where', 'template_type_code', '=', 'value', 'or', 'template_type_code', '=', 'value']",What are the ids of templates with template type code PP or PPT?,"['What', 'are', 'the', 'ids', 'of', 'templates', 'with', 'template', 'type', 'code', 'PP', 'or', 'PPT', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""PP""', None], 'or', [False, 2, [0, [0, 5, False], None], '""PPT""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT template_id FROM Templates WHERE template_type_code  =  ""PP"" OR template_type_code  =  ""PPT""","['SELECT', 'template_id', 'FROM', 'Templates', 'WHERE', 'template_type_code', '=', '``', 'PP', ""''"", 'OR', 'template_type_code', '=', '``', 'PPT', ""''""]","['select', 'template_id', 'from', 'templates', 'where', 'template_type_code', '=', 'value', 'or', 'template_type_code', '=', 'value']",Return the ids of templates that have the code PP or PPT.,"['Return', 'the', 'ids', 'of', 'templates', 'that', 'have', 'the', 'code', 'PP', 'or', 'PPT', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""PP""', None], 'or', [False, 2, [0, [0, 5, False], None], '""PPT""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT count(*) FROM Templates WHERE template_type_code  =  ""CV""","['SELECT', 'count', '(', '*', ')', 'FROM', 'Templates', 'WHERE', 'template_type_code', '=', '``', 'CV', ""''""]","['select', 'count', '(', '*', ')', 'from', 'templates', 'where', 'template_type_code', '=', 'value']",How many templates have template type code CV?,"['How', 'many', 'templates', 'have', 'template', 'type', 'code', 'CV', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""CV""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT count(*) FROM Templates WHERE template_type_code  =  ""CV""","['SELECT', 'count', '(', '*', ')', 'FROM', 'Templates', 'WHERE', 'template_type_code', '=', '``', 'CV', ""''""]","['select', 'count', '(', '*', ')', 'from', 'templates', 'where', 'template_type_code', '=', 'value']",Count the number of templates of the type CV.,"['Count', 'the', 'number', 'of', 'templates', 'of', 'the', 'type', 'CV', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""CV""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5","['SELECT', 'version_number', ',', 'template_type_code', 'FROM', 'Templates', 'WHERE', 'version_number', '>', '5']","['select', 'version_number', ',', 'template_type_code', 'from', 'templates', 'where', 'version_number', '>', 'value']",What is the version number and template type code for the template with version number later than 5?,"['What', 'is', 'the', 'version', 'number', 'and', 'template', 'type', 'code', 'for', 'the', 'template', 'with', 'version', 'number', 'later', 'than', '5', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'where': [[False, 3, [0, [0, 4, False], None], 5.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5","['SELECT', 'version_number', ',', 'template_type_code', 'FROM', 'Templates', 'WHERE', 'version_number', '>', '5']","['select', 'version_number', ',', 'template_type_code', 'from', 'templates', 'where', 'version_number', '>', 'value']",Return the version numbers and template type codes of templates with a version number greater than 5.,"['Return', 'the', 'version', 'numbers', 'and', 'template', 'type', 'codes', 'of', 'templates', 'with', 'a', 'version', 'number', 'greater', 'than', '5', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'where': [[False, 3, [0, [0, 4, False], None], 5.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code","['SELECT', 'template_type_code', ',', 'count', '(', '*', ')', 'FROM', 'Templates', 'GROUP', 'BY', 'template_type_code']","['select', 'template_type_code', ',', 'count', '(', '*', ')', 'from', 'templates', 'group', 'by', 'template_type_code']",Show all template type codes and number of templates for each.,"['Show', 'all', 'template', 'type', 'codes', 'and', 'number', 'of', 'templates', 'for', 'each', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code","['SELECT', 'template_type_code', ',', 'count', '(', '*', ')', 'FROM', 'Templates', 'GROUP', 'BY', 'template_type_code']","['select', 'template_type_code', ',', 'count', '(', '*', ')', 'from', 'templates', 'group', 'by', 'template_type_code']","What are the different template type codes, and how many templates correspond to each?","['What', 'are', 'the', 'different', 'template', 'type', 'codes', ',', 'and', 'how', 'many', 'templates', 'correspond', 'to', 'each', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'template_type_code', 'FROM', 'Templates', 'GROUP', 'BY', 'template_type_code', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'template_type_code', 'from', 'templates', 'group', 'by', 'template_type_code', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which template type code has most number of templates?,"['Which', 'template', 'type', 'code', 'has', 'most', 'number', 'of', 'templates', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'template_type_code', 'FROM', 'Templates', 'GROUP', 'BY', 'template_type_code', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'template_type_code', 'from', 'templates', 'group', 'by', 'template_type_code', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Return the type code of the template type that the most templates belong to.,"['Return', 'the', 'type', 'code', 'of', 'the', 'template', 'type', 'that', 'the', 'most', 'templates', 'belong', 'to', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3,"['SELECT', 'template_type_code', 'FROM', 'Templates', 'GROUP', 'BY', 'template_type_code', 'HAVING', 'count', '(', '*', ')', '<', '3']","['select', 'template_type_code', 'from', 'templates', 'group', 'by', 'template_type_code', 'having', 'count', '(', '*', ')', '<', 'value']",Show all template type codes with less than three templates.,"['Show', 'all', 'template', 'type', 'codes', 'with', 'less', 'than', 'three', 'templates', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [[False, 4, [0, [3, 0, False], None], 3.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3,"['SELECT', 'template_type_code', 'FROM', 'Templates', 'GROUP', 'BY', 'template_type_code', 'HAVING', 'count', '(', '*', ')', '<', '3']","['select', 'template_type_code', 'from', 'templates', 'group', 'by', 'template_type_code', 'having', 'count', '(', '*', ')', '<', 'value']",What are the codes of template types that have fewer than 3 templates?,"['What', 'are', 'the', 'codes', 'of', 'template', 'types', 'that', 'have', 'fewer', 'than', '3', 'templates', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [[False, 4, [0, [3, 0, False], None], 3.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT min(Version_Number) ,  template_type_code FROM Templates","['SELECT', 'min', '(', 'Version_Number', ')', ',', 'template_type_code', 'FROM', 'Templates']","['select', 'min', '(', 'version_number', ')', ',', 'template_type_code', 'from', 'templates']",What the smallest version number and its template type code?,"['What', 'the', 'smallest', 'version', 'number', 'and', 'its', 'template', 'type', 'code', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[2, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT min(Version_Number) ,  template_type_code FROM Templates","['SELECT', 'min', '(', 'Version_Number', ')', ',', 'template_type_code', 'FROM', 'Templates']","['select', 'min', '(', 'version_number', ')', ',', 'template_type_code', 'from', 'templates']","Return the lowest version number, along with its corresponding template type code.","['Return', 'the', 'lowest', 'version', 'number', ',', 'along', 'with', 'its', 'corresponding', 'template', 'type', 'code', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[2, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  ""Data base""","['SELECT', 'T1.template_type_code', 'FROM', 'Templates', 'AS', 'T1', 'JOIN', 'Documents', 'AS', 'T2', 'ON', 'T1.template_id', '=', 'T2.template_id', 'WHERE', 'T2.document_name', '=', '``', 'Data', 'base', ""''""]","['select', 't1', '.', 'template_type_code', 'from', 'templates', 'as', 't1', 'join', 'documents', 'as', 't2', 'on', 't1', '.', 'template_id', '=', 't2', '.', 'template_id', 'where', 't2', '.', 'document_name', '=', 'value']","What is the template type code of the template used by document with the name ""Data base""?","['What', 'is', 'the', 'template', 'type', 'code', 'of', 'the', 'template', 'used', 'by', 'document', 'with', 'the', 'name', '``', 'Data', 'base', ""''"", '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""Data base""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  ""Data base""","['SELECT', 'T1.template_type_code', 'FROM', 'Templates', 'AS', 'T1', 'JOIN', 'Documents', 'AS', 'T2', 'ON', 'T1.template_id', '=', 'T2.template_id', 'WHERE', 'T2.document_name', '=', '``', 'Data', 'base', ""''""]","['select', 't1', '.', 'template_type_code', 'from', 'templates', 'as', 't1', 'join', 'documents', 'as', 't2', 'on', 't1', '.', 'template_id', '=', 't2', '.', 'template_id', 'where', 't2', '.', 'document_name', '=', 'value']",Return the template type code of the template that is used by a document named Data base.,"['Return', 'the', 'template', 'type', 'code', 'of', 'the', 'template', 'that', 'is', 'used', 'by', 'a', 'document', 'named', 'Data', 'base', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""Data base""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  ""BK""","['SELECT', 'T2.document_name', 'FROM', 'Templates', 'AS', 'T1', 'JOIN', 'Documents', 'AS', 'T2', 'ON', 'T1.template_id', '=', 'T2.template_id', 'WHERE', 'T1.template_type_code', '=', '``', 'BK', ""''""]","['select', 't2', '.', 'document_name', 'from', 'templates', 'as', 't1', 'join', 'documents', 'as', 't2', 'on', 't1', '.', 'template_id', '=', 't2', '.', 'template_id', 'where', 't1', '.', 'template_type_code', '=', 'value']",Show all document names using templates with template type code BK.,"['Show', 'all', 'document', 'names', 'using', 'templates', 'with', 'template', 'type', 'code', 'BK', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""BK""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  ""BK""","['SELECT', 'T2.document_name', 'FROM', 'Templates', 'AS', 'T1', 'JOIN', 'Documents', 'AS', 'T2', 'ON', 'T1.template_id', '=', 'T2.template_id', 'WHERE', 'T1.template_type_code', '=', '``', 'BK', ""''""]","['select', 't2', '.', 'document_name', 'from', 'templates', 'as', 't1', 'join', 'documents', 'as', 't2', 'on', 't1', '.', 'template_id', '=', 't2', '.', 'template_id', 'where', 't1', '.', 'template_type_code', '=', 'value']",What are the names of documents that use templates with the code BK?,"['What', 'are', 'the', 'names', 'of', 'documents', 'that', 'use', 'templates', 'with', 'the', 'code', 'BK', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""BK""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code","['SELECT', 'T1.template_type_code', ',', 'count', '(', '*', ')', 'FROM', 'Templates', 'AS', 'T1', 'JOIN', 'Documents', 'AS', 'T2', 'ON', 'T1.template_id', '=', 'T2.template_id', 'GROUP', 'BY', 'T1.template_type_code']","['select', 't1', '.', 'template_type_code', ',', 'count', '(', '*', ')', 'from', 'templates', 'as', 't1', 'join', 'documents', 'as', 't2', 'on', 't1', '.', 'template_id', '=', 't2', '.', 'template_id', 'group', 'by', 't1', '.', 'template_type_code']",Show all template type codes and the number of documents using each type.,"['Show', 'all', 'template', 'type', 'codes', 'and', 'the', 'number', 'of', 'documents', 'using', 'each', 'type', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code","['SELECT', 'T1.template_type_code', ',', 'count', '(', '*', ')', 'FROM', 'Templates', 'AS', 'T1', 'JOIN', 'Documents', 'AS', 'T2', 'ON', 'T1.template_id', '=', 'T2.template_id', 'GROUP', 'BY', 'T1.template_type_code']","['select', 't1', '.', 'template_type_code', ',', 'count', '(', '*', ')', 'from', 'templates', 'as', 't1', 'join', 'documents', 'as', 't2', 'on', 't1', '.', 'template_id', '=', 't2', '.', 'template_id', 'group', 'by', 't1', '.', 'template_type_code']","What are the different template type codes, and how many documents use each type?","['What', 'are', 'the', 'different', 'template', 'type', 'codes', ',', 'and', 'how', 'many', 'documents', 'use', 'each', 'type', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T1.template_type_code', 'FROM', 'Templates', 'AS', 'T1', 'JOIN', 'Documents', 'AS', 'T2', 'ON', 'T1.template_id', '=', 'T2.template_id', 'GROUP', 'BY', 'T1.template_type_code', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'template_type_code', 'from', 'templates', 'as', 't1', 'join', 'documents', 'as', 't2', 'on', 't1', '.', 'template_id', '=', 't2', '.', 'template_id', 'group', 'by', 't1', '.', 'template_type_code', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which template type code is used by most number of documents?,"['Which', 'template', 'type', 'code', 'is', 'used', 'by', 'most', 'number', 'of', 'documents', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T1.template_type_code', 'FROM', 'Templates', 'AS', 'T1', 'JOIN', 'Documents', 'AS', 'T2', 'ON', 'T1.template_id', '=', 'T2.template_id', 'GROUP', 'BY', 'T1.template_type_code', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'template_type_code', 'from', 'templates', 'as', 't1', 'join', 'documents', 'as', 't2', 'on', 't1', '.', 'template_id', '=', 't2', '.', 'template_id', 'group', 'by', 't1', '.', 'template_type_code', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Return the code of the template type that is most commonly used in documents.,"['Return', 'the', 'code', 'of', 'the', 'template', 'type', 'that', 'is', 'most', 'commonly', 'used', 'in', 'documents', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id,"['SELECT', 'template_type_code', 'FROM', 'Templates', 'EXCEPT', 'SELECT', 'template_type_code', 'FROM', 'Templates', 'AS', 'T1', 'JOIN', 'Documents', 'AS', 'T2', 'ON', 'T1.template_id', '=', 'T2.template_id']","['select', 'template_type_code', 'from', 'templates', 'except', 'select', 'template_type_code', 'from', 'templates', 'as', 't1', 'join', 'documents', 'as', 't2', 'on', 't1', '.', 'template_id', '=', 't2', '.', 'template_id']",Show all template type codes that are not used by any document.,"['Show', 'all', 'template', 'type', 'codes', 'that', 'are', 'not', 'used', 'by', 'any', 'document', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
cre_Doc_Template_Mgt,SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id,"['SELECT', 'template_type_code', 'FROM', 'Templates', 'EXCEPT', 'SELECT', 'template_type_code', 'FROM', 'Templates', 'AS', 'T1', 'JOIN', 'Documents', 'AS', 'T2', 'ON', 'T1.template_id', '=', 'T2.template_id']","['select', 'template_type_code', 'from', 'templates', 'except', 'select', 'template_type_code', 'from', 'templates', 'as', 't1', 'join', 'documents', 'as', 't2', 'on', 't1', '.', 'template_id', '=', 't2', '.', 'template_id']",What are the codes of template types that are not used for any document?,"['What', 'are', 'the', 'codes', 'of', 'template', 'types', 'that', 'are', 'not', 'used', 'for', 'any', 'document', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
cre_Doc_Template_Mgt,"SELECT template_type_code ,  template_type_description FROM Ref_template_types","['SELECT', 'template_type_code', ',', 'template_type_description', 'FROM', 'Ref_template_types']","['select', 'template_type_code', ',', 'template_type_description', 'from', 'ref_template_types']",Show all template type codes and descriptions.,"['Show', 'all', 'template', 'type', 'codes', 'and', 'descriptions', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT template_type_code ,  template_type_description FROM Ref_template_types","['SELECT', 'template_type_code', ',', 'template_type_description', 'FROM', 'Ref_template_types']","['select', 'template_type_code', ',', 'template_type_description', 'from', 'ref_template_types']",What are the type codes and descriptions for all template types?,"['What', 'are', 'the', 'type', 'codes', 'and', 'descriptions', 'for', 'all', 'template', 'types', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  ""AD""","['SELECT', 'template_type_description', 'FROM', 'Ref_template_types', 'WHERE', 'template_type_code', '=', '``', 'AD', ""''""]","['select', 'template_type_description', 'from', 'ref_template_types', 'where', 'template_type_code', '=', 'value']","What is the template type descriptions for template type code ""AD"".","['What', 'is', 'the', 'template', 'type', 'descriptions', 'for', 'template', 'type', 'code', '``', 'AD', ""''"", '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 1, False], None], '""AD""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  ""AD""","['SELECT', 'template_type_description', 'FROM', 'Ref_template_types', 'WHERE', 'template_type_code', '=', '``', 'AD', ""''""]","['select', 'template_type_description', 'from', 'ref_template_types', 'where', 'template_type_code', '=', 'value']",Return the template type description of the template type with the code AD.,"['Return', 'the', 'template', 'type', 'description', 'of', 'the', 'template', 'type', 'with', 'the', 'code', 'AD', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 1, False], None], '""AD""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  ""Book""","['SELECT', 'template_type_code', 'FROM', 'Ref_template_types', 'WHERE', 'template_type_description', '=', '``', 'Book', ""''""]","['select', 'template_type_code', 'from', 'ref_template_types', 'where', 'template_type_description', '=', 'value']","What is the template type code for template type description ""Book"".","['What', 'is', 'the', 'template', 'type', 'code', 'for', 'template', 'type', 'description', '``', 'Book', ""''"", '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Book""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  ""Book""","['SELECT', 'template_type_code', 'FROM', 'Ref_template_types', 'WHERE', 'template_type_description', '=', '``', 'Book', ""''""]","['select', 'template_type_code', 'from', 'ref_template_types', 'where', 'template_type_description', '=', 'value']","Return the type code of the template type with the description ""Book"".","['Return', 'the', 'type', 'code', 'of', 'the', 'template', 'type', 'with', 'the', 'description', '``', 'Book', ""''"", '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Book""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID,"['SELECT', 'DISTINCT', 'T1.template_type_description', 'FROM', 'Ref_template_types', 'AS', 'T1', 'JOIN', 'Templates', 'AS', 'T2', 'ON', 'T1.template_type_code', '=', 'T2.template_type_code', 'JOIN', 'Documents', 'AS', 'T3', 'ON', 'T2.Template_ID', '=', 'T3.template_ID']","['select', 'distinct', 't1', '.', 'template_type_description', 'from', 'ref_template_types', 'as', 't1', 'join', 'templates', 'as', 't2', 'on', 't1', '.', 'template_type_code', '=', 't2', '.', 'template_type_code', 'join', 'documents', 'as', 't3', 'on', 't2', '.', 'template_id', '=', 't3', '.', 'template_id']",What are the distinct template type descriptions for the templates ever used by any document?,"['What', 'are', 'the', 'distinct', 'template', 'type', 'descriptions', 'for', 'the', 'templates', 'ever', 'used', 'by', 'any', 'document', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None], 'and', [False, 2, [0, [0, 3, False], None], [0, 10, False], None]]}, 'select': [True, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID,"['SELECT', 'DISTINCT', 'T1.template_type_description', 'FROM', 'Ref_template_types', 'AS', 'T1', 'JOIN', 'Templates', 'AS', 'T2', 'ON', 'T1.template_type_code', '=', 'T2.template_type_code', 'JOIN', 'Documents', 'AS', 'T3', 'ON', 'T2.Template_ID', '=', 'T3.template_ID']","['select', 'distinct', 't1', '.', 'template_type_description', 'from', 'ref_template_types', 'as', 't1', 'join', 'templates', 'as', 't2', 'on', 't1', '.', 'template_type_code', '=', 't2', '.', 'template_type_code', 'join', 'documents', 'as', 't3', 'on', 't2', '.', 'template_id', '=', 't3', '.', 'template_id']",Return the different descriptions for templates that have been used in a document.,"['Return', 'the', 'different', 'descriptions', 'for', 'templates', 'that', 'have', 'been', 'used', 'in', 'a', 'document', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None], 'and', [False, 2, [0, [0, 3, False], None], [0, 10, False], None]]}, 'select': [True, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  ""Presentation""","['SELECT', 'T2.template_id', 'FROM', 'Ref_template_types', 'AS', 'T1', 'JOIN', 'Templates', 'AS', 'T2', 'ON', 'T1.template_type_code', '=', 'T2.template_type_code', 'WHERE', 'T1.template_type_description', '=', '``', 'Presentation', ""''""]","['select', 't2', '.', 'template_id', 'from', 'ref_template_types', 'as', 't1', 'join', 'templates', 'as', 't2', 'on', 't1', '.', 'template_type_code', '=', 't2', '.', 'template_type_code', 'where', 't1', '.', 'template_type_description', '=', 'value']","What are the template ids with template type description ""Presentation"".","['What', 'are', 'the', 'template', 'ids', 'with', 'template', 'type', 'description', '``', 'Presentation', ""''"", '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Presentation""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  ""Presentation""","['SELECT', 'T2.template_id', 'FROM', 'Ref_template_types', 'AS', 'T1', 'JOIN', 'Templates', 'AS', 'T2', 'ON', 'T1.template_type_code', '=', 'T2.template_type_code', 'WHERE', 'T1.template_type_description', '=', '``', 'Presentation', ""''""]","['select', 't2', '.', 'template_id', 'from', 'ref_template_types', 'as', 't1', 'join', 'templates', 'as', 't2', 'on', 't1', '.', 'template_type_code', '=', 't2', '.', 'template_type_code', 'where', 't1', '.', 'template_type_description', '=', 'value']",Return the ids corresponding to templates with the description 'Presentation'.,"['Return', 'the', 'ids', 'corresponding', 'to', 'templates', 'with', 'the', 'description', ""'Presentation"", ""'"", '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 5, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Presentation""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT count(*) FROM Paragraphs,"['SELECT', 'count', '(', '*', ')', 'FROM', 'Paragraphs']","['select', 'count', '(', '*', ')', 'from', 'paragraphs']",How many paragraphs in total?,"['How', 'many', 'paragraphs', 'in', 'total', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT count(*) FROM Paragraphs,"['SELECT', 'count', '(', '*', ')', 'FROM', 'Paragraphs']","['select', 'count', '(', '*', ')', 'from', 'paragraphs']",Count the number of paragraphs.,"['Count', 'the', 'number', 'of', 'paragraphs', '.']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show',"['SELECT', 'count', '(', '*', ')', 'FROM', 'Paragraphs', 'AS', 'T1', 'JOIN', 'Documents', 'AS', 'T2', 'ON', 'T1.document_ID', '=', 'T2.document_ID', 'WHERE', 'T2.document_name', '=', ""'Summer"", 'Show', ""'""]","['select', 'count', '(', '*', ')', 'from', 'paragraphs', 'as', 't1', 'join', 'documents', 'as', 't2', 'on', 't1', '.', 'document_id', '=', 't2', '.', 'document_id', 'where', 't2', '.', 'document_name', '=', 'value']",How many paragraphs for the document with name 'Summer Show'?,"['How', 'many', 'paragraphs', 'for', 'the', 'document', 'with', 'name', ""'Summer"", 'Show', ""'"", '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""Summer Show""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show',"['SELECT', 'count', '(', '*', ')', 'FROM', 'Paragraphs', 'AS', 'T1', 'JOIN', 'Documents', 'AS', 'T2', 'ON', 'T1.document_ID', '=', 'T2.document_ID', 'WHERE', 'T2.document_name', '=', ""'Summer"", 'Show', ""'""]","['select', 'count', '(', '*', ')', 'from', 'paragraphs', 'as', 't1', 'join', 'documents', 'as', 't2', 'on', 't1', '.', 'document_id', '=', 't2', '.', 'document_id', 'where', 't2', '.', 'document_name', '=', 'value']",Count the number of paragraphs in the document named 'Summer Show'.,"['Count', 'the', 'number', 'of', 'paragraphs', 'in', 'the', 'document', 'named', ""'Summer"", 'Show', ""'"", '.']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""Summer Show""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,select other_details from paragraphs where paragraph_text like 'korea',"['select', 'other_details', 'from', 'paragraphs', 'where', 'paragraph_text', 'like', '""korea""']","['select', 'other_details', 'from', 'paragraphs', 'where', 'paragraph_text', 'like', 'value']",Show paragraph details for paragraph with text 'Korea ' .,"['Show', 'paragraph', 'details', 'for', 'paragraph', 'with', 'text', ""'Korea"", ""'"", '.']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 17, False], None]]]], 'where': [[False, 9, [0, [0, 16, False], None], '""korea""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,select other_details from paragraphs where paragraph_text like 'korea',"['select', 'other_details', 'from', 'paragraphs', 'where', 'paragraph_text', 'like', '""korea""']","['select', 'other_details', 'from', 'paragraphs', 'where', 'paragraph_text', 'like', 'value']",What are the details for the paragraph that includes the text 'Korea ' ?,"['What', 'are', 'the', 'details', 'for', 'the', 'paragraph', 'that', 'includes', 'the', 'text', ""'Korea"", ""'"", '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 17, False], None]]]], 'where': [[False, 9, [0, [0, 16, False], None], '""korea""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'","['SELECT', 'T1.paragraph_id', ',', 'T1.paragraph_text', 'FROM', 'Paragraphs', 'AS', 'T1', 'JOIN', 'Documents', 'AS', 'T2', 'ON', 'T1.document_id', '=', 'T2.document_id', 'WHERE', 'T2.Document_Name', '=', ""'Welcome"", 'to', 'NY', ""'""]","['select', 't1', '.', 'paragraph_id', ',', 't1', '.', 'paragraph_text', 'from', 'paragraphs', 'as', 't1', 'join', 'documents', 'as', 't2', 'on', 't1', '.', 'document_id', '=', 't2', '.', 'document_id', 'where', 't2', '.', 'document_name', '=', 'value']",Show all paragraph ids and texts for the document with name 'Welcome to NY'.,"['Show', 'all', 'paragraph', 'ids', 'and', 'texts', 'for', 'the', 'document', 'with', 'name', ""'Welcome"", 'to', 'NY', ""'"", '.']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 14, False], None]], [0, [0, [0, 16, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""Welcome to NY""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'","['SELECT', 'T1.paragraph_id', ',', 'T1.paragraph_text', 'FROM', 'Paragraphs', 'AS', 'T1', 'JOIN', 'Documents', 'AS', 'T2', 'ON', 'T1.document_id', '=', 'T2.document_id', 'WHERE', 'T2.Document_Name', '=', ""'Welcome"", 'to', 'NY', ""'""]","['select', 't1', '.', 'paragraph_id', ',', 't1', '.', 'paragraph_text', 'from', 'paragraphs', 'as', 't1', 'join', 'documents', 'as', 't2', 'on', 't1', '.', 'document_id', '=', 't2', '.', 'document_id', 'where', 't2', '.', 'document_name', '=', 'value']",What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?,"['What', 'are', 'the', 'ids', 'and', 'texts', 'of', 'paragraphs', 'in', 'the', 'document', 'titled', ""'Welcome"", 'to', 'NY', ""'"", '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 14, False], None]], [0, [0, [0, 16, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""Welcome to NY""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  ""Customer reviews""","['SELECT', 'T1.paragraph_text', 'FROM', 'Paragraphs', 'AS', 'T1', 'JOIN', 'Documents', 'AS', 'T2', 'ON', 'T1.document_id', '=', 'T2.document_id', 'WHERE', 'T2.document_name', '=', '``', 'Customer', 'reviews', ""''""]","['select', 't1', '.', 'paragraph_text', 'from', 'paragraphs', 'as', 't1', 'join', 'documents', 'as', 't2', 'on', 't1', '.', 'document_id', '=', 't2', '.', 'document_id', 'where', 't2', '.', 'document_name', '=', 'value']","Show all paragraph texts for the document ""Customer reviews"".","['Show', 'all', 'paragraph', 'texts', 'for', 'the', 'document', '``', 'Customer', 'reviews', ""''"", '.']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 16, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""Customer reviews""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  ""Customer reviews""","['SELECT', 'T1.paragraph_text', 'FROM', 'Paragraphs', 'AS', 'T1', 'JOIN', 'Documents', 'AS', 'T2', 'ON', 'T1.document_id', '=', 'T2.document_id', 'WHERE', 'T2.document_name', '=', '``', 'Customer', 'reviews', ""''""]","['select', 't1', '.', 'paragraph_text', 'from', 'paragraphs', 'as', 't1', 'join', 'documents', 'as', 't2', 'on', 't1', '.', 'document_id', '=', 't2', '.', 'document_id', 'where', 't2', '.', 'document_name', '=', 'value']",What are the paragraph texts for the document with the name 'Customer reviews'?,"['What', 'are', 'the', 'paragraph', 'texts', 'for', 'the', 'document', 'with', 'the', 'name', ""'Customer"", 'reviews', ""'"", '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 16, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""Customer reviews""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id","['SELECT', 'document_id', ',', 'count', '(', '*', ')', 'FROM', 'Paragraphs', 'GROUP', 'BY', 'document_id', 'ORDER', 'BY', 'document_id']","['select', 'document_id', ',', 'count', '(', '*', ')', 'from', 'paragraphs', 'group', 'by', 'document_id', 'order', 'by', 'document_id']",Show all document ids and the number of paragraphs in each document. Order by document id.,"['Show', 'all', 'document', 'ids', 'and', 'the', 'number', 'of', 'paragraphs', 'in', 'each', 'document', '.', 'Order', 'by', 'document', 'id', '.']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 15, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 15, False]], 'having': [], 'orderBy': ['asc', [[0, [0, 15, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id","['SELECT', 'document_id', ',', 'count', '(', '*', ')', 'FROM', 'Paragraphs', 'GROUP', 'BY', 'document_id', 'ORDER', 'BY', 'document_id']","['select', 'document_id', ',', 'count', '(', '*', ')', 'from', 'paragraphs', 'group', 'by', 'document_id', 'order', 'by', 'document_id']","Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.","['Return', 'the', 'different', 'document', 'ids', 'along', 'with', 'the', 'number', 'of', 'paragraphs', 'corresponding', 'to', 'each', ',', 'ordered', 'by', 'id', '.']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 15, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 15, False]], 'having': [], 'orderBy': ['asc', [[0, [0, 15, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id","['SELECT', 'T1.document_id', ',', 'T2.document_name', ',', 'count', '(', '*', ')', 'FROM', 'Paragraphs', 'AS', 'T1', 'JOIN', 'Documents', 'AS', 'T2', 'ON', 'T1.document_id', '=', 'T2.document_id', 'GROUP', 'BY', 'T1.document_id']","['select', 't1', '.', 'document_id', ',', 't2', '.', 'document_name', ',', 'count', '(', '*', ')', 'from', 'paragraphs', 'as', 't1', 'join', 'documents', 'as', 't2', 'on', 't1', '.', 'document_id', '=', 't2', '.', 'document_id', 'group', 'by', 't1', '.', 'document_id']","Show all document ids, names and the number of paragraphs in each document.","['Show', 'all', 'document', 'ids', ',', 'names', 'and', 'the', 'number', 'of', 'paragraphs', 'in', 'each', 'document', '.']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 11, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 15, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id","['SELECT', 'T1.document_id', ',', 'T2.document_name', ',', 'count', '(', '*', ')', 'FROM', 'Paragraphs', 'AS', 'T1', 'JOIN', 'Documents', 'AS', 'T2', 'ON', 'T1.document_id', '=', 'T2.document_id', 'GROUP', 'BY', 'T1.document_id']","['select', 't1', '.', 'document_id', ',', 't2', '.', 'document_name', ',', 'count', '(', '*', ')', 'from', 'paragraphs', 'as', 't1', 'join', 'documents', 'as', 't2', 'on', 't1', '.', 'document_id', '=', 't2', '.', 'document_id', 'group', 'by', 't1', '.', 'document_id']","What are the ids and names of each document, as well as the number of paragraphs in each?","['What', 'are', 'the', 'ids', 'and', 'names', 'of', 'each', 'document', ',', 'as', 'well', 'as', 'the', 'number', 'of', 'paragraphs', 'in', 'each', '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 11, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 15, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2,"['SELECT', 'document_id', 'FROM', 'Paragraphs', 'GROUP', 'BY', 'document_id', 'HAVING', 'count', '(', '*', ')', '>', '=', '2']","['select', 'document_id', 'from', 'paragraphs', 'group', 'by', 'document_id', 'having', 'count', '(', '*', ')', '>', '=', 'value']",List all document ids with at least two paragraphs.,"['List', 'all', 'document', 'ids', 'with', 'at', 'least', 'two', 'paragraphs', '.']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 15, False], None]]]], 'where': [], 'groupBy': [[0, 15, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2,"['SELECT', 'document_id', 'FROM', 'Paragraphs', 'GROUP', 'BY', 'document_id', 'HAVING', 'count', '(', '*', ')', '>', '=', '2']","['select', 'document_id', 'from', 'paragraphs', 'group', 'by', 'document_id', 'having', 'count', '(', '*', ')', '>', '=', 'value']",What are the ids of documents that have 2 or more paragraphs?,"['What', 'are', 'the', 'ids', 'of', 'documents', 'that', 'have', '2', 'or', 'more', 'paragraphs', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 15, False], None]]]], 'where': [], 'groupBy': [[0, 15, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'T1.document_id', ',', 'T2.document_name', 'FROM', 'Paragraphs', 'AS', 'T1', 'JOIN', 'Documents', 'AS', 'T2', 'ON', 'T1.document_id', '=', 'T2.document_id', 'GROUP', 'BY', 'T1.document_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'document_id', ',', 't2', '.', 'document_name', 'from', 'paragraphs', 'as', 't1', 'join', 'documents', 'as', 't2', 'on', 't1', '.', 'document_id', '=', 't2', '.', 'document_id', 'group', 'by', 't1', '.', 'document_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the document id and name with greatest number of paragraphs?,"['What', 'is', 'the', 'document', 'id', 'and', 'name', 'with', 'greatest', 'number', 'of', 'paragraphs', '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 11, False], None]]]], 'where': [], 'groupBy': [[0, 15, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'T1.document_id', ',', 'T2.document_name', 'FROM', 'Paragraphs', 'AS', 'T1', 'JOIN', 'Documents', 'AS', 'T2', 'ON', 'T1.document_id', '=', 'T2.document_id', 'GROUP', 'BY', 'T1.document_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'document_id', ',', 't2', '.', 'document_name', 'from', 'paragraphs', 'as', 't1', 'join', 'documents', 'as', 't2', 'on', 't1', '.', 'document_id', '=', 't2', '.', 'document_id', 'group', 'by', 't1', '.', 'document_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Return the id and name of the document with the most paragraphs.,"['Return', 'the', 'id', 'and', 'name', 'of', 'the', 'document', 'with', 'the', 'most', 'paragraphs', '.']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 15, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 11, False], None]]]], 'where': [], 'groupBy': [[0, 15, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1,"['SELECT', 'document_id', 'FROM', 'Paragraphs', 'GROUP', 'BY', 'document_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'ASC', 'LIMIT', '1']","['select', 'document_id', 'from', 'paragraphs', 'group', 'by', 'document_id', 'order', 'by', 'count', '(', '*', ')', 'asc', 'limit', 'value']",What is the document id with least number of paragraphs?,"['What', 'is', 'the', 'document', 'id', 'with', 'least', 'number', 'of', 'paragraphs', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 15, False], None]]]], 'where': [], 'groupBy': [[0, 15, False]], 'having': [], 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1,"['SELECT', 'document_id', 'FROM', 'Paragraphs', 'GROUP', 'BY', 'document_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'ASC', 'LIMIT', '1']","['select', 'document_id', 'from', 'paragraphs', 'group', 'by', 'document_id', 'order', 'by', 'count', '(', '*', ')', 'asc', 'limit', 'value']",Return the id of the document with the fewest paragraphs.,"['Return', 'the', 'id', 'of', 'the', 'document', 'with', 'the', 'fewest', 'paragraphs', '.']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 15, False], None]]]], 'where': [], 'groupBy': [[0, 15, False]], 'having': [], 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2,"['SELECT', 'document_id', 'FROM', 'Paragraphs', 'GROUP', 'BY', 'document_id', 'HAVING', 'count', '(', '*', ')', 'BETWEEN', '1', 'AND', '2']","['select', 'document_id', 'from', 'paragraphs', 'group', 'by', 'document_id', 'having', 'count', '(', '*', ')', 'between', 'value', 'and', 'value']",What is the document id with 1 to 2 paragraphs?,"['What', 'is', 'the', 'document', 'id', 'with', '1', 'to', '2', 'paragraphs', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 15, False], None]]]], 'where': [], 'groupBy': [[0, 15, False]], 'having': [[False, 1, [0, [3, 0, False], None], 1.0, 2.0]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2,"['SELECT', 'document_id', 'FROM', 'Paragraphs', 'GROUP', 'BY', 'document_id', 'HAVING', 'count', '(', '*', ')', 'BETWEEN', '1', 'AND', '2']","['select', 'document_id', 'from', 'paragraphs', 'group', 'by', 'document_id', 'having', 'count', '(', '*', ')', 'between', 'value', 'and', 'value']",Give the ids of documents that have between one and two paragraphs.,"['Give', 'the', 'ids', 'of', 'documents', 'that', 'have', 'between', 'one', 'and', 'two', 'paragraphs', '.']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 15, False], None]]]], 'where': [], 'groupBy': [[0, 15, False]], 'having': [[False, 1, [0, [3, 0, False], None], 1.0, 2.0]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland',"['SELECT', 'document_id', 'FROM', 'Paragraphs', 'WHERE', 'paragraph_text', '=', ""'Brazil"", ""'"", 'INTERSECT', 'SELECT', 'document_id', 'FROM', 'Paragraphs', 'WHERE', 'paragraph_text', '=', ""'Ireland"", ""'""]","['select', 'document_id', 'from', 'paragraphs', 'where', 'paragraph_text', '=', 'value', 'intersect', 'select', 'document_id', 'from', 'paragraphs', 'where', 'paragraph_text', '=', 'value']",Show the document id with paragraph text 'Brazil' and 'Ireland'.,"['Show', 'the', 'document', 'id', 'with', 'paragraph', 'text', ""'Brazil"", ""'"", 'and', ""'Ireland"", ""'"", '.']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 15, False], None]]]], 'where': [[False, 2, [0, [0, 16, False], None], '""Brazil""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 15, False], None]]]], 'where': [[False, 2, [0, [0, 16, False], None], '""Ireland""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
cre_Doc_Template_Mgt,SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland',"['SELECT', 'document_id', 'FROM', 'Paragraphs', 'WHERE', 'paragraph_text', '=', ""'Brazil"", ""'"", 'INTERSECT', 'SELECT', 'document_id', 'FROM', 'Paragraphs', 'WHERE', 'paragraph_text', '=', ""'Ireland"", ""'""]","['select', 'document_id', 'from', 'paragraphs', 'where', 'paragraph_text', '=', 'value', 'intersect', 'select', 'document_id', 'from', 'paragraphs', 'where', 'paragraph_text', '=', 'value']",What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?,"['What', 'are', 'the', 'ids', 'of', 'documents', 'that', 'contain', 'the', 'paragraph', 'text', ""'Brazil"", ""'"", 'and', ""'Ireland"", ""'"", '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 15, False], None]]]], 'where': [[False, 2, [0, [0, 16, False], None], '""Brazil""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 15, False], None]]]], 'where': [[False, 2, [0, [0, 16, False], None], '""Ireland""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
course_teach,SELECT count(*) FROM teacher,"['SELECT', 'count', '(', '*', ')', 'FROM', 'teacher']","['select', 'count', '(', '*', ')', 'from', 'teacher']",How many teachers are there?,"['How', 'many', 'teachers', 'are', 'there', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,SELECT count(*) FROM teacher,"['SELECT', 'count', '(', '*', ')', 'FROM', 'teacher']","['select', 'count', '(', '*', ')', 'from', 'teacher']",What is the total count of teachers?,"['What', 'is', 'the', 'total', 'count', 'of', 'teachers', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,SELECT Name FROM teacher ORDER BY Age ASC,"['SELECT', 'Name', 'FROM', 'teacher', 'ORDER', 'BY', 'Age', 'ASC']","['select', 'name', 'from', 'teacher', 'order', 'by', 'age', 'asc']",List the names of teachers in ascending order of age.,"['List', 'the', 'names', 'of', 'teachers', 'in', 'ascending', 'order', 'of', 'age', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 6, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,SELECT Name FROM teacher ORDER BY Age ASC,"['SELECT', 'Name', 'FROM', 'teacher', 'ORDER', 'BY', 'Age', 'ASC']","['select', 'name', 'from', 'teacher', 'order', 'by', 'age', 'asc']",What are the names of the teachers ordered by ascending age?,"['What', 'are', 'the', 'names', 'of', 'the', 'teachers', 'ordered', 'by', 'ascending', 'age', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 6, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,"SELECT Age ,  Hometown FROM teacher","['SELECT', 'Age', ',', 'Hometown', 'FROM', 'teacher']","['select', 'age', ',', 'hometown', 'from', 'teacher']",What are the age and hometown of teachers?,"['What', 'are', 'the', 'age', 'and', 'hometown', 'of', 'teachers', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,"SELECT Age ,  Hometown FROM teacher","['SELECT', 'Age', ',', 'Hometown', 'FROM', 'teacher']","['select', 'age', ',', 'hometown', 'from', 'teacher']",What is the age and hometown of every teacher?,"['What', 'is', 'the', 'age', 'and', 'hometown', 'of', 'every', 'teacher', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,"select name from teacher where hometown != ""little lever urban district""","['select', 'name', 'from', 'teacher', 'where', 'hometown', '!=', '""little lever urban district""']","['select', 'name', 'from', 'teacher', 'where', 'hometown', '!', '=', 'value']",List the name of teachers whose hometown is not `` Little Lever Urban District '' .,"['List', 'the', 'name', 'of', 'teachers', 'whose', 'hometown', 'is', 'not', '``', 'Little', 'Lever', 'Urban', 'District', ""''"", '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [[False, 7, [0, [0, 7, False], None], '""little lever urban district""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,"select name from teacher where hometown != ""little lever urban district""","['select', 'name', 'from', 'teacher', 'where', 'hometown', '!=', '""little lever urban district""']","['select', 'name', 'from', 'teacher', 'where', 'hometown', '!', '=', 'value']",What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?,"['What', 'are', 'the', 'names', 'of', 'the', 'teachers', 'whose', 'hometown', 'is', 'not', '``', 'Little', 'Lever', 'Urban', 'District', ""''"", '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [[False, 7, [0, [0, 7, False], None], '""little lever urban district""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33,"['SELECT', 'Name', 'FROM', 'teacher', 'WHERE', 'Age', '=', '32', 'OR', 'Age', '=', '33']","['select', 'name', 'from', 'teacher', 'where', 'age', '=', 'value', 'or', 'age', '=', 'value']",Show the name of teachers aged either 32 or 33?,"['Show', 'the', 'name', 'of', 'teachers', 'aged', 'either', '32', 'or', '33', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [[False, 2, [0, [0, 6, False], None], 32.0, None], 'or', [False, 2, [0, [0, 6, False], None], 33.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33,"['SELECT', 'Name', 'FROM', 'teacher', 'WHERE', 'Age', '=', '32', 'OR', 'Age', '=', '33']","['select', 'name', 'from', 'teacher', 'where', 'age', '=', 'value', 'or', 'age', '=', 'value']",What are the names of the teachers who are aged either 32 or 33?,"['What', 'are', 'the', 'names', 'of', 'the', 'teachers', 'who', 'are', 'aged', 'either', '32', 'or', '33', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [[False, 2, [0, [0, 6, False], None], 32.0, None], 'or', [False, 2, [0, [0, 6, False], None], 33.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1,"['SELECT', 'Hometown', 'FROM', 'teacher', 'ORDER', 'BY', 'Age', 'ASC', 'LIMIT', '1']","['select', 'hometown', 'from', 'teacher', 'order', 'by', 'age', 'asc', 'limit', 'value']",What is the hometown of the youngest teacher?,"['What', 'is', 'the', 'hometown', 'of', 'the', 'youngest', 'teacher', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 6, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
course_teach,SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1,"['SELECT', 'Hometown', 'FROM', 'teacher', 'ORDER', 'BY', 'Age', 'ASC', 'LIMIT', '1']","['select', 'hometown', 'from', 'teacher', 'order', 'by', 'age', 'asc', 'limit', 'value']",Where is the youngest teacher from?,"['Where', 'is', 'the', 'youngest', 'teacher', 'from', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 6, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
course_teach,"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown","['SELECT', 'Hometown', ',', 'COUNT', '(', '*', ')', 'FROM', 'teacher', 'GROUP', 'BY', 'Hometown']","['select', 'hometown', ',', 'count', '(', '*', ')', 'from', 'teacher', 'group', 'by', 'hometown']",Show different hometown of teachers and the number of teachers from each hometown.,"['Show', 'different', 'hometown', 'of', 'teachers', 'and', 'the', 'number', 'of', 'teachers', 'from', 'each', 'hometown', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 7, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 7, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown","['SELECT', 'Hometown', ',', 'COUNT', '(', '*', ')', 'FROM', 'teacher', 'GROUP', 'BY', 'Hometown']","['select', 'hometown', ',', 'count', '(', '*', ')', 'from', 'teacher', 'group', 'by', 'hometown']","For each hometown, how many teachers are there?","['For', 'each', 'hometown', ',', 'how', 'many', 'teachers', 'are', 'there', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 7, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 7, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1,"['SELECT', 'Hometown', 'FROM', 'teacher', 'GROUP', 'BY', 'Hometown', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'hometown', 'from', 'teacher', 'group', 'by', 'hometown', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",List the most common hometown of teachers.,"['List', 'the', 'most', 'common', 'hometown', 'of', 'teachers', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [[0, 7, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
course_teach,SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1,"['SELECT', 'Hometown', 'FROM', 'teacher', 'GROUP', 'BY', 'Hometown', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'hometown', 'from', 'teacher', 'group', 'by', 'hometown', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the most commmon hometowns for teachers?,"['What', 'is', 'the', 'most', 'commmon', 'hometowns', 'for', 'teachers', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [[0, 7, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
course_teach,SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2,"['SELECT', 'Hometown', 'FROM', 'teacher', 'GROUP', 'BY', 'Hometown', 'HAVING', 'COUNT', '(', '*', ')', '>', '=', '2']","['select', 'hometown', 'from', 'teacher', 'group', 'by', 'hometown', 'having', 'count', '(', '*', ')', '>', '=', 'value']",Show the hometowns shared by at least two teachers.,"['Show', 'the', 'hometowns', 'shared', 'by', 'at', 'least', 'two', 'teachers', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [[0, 7, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2,"['SELECT', 'Hometown', 'FROM', 'teacher', 'GROUP', 'BY', 'Hometown', 'HAVING', 'COUNT', '(', '*', ')', '>', '=', '2']","['select', 'hometown', 'from', 'teacher', 'group', 'by', 'hometown', 'having', 'count', '(', '*', ')', '>', '=', 'value']",What are the towns from which at least two teachers come from?,"['What', 'are', 'the', 'towns', 'from', 'which', 'at', 'least', 'two', 'teachers', 'come', 'from', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [[0, 7, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID","['SELECT', 'T3.Name', ',', 'T2.Course', 'FROM', 'course_arrange', 'AS', 'T1', 'JOIN', 'course', 'AS', 'T2', 'ON', 'T1.Course_ID', '=', 'T2.Course_ID', 'JOIN', 'teacher', 'AS', 'T3', 'ON', 'T1.Teacher_ID', '=', 'T3.Teacher_ID']","['select', 't3', '.', 'name', ',', 't2', '.', 'course', 'from', 'course_arrange', 'as', 't1', 'join', 'course', 'as', 't2', 'on', 't1', '.', 'course_id', '=', 't2', '.', 'course_id', 'join', 'teacher', 'as', 't3', 'on', 't1', '.', 'teacher_id', '=', 't3', '.', 'teacher_id']",Show names of teachers and the courses they are arranged to teach.,"['Show', 'names', 'of', 'teachers', 'and', 'the', 'courses', 'they', 'are', 'arranged', 'to', 'teach', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 1, False], None], 'and', [False, 2, [0, [0, 9, False], None], [0, 4, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID","['SELECT', 'T3.Name', ',', 'T2.Course', 'FROM', 'course_arrange', 'AS', 'T1', 'JOIN', 'course', 'AS', 'T2', 'ON', 'T1.Course_ID', '=', 'T2.Course_ID', 'JOIN', 'teacher', 'AS', 'T3', 'ON', 'T1.Teacher_ID', '=', 'T3.Teacher_ID']","['select', 't3', '.', 'name', ',', 't2', '.', 'course', 'from', 'course_arrange', 'as', 't1', 'join', 'course', 'as', 't2', 'on', 't1', '.', 'course_id', '=', 't2', '.', 'course_id', 'join', 'teacher', 'as', 't3', 'on', 't1', '.', 'teacher_id', '=', 't3', '.', 'teacher_id']",What is the name of each teacher and what course they teach?,"['What', 'is', 'the', 'name', 'of', 'each', 'teacher', 'and', 'what', 'course', 'they', 'teach', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 1, False], None], 'and', [False, 2, [0, [0, 9, False], None], [0, 4, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name","['SELECT', 'T3.Name', ',', 'T2.Course', 'FROM', 'course_arrange', 'AS', 'T1', 'JOIN', 'course', 'AS', 'T2', 'ON', 'T1.Course_ID', '=', 'T2.Course_ID', 'JOIN', 'teacher', 'AS', 'T3', 'ON', 'T1.Teacher_ID', '=', 'T3.Teacher_ID', 'ORDER', 'BY', 'T3.Name']","['select', 't3', '.', 'name', ',', 't2', '.', 'course', 'from', 'course_arrange', 'as', 't1', 'join', 'course', 'as', 't2', 'on', 't1', '.', 'course_id', '=', 't2', '.', 'course_id', 'join', 'teacher', 'as', 't3', 'on', 't1', '.', 'teacher_id', '=', 't3', '.', 'teacher_id', 'order', 'by', 't3', '.', 'name']",Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.,"['Show', 'names', 'of', 'teachers', 'and', 'the', 'courses', 'they', 'are', 'arranged', 'to', 'teach', 'in', 'ascending', 'alphabetical', 'order', 'of', 'the', 'teacher', ""'s"", 'name', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 1, False], None], 'and', [False, 2, [0, [0, 9, False], None], [0, 4, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name","['SELECT', 'T3.Name', ',', 'T2.Course', 'FROM', 'course_arrange', 'AS', 'T1', 'JOIN', 'course', 'AS', 'T2', 'ON', 'T1.Course_ID', '=', 'T2.Course_ID', 'JOIN', 'teacher', 'AS', 'T3', 'ON', 'T1.Teacher_ID', '=', 'T3.Teacher_ID', 'ORDER', 'BY', 'T3.Name']","['select', 't3', '.', 'name', ',', 't2', '.', 'course', 'from', 'course_arrange', 'as', 't1', 'join', 'course', 'as', 't2', 'on', 't1', '.', 'course_id', '=', 't2', '.', 'course_id', 'join', 'teacher', 'as', 't3', 'on', 't1', '.', 'teacher_id', '=', 't3', '.', 'teacher_id', 'order', 'by', 't3', '.', 'name']",What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?,"['What', 'are', 'the', 'names', 'of', 'the', 'teachers', 'and', 'the', 'courses', 'they', 'teach', 'in', 'ascending', 'alphabetical', 'order', 'by', 'the', 'name', 'of', 'the', 'teacher', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 1, False], None], 'and', [False, 2, [0, [0, 9, False], None], [0, 4, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  ""Math""","['SELECT', 'T3.Name', 'FROM', 'course_arrange', 'AS', 'T1', 'JOIN', 'course', 'AS', 'T2', 'ON', 'T1.Course_ID', '=', 'T2.Course_ID', 'JOIN', 'teacher', 'AS', 'T3', 'ON', 'T1.Teacher_ID', '=', 'T3.Teacher_ID', 'WHERE', 'T2.Course', '=', '``', 'Math', ""''""]","['select', 't3', '.', 'name', 'from', 'course_arrange', 'as', 't1', 'join', 'course', 'as', 't2', 'on', 't1', '.', 'course_id', '=', 't2', '.', 'course_id', 'join', 'teacher', 'as', 't3', 'on', 't1', '.', 'teacher_id', '=', 't3', '.', 'teacher_id', 'where', 't2', '.', 'course', '=', 'value']",Show the name of the teacher for the math course.,"['Show', 'the', 'name', 'of', 'the', 'teacher', 'for', 'the', 'math', 'course', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 1, False], None], 'and', [False, 2, [0, [0, 9, False], None], [0, 4, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [[False, 2, [0, [0, 3, False], None], '""Math""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  ""Math""","['SELECT', 'T3.Name', 'FROM', 'course_arrange', 'AS', 'T1', 'JOIN', 'course', 'AS', 'T2', 'ON', 'T1.Course_ID', '=', 'T2.Course_ID', 'JOIN', 'teacher', 'AS', 'T3', 'ON', 'T1.Teacher_ID', '=', 'T3.Teacher_ID', 'WHERE', 'T2.Course', '=', '``', 'Math', ""''""]","['select', 't3', '.', 'name', 'from', 'course_arrange', 'as', 't1', 'join', 'course', 'as', 't2', 'on', 't1', '.', 'course_id', '=', 't2', '.', 'course_id', 'join', 'teacher', 'as', 't3', 'on', 't1', '.', 'teacher_id', '=', 't3', '.', 'teacher_id', 'where', 't2', '.', 'course', '=', 'value']",What are the names of the people who teach math courses?,"['What', 'are', 'the', 'names', 'of', 'the', 'people', 'who', 'teach', 'math', 'courses', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 1, False], None], 'and', [False, 2, [0, [0, 9, False], None], [0, 4, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [[False, 2, [0, [0, 3, False], None], '""Math""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name","['SELECT', 'T2.Name', ',', 'COUNT', '(', '*', ')', 'FROM', 'course_arrange', 'AS', 'T1', 'JOIN', 'teacher', 'AS', 'T2', 'ON', 'T1.Teacher_ID', '=', 'T2.Teacher_ID', 'GROUP', 'BY', 'T2.Name']","['select', 't2', '.', 'name', ',', 'count', '(', '*', ')', 'from', 'course_arrange', 'as', 't1', 'join', 'teacher', 'as', 't2', 'on', 't1', '.', 'teacher_id', '=', 't2', '.', 'teacher_id', 'group', 'by', 't2', '.', 'name']",Show names of teachers and the number of courses they teach.,"['Show', 'names', 'of', 'teachers', 'and', 'the', 'number', 'of', 'courses', 'they', 'teach', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 9, False], None], [0, 4, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name","['SELECT', 'T2.Name', ',', 'COUNT', '(', '*', ')', 'FROM', 'course_arrange', 'AS', 'T1', 'JOIN', 'teacher', 'AS', 'T2', 'ON', 'T1.Teacher_ID', '=', 'T2.Teacher_ID', 'GROUP', 'BY', 'T2.Name']","['select', 't2', '.', 'name', ',', 'count', '(', '*', ')', 'from', 'course_arrange', 'as', 't1', 'join', 'teacher', 'as', 't2', 'on', 't1', '.', 'teacher_id', '=', 't2', '.', 'teacher_id', 'group', 'by', 't2', '.', 'name']",What are the names of the teachers and how many courses do they teach?,"['What', 'are', 'the', 'names', 'of', 'the', 'teachers', 'and', 'how', 'many', 'courses', 'do', 'they', 'teach', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 9, False], None], [0, 4, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2,"['SELECT', 'T2.Name', 'FROM', 'course_arrange', 'AS', 'T1', 'JOIN', 'teacher', 'AS', 'T2', 'ON', 'T1.Teacher_ID', '=', 'T2.Teacher_ID', 'GROUP', 'BY', 'T2.Name', 'HAVING', 'COUNT', '(', '*', ')', '>', '=', '2']","['select', 't2', '.', 'name', 'from', 'course_arrange', 'as', 't1', 'join', 'teacher', 'as', 't2', 'on', 't1', '.', 'teacher_id', '=', 't2', '.', 'teacher_id', 'group', 'by', 't2', '.', 'name', 'having', 'count', '(', '*', ')', '>', '=', 'value']",Show names of teachers that teach at least two courses.,"['Show', 'names', 'of', 'teachers', 'that', 'teach', 'at', 'least', 'two', 'courses', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 9, False], None], [0, 4, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2,"['SELECT', 'T2.Name', 'FROM', 'course_arrange', 'AS', 'T1', 'JOIN', 'teacher', 'AS', 'T2', 'ON', 'T1.Teacher_ID', '=', 'T2.Teacher_ID', 'GROUP', 'BY', 'T2.Name', 'HAVING', 'COUNT', '(', '*', ')', '>', '=', '2']","['select', 't2', '.', 'name', 'from', 'course_arrange', 'as', 't1', 'join', 'teacher', 'as', 't2', 'on', 't1', '.', 'teacher_id', '=', 't2', '.', 'teacher_id', 'group', 'by', 't2', '.', 'name', 'having', 'count', '(', '*', ')', '>', '=', 'value']",What are the names of the teachers who teach at least two courses?,"['What', 'are', 'the', 'names', 'of', 'the', 'teachers', 'who', 'teach', 'at', 'least', 'two', 'courses', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 9, False], None], [0, 4, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange),"['SELECT', 'Name', 'FROM', 'teacher', 'WHERE', 'Teacher_id', 'NOT', 'IN', '(', 'SELECT', 'Teacher_id', 'FROM', 'course_arrange', ')']","['select', 'name', 'from', 'teacher', 'where', 'teacher_id', 'not', 'in', '(', 'select', 'teacher_id', 'from', 'course_arrange', ')']",List the names of teachers who have not been arranged to teach courses.,"['List', 'the', 'names', 'of', 'teachers', 'who', 'have', 'not', 'been', 'arranged', 'to', 'teach', 'courses', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [[True, 8, [0, [0, 4, False], None], {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
course_teach,SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange),"['SELECT', 'Name', 'FROM', 'teacher', 'WHERE', 'Teacher_id', 'NOT', 'IN', '(', 'SELECT', 'Teacher_id', 'FROM', 'course_arrange', ')']","['select', 'name', 'from', 'teacher', 'where', 'teacher_id', 'not', 'in', '(', 'select', 'teacher_id', 'from', 'course_arrange', ')']",What are the names of the teachers whose courses have not been arranged?,"['What', 'are', 'the', 'names', 'of', 'the', 'teachers', 'whose', 'courses', 'have', 'not', 'been', 'arranged', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [[True, 8, [0, [0, 4, False], None], {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
museum_visit,SELECT count(*) FROM visitor WHERE age  <  30,"['SELECT', 'count', '(', '*', ')', 'FROM', 'visitor', 'WHERE', 'age', '<', '30']","['select', 'count', '(', '*', ')', 'from', 'visitor', 'where', 'age', '<', 'value']",How many visitors below age 30 are there?,"['How', 'many', 'visitors', 'below', 'age', '30', 'are', 'there', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 4, [0, [0, 8, False], None], 30.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
museum_visit,SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC,"['SELECT', 'name', 'FROM', 'visitor', 'WHERE', 'Level_of_membership', '>', '4', 'ORDER', 'BY', 'Level_of_membership', 'DESC']","['select', 'name', 'from', 'visitor', 'where', 'level_of_membership', '>', 'value', 'order', 'by', 'level_of_membership', 'desc']","Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.","['Find', 'the', 'names', 'of', 'the', 'visitors', 'whose', 'membership', 'level', 'is', 'higher', 'than', '4', ',', 'and', 'order', 'the', 'results', 'by', 'the', 'level', 'from', 'high', 'to', 'low', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [[False, 3, [0, [0, 7, False], None], 4.0, None]], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 7, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
museum_visit,SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4,"['SELECT', 'avg', '(', 'age', ')', 'FROM', 'visitor', 'WHERE', 'Level_of_membership', '<', '=', '4']","['select', 'avg', '(', 'age', ')', 'from', 'visitor', 'where', 'level_of_membership', '<', '=', 'value']",What is the average age of the visitors whose membership level is not higher than 4?,"['What', 'is', 'the', 'average', 'age', 'of', 'the', 'visitors', 'whose', 'membership', 'level', 'is', 'not', 'higher', 'than', '4', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[5, [0, [0, 8, False], None]]]], 'where': [[False, 6, [0, [0, 7, False], None], 4.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
museum_visit,"SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC","['SELECT', 'name', ',', 'Level_of_membership', 'FROM', 'visitor', 'WHERE', 'Level_of_membership', '>', '4', 'ORDER', 'BY', 'age', 'DESC']","['select', 'name', ',', 'level_of_membership', 'from', 'visitor', 'where', 'level_of_membership', '>', 'value', 'order', 'by', 'age', 'desc']","Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.","['Find', 'the', 'name', 'and', 'membership', 'level', 'of', 'the', 'visitors', 'whose', 'membership', 'level', 'is', 'higher', 'than', '4', ',', 'and', 'sort', 'by', 'their', 'age', 'from', 'old', 'to', 'young', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'where': [[False, 3, [0, [0, 7, False], None], 4.0, None]], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 8, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
museum_visit,"SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1","['SELECT', 'museum_id', ',', 'name', 'FROM', 'museum', 'ORDER', 'BY', 'num_of_staff', 'DESC', 'LIMIT', '1']","['select', 'museum_id', ',', 'name', 'from', 'museum', 'order', 'by', 'num_of_staff', 'desc', 'limit', 'value']",Find the id and name of the museum that has the most staff members?,"['Find', 'the', 'id', 'and', 'name', 'of', 'the', 'museum', 'that', 'has', 'the', 'most', 'staff', 'members', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 3, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
museum_visit,SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009,"['SELECT', 'avg', '(', 'num_of_staff', ')', 'FROM', 'museum', 'WHERE', 'open_year', '<', '2009']","['select', 'avg', '(', 'num_of_staff', ')', 'from', 'museum', 'where', 'open_year', '<', 'value']",Find the average number of staff working for the museums that were open before 2009.,"['Find', 'the', 'average', 'number', 'of', 'staff', 'working', 'for', 'the', 'museums', 'that', 'were', 'open', 'before', '2009', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[5, [0, [0, 3, False], None]]]], 'where': [[False, 4, [0, [0, 4, False], None], 2009.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
museum_visit,"SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'","['SELECT', 'Num_of_Staff', ',', 'Open_Year', 'FROM', 'museum', 'WHERE', 'name', '=', ""'Plaza"", 'Museum', ""'""]","['select', 'num_of_staff', ',', 'open_year', 'from', 'museum', 'where', 'name', '=', 'value']",What are the opening year and staff number of the museum named Plaza Museum?,"['What', 'are', 'the', 'opening', 'year', 'and', 'staff', 'number', 'of', 'the', 'museum', 'named', 'Plaza', 'Museum', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Plaza Museum""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
museum_visit,SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010),"['SELECT', 'name', 'FROM', 'museum', 'WHERE', 'num_of_staff', '>', '(', 'SELECT', 'min', '(', 'num_of_staff', ')', 'FROM', 'museum', 'WHERE', 'open_year', '>', '2010', ')']","['select', 'name', 'from', 'museum', 'where', 'num_of_staff', '>', '(', 'select', 'min', '(', 'num_of_staff', ')', 'from', 'museum', 'where', 'open_year', '>', 'value', ')']",find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.,"['find', 'the', 'names', 'of', 'museums', 'which', 'have', 'more', 'staff', 'than', 'the', 'minimum', 'staff', 'number', 'of', 'all', 'museums', 'opened', 'after', '2010', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 3, [0, [0, 3, False], None], {'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[2, [0, [0, 3, False], None]]]], 'where': [[False, 3, [0, [0, 4, False], None], 2010.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
museum_visit,"SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1","['SELECT', 't1.id', ',', 't1.name', ',', 't1.age', 'FROM', 'visitor', 'AS', 't1', 'JOIN', 'visit', 'AS', 't2', 'ON', 't1.id', '=', 't2.visitor_id', 'GROUP', 'BY', 't1.id', 'HAVING', 'count', '(', '*', ')', '>', '1']","['select', 't1', '.', 'id', ',', 't1', '.', 'name', ',', 't1', '.', 'age', 'from', 'visitor', 'as', 't1', 'join', 'visit', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'visitor_id', 'group', 'by', 't1', '.', 'id', 'having', 'count', '(', '*', ')', '>', 'value']","find the id, name and age for visitors who visited some museums more than once.","['find', 'the', 'id', ',', 'name', 'and', 'age', 'for', 'visitors', 'who', 'visited', 'some', 'museums', 'more', 'than', 'once', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 5, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 8, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
museum_visit,"SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1","['SELECT', 't2.visitor_id', ',', 't1.name', ',', 't1.Level_of_membership', 'FROM', 'visitor', 'AS', 't1', 'JOIN', 'visit', 'AS', 't2', 'ON', 't1.id', '=', 't2.visitor_id', 'GROUP', 'BY', 't2.visitor_id', 'ORDER', 'BY', 'sum', '(', 't2.Total_spent', ')', 'DESC', 'LIMIT', '1']","['select', 't2', '.', 'visitor_id', ',', 't1', '.', 'name', ',', 't1', '.', 'level_of_membership', 'from', 'visitor', 'as', 't1', 'join', 'visit', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'visitor_id', 'group', 'by', 't2', '.', 'visitor_id', 'order', 'by', 'sum', '(', 't2', '.', 'total_spent', ')', 'desc', 'limit', 'value']","What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?","['What', 'are', 'the', 'id', ',', 'name', 'and', 'membership', 'level', 'of', 'visitors', 'who', 'have', 'spent', 'the', 'largest', 'amount', 'of', 'money', 'in', 'total', 'in', 'all', 'museum', 'tickets', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 5, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [[0, 10, False]], 'having': [], 'orderBy': ['desc', [[0, [4, 12, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
museum_visit,"SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1","['SELECT', 't2.Museum_ID', ',', 't1.name', 'FROM', 'museum', 'AS', 't1', 'JOIN', 'visit', 'AS', 't2', 'ON', 't1.Museum_ID', '=', 't2.Museum_ID', 'GROUP', 'BY', 't2.Museum_ID', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't2', '.', 'museum_id', ',', 't1', '.', 'name', 'from', 'museum', 'as', 't1', 'join', 'visit', 'as', 't2', 'on', 't1', '.', 'museum_id', '=', 't2', '.', 'museum_id', 'group', 'by', 't2', '.', 'museum_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What are the id and name of the museum visited most times?,"['What', 'are', 'the', 'id', 'and', 'name', 'of', 'the', 'museum', 'visited', 'most', 'times', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 9, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
museum_visit,SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit),"['SELECT', 'name', 'FROM', 'museum', 'WHERE', 'Museum_ID', 'NOT', 'IN', '(', 'SELECT', 'museum_id', 'FROM', 'visit', ')']","['select', 'name', 'from', 'museum', 'where', 'museum_id', 'not', 'in', '(', 'select', 'museum_id', 'from', 'visit', ')']",What is the name of the museum that had no visitor yet?,"['What', 'is', 'the', 'name', 'of', 'the', 'museum', 'that', 'had', 'no', 'visitor', 'yet', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[True, 8, [0, [0, 1, False], None], {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
museum_visit,"SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1","['SELECT', 't1.name', ',', 't1.age', 'FROM', 'visitor', 'AS', 't1', 'JOIN', 'visit', 'AS', 't2', 'ON', 't1.id', '=', 't2.visitor_id', 'ORDER', 'BY', 't2.num_of_ticket', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'name', ',', 't1', '.', 'age', 'from', 'visitor', 'as', 't1', 'join', 'visit', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'visitor_id', 'order', 'by', 't2', '.', 'num_of_ticket', 'desc', 'limit', 'value']",Find the name and age of the visitor who bought the most tickets at once.,"['Find', 'the', 'name', 'and', 'age', 'of', 'the', 'visitor', 'who', 'bought', 'the', 'most', 'tickets', 'at', 'once', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 5, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 8, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 11, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
museum_visit,"SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit","['SELECT', 'avg', '(', 'num_of_ticket', ')', ',', 'max', '(', 'num_of_ticket', ')', 'FROM', 'visit']","['select', 'avg', '(', 'num_of_ticket', ')', ',', 'max', '(', 'num_of_ticket', ')', 'from', 'visit']",What are the average and maximum number of tickets bought in all visits?,"['What', 'are', 'the', 'average', 'and', 'maximum', 'number', 'of', 'tickets', 'bought', 'in', 'all', 'visits', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[5, [0, [0, 11, False], None]], [1, [0, [0, 11, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
museum_visit,SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1,"['SELECT', 'sum', '(', 't2.Total_spent', ')', 'FROM', 'visitor', 'AS', 't1', 'JOIN', 'visit', 'AS', 't2', 'ON', 't1.id', '=', 't2.visitor_id', 'WHERE', 't1.Level_of_membership', '=', '1']","['select', 'sum', '(', 't2', '.', 'total_spent', ')', 'from', 'visitor', 'as', 't1', 'join', 'visit', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'visitor_id', 'where', 't1', '.', 'level_of_membership', '=', 'value']",What is the total ticket expense of the visitors whose membership level is 1?,"['What', 'is', 'the', 'total', 'ticket', 'expense', 'of', 'the', 'visitors', 'whose', 'membership', 'level', 'is', '1', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 5, False], None], [0, 10, False], None]]}, 'select': [False, [[4, [0, [0, 12, False], None]]]], 'where': [[False, 2, [0, [0, 7, False], None], 1.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
museum_visit,SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011,"['SELECT', 't1.name', 'FROM', 'visitor', 'AS', 't1', 'JOIN', 'visit', 'AS', 't2', 'ON', 't1.id', '=', 't2.visitor_id', 'JOIN', 'museum', 'AS', 't3', 'ON', 't3.Museum_ID', '=', 't2.Museum_ID', 'WHERE', 't3.open_year', '<', '2009', 'INTERSECT', 'SELECT', 't1.name', 'FROM', 'visitor', 'AS', 't1', 'JOIN', 'visit', 'AS', 't2', 'ON', 't1.id', '=', 't2.visitor_id', 'JOIN', 'museum', 'AS', 't3', 'ON', 't3.Museum_ID', '=', 't2.Museum_ID', 'WHERE', 't3.open_year', '>', '2011']","['select', 't1', '.', 'name', 'from', 'visitor', 'as', 't1', 'join', 'visit', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'visitor_id', 'join', 'museum', 'as', 't3', 'on', 't3', '.', 'museum_id', '=', 't2', '.', 'museum_id', 'where', 't3', '.', 'open_year', '<', 'value', 'intersect', 'select', 't1', '.', 'name', 'from', 'visitor', 'as', 't1', 'join', 'visit', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'visitor_id', 'join', 'museum', 'as', 't3', 'on', 't3', '.', 'museum_id', '=', 't2', '.', 'museum_id', 'where', 't3', '.', 'open_year', '>', 'value']",What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?,"['What', 'is', 'the', 'name', 'of', 'the', 'visitor', 'who', 'visited', 'both', 'a', 'museum', 'opened', 'before', '2009', 'and', 'a', 'museum', 'opened', 'after', '2011', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 5, False], None], [0, 10, False], None], 'and', [False, 2, [0, [0, 1, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [[False, 4, [0, [0, 4, False], None], 2009.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 1], ['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 5, False], None], [0, 10, False], None], 'and', [False, 2, [0, [0, 1, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [[False, 3, [0, [0, 4, False], None], 2011.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
museum_visit,SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010),"['SELECT', 'count', '(', '*', ')', 'FROM', 'visitor', 'WHERE', 'id', 'NOT', 'IN', '(', 'SELECT', 't2.visitor_id', 'FROM', 'museum', 'AS', 't1', 'JOIN', 'visit', 'AS', 't2', 'ON', 't1.Museum_ID', '=', 't2.Museum_ID', 'WHERE', 't1.open_year', '>', '2010', ')']","['select', 'count', '(', '*', ')', 'from', 'visitor', 'where', 'id', 'not', 'in', '(', 'select', 't2', '.', 'visitor_id', 'from', 'museum', 'as', 't1', 'join', 'visit', 'as', 't2', 'on', 't1', '.', 'museum_id', '=', 't2', '.', 'museum_id', 'where', 't1', '.', 'open_year', '>', 'value', ')']",Find the number of visitors who did not visit any museum opened after 2010.,"['Find', 'the', 'number', 'of', 'visitors', 'who', 'did', 'not', 'visit', 'any', 'museum', 'opened', 'after', '2010', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[True, 8, [0, [0, 5, False], None], {'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 9, False], None]]}, 'select': [False, [[0, [0, [0, 10, False], None]]]], 'where': [[False, 3, [0, [0, 4, False], None], 2010.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
museum_visit,SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008,"['SELECT', 'count', '(', '*', ')', 'FROM', 'museum', 'WHERE', 'open_year', '>', '2013', 'OR', 'open_year', '<', '2008']","['select', 'count', '(', '*', ')', 'from', 'museum', 'where', 'open_year', '>', 'value', 'or', 'open_year', '<', 'value']",How many museums were opened after 2013 or before 2008?,"['How', 'many', 'museums', 'were', 'opened', 'after', '2013', 'or', 'before', '2008', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 3, [0, [0, 4, False], None], 2013.0, None], 'or', [False, 4, [0, [0, 4, False], None], 2008.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT count(*) FROM players,"['SELECT', 'count', '(', '*', ')', 'FROM', 'players']","['select', 'count', '(', '*', ')', 'from', 'players']",Find the total number of players.,"['Find', 'the', 'total', 'number', 'of', 'players', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT count(*) FROM players,"['SELECT', 'count', '(', '*', ')', 'FROM', 'players']","['select', 'count', '(', '*', ')', 'from', 'players']",How many players are there?,"['How', 'many', 'players', 'are', 'there', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT count(*) FROM matches,"['SELECT', 'count', '(', '*', ')', 'FROM', 'matches']","['select', 'count', '(', '*', ')', 'from', 'matches']",Find the total number of matches.,"['Find', 'the', 'total', 'number', 'of', 'matches', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT count(*) FROM matches,"['SELECT', 'count', '(', '*', ')', 'FROM', 'matches']","['select', 'count', '(', '*', ')', 'from', 'matches']",Count the number of matches.,"['Count', 'the', 'number', 'of', 'matches', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'","['SELECT', 'first_name', ',', 'birth_date', 'FROM', 'players', 'WHERE', 'country_code', '=', ""'USA"", ""'""]","['select', 'first_name', ',', 'birth_date', 'from', 'players', 'where', 'country_code', '=', 'value']",List the first name and birth date of all players from the country with code USA.,"['List', 'the', 'first', 'name', 'and', 'birth', 'date', 'of', 'all', 'players', 'from', 'the', 'country', 'with', 'code', 'USA', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 5, False], None]]]], 'where': [[False, 2, [0, [0, 6, False], None], '""USA""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'","['SELECT', 'first_name', ',', 'birth_date', 'FROM', 'players', 'WHERE', 'country_code', '=', ""'USA"", ""'""]","['select', 'first_name', ',', 'birth_date', 'from', 'players', 'where', 'country_code', '=', 'value']",What are the first names and birth dates of players from the USA?,"['What', 'are', 'the', 'first', 'names', 'and', 'birth', 'dates', 'of', 'players', 'from', 'the', 'USA', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 5, False], None]]]], 'where': [[False, 2, [0, [0, 6, False], None], '""USA""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT avg(loser_age) ,  avg(winner_age) FROM matches","['SELECT', 'avg', '(', 'loser_age', ')', ',', 'avg', '(', 'winner_age', ')', 'FROM', 'matches']","['select', 'avg', '(', 'loser_age', ')', ',', 'avg', '(', 'winner_age', ')', 'from', 'matches']",Find the average age of losers and winners of all matches.,"['Find', 'the', 'average', 'age', 'of', 'losers', 'and', 'winners', 'of', 'all', 'matches', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[5, [0, [0, 9, False], None]], [5, [0, [0, 28, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT avg(loser_age) ,  avg(winner_age) FROM matches","['SELECT', 'avg', '(', 'loser_age', ')', ',', 'avg', '(', 'winner_age', ')', 'FROM', 'matches']","['select', 'avg', '(', 'loser_age', ')', ',', 'avg', '(', 'winner_age', ')', 'from', 'matches']",What are the average ages of losers and winners across matches?,"['What', 'are', 'the', 'average', 'ages', 'of', 'losers', 'and', 'winners', 'across', 'matches', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[5, [0, [0, 9, False], None]], [5, [0, [0, 28, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT avg(winner_rank) FROM matches,"['SELECT', 'avg', '(', 'winner_rank', ')', 'FROM', 'matches']","['select', 'avg', '(', 'winner_rank', ')', 'from', 'matches']",Find the average rank of winners in all matches.,"['Find', 'the', 'average', 'rank', 'of', 'winners', 'in', 'all', 'matches', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[5, [0, [0, 35, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT avg(winner_rank) FROM matches,"['SELECT', 'avg', '(', 'winner_rank', ')', 'FROM', 'matches']","['select', 'avg', '(', 'winner_rank', ')', 'from', 'matches']",What is the average rank for winners in all matches?,"['What', 'is', 'the', 'average', 'rank', 'for', 'winners', 'in', 'all', 'matches', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[5, [0, [0, 35, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT min(loser_rank) FROM matches,"['SELECT', 'min', '(', 'loser_rank', ')', 'FROM', 'matches']","['select', 'min', '(', 'loser_rank', ')', 'from', 'matches']",Find the highest rank of losers in all matches.,"['Find', 'the', 'highest', 'rank', 'of', 'losers', 'in', 'all', 'matches', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[2, [0, [0, 16, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT min(loser_rank) FROM matches,"['SELECT', 'min', '(', 'loser_rank', ')', 'FROM', 'matches']","['select', 'min', '(', 'loser_rank', ')', 'from', 'matches']",What is the best rank of losers across all matches?,"['What', 'is', 'the', 'best', 'rank', 'of', 'losers', 'across', 'all', 'matches', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[2, [0, [0, 16, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT count(DISTINCT country_code) FROM players,"['SELECT', 'count', '(', 'DISTINCT', 'country_code', ')', 'FROM', 'players']","['select', 'count', '(', 'distinct', 'country_code', ')', 'from', 'players']",find the number of distinct country codes of all players.,"['find', 'the', 'number', 'of', 'distinct', 'country', 'codes', 'of', 'all', 'players', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 6, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT count(DISTINCT country_code) FROM players,"['SELECT', 'count', '(', 'DISTINCT', 'country_code', ')', 'FROM', 'players']","['select', 'count', '(', 'distinct', 'country_code', ')', 'from', 'players']",How many distinct countries do players come from?,"['How', 'many', 'distinct', 'countries', 'do', 'players', 'come', 'from', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 6, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT count(DISTINCT loser_name) FROM matches,"['SELECT', 'count', '(', 'DISTINCT', 'loser_name', ')', 'FROM', 'matches']","['select', 'count', '(', 'distinct', 'loser_name', ')', 'from', 'matches']",Find the number of distinct name of losers.,"['Find', 'the', 'number', 'of', 'distinct', 'name', 'of', 'losers', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 15, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT count(DISTINCT loser_name) FROM matches,"['SELECT', 'count', '(', 'DISTINCT', 'loser_name', ')', 'FROM', 'matches']","['select', 'count', '(', 'distinct', 'loser_name', ')', 'from', 'matches']",How many different loser names are there?,"['How', 'many', 'different', 'loser', 'names', 'are', 'there', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 15, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10,"['SELECT', 'tourney_name', 'FROM', 'matches', 'GROUP', 'BY', 'tourney_name', 'HAVING', 'count', '(', '*', ')', '>', '10']","['select', 'tourney_name', 'from', 'matches', 'group', 'by', 'tourney_name', 'having', 'count', '(', '*', ')', '>', 'value']",Find the name of tourney that has more than 10 matches.,"['Find', 'the', 'name', 'of', 'tourney', 'that', 'has', 'more', 'than', '10', 'matches', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 27, False], None]]]], 'where': [], 'groupBy': [[0, 27, False]], 'having': [[False, 3, [0, [3, 0, False], None], 10.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10,"['SELECT', 'tourney_name', 'FROM', 'matches', 'GROUP', 'BY', 'tourney_name', 'HAVING', 'count', '(', '*', ')', '>', '10']","['select', 'tourney_name', 'from', 'matches', 'group', 'by', 'tourney_name', 'having', 'count', '(', '*', ')', '>', 'value']",What are the names of tournaments that have more than 10 matches?,"['What', 'are', 'the', 'names', 'of', 'tournaments', 'that', 'have', 'more', 'than', '10', 'matches', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 27, False], None]]]], 'where': [], 'groupBy': [[0, 27, False]], 'having': [[False, 3, [0, [3, 0, False], None], 10.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016,"['SELECT', 'winner_name', 'FROM', 'matches', 'WHERE', 'YEAR', '=', '2013', 'INTERSECT', 'SELECT', 'winner_name', 'FROM', 'matches', 'WHERE', 'YEAR', '=', '2016']","['select', 'winner_name', 'from', 'matches', 'where', 'year', '=', 'value', 'intersect', 'select', 'winner_name', 'from', 'matches', 'where', 'year', '=', 'value']",List the names of all winners who played in both 2013 and 2016.,"['List', 'the', 'names', 'of', 'all', 'winners', 'who', 'played', 'in', 'both', '2013', 'and', '2016', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 34, False], None]]]], 'where': [[False, 2, [0, [0, 38, False], None], 2013.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 34, False], None]]]], 'where': [[False, 2, [0, [0, 38, False], None], 2016.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
wta_1,SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016,"['SELECT', 'winner_name', 'FROM', 'matches', 'WHERE', 'YEAR', '=', '2013', 'INTERSECT', 'SELECT', 'winner_name', 'FROM', 'matches', 'WHERE', 'YEAR', '=', '2016']","['select', 'winner_name', 'from', 'matches', 'where', 'year', '=', 'value', 'intersect', 'select', 'winner_name', 'from', 'matches', 'where', 'year', '=', 'value']",What are the names of players who won in both 2013 and 2016?,"['What', 'are', 'the', 'names', 'of', 'players', 'who', 'won', 'in', 'both', '2013', 'and', '2016', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 34, False], None]]]], 'where': [[False, 2, [0, [0, 38, False], None], 2013.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 34, False], None]]]], 'where': [[False, 2, [0, [0, 38, False], None], 2016.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
wta_1,SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016,"['SELECT', 'count', '(', '*', ')', 'FROM', 'matches', 'WHERE', 'YEAR', '=', '2013', 'OR', 'YEAR', '=', '2016']","['select', 'count', '(', '*', ')', 'from', 'matches', 'where', 'year', '=', 'value', 'or', 'year', '=', 'value']",List the number of all matches who played in years of 2013 or 2016.,"['List', 'the', 'number', 'of', 'all', 'matches', 'who', 'played', 'in', 'years', 'of', '2013', 'or', '2016', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 38, False], None], 2013.0, None], 'or', [False, 2, [0, [0, 38, False], None], 2016.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016,"['SELECT', 'count', '(', '*', ')', 'FROM', 'matches', 'WHERE', 'YEAR', '=', '2013', 'OR', 'YEAR', '=', '2016']","['select', 'count', '(', '*', ')', 'from', 'matches', 'where', 'year', '=', 'value', 'or', 'year', '=', 'value']",How many matches were played in 2013 or 2016?,"['How', 'many', 'matches', 'were', 'played', 'in', '2013', 'or', '2016', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 38, False], None], 2013.0, None], 'or', [False, 2, [0, [0, 38, False], None], 2016.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'","['SELECT', 'T1.country_code', ',', 'T1.first_name', 'FROM', 'players', 'AS', 'T1', 'JOIN', 'matches', 'AS', 'T2', 'ON', 'T1.player_id', '=', 'T2.winner_id', 'WHERE', 'T2.tourney_name', '=', ""'WTA"", 'Championships', ""'"", 'INTERSECT', 'SELECT', 'T1.country_code', ',', 'T1.first_name', 'FROM', 'players', 'AS', 'T1', 'JOIN', 'matches', 'AS', 'T2', 'ON', 'T1.player_id', '=', 'T2.winner_id', 'WHERE', 'T2.tourney_name', '=', ""'Australian"", 'Open', ""'""]","['select', 't1', '.', 'country_code', ',', 't1', '.', 'first_name', 'from', 'players', 'as', 't1', 'join', 'matches', 'as', 't2', 'on', 't1', '.', 'player_id', '=', 't2', '.', 'winner_id', 'where', 't2', '.', 'tourney_name', '=', 'value', 'intersect', 'select', 't1', '.', 'country_code', ',', 't1', '.', 'first_name', 'from', 'players', 'as', 't1', 'join', 'matches', 'as', 't2', 'on', 't1', '.', 'player_id', '=', 't2', '.', 'winner_id', 'where', 't2', '.', 'tourney_name', '=', 'value']",What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?,"['What', 'are', 'the', 'country', 'code', 'and', 'first', 'name', 'of', 'the', 'players', 'who', 'won', 'in', 'both', 'tourney', 'WTA', 'Championships', 'and', 'Australian', 'Open', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 32, False], None]]}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 27, False], None], '""WTA Championships""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 32, False], None]]}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 27, False], None], '""Australian Open""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
wta_1,"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'","['SELECT', 'T1.country_code', ',', 'T1.first_name', 'FROM', 'players', 'AS', 'T1', 'JOIN', 'matches', 'AS', 'T2', 'ON', 'T1.player_id', '=', 'T2.winner_id', 'WHERE', 'T2.tourney_name', '=', ""'WTA"", 'Championships', ""'"", 'INTERSECT', 'SELECT', 'T1.country_code', ',', 'T1.first_name', 'FROM', 'players', 'AS', 'T1', 'JOIN', 'matches', 'AS', 'T2', 'ON', 'T1.player_id', '=', 'T2.winner_id', 'WHERE', 'T2.tourney_name', '=', ""'Australian"", 'Open', ""'""]","['select', 't1', '.', 'country_code', ',', 't1', '.', 'first_name', 'from', 'players', 'as', 't1', 'join', 'matches', 'as', 't2', 'on', 't1', '.', 'player_id', '=', 't2', '.', 'winner_id', 'where', 't2', '.', 'tourney_name', '=', 'value', 'intersect', 'select', 't1', '.', 'country_code', ',', 't1', '.', 'first_name', 'from', 'players', 'as', 't1', 'join', 'matches', 'as', 't2', 'on', 't1', '.', 'player_id', '=', 't2', '.', 'winner_id', 'where', 't2', '.', 'tourney_name', '=', 'value']",What are the first names and country codes for players who won both the WTA Championships and the Australian Open?,"['What', 'are', 'the', 'first', 'names', 'and', 'country', 'codes', 'for', 'players', 'who', 'won', 'both', 'the', 'WTA', 'Championships', 'and', 'the', 'Australian', 'Open', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 32, False], None]]}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 27, False], None], '""WTA Championships""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 32, False], None]]}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 27, False], None], '""Australian Open""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
wta_1,"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1","['SELECT', 'first_name', ',', 'country_code', 'FROM', 'players', 'ORDER', 'BY', 'birth_date', 'LIMIT', '1']","['select', 'first_name', ',', 'country_code', 'from', 'players', 'order', 'by', 'birth_date', 'limit', 'value']",Find the first name and country code of the oldest player.,"['Find', 'the', 'first', 'name', 'and', 'country', 'code', 'of', 'the', 'oldest', 'player', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1","['SELECT', 'first_name', ',', 'country_code', 'FROM', 'players', 'ORDER', 'BY', 'birth_date', 'LIMIT', '1']","['select', 'first_name', ',', 'country_code', 'from', 'players', 'order', 'by', 'birth_date', 'limit', 'value']",What is the first name and country code of the oldest player?,"['What', 'is', 'the', 'first', 'name', 'and', 'country', 'code', 'of', 'the', 'oldest', 'player', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT first_name ,  last_name FROM players ORDER BY birth_date","['SELECT', 'first_name', ',', 'last_name', 'FROM', 'players', 'ORDER', 'BY', 'birth_date']","['select', 'first_name', ',', 'last_name', 'from', 'players', 'order', 'by', 'birth_date']",List the first and last name of all players in the order of birth date.,"['List', 'the', 'first', 'and', 'last', 'name', 'of', 'all', 'players', 'in', 'the', 'order', 'of', 'birth', 'date', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT first_name ,  last_name FROM players ORDER BY birth_date","['SELECT', 'first_name', ',', 'last_name', 'FROM', 'players', 'ORDER', 'BY', 'birth_date']","['select', 'first_name', ',', 'last_name', 'from', 'players', 'order', 'by', 'birth_date']","What are the full names of all players, sorted by birth date?","['What', 'are', 'the', 'full', 'names', 'of', 'all', 'players', ',', 'sorted', 'by', 'birth', 'date', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date","['SELECT', 'first_name', ',', 'last_name', 'FROM', 'players', 'WHERE', 'hand', '=', ""'L"", ""'"", 'ORDER', 'BY', 'birth_date']","['select', 'first_name', ',', 'last_name', 'from', 'players', 'where', 'hand', '=', 'value', 'order', 'by', 'birth_date']",List the first and last name of all players who are left / L hand in the order of birth date.,"['List', 'the', 'first', 'and', 'last', 'name', 'of', 'all', 'players', 'who', 'are', 'left', '/', 'L', 'hand', 'in', 'the', 'order', 'of', 'birth', 'date', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 4, False], None], '""L""', None]], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date","['SELECT', 'first_name', ',', 'last_name', 'FROM', 'players', 'WHERE', 'hand', '=', ""'L"", ""'"", 'ORDER', 'BY', 'birth_date']","['select', 'first_name', ',', 'last_name', 'from', 'players', 'where', 'hand', '=', 'value', 'order', 'by', 'birth_date']","What are the full names of all left handed players, in order of birth date?","['What', 'are', 'the', 'full', 'names', 'of', 'all', 'left', 'handed', 'players', ',', 'in', 'order', 'of', 'birth', 'date', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 4, False], None], '""L""', None]], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 5, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1","['SELECT', 'T1.country_code', ',', 'T1.first_name', 'FROM', 'players', 'AS', 'T1', 'JOIN', 'rankings', 'AS', 'T2', 'ON', 'T1.player_id', '=', 'T2.player_id', 'ORDER', 'BY', 'T2.tours', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'country_code', ',', 't1', '.', 'first_name', 'from', 'players', 'as', 't1', 'join', 'rankings', 'as', 't2', 'on', 't1', '.', 'player_id', '=', 't2', '.', 'player_id', 'order', 'by', 't2', '.', 'tours', 'desc', 'limit', 'value']",Find the first name and country code of the player who did the most number of tours.,"['Find', 'the', 'first', 'name', 'and', 'country', 'code', 'of', 'the', 'player', 'who', 'did', 'the', 'most', 'number', 'of', 'tours', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 41, False], None]]}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 43, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1","['SELECT', 'T1.country_code', ',', 'T1.first_name', 'FROM', 'players', 'AS', 'T1', 'JOIN', 'rankings', 'AS', 'T2', 'ON', 'T1.player_id', '=', 'T2.player_id', 'ORDER', 'BY', 'T2.tours', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'country_code', ',', 't1', '.', 'first_name', 'from', 'players', 'as', 't1', 'join', 'rankings', 'as', 't2', 'on', 't1', '.', 'player_id', '=', 't2', '.', 'player_id', 'order', 'by', 't2', '.', 'tours', 'desc', 'limit', 'value']",What is the first name and country code of the player with the most tours?,"['What', 'is', 'the', 'first', 'name', 'and', 'country', 'code', 'of', 'the', 'player', 'with', 'the', 'most', 'tours', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 41, False], None]]}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 43, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'YEAR', 'FROM', 'matches', 'GROUP', 'BY', 'YEAR', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'year', 'from', 'matches', 'group', 'by', 'year', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Find the year that has the most number of matches.,"['Find', 'the', 'year', 'that', 'has', 'the', 'most', 'number', 'of', 'matches', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 38, False], None]]]], 'where': [], 'groupBy': [[0, 38, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'YEAR', 'FROM', 'matches', 'GROUP', 'BY', 'YEAR', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'year', 'from', 'matches', 'group', 'by', 'year', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which year had the most matches?,"['Which', 'year', 'had', 'the', 'most', 'matches', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 38, False], None]]]], 'where': [], 'groupBy': [[0, 38, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1","['SELECT', 'winner_name', ',', 'winner_rank_points', 'FROM', 'matches', 'GROUP', 'BY', 'winner_name', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'winner_name', ',', 'winner_rank_points', 'from', 'matches', 'group', 'by', 'winner_name', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Find the name and rank points of the winner who won the most times.,"['Find', 'the', 'name', 'and', 'rank', 'points', 'of', 'the', 'winner', 'who', 'won', 'the', 'most', 'times', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 34, False], None]], [0, [0, [0, 36, False], None]]]], 'where': [], 'groupBy': [[0, 34, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1","['SELECT', 'winner_name', ',', 'winner_rank_points', 'FROM', 'matches', 'GROUP', 'BY', 'winner_name', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'winner_name', ',', 'winner_rank_points', 'from', 'matches', 'group', 'by', 'winner_name', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']","What is the name of the winner who has won the most matches, and how many rank points does this player have?","['What', 'is', 'the', 'name', 'of', 'the', 'winner', 'who', 'has', 'won', 'the', 'most', 'matches', ',', 'and', 'how', 'many', 'rank', 'points', 'does', 'this', 'player', 'have', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 34, False], None]], [0, [0, [0, 36, False], None]]]], 'where': [], 'groupBy': [[0, 34, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1,"['SELECT', 'winner_name', 'FROM', 'matches', 'WHERE', 'tourney_name', '=', ""'Australian"", 'Open', ""'"", 'ORDER', 'BY', 'winner_rank_points', 'DESC', 'LIMIT', '1']","['select', 'winner_name', 'from', 'matches', 'where', 'tourney_name', '=', 'value', 'order', 'by', 'winner_rank_points', 'desc', 'limit', 'value']",Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.,"['Find', 'the', 'name', 'of', 'the', 'winner', 'who', 'has', 'the', 'highest', 'rank', 'points', 'and', 'participated', 'in', 'the', 'Australian', 'Open', 'tourney', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 34, False], None]]]], 'where': [[False, 2, [0, [0, 27, False], None], '""Australian Open""', None]], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 36, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1,"['SELECT', 'winner_name', 'FROM', 'matches', 'WHERE', 'tourney_name', '=', ""'Australian"", 'Open', ""'"", 'ORDER', 'BY', 'winner_rank_points', 'DESC', 'LIMIT', '1']","['select', 'winner_name', 'from', 'matches', 'where', 'tourney_name', '=', 'value', 'order', 'by', 'winner_rank_points', 'desc', 'limit', 'value']",What is the name of the winner with the most rank points who participated in the Australian Open tournament?,"['What', 'is', 'the', 'name', 'of', 'the', 'winner', 'with', 'the', 'most', 'rank', 'points', 'who', 'participated', 'in', 'the', 'Australian', 'Open', 'tournament', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 34, False], None]]]], 'where': [[False, 2, [0, [0, 27, False], None], '""Australian Open""', None]], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 36, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1","['SELECT', 'winner_name', ',', 'loser_name', 'FROM', 'matches', 'ORDER', 'BY', 'minutes', 'DESC', 'LIMIT', '1']","['select', 'winner_name', ',', 'loser_name', 'from', 'matches', 'order', 'by', 'minutes', 'desc', 'limit', 'value']",find the names of loser and winner who played in the match with greatest number of minutes.,"['find', 'the', 'names', 'of', 'loser', 'and', 'winner', 'who', 'played', 'in', 'the', 'match', 'with', 'greatest', 'number', 'of', 'minutes', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 34, False], None]], [0, [0, [0, 15, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1","['SELECT', 'winner_name', ',', 'loser_name', 'FROM', 'matches', 'ORDER', 'BY', 'minutes', 'DESC', 'LIMIT', '1']","['select', 'winner_name', ',', 'loser_name', 'from', 'matches', 'order', 'by', 'minutes', 'desc', 'limit', 'value']",What are the names of the winner and loser who played in the longest match?,"['What', 'are', 'the', 'names', 'of', 'the', 'winner', 'and', 'loser', 'who', 'played', 'in', 'the', 'longest', 'match', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 34, False], None]], [0, [0, [0, 15, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 20, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","['SELECT', 'avg', '(', 'ranking', ')', ',', 'T1.first_name', 'FROM', 'players', 'AS', 'T1', 'JOIN', 'rankings', 'AS', 'T2', 'ON', 'T1.player_id', '=', 'T2.player_id', 'GROUP', 'BY', 'T1.first_name']","['select', 'avg', '(', 'ranking', ')', ',', 't1', '.', 'first_name', 'from', 'players', 'as', 't1', 'join', 'rankings', 'as', 't2', 'on', 't1', '.', 'player_id', '=', 't2', '.', 'player_id', 'group', 'by', 't1', '.', 'first_name']",Find the average ranking for each player and their first name.,"['Find', 'the', 'average', 'ranking', 'for', 'each', 'player', 'and', 'their', 'first', 'name', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 41, False], None]]}, 'select': [False, [[5, [0, [0, 40, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 2, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","['SELECT', 'avg', '(', 'ranking', ')', ',', 'T1.first_name', 'FROM', 'players', 'AS', 'T1', 'JOIN', 'rankings', 'AS', 'T2', 'ON', 'T1.player_id', '=', 'T2.player_id', 'GROUP', 'BY', 'T1.first_name']","['select', 'avg', '(', 'ranking', ')', ',', 't1', '.', 'first_name', 'from', 'players', 'as', 't1', 'join', 'rankings', 'as', 't2', 'on', 't1', '.', 'player_id', '=', 't2', '.', 'player_id', 'group', 'by', 't1', '.', 'first_name']","What are the first names of all players, and their average rankings?","['What', 'are', 'the', 'first', 'names', 'of', 'all', 'players', ',', 'and', 'their', 'average', 'rankings', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 41, False], None]]}, 'select': [False, [[5, [0, [0, 40, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 2, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","['SELECT', 'sum', '(', 'ranking_points', ')', ',', 'T1.first_name', 'FROM', 'players', 'AS', 'T1', 'JOIN', 'rankings', 'AS', 'T2', 'ON', 'T1.player_id', '=', 'T2.player_id', 'GROUP', 'BY', 'T1.first_name']","['select', 'sum', '(', 'ranking_points', ')', ',', 't1', '.', 'first_name', 'from', 'players', 'as', 't1', 'join', 'rankings', 'as', 't2', 'on', 't1', '.', 'player_id', '=', 't2', '.', 'player_id', 'group', 'by', 't1', '.', 'first_name']",Find the total ranking points for each player and their first name.,"['Find', 'the', 'total', 'ranking', 'points', 'for', 'each', 'player', 'and', 'their', 'first', 'name', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 41, False], None]]}, 'select': [False, [[4, [0, [0, 42, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 2, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","['SELECT', 'sum', '(', 'ranking_points', ')', ',', 'T1.first_name', 'FROM', 'players', 'AS', 'T1', 'JOIN', 'rankings', 'AS', 'T2', 'ON', 'T1.player_id', '=', 'T2.player_id', 'GROUP', 'BY', 'T1.first_name']","['select', 'sum', '(', 'ranking_points', ')', ',', 't1', '.', 'first_name', 'from', 'players', 'as', 't1', 'join', 'rankings', 'as', 't2', 'on', 't1', '.', 'player_id', '=', 't2', '.', 'player_id', 'group', 'by', 't1', '.', 'first_name']","What are the first names of all players, and their total ranking points?","['What', 'are', 'the', 'first', 'names', 'of', 'all', 'players', ',', 'and', 'their', 'total', 'ranking', 'points', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 41, False], None]]}, 'select': [False, [[4, [0, [0, 42, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 2, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT count(*) ,  country_code FROM players GROUP BY country_code","['SELECT', 'count', '(', '*', ')', ',', 'country_code', 'FROM', 'players', 'GROUP', 'BY', 'country_code']","['select', 'count', '(', '*', ')', ',', 'country_code', 'from', 'players', 'group', 'by', 'country_code']",find the number of players for each country.,"['find', 'the', 'number', 'of', 'players', 'for', 'each', 'country', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT count(*) ,  country_code FROM players GROUP BY country_code","['SELECT', 'count', '(', '*', ')', ',', 'country_code', 'FROM', 'players', 'GROUP', 'BY', 'country_code']","['select', 'count', '(', '*', ')', ',', 'country_code', 'from', 'players', 'group', 'by', 'country_code']",How many players are from each country?,"['How', 'many', 'players', 'are', 'from', 'each', 'country', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'country_code', 'FROM', 'players', 'GROUP', 'BY', 'country_code', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'country_code', 'from', 'players', 'group', 'by', 'country_code', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",find the code of the country where has the greatest number of players.,"['find', 'the', 'code', 'of', 'the', 'country', 'where', 'has', 'the', 'greatest', 'number', 'of', 'players', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'country_code', 'FROM', 'players', 'GROUP', 'BY', 'country_code', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'country_code', 'from', 'players', 'group', 'by', 'country_code', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the code of the country with the most players?,"['What', 'is', 'the', 'code', 'of', 'the', 'country', 'with', 'the', 'most', 'players', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50,"['SELECT', 'country_code', 'FROM', 'players', 'GROUP', 'BY', 'country_code', 'HAVING', 'count', '(', '*', ')', '>', '50']","['select', 'country_code', 'from', 'players', 'group', 'by', 'country_code', 'having', 'count', '(', '*', ')', '>', 'value']",Find the codes of countries that have more than 50 players.,"['Find', 'the', 'codes', 'of', 'countries', 'that', 'have', 'more', 'than', '50', 'players', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [[False, 3, [0, [3, 0, False], None], 50.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50,"['SELECT', 'country_code', 'FROM', 'players', 'GROUP', 'BY', 'country_code', 'HAVING', 'count', '(', '*', ')', '>', '50']","['select', 'country_code', 'from', 'players', 'group', 'by', 'country_code', 'having', 'count', '(', '*', ')', '>', 'value']",What are the codes of countries with more than 50 players?,"['What', 'are', 'the', 'codes', 'of', 'countries', 'with', 'more', 'than', '50', 'players', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [[False, 3, [0, [3, 0, False], None], 50.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date","['SELECT', 'sum', '(', 'tours', ')', ',', 'ranking_date', 'FROM', 'rankings', 'GROUP', 'BY', 'ranking_date']","['select', 'sum', '(', 'tours', ')', ',', 'ranking_date', 'from', 'rankings', 'group', 'by', 'ranking_date']",Find the total number of tours for each ranking date.,"['Find', 'the', 'total', 'number', 'of', 'tours', 'for', 'each', 'ranking', 'date', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[4, [0, [0, 43, False], None]], [0, [0, [0, 39, False], None]]]], 'where': [], 'groupBy': [[0, 39, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date","['SELECT', 'sum', '(', 'tours', ')', ',', 'ranking_date', 'FROM', 'rankings', 'GROUP', 'BY', 'ranking_date']","['select', 'sum', '(', 'tours', ')', ',', 'ranking_date', 'from', 'rankings', 'group', 'by', 'ranking_date']",How many total tours were there for each ranking date?,"['How', 'many', 'total', 'tours', 'were', 'there', 'for', 'each', 'ranking', 'date', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[4, [0, [0, 43, False], None]], [0, [0, [0, 39, False], None]]]], 'where': [], 'groupBy': [[0, 39, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR","['SELECT', 'count', '(', '*', ')', ',', 'YEAR', 'FROM', 'matches', 'GROUP', 'BY', 'YEAR']","['select', 'count', '(', '*', ')', ',', 'year', 'from', 'matches', 'group', 'by', 'year']",Find the number of matches happened in each year.,"['Find', 'the', 'number', 'of', 'matches', 'happened', 'in', 'each', 'year', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 38, False], None]]]], 'where': [], 'groupBy': [[0, 38, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR","['SELECT', 'count', '(', '*', ')', ',', 'YEAR', 'FROM', 'matches', 'GROUP', 'BY', 'YEAR']","['select', 'count', '(', '*', ')', ',', 'year', 'from', 'matches', 'group', 'by', 'year']",How many matches were played in each year?,"['How', 'many', 'matches', 'were', 'played', 'in', 'each', 'year', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 38, False], None]]]], 'where': [], 'groupBy': [[0, 38, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3","['SELECT', 'DISTINCT', 'winner_name', ',', 'winner_rank', 'FROM', 'matches', 'ORDER', 'BY', 'winner_age', 'LIMIT', '3']","['select', 'distinct', 'winner_name', ',', 'winner_rank', 'from', 'matches', 'order', 'by', 'winner_age', 'limit', 'value']",Find the name and rank of the 3 youngest winners across all matches.,"['Find', 'the', 'name', 'and', 'rank', 'of', 'the', '3', 'youngest', 'winners', 'across', 'all', 'matches', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [True, [[0, [0, [0, 34, False], None]], [0, [0, [0, 35, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 28, False], None]]], 'limit': 3, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3","['SELECT', 'DISTINCT', 'winner_name', ',', 'winner_rank', 'FROM', 'matches', 'ORDER', 'BY', 'winner_age', 'LIMIT', '3']","['select', 'distinct', 'winner_name', ',', 'winner_rank', 'from', 'matches', 'order', 'by', 'winner_age', 'limit', 'value']",What are the names and ranks of the three youngest winners across all matches?,"['What', 'are', 'the', 'names', 'and', 'ranks', 'of', 'the', 'three', 'youngest', 'winners', 'across', 'all', 'matches', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [True, [[0, [0, [0, 34, False], None]], [0, [0, [0, 35, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 28, False], None]]], 'limit': 3, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L',"['SELECT', 'count', '(', 'DISTINCT', 'winner_name', ')', 'FROM', 'matches', 'WHERE', 'tourney_name', '=', ""'WTA"", 'Championships', ""'"", 'AND', 'winner_hand', '=', ""'L"", ""'""]","['select', 'count', '(', 'distinct', 'winner_name', ')', 'from', 'matches', 'where', 'tourney_name', '=', 'value', 'and', 'winner_hand', '=', 'value']",How many different winners both participated in the WTA Championships and were left handed?,"['How', 'many', 'different', 'winners', 'both', 'participated', 'in', 'the', 'WTA', 'Championships', 'and', 'were', 'left', 'handed', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 34, True], None]]]], 'where': [[False, 2, [0, [0, 27, False], None], '""WTA Championships""', None], 'and', [False, 2, [0, [0, 30, False], None], '""L""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L',"['SELECT', 'count', '(', 'DISTINCT', 'winner_name', ')', 'FROM', 'matches', 'WHERE', 'tourney_name', '=', ""'WTA"", 'Championships', ""'"", 'AND', 'winner_hand', '=', ""'L"", ""'""]","['select', 'count', '(', 'distinct', 'winner_name', ')', 'from', 'matches', 'where', 'tourney_name', '=', 'value', 'and', 'winner_hand', '=', 'value']",Find the number of left handed winners who participated in the WTA Championships.,"['Find', 'the', 'number', 'of', 'left', 'handed', 'winners', 'who', 'participated', 'in', 'the', 'WTA', 'Championships', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 34, True], None]]]], 'where': [[False, 2, [0, [0, 27, False], None], '""WTA Championships""', None], 'and', [False, 2, [0, [0, 30, False], None], '""L""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1","['SELECT', 'T1.first_name', ',', 'T1.country_code', ',', 'T1.birth_date', 'FROM', 'players', 'AS', 'T1', 'JOIN', 'matches', 'AS', 'T2', 'ON', 'T1.player_id', '=', 'T2.winner_id', 'ORDER', 'BY', 'T2.winner_rank_points', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'first_name', ',', 't1', '.', 'country_code', ',', 't1', '.', 'birth_date', 'from', 'players', 'as', 't1', 'join', 'matches', 'as', 't2', 'on', 't1', '.', 'player_id', '=', 't2', '.', 'winner_id', 'order', 'by', 't2', '.', 'winner_rank_points', 'desc', 'limit', 'value']","Find the first name, country code and birth date of the winner who has the highest rank points in all matches.","['Find', 'the', 'first', 'name', ',', 'country', 'code', 'and', 'birth', 'date', 'of', 'the', 'winner', 'who', 'has', 'the', 'highest', 'rank', 'points', 'in', 'all', 'matches', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 32, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 36, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1","['SELECT', 'T1.first_name', ',', 'T1.country_code', ',', 'T1.birth_date', 'FROM', 'players', 'AS', 'T1', 'JOIN', 'matches', 'AS', 'T2', 'ON', 'T1.player_id', '=', 'T2.winner_id', 'ORDER', 'BY', 'T2.winner_rank_points', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'first_name', ',', 't1', '.', 'country_code', ',', 't1', '.', 'birth_date', 'from', 'players', 'as', 't1', 'join', 'matches', 'as', 't2', 'on', 't1', '.', 'player_id', '=', 't2', '.', 'winner_id', 'order', 'by', 't2', '.', 'winner_rank_points', 'desc', 'limit', 'value']","What is the first name, country code, and birth date of the player with the most winner rank points across all matches?","['What', 'is', 'the', 'first', 'name', ',', 'country', 'code', ',', 'and', 'birth', 'date', 'of', 'the', 'player', 'with', 'the', 'most', 'winner', 'rank', 'points', 'across', 'all', 'matches', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 32, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 36, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT count(*) ,  hand FROM players GROUP BY hand","['SELECT', 'count', '(', '*', ')', ',', 'hand', 'FROM', 'players', 'GROUP', 'BY', 'hand']","['select', 'count', '(', '*', ')', ',', 'hand', 'from', 'players', 'group', 'by', 'hand']",Find the number of players for each hand type.,"['Find', 'the', 'number', 'of', 'players', 'for', 'each', 'hand', 'type', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [[0, 4, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
wta_1,"SELECT count(*) ,  hand FROM players GROUP BY hand","['SELECT', 'count', '(', '*', ')', ',', 'hand', 'FROM', 'players', 'GROUP', 'BY', 'hand']","['select', 'count', '(', '*', ')', ',', 'hand', 'from', 'players', 'group', 'by', 'hand']",How many players are there for each hand type?,"['How', 'many', 'players', 'are', 'there', 'for', 'each', 'hand', 'type', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [[0, 4, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
battle_death,SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured',"['SELECT', 'count', '(', '*', ')', 'FROM', 'ship', 'WHERE', 'disposition_of_ship', '=', ""'Captured"", ""'""]","['select', 'count', '(', '*', ')', 'from', 'ship', 'where', 'disposition_of_ship', '=', 'value']",How many ships ended up being 'Captured'?,"['How', 'many', 'ships', 'ended', 'up', 'being', ""'Captured"", ""'"", '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 13, False], None], '""Captured""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
battle_death,"SELECT name ,  tonnage FROM ship ORDER BY name DESC","['SELECT', 'name', ',', 'tonnage', 'FROM', 'ship', 'ORDER', 'BY', 'name', 'DESC']","['select', 'name', ',', 'tonnage', 'from', 'ship', 'order', 'by', 'name', 'desc']",List the name and tonnage ordered by in descending alphaetical order for the names.,"['List', 'the', 'name', 'and', 'tonnage', 'ordered', 'by', 'in', 'descending', 'alphaetical', 'order', 'for', 'the', 'names', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 9, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
battle_death,"SELECT name ,  date FROM battle","['SELECT', 'name', ',', 'date', 'FROM', 'battle']","['select', 'name', ',', 'date', 'from', 'battle']","List the name, date and result of each battle.","['List', 'the', 'name', ',', 'date', 'and', 'result', 'of', 'each', 'battle', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
battle_death,"SELECT max(killed) ,  min(killed) FROM death","['SELECT', 'max', '(', 'killed', ')', ',', 'min', '(', 'killed', ')', 'FROM', 'death']","['select', 'max', '(', 'killed', ')', ',', 'min', '(', 'killed', ')', 'from', 'death']",What is maximum and minimum death toll caused each time?,"['What', 'is', 'maximum', 'and', 'minimum', 'death', 'toll', 'caused', 'each', 'time', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[1, [0, [0, 17, False], None]], [2, [0, [0, 17, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
battle_death,SELECT avg(injured) FROM death,"['SELECT', 'avg', '(', 'injured', ')', 'FROM', 'death']","['select', 'avg', '(', 'injured', ')', 'from', 'death']",What is the average number of injuries caused each time?,"['What', 'is', 'the', 'average', 'number', 'of', 'injuries', 'caused', 'each', 'time', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[5, [0, [0, 18, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
battle_death,"SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'","['SELECT', 'T1.killed', ',', 'T1.injured', 'FROM', 'death', 'AS', 'T1', 'JOIN', 'ship', 'AS', 't2', 'ON', 'T1.caused_by_ship_id', '=', 'T2.id', 'WHERE', 'T2.tonnage', '=', ""'t"", ""'""]","['select', 't1', '.', 'killed', ',', 't1', '.', 'injured', 'from', 'death', 'as', 't1', 'join', 'ship', 'as', 't2', 'on', 't1', '.', 'caused_by_ship_id', '=', 't2', '.', 'id', 'where', 't2', '.', 'tonnage', '=', 'value']",What are the death and injury situations caused by the ship with tonnage 't'?,"['What', 'are', 'the', 'death', 'and', 'injury', 'situations', 'caused', 'by', 'the', 'ship', 'with', 'tonnage', ""'t"", ""'"", '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 14, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 17, False], None]], [0, [0, [0, 18, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""t""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
battle_death,"SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'","['SELECT', 'name', ',', 'RESULT', 'FROM', 'battle', 'WHERE', 'bulgarian_commander', '!', '=', ""'Boril"", ""'""]","['select', 'name', ',', 'result', 'from', 'battle', 'where', 'bulgarian_commander', '!', '=', 'value']",What are the name and results of the battles when the bulgarian commander is not 'Boril',"['What', 'are', 'the', 'name', 'and', 'results', 'of', 'the', 'battles', 'when', 'the', 'bulgarian', 'commander', 'is', 'not', ""'Boril"", ""'""]","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]]]], 'where': [[False, 7, [0, [0, 4, False], None], '""Boril""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
battle_death,"SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'","['SELECT', 'DISTINCT', 'T1.id', ',', 'T1.name', 'FROM', 'battle', 'AS', 'T1', 'JOIN', 'ship', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.lost_in_battle', 'WHERE', 'T2.ship_type', '=', ""'Brig"", ""'""]","['select', 'distinct', 't1', '.', 'id', ',', 't1', '.', 'name', 'from', 'battle', 'as', 't1', 'join', 'ship', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'lost_in_battle', 'where', 't2', '.', 'ship_type', '=', 'value']",What are the different ids and names of the battles that lost any 'Brig' type shipes?,"['What', 'are', 'the', 'different', 'ids', 'and', 'names', 'of', 'the', 'battles', 'that', 'lost', 'any', ""'Brig"", ""'"", 'type', 'shipes', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 7, False], None]]}, 'select': [True, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""Brig""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
battle_death,"SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10","['SELECT', 'T1.id', ',', 'T1.name', 'FROM', 'battle', 'AS', 'T1', 'JOIN', 'ship', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.lost_in_battle', 'JOIN', 'death', 'AS', 'T3', 'ON', 'T2.id', '=', 'T3.caused_by_ship_id', 'GROUP', 'BY', 'T1.id', 'HAVING', 'sum', '(', 'T3.killed', ')', '>', '10']","['select', 't1', '.', 'id', ',', 't1', '.', 'name', 'from', 'battle', 'as', 't1', 'join', 'ship', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'lost_in_battle', 'join', 'death', 'as', 't3', 'on', 't2', '.', 'id', '=', 't3', '.', 'caused_by_ship_id', 'group', 'by', 't1', '.', 'id', 'having', 'sum', '(', 't3', '.', 'killed', ')', '>', 'value']",What are the ids and names of the battles that led to more than 10 people killed in total.,"['What', 'are', 'the', 'ids', 'and', 'names', 'of', 'the', 'battles', 'that', 'led', 'to', 'more', 'than', '10', 'people', 'killed', 'in', 'total', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 7, False], None], 'and', [False, 2, [0, [0, 8, False], None], [0, 14, False], None]]}, 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 1, False]], 'having': [[False, 3, [0, [4, 17, False], None], 10.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
battle_death,"SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'T2.id', ',', 'T2.name', 'FROM', 'death', 'AS', 'T1', 'JOIN', 'ship', 'AS', 't2', 'ON', 'T1.caused_by_ship_id', '=', 'T2.id', 'GROUP', 'BY', 'T2.id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't2', '.', 'id', ',', 't2', '.', 'name', 'from', 'death', 'as', 't1', 'join', 'ship', 'as', 't2', 'on', 't1', '.', 'caused_by_ship_id', '=', 't2', '.', 'id', 'group', 'by', 't2', '.', 'id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the ship id and name that caused most total injuries?,"['What', 'is', 'the', 'ship', 'id', 'and', 'name', 'that', 'caused', 'most', 'total', 'injuries', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 14, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 8, False], None]], [0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [[0, 8, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
battle_death,SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I',"['SELECT', 'name', 'FROM', 'battle', 'WHERE', 'bulgarian_commander', '=', ""'Kaloyan"", ""'"", 'AND', 'latin_commander', '=', ""'Baldwin"", 'I', ""'""]","['select', 'name', 'from', 'battle', 'where', 'bulgarian_commander', '=', 'value', 'and', 'latin_commander', '=', 'value']",What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?,"['What', 'are', 'the', 'distinct', 'battle', 'names', 'which', 'are', 'between', 'bulgarian', 'commander', ""'Kaloyan"", ""'"", 'and', 'latin', 'commander', ""'Baldwin"", 'I', ""'"", '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 4, False], None], '""Kaloyan""', None], 'and', [False, 2, [0, [0, 5, False], None], '""Baldwin I""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
battle_death,SELECT count(DISTINCT RESULT) FROM battle,"['SELECT', 'count', '(', 'DISTINCT', 'RESULT', ')', 'FROM', 'battle']","['select', 'count', '(', 'distinct', 'result', ')', 'from', 'battle']",How many different results are there for the battles?,"['How', 'many', 'different', 'results', 'are', 'there', 'for', 'the', 'battles', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 6, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
battle_death,SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );,"['SELECT', 'count', '(', '*', ')', 'FROM', 'battle', 'WHERE', 'id', 'NOT', 'IN', '(', 'SELECT', 'lost_in_battle', 'FROM', 'ship', 'WHERE', 'tonnage', '=', ""'225"", ""'"", ')', ';']","['select', 'count', '(', '*', ')', 'from', 'battle', 'where', 'id', 'not', 'in', '(', 'select', 'lost_in_battle', 'from', 'ship', 'where', 'tonnage', '=', 'value', ')']",How many battles did not lose any ship with tonnage '225'?,"['How', 'many', 'battles', 'did', 'not', 'lose', 'any', 'ship', 'with', 'tonnage', ""'225"", ""'"", '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[True, 8, [0, [0, 1, False], None], {'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 7, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""225""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
battle_death,"SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'","['SELECT', 'T1.name', ',', 'T1.date', 'FROM', 'battle', 'AS', 'T1', 'JOIN', 'ship', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.lost_in_battle', 'WHERE', 'T2.name', '=', ""'Lettice"", ""'"", 'INTERSECT', 'SELECT', 'T1.name', ',', 'T1.date', 'FROM', 'battle', 'AS', 'T1', 'JOIN', 'ship', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.lost_in_battle', 'WHERE', 'T2.name', '=', ""'HMS"", 'Atalanta', ""'""]","['select', 't1', '.', 'name', ',', 't1', '.', 'date', 'from', 'battle', 'as', 't1', 'join', 'ship', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'lost_in_battle', 'where', 't2', '.', 'name', '=', 'value', 'intersect', 'select', 't1', '.', 'name', ',', 't1', '.', 'date', 'from', 'battle', 'as', 't1', 'join', 'ship', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'lost_in_battle', 'where', 't2', '.', 'name', '=', 'value']",List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta',"['List', 'the', 'name', 'and', 'date', 'the', 'battle', 'that', 'has', 'lost', 'the', 'ship', 'named', ""'Lettice"", ""'"", 'and', 'the', 'ship', 'named', ""'HMS"", 'Atalanta', ""'""]","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 7, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 9, False], None], '""Lettice""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 7, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 9, False], None], '""HMS Atalanta""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
battle_death,"SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'","['SELECT', 'name', ',', 'RESULT', ',', 'bulgarian_commander', 'FROM', 'battle', 'EXCEPT', 'SELECT', 'T1.name', ',', 'T1.result', ',', 'T1.bulgarian_commander', 'FROM', 'battle', 'AS', 'T1', 'JOIN', 'ship', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.lost_in_battle', 'WHERE', 'T2.location', '=', ""'English"", 'Channel', ""'""]","['select', 'name', ',', 'result', ',', 'bulgarian_commander', 'from', 'battle', 'except', 'select', 't1', '.', 'name', ',', 't1', '.', 'result', ',', 't1', '.', 'bulgarian_commander', 'from', 'battle', 'as', 't1', 'join', 'ship', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'lost_in_battle', 'where', 't2', '.', 'location', '=', 'value']","Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.","['Show', 'names', ',', 'results', 'and', 'bulgarian', 'commanders', 'of', 'the', 'battles', 'with', 'no', 'ships', 'lost', 'in', 'the', ""'English"", 'Channel', ""'"", '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 7, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [[False, 2, [0, [0, 12, False], None], '""English Channel""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
battle_death,SELECT note FROM death WHERE note LIKE '%East%',"['SELECT', 'note', 'FROM', 'death', 'WHERE', 'note', 'LIKE', ""'"", '%', 'East', '%', ""'""]","['select', 'note', 'from', 'death', 'where', 'note', 'like', 'value']",What are the notes of the death events which has substring 'East'?,"['What', 'are', 'the', 'notes', 'of', 'the', 'death', 'events', 'which', 'has', 'substring', ""'East"", ""'"", '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 16, False], None]]]], 'where': [[False, 9, [0, [0, 16, False], None], '""%East%""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT line_1 ,  line_2 FROM addresses","['SELECT', 'line_1', ',', 'line_2', 'FROM', 'addresses']","['select', 'line_1', ',', 'line_2', 'from', 'addresses']",what are all the addresses including line 1 and line 2?,"['what', 'are', 'all', 'the', 'addresses', 'including', 'line', '1', 'and', 'line', '2', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT line_1 ,  line_2 FROM addresses","['SELECT', 'line_1', ',', 'line_2', 'FROM', 'addresses']","['select', 'line_1', ',', 'line_2', 'from', 'addresses']",What is the first and second line for all addresses?,"['What', 'is', 'the', 'first', 'and', 'second', 'line', 'for', 'all', 'addresses', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT count(*) FROM Courses,"['SELECT', 'count', '(', '*', ')', 'FROM', 'Courses']","['select', 'count', '(', '*', ')', 'from', 'courses']",How many courses in total are listed?,"['How', 'many', 'courses', 'in', 'total', 'are', 'listed', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT count(*) FROM Courses,"['SELECT', 'count', '(', '*', ')', 'FROM', 'Courses']","['select', 'count', '(', '*', ')', 'from', 'courses']",How many courses are there?,"['How', 'many', 'courses', 'are', 'there', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT course_description FROM Courses WHERE course_name  =  'math',"['SELECT', 'course_description', 'FROM', 'Courses', 'WHERE', 'course_name', '=', ""'math"", ""'""]","['select', 'course_description', 'from', 'courses', 'where', 'course_name', '=', 'value']",How is the math course described?,"['How', 'is', 'the', 'math', 'course', 'described', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 12, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""math""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT course_description FROM Courses WHERE course_name  =  'math',"['SELECT', 'course_description', 'FROM', 'Courses', 'WHERE', 'course_name', '=', ""'math"", ""'""]","['select', 'course_description', 'from', 'courses', 'where', 'course_name', '=', 'value']",What are the descriptions for all the math courses?,"['What', 'are', 'the', 'descriptions', 'for', 'all', 'the', 'math', 'courses', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 12, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""math""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea',"['SELECT', 'zip_postcode', 'FROM', 'Addresses', 'WHERE', 'city', '=', ""'Port"", 'Chelsea', ""'""]","['select', 'zip_postcode', 'from', 'addresses', 'where', 'city', '=', 'value']",What is the zip code of the address in the city Port Chelsea?,"['What', 'is', 'the', 'zip', 'code', 'of', 'the', 'address', 'in', 'the', 'city', 'Port', 'Chelsea', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""Port Chelsea""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea',"['SELECT', 'zip_postcode', 'FROM', 'Addresses', 'WHERE', 'city', '=', ""'Port"", 'Chelsea', ""'""]","['select', 'zip_postcode', 'from', 'addresses', 'where', 'city', '=', 'value']",What is the zip code for Port Chelsea?,"['What', 'is', 'the', 'zip', 'code', 'for', 'Port', 'Chelsea', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [[False, 2, [0, [0, 5, False], None], '""Port Chelsea""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'T2.department_name', ',', 'T1.department_id', 'FROM', 'Degree_Programs', 'AS', 'T1', 'JOIN', 'Departments', 'AS', 'T2', 'ON', 'T1.department_id', '=', 'T2.department_id', 'GROUP', 'BY', 'T1.department_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't2', '.', 'department_name', ',', 't1', '.', 'department_id', 'from', 'degree_programs', 'as', 't1', 'join', 'departments', 'as', 't2', 'on', 't1', '.', 'department_id', '=', 't2', '.', 'department_id', 'group', 'by', 't1', '.', 'department_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which department offers the most number of degrees? List department name and id.,"['Which', 'department', 'offers', 'the', 'most', 'number', 'of', 'degrees', '?', 'List', 'department', 'name', 'and', 'id', '.']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 19, False], None], [0, 14, False], None]]}, 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 19, False], None]]]], 'where': [], 'groupBy': [[0, 19, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1","['select', 't2.department_name', ',', 't1.department_id', 'from', 'degree_programs', 'as', 't1', 'join', 'departments', 'as', 't2', 'on', 't1.department_id', '=', 't2.department_id', 'group', 'by', 't1.department_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', '1']","['select', 't2', '.', 'department_name', ',', 't1', '.', 'department_id', 'from', 'degree_programs', 'as', 't1', 'join', 'departments', 'as', 't2', 'on', 't1', '.', 'department_id', '=', 't2', '.', 'department_id', 'group', 'by', 't1', '.', 'department_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the name and id of the department with the most number of degrees ?,"['What', 'is', 'the', 'name', 'and', 'id', 'of', 'the', 'department', 'with', 'the', 'most', 'number', 'of', 'degrees', '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 19, False], None], [0, 14, False], None]]}, 'select': [False, [[0, [0, [0, 15, False], None]], [0, [0, [0, 19, False], None]]]], 'where': [], 'groupBy': [[0, 19, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT count(DISTINCT department_id) FROM Degree_Programs,"['SELECT', 'count', '(', 'DISTINCT', 'department_id', ')', 'FROM', 'Degree_Programs']","['select', 'count', '(', 'distinct', 'department_id', ')', 'from', 'degree_programs']",How many departments offer any degree?,"['How', 'many', 'departments', 'offer', 'any', 'degree', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[3, [0, [0, 19, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT count(DISTINCT department_id) FROM Degree_Programs,"['SELECT', 'count', '(', 'DISTINCT', 'department_id', ')', 'FROM', 'Degree_Programs']","['select', 'count', '(', 'distinct', 'department_id', ')', 'from', 'degree_programs']",How many different departments offer degrees?,"['How', 'many', 'different', 'departments', 'offer', 'degrees', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[3, [0, [0, 19, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs,"['SELECT', 'count', '(', 'DISTINCT', 'degree_summary_name', ')', 'FROM', 'Degree_Programs']","['select', 'count', '(', 'distinct', 'degree_summary_name', ')', 'from', 'degree_programs']",How many different degree names are offered?,"['How', 'many', 'different', 'degree', 'names', 'are', 'offered', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[3, [0, [0, 20, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs,"['SELECT', 'count', '(', 'DISTINCT', 'degree_summary_name', ')', 'FROM', 'Degree_Programs']","['select', 'count', '(', 'distinct', 'degree_summary_name', ')', 'from', 'degree_programs']",How many different degrees are offered?,"['How', 'many', 'different', 'degrees', 'are', 'offered', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[3, [0, [0, 20, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer',"['SELECT', 'count', '(', '*', ')', 'FROM', 'Departments', 'AS', 'T1', 'JOIN', 'Degree_Programs', 'AS', 'T2', 'ON', 'T1.department_id', '=', 'T2.department_id', 'WHERE', 'T1.department_name', '=', ""'engineer"", ""'""]","['select', 'count', '(', '*', ')', 'from', 'departments', 'as', 't1', 'join', 'degree_programs', 'as', 't2', 'on', 't1', '.', 'department_id', '=', 't2', '.', 'department_id', 'where', 't1', '.', 'department_name', '=', 'value']",How many degrees does the engineering department offer?,"['How', 'many', 'degrees', 'does', 'the', 'engineering', 'department', 'offer', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 14, False], None], [0, 19, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 15, False], None], '""engineer""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer',"['SELECT', 'count', '(', '*', ')', 'FROM', 'Departments', 'AS', 'T1', 'JOIN', 'Degree_Programs', 'AS', 'T2', 'ON', 'T1.department_id', '=', 'T2.department_id', 'WHERE', 'T1.department_name', '=', ""'engineer"", ""'""]","['select', 'count', '(', '*', ')', 'from', 'departments', 'as', 't1', 'join', 'degree_programs', 'as', 't2', 'on', 't1', '.', 'department_id', '=', 't2', '.', 'department_id', 'where', 't1', '.', 'department_name', '=', 'value']",How many degrees does the engineering department have?,"['How', 'many', 'degrees', 'does', 'the', 'engineering', 'department', 'have', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 14, False], None], [0, 19, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 15, False], None], '""engineer""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT section_name ,  section_description FROM Sections","['SELECT', 'section_name', ',', 'section_description', 'FROM', 'Sections']","['select', 'section_name', ',', 'section_description', 'from', 'sections']",What are the names and descriptions of all the sections?,"['What', 'are', 'the', 'names', 'and', 'descriptions', 'of', 'all', 'the', 'sections', '?']","{'from': {'table_units': [['table_unit', 4]], 'conds': []}, 'select': [False, [[0, [0, [0, 25, False], None]], [0, [0, [0, 26, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT section_name ,  section_description FROM Sections","['SELECT', 'section_name', ',', 'section_description', 'FROM', 'Sections']","['select', 'section_name', ',', 'section_description', 'from', 'sections']",What are the names and descriptions for all the sections?,"['What', 'are', 'the', 'names', 'and', 'descriptions', 'for', 'all', 'the', 'sections', '?']","{'from': {'table_units': [['table_unit', 4]], 'conds': []}, 'select': [False, [[0, [0, [0, 25, False], None]], [0, [0, [0, 26, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2","['SELECT', 'T1.course_name', ',', 'T1.course_id', 'FROM', 'Courses', 'AS', 'T1', 'JOIN', 'Sections', 'AS', 'T2', 'ON', 'T1.course_id', '=', 'T2.course_id', 'GROUP', 'BY', 'T1.course_id', 'HAVING', 'count', '(', '*', ')', '<', '=', '2']","['select', 't1', '.', 'course_name', ',', 't1', '.', 'course_id', 'from', 'courses', 'as', 't1', 'join', 'sections', 'as', 't2', 'on', 't1', '.', 'course_id', '=', 't2', '.', 'course_id', 'group', 'by', 't1', '.', 'course_id', 'having', 'count', '(', '*', ')', '<', '=', 'value']",What are the names and id of courses having at most 2 sections?,"['What', 'are', 'the', 'names', 'and', 'id', 'of', 'courses', 'having', 'at', 'most', '2', 'sections', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 4]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 24, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 10, False], None]]]], 'where': [], 'groupBy': [[0, 10, False]], 'having': [[False, 6, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2","['SELECT', 'T1.course_name', ',', 'T1.course_id', 'FROM', 'Courses', 'AS', 'T1', 'JOIN', 'Sections', 'AS', 'T2', 'ON', 'T1.course_id', '=', 'T2.course_id', 'GROUP', 'BY', 'T1.course_id', 'HAVING', 'count', '(', '*', ')', '<', '=', '2']","['select', 't1', '.', 'course_name', ',', 't1', '.', 'course_id', 'from', 'courses', 'as', 't1', 'join', 'sections', 'as', 't2', 'on', 't1', '.', 'course_id', '=', 't2', '.', 'course_id', 'group', 'by', 't1', '.', 'course_id', 'having', 'count', '(', '*', ')', '<', '=', 'value']",What are the names and ids of every course with less than 2 sections?,"['What', 'are', 'the', 'names', 'and', 'ids', 'of', 'every', 'course', 'with', 'less', 'than', '2', 'sections', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 4]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 24, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 10, False], None]]]], 'where': [], 'groupBy': [[0, 10, False]], 'having': [[False, 6, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT section_name FROM Sections ORDER BY section_name DESC,"['SELECT', 'section_name', 'FROM', 'Sections', 'ORDER', 'BY', 'section_name', 'DESC']","['select', 'section_name', 'from', 'sections', 'order', 'by', 'section_name', 'desc']",List the section_name in reversed lexicographical order.,"['List', 'the', 'section_name', 'in', 'reversed', 'lexicographical', 'order', '.']","{'from': {'table_units': [['table_unit', 4]], 'conds': []}, 'select': [False, [[0, [0, [0, 25, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 25, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT section_name FROM Sections ORDER BY section_name DESC,"['SELECT', 'section_name', 'FROM', 'Sections', 'ORDER', 'BY', 'section_name', 'DESC']","['select', 'section_name', 'from', 'sections', 'order', 'by', 'section_name', 'desc']",What are the names of the sections in reverse alphabetical order?,"['What', 'are', 'the', 'names', 'of', 'the', 'sections', 'in', 'reverse', 'alphabetical', 'order', '?']","{'from': {'table_units': [['table_unit', 4]], 'conds': []}, 'select': [False, [[0, [0, [0, 25, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 25, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'T1.semester_name', ',', 'T1.semester_id', 'FROM', 'Semesters', 'AS', 'T1', 'JOIN', 'Student_Enrolment', 'AS', 'T2', 'ON', 'T1.semester_id', '=', 'T2.semester_id', 'GROUP', 'BY', 'T1.semester_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'semester_name', ',', 't1', '.', 'semester_id', 'from', 'semesters', 'as', 't1', 'join', 'student_enrolment', 'as', 't2', 'on', 't1', '.', 'semester_id', '=', 't2', '.', 'semester_id', 'group', 'by', 't1', '.', 'semester_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the semester which most student registered in? Show both the name and the id.,"['What', 'is', 'the', 'semester', 'which', 'most', 'student', 'registered', 'in', '?', 'Show', 'both', 'the', 'name', 'and', 'the', 'id', '.']","{'from': {'table_units': [['table_unit', 5], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 28, False], None], [0, 46, False], None]]}, 'select': [False, [[0, [0, [0, 29, False], None]], [0, [0, [0, 28, False], None]]]], 'where': [], 'groupBy': [[0, 28, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'T1.semester_name', ',', 'T1.semester_id', 'FROM', 'Semesters', 'AS', 'T1', 'JOIN', 'Student_Enrolment', 'AS', 'T2', 'ON', 'T1.semester_id', '=', 'T2.semester_id', 'GROUP', 'BY', 'T1.semester_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'semester_name', ',', 't1', '.', 'semester_id', 'from', 'semesters', 'as', 't1', 'join', 'student_enrolment', 'as', 't2', 'on', 't1', '.', 'semester_id', '=', 't2', '.', 'semester_id', 'group', 'by', 't1', '.', 'semester_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']","For each semester, what is the name and id of the one with the most students registered?","['For', 'each', 'semester', ',', 'what', 'is', 'the', 'name', 'and', 'id', 'of', 'the', 'one', 'with', 'the', 'most', 'students', 'registered', '?']","{'from': {'table_units': [['table_unit', 5], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 28, False], None], [0, 46, False], None]]}, 'select': [False, [[0, [0, [0, 29, False], None]], [0, [0, [0, 28, False], None]]]], 'where': [], 'groupBy': [[0, 28, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT department_description FROM Departments WHERE department_name LIKE '%computer%',"['SELECT', 'department_description', 'FROM', 'Departments', 'WHERE', 'department_name', 'LIKE', ""'"", '%', 'computer', '%', ""'""]","['select', 'department_description', 'from', 'departments', 'where', 'department_name', 'like', 'value']",What is the description of the department whose name has the substring the computer?,"['What', 'is', 'the', 'description', 'of', 'the', 'department', 'whose', 'name', 'has', 'the', 'substring', 'the', 'computer', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 16, False], None]]]], 'where': [[False, 9, [0, [0, 15, False], None], '""%computer%""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT department_description FROM Departments WHERE department_name LIKE '%computer%',"['SELECT', 'department_description', 'FROM', 'Departments', 'WHERE', 'department_name', 'LIKE', ""'"", '%', 'computer', '%', ""'""]","['select', 'department_description', 'from', 'departments', 'where', 'department_name', 'like', 'value']",What is the department description for the one whose name has the word computer?,"['What', 'is', 'the', 'department', 'description', 'for', 'the', 'one', 'whose', 'name', 'has', 'the', 'word', 'computer', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 16, False], None]]]], 'where': [[False, 9, [0, [0, 15, False], None], '""%computer%""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2","['SELECT', 'T1.first_name', ',', 'T1.middle_name', ',', 'T1.last_name', ',', 'T1.student_id', 'FROM', 'Students', 'AS', 'T1', 'JOIN', 'Student_Enrolment', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.student_id', 'GROUP', 'BY', 'T1.student_id', 'HAVING', 'count', '(', '*', ')', '=', '2']","['select', 't1', '.', 'first_name', ',', 't1', '.', 'middle_name', ',', 't1', '.', 'last_name', ',', 't1', '.', 'student_id', 'from', 'students', 'as', 't1', 'join', 'student_enrolment', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'student_id', 'group', 'by', 't1', '.', 'student_id', 'having', 'count', '(', '*', ')', '=', 'value']","Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.","['Who', 'are', 'enrolled', 'in', '2', 'degree', 'programs', 'in', 'one', 'semester', '?', 'List', 'the', 'first', 'name', ',', 'middle', 'name', 'and', 'last', 'name', 'and', 'the', 'id', '.']","{'from': {'table_units': [['table_unit', 6], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]]}, 'select': [False, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]], [0, [0, [0, 32, False], None]]]], 'where': [], 'groupBy': [[0, 32, False]], 'having': [[False, 2, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2","['SELECT', 'T1.first_name', ',', 'T1.middle_name', ',', 'T1.last_name', ',', 'T1.student_id', 'FROM', 'Students', 'AS', 'T1', 'JOIN', 'Student_Enrolment', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.student_id', 'GROUP', 'BY', 'T1.student_id', 'HAVING', 'count', '(', '*', ')', '=', '2']","['select', 't1', '.', 'first_name', ',', 't1', '.', 'middle_name', ',', 't1', '.', 'last_name', ',', 't1', '.', 'student_id', 'from', 'students', 'as', 't1', 'join', 'student_enrolment', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'student_id', 'group', 'by', 't1', '.', 'student_id', 'having', 'count', '(', '*', ')', '=', 'value']","What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?","['What', 'are', 'the', 'first', ',', 'middle', ',', 'and', 'last', 'names', ',', 'along', 'with', 'the', 'ids', ',', 'of', 'all', 'students', 'who', 'enrolled', 'in', '2', 'degree', 'programs', 'in', 'one', 'semester', '?']","{'from': {'table_units': [['table_unit', 6], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]]}, 'select': [False, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]], [0, [0, [0, 32, False], None]]]], 'where': [], 'groupBy': [[0, 32, False]], 'having': [[False, 2, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'","['SELECT', 'DISTINCT', 'T1.first_name', ',', 'T1.middle_name', ',', 'T1.last_name', 'FROM', 'Students', 'AS', 'T1', 'JOIN', 'Student_Enrolment', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.student_id', 'JOIN', 'Degree_Programs', 'AS', 'T3', 'ON', 'T2.degree_program_id', '=', 'T3.degree_program_id', 'WHERE', 'T3.degree_summary_name', '=', ""'Bachelor"", ""'""]","['select', 'distinct', 't1', '.', 'first_name', ',', 't1', '.', 'middle_name', ',', 't1', '.', 'last_name', 'from', 'students', 'as', 't1', 'join', 'student_enrolment', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'student_id', 'join', 'degree_programs', 'as', 't3', 'on', 't2', '.', 'degree_program_id', '=', 't3', '.', 'degree_program_id', 'where', 't3', '.', 'degree_summary_name', '=', 'value']","Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.","['Who', 'is', 'enrolled', 'in', 'a', 'Bachelor', 'degree', 'program', '?', 'List', 'the', 'first', 'name', ',', 'middle', 'name', ',', 'last', 'name', '.']","{'from': {'table_units': [['table_unit', 6], ['table_unit', 7], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None], 'and', [False, 2, [0, [0, 45, False], None], [0, 18, False], None]]}, 'select': [True, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]]]], 'where': [[False, 2, [0, [0, 20, False], None], '""Bachelor""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'","['SELECT', 'DISTINCT', 'T1.first_name', ',', 'T1.middle_name', ',', 'T1.last_name', 'FROM', 'Students', 'AS', 'T1', 'JOIN', 'Student_Enrolment', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.student_id', 'JOIN', 'Degree_Programs', 'AS', 'T3', 'ON', 'T2.degree_program_id', '=', 'T3.degree_program_id', 'WHERE', 'T3.degree_summary_name', '=', ""'Bachelor"", ""'""]","['select', 'distinct', 't1', '.', 'first_name', ',', 't1', '.', 'middle_name', ',', 't1', '.', 'last_name', 'from', 'students', 'as', 't1', 'join', 'student_enrolment', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'student_id', 'join', 'degree_programs', 'as', 't3', 'on', 't2', '.', 'degree_program_id', '=', 't3', '.', 'degree_program_id', 'where', 't3', '.', 'degree_summary_name', '=', 'value']","What are the first, middle, and last names for everybody enrolled in a Bachelors program?","['What', 'are', 'the', 'first', ',', 'middle', ',', 'and', 'last', 'names', 'for', 'everybody', 'enrolled', 'in', 'a', 'Bachelors', 'program', '?']","{'from': {'table_units': [['table_unit', 6], ['table_unit', 7], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None], 'and', [False, 2, [0, [0, 45, False], None], [0, 18, False], None]]}, 'select': [True, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]]]], 'where': [[False, 2, [0, [0, 20, False], None], '""Bachelor""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T1.degree_summary_name', 'FROM', 'Degree_Programs', 'AS', 'T1', 'JOIN', 'Student_Enrolment', 'AS', 'T2', 'ON', 'T1.degree_program_id', '=', 'T2.degree_program_id', 'GROUP', 'BY', 'T1.degree_summary_name', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'degree_summary_name', 'from', 'degree_programs', 'as', 't1', 'join', 'student_enrolment', 'as', 't2', 'on', 't1', '.', 'degree_program_id', '=', 't2', '.', 'degree_program_id', 'group', 'by', 't1', '.', 'degree_summary_name', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Find the kind of program which most number of students are enrolled in?,"['Find', 'the', 'kind', 'of', 'program', 'which', 'most', 'number', 'of', 'students', 'are', 'enrolled', 'in', '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]]}, 'select': [False, [[0, [0, [0, 20, False], None]]]], 'where': [], 'groupBy': [[0, 20, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T1.degree_summary_name', 'FROM', 'Degree_Programs', 'AS', 'T1', 'JOIN', 'Student_Enrolment', 'AS', 'T2', 'ON', 'T1.degree_program_id', '=', 'T2.degree_program_id', 'GROUP', 'BY', 'T1.degree_summary_name', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'degree_summary_name', 'from', 'degree_programs', 'as', 't1', 'join', 'student_enrolment', 'as', 't2', 'on', 't1', '.', 'degree_program_id', '=', 't2', '.', 'degree_program_id', 'group', 'by', 't1', '.', 'degree_summary_name', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the degree summary name that has the most number of students enrolled?,"['What', 'is', 'the', 'degree', 'summary', 'name', 'that', 'has', 'the', 'most', 'number', 'of', 'students', 'enrolled', '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]]}, 'select': [False, [[0, [0, [0, 20, False], None]]]], 'where': [], 'groupBy': [[0, 20, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'T1.degree_program_id', ',', 'T1.degree_summary_name', 'FROM', 'Degree_Programs', 'AS', 'T1', 'JOIN', 'Student_Enrolment', 'AS', 'T2', 'ON', 'T1.degree_program_id', '=', 'T2.degree_program_id', 'GROUP', 'BY', 'T1.degree_program_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'degree_program_id', ',', 't1', '.', 'degree_summary_name', 'from', 'degree_programs', 'as', 't1', 'join', 'student_enrolment', 'as', 't2', 'on', 't1', '.', 'degree_program_id', '=', 't2', '.', 'degree_program_id', 'group', 'by', 't1', '.', 'degree_program_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Find the program which most number of students are enrolled in. List both the id and the summary.,"['Find', 'the', 'program', 'which', 'most', 'number', 'of', 'students', 'are', 'enrolled', 'in', '.', 'List', 'both', 'the', 'id', 'and', 'the', 'summary', '.']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]]}, 'select': [False, [[0, [0, [0, 18, False], None]], [0, [0, [0, 20, False], None]]]], 'where': [], 'groupBy': [[0, 18, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'T1.degree_program_id', ',', 'T1.degree_summary_name', 'FROM', 'Degree_Programs', 'AS', 'T1', 'JOIN', 'Student_Enrolment', 'AS', 'T2', 'ON', 'T1.degree_program_id', '=', 'T2.degree_program_id', 'GROUP', 'BY', 'T1.degree_program_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'degree_program_id', ',', 't1', '.', 'degree_summary_name', 'from', 'degree_programs', 'as', 't1', 'join', 'student_enrolment', 'as', 't2', 'on', 't1', '.', 'degree_program_id', '=', 't2', '.', 'degree_program_id', 'group', 'by', 't1', '.', 'degree_program_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the program id and the summary of the degree that has the most students enrolled?,"['What', 'is', 'the', 'program', 'id', 'and', 'the', 'summary', 'of', 'the', 'degree', 'that', 'has', 'the', 'most', 'students', 'enrolled', '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]]}, 'select': [False, [[0, [0, [0, 18, False], None]], [0, [0, [0, 20, False], None]]]], 'where': [], 'groupBy': [[0, 18, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'T1.student_id', ',', 'T1.first_name', ',', 'T1.middle_name', ',', 'T1.last_name', ',', 'count', '(', '*', ')', ',', 'T1.student_id', 'FROM', 'Students', 'AS', 'T1', 'JOIN', 'Student_Enrolment', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.student_id', 'GROUP', 'BY', 'T1.student_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'student_id', ',', 't1', '.', 'first_name', ',', 't1', '.', 'middle_name', ',', 't1', '.', 'last_name', ',', 'count', '(', '*', ')', ',', 't1', '.', 'student_id', 'from', 'students', 'as', 't1', 'join', 'student_enrolment', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'student_id', 'group', 'by', 't1', '.', 'student_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']","Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.","['Which', 'student', 'has', 'enrolled', 'for', 'the', 'most', 'times', 'in', 'any', 'program', '?', 'List', 'the', 'id', ',', 'first', 'name', ',', 'middle', 'name', ',', 'last', 'name', ',', 'the', 'number', 'of', 'enrollments', 'and', 'student', 'id', '.']","{'from': {'table_units': [['table_unit', 6], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]]}, 'select': [False, [[0, [0, [0, 32, False], None]], [0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]], [3, [0, [0, 0, False], None]], [0, [0, [0, 32, False], None]]]], 'where': [], 'groupBy': [[0, 32, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'T1.student_id', ',', 'T1.first_name', ',', 'T1.middle_name', ',', 'T1.last_name', ',', 'count', '(', '*', ')', ',', 'T1.student_id', 'FROM', 'Students', 'AS', 'T1', 'JOIN', 'Student_Enrolment', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.student_id', 'GROUP', 'BY', 'T1.student_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'student_id', ',', 't1', '.', 'first_name', ',', 't1', '.', 'middle_name', ',', 't1', '.', 'last_name', ',', 'count', '(', '*', ')', ',', 't1', '.', 'student_id', 'from', 'students', 'as', 't1', 'join', 'student_enrolment', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'student_id', 'group', 'by', 't1', '.', 'student_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']","What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?","['What', 'is', 'the', 'first', ',', 'middle', ',', 'and', 'last', 'name', ',', 'along', 'with', 'the', 'id', 'and', 'number', 'of', 'enrollments', ',', 'for', 'the', 'student', 'who', 'enrolled', 'the', 'most', 'in', 'any', 'program', '?']","{'from': {'table_units': [['table_unit', 6], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]]}, 'select': [False, [[0, [0, [0, 32, False], None]], [0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]], [3, [0, [0, 0, False], None]], [0, [0, [0, 32, False], None]]]], 'where': [], 'groupBy': [[0, 32, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment ),"['SELECT', 'semester_name', 'FROM', 'Semesters', 'WHERE', 'semester_id', 'NOT', 'IN', '(', 'SELECT', 'semester_id', 'FROM', 'Student_Enrolment', ')']","['select', 'semester_name', 'from', 'semesters', 'where', 'semester_id', 'not', 'in', '(', 'select', 'semester_id', 'from', 'student_enrolment', ')']",Which semesters do not have any student enrolled? List the semester name.,"['Which', 'semesters', 'do', 'not', 'have', 'any', 'student', 'enrolled', '?', 'List', 'the', 'semester', 'name', '.']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[0, [0, [0, 29, False], None]]]], 'where': [[True, 8, [0, [0, 28, False], None], {'from': {'table_units': [['table_unit', 7]], 'conds': []}, 'select': [False, [[0, [0, [0, 46, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment ),"['SELECT', 'semester_name', 'FROM', 'Semesters', 'WHERE', 'semester_id', 'NOT', 'IN', '(', 'SELECT', 'semester_id', 'FROM', 'Student_Enrolment', ')']","['select', 'semester_name', 'from', 'semesters', 'where', 'semester_id', 'not', 'in', '(', 'select', 'semester_id', 'from', 'student_enrolment', ')']",What is the name of the semester with no students enrolled?,"['What', 'is', 'the', 'name', 'of', 'the', 'semester', 'with', 'no', 'students', 'enrolled', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[0, [0, [0, 29, False], None]]]], 'where': [[True, 8, [0, [0, 28, False], None], {'from': {'table_units': [['table_unit', 7]], 'conds': []}, 'select': [False, [[0, [0, [0, 46, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id,"['SELECT', 'DISTINCT', 'T1.course_name', 'FROM', 'Courses', 'AS', 'T1', 'JOIN', 'Student_Enrolment_Courses', 'AS', 'T2', 'ON', 'T1.course_id', '=', 'T2.course_id']","['select', 'distinct', 't1', '.', 'course_name', 'from', 'courses', 'as', 't1', 'join', 'student_enrolment_courses', 'as', 't2', 'on', 't1', '.', 'course_id', '=', 't2', '.', 'course_id']",What are all the course names of the courses which ever have students enrolled in?,"['What', 'are', 'all', 'the', 'course', 'names', 'of', 'the', 'courses', 'which', 'ever', 'have', 'students', 'enrolled', 'in', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 8]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 50, False], None]]}, 'select': [True, [[0, [0, [0, 11, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id,"['SELECT', 'DISTINCT', 'T1.course_name', 'FROM', 'Courses', 'AS', 'T1', 'JOIN', 'Student_Enrolment_Courses', 'AS', 'T2', 'ON', 'T1.course_id', '=', 'T2.course_id']","['select', 'distinct', 't1', '.', 'course_name', 'from', 'courses', 'as', 't1', 'join', 'student_enrolment_courses', 'as', 't2', 'on', 't1', '.', 'course_id', '=', 't2', '.', 'course_id']",What are the names of all courses that have some students enrolled?,"['What', 'are', 'the', 'names', 'of', 'all', 'courses', 'that', 'have', 'some', 'students', 'enrolled', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 8]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 50, False], None]]}, 'select': [True, [[0, [0, [0, 11, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T1.course_name', 'FROM', 'Courses', 'AS', 'T1', 'JOIN', 'Student_Enrolment_Courses', 'AS', 'T2', 'ON', 'T1.course_id', '=', 'T2.course_id', 'GROUP', 'BY', 'T1.course_name', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'course_name', 'from', 'courses', 'as', 't1', 'join', 'student_enrolment_courses', 'as', 't2', 'on', 't1', '.', 'course_id', '=', 't2', '.', 'course_id', 'group', 'by', 't1', '.', 'course_name', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What's the name of the course with most number of enrollments?,"['What', ""'s"", 'the', 'name', 'of', 'the', 'course', 'with', 'most', 'number', 'of', 'enrollments', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 8]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 50, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [], 'groupBy': [[0, 11, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T1.course_name', 'FROM', 'Courses', 'AS', 'T1', 'JOIN', 'Student_Enrolment_Courses', 'AS', 'T2', 'ON', 'T1.course_id', '=', 'T2.course_id', 'GROUP', 'BY', 'T1.course_name', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'course_name', 'from', 'courses', 'as', 't1', 'join', 'student_enrolment_courses', 'as', 't2', 'on', 't1', '.', 'course_id', '=', 't2', '.', 'course_id', 'group', 'by', 't1', '.', 'course_name', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the name of the course with the most students enrolled?,"['What', 'is', 'the', 'name', 'of', 'the', 'course', 'with', 'the', 'most', 'students', 'enrolled', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 8]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 50, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [], 'groupBy': [[0, 11, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id,"['SELECT', 'T1.last_name', 'FROM', 'Students', 'AS', 'T1', 'JOIN', 'Addresses', 'AS', 'T2', 'ON', 'T1.current_address_id', '=', 'T2.address_id', 'WHERE', 'T2.state_province_county', '=', ""'NorthCarolina"", ""'"", 'EXCEPT', 'SELECT', 'DISTINCT', 'T3.last_name', 'FROM', 'Students', 'AS', 'T3', 'JOIN', 'Student_Enrolment', 'AS', 'T4', 'ON', 'T3.student_id', '=', 'T4.student_id']","['select', 't1', '.', 'last_name', 'from', 'students', 'as', 't1', 'join', 'addresses', 'as', 't2', 'on', 't1', '.', 'current_address_id', '=', 't2', '.', 'address_id', 'where', 't2', '.', 'state_province_county', '=', 'value', 'except', 'select', 'distinct', 't3', '.', 'last_name', 'from', 'students', 'as', 't3', 'join', 'student_enrolment', 'as', 't4', 'on', 't3', '.', 'student_id', '=', 't4', '.', 'student_id']",Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.,"['Find', 'the', 'last', 'name', 'of', 'the', 'students', 'who', 'currently', 'live', 'in', 'the', 'state', 'of', 'North', 'Carolina', 'but', 'have', 'not', 'registered', 'in', 'any', 'degree', 'program', '.']","{'from': {'table_units': [['table_unit', 6], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 33, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 37, False], None]]]], 'where': [[False, 2, [0, [0, 7, False], None], '""NorthCarolina""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 6], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]]}, 'select': [True, [[0, [0, [0, 37, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
student_transcripts_tracking,SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id,"['SELECT', 'T1.last_name', 'FROM', 'Students', 'AS', 'T1', 'JOIN', 'Addresses', 'AS', 'T2', 'ON', 'T1.current_address_id', '=', 'T2.address_id', 'WHERE', 'T2.state_province_county', '=', ""'NorthCarolina"", ""'"", 'EXCEPT', 'SELECT', 'DISTINCT', 'T3.last_name', 'FROM', 'Students', 'AS', 'T3', 'JOIN', 'Student_Enrolment', 'AS', 'T4', 'ON', 'T3.student_id', '=', 'T4.student_id']","['select', 't1', '.', 'last_name', 'from', 'students', 'as', 't1', 'join', 'addresses', 'as', 't2', 'on', 't1', '.', 'current_address_id', '=', 't2', '.', 'address_id', 'where', 't2', '.', 'state_province_county', '=', 'value', 'except', 'select', 'distinct', 't3', '.', 'last_name', 'from', 'students', 'as', 't3', 'join', 'student_enrolment', 'as', 't4', 'on', 't3', '.', 'student_id', '=', 't4', '.', 'student_id']",What are the last name of the students who live in North Carolina but have not registered in any degree programs?,"['What', 'are', 'the', 'last', 'name', 'of', 'the', 'students', 'who', 'live', 'in', 'North', 'Carolina', 'but', 'have', 'not', 'registered', 'in', 'any', 'degree', 'programs', '?']","{'from': {'table_units': [['table_unit', 6], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 33, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 37, False], None]]]], 'where': [[False, 2, [0, [0, 7, False], None], '""NorthCarolina""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 6], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 32, False], None], [0, 47, False], None]]}, 'select': [True, [[0, [0, [0, 37, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
student_transcripts_tracking,"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2","['SELECT', 'T2.transcript_date', ',', 'T1.transcript_id', 'FROM', 'Transcript_Contents', 'AS', 'T1', 'JOIN', 'Transcripts', 'AS', 'T2', 'ON', 'T1.transcript_id', '=', 'T2.transcript_id', 'GROUP', 'BY', 'T1.transcript_id', 'HAVING', 'count', '(', '*', ')', '>', '=', '2']","['select', 't2', '.', 'transcript_date', ',', 't1', '.', 'transcript_id', 'from', 'transcript_contents', 'as', 't1', 'join', 'transcripts', 'as', 't2', 'on', 't1', '.', 'transcript_id', '=', 't2', '.', 'transcript_id', 'group', 'by', 't1', '.', 'transcript_id', 'having', 'count', '(', '*', ')', '>', '=', 'value']",Show the date and id of the transcript with at least 2 course results.,"['Show', 'the', 'date', 'and', 'id', 'of', 'the', 'transcript', 'with', 'at', 'least', '2', 'course', 'results', '.']","{'from': {'table_units': [['table_unit', 10], ['table_unit', 9]], 'conds': [[False, 2, [0, [0, 56, False], None], [0, 52, False], None]]}, 'select': [False, [[0, [0, [0, 53, False], None]], [0, [0, [0, 56, False], None]]]], 'where': [], 'groupBy': [[0, 56, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2","['SELECT', 'T2.transcript_date', ',', 'T1.transcript_id', 'FROM', 'Transcript_Contents', 'AS', 'T1', 'JOIN', 'Transcripts', 'AS', 'T2', 'ON', 'T1.transcript_id', '=', 'T2.transcript_id', 'GROUP', 'BY', 'T1.transcript_id', 'HAVING', 'count', '(', '*', ')', '>', '=', '2']","['select', 't2', '.', 'transcript_date', ',', 't1', '.', 'transcript_id', 'from', 'transcript_contents', 'as', 't1', 'join', 'transcripts', 'as', 't2', 'on', 't1', '.', 'transcript_id', '=', 't2', '.', 'transcript_id', 'group', 'by', 't1', '.', 'transcript_id', 'having', 'count', '(', '*', ')', '>', '=', 'value']",What is the date and id of the transcript with at least 2 courses listed?,"['What', 'is', 'the', 'date', 'and', 'id', 'of', 'the', 'transcript', 'with', 'at', 'least', '2', 'courses', 'listed', '?']","{'from': {'table_units': [['table_unit', 10], ['table_unit', 9]], 'conds': [[False, 2, [0, [0, 56, False], None], [0, 52, False], None]]}, 'select': [False, [[0, [0, [0, 53, False], None]], [0, [0, [0, 56, False], None]]]], 'where': [], 'groupBy': [[0, 56, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward',"['SELECT', 'cell_mobile_number', 'FROM', 'Students', 'WHERE', 'first_name', '=', ""'Timmothy"", ""'"", 'AND', 'last_name', '=', ""'Ward"", ""'""]","['select', 'cell_mobile_number', 'from', 'students', 'where', 'first_name', '=', 'value', 'and', 'last_name', '=', 'value']",What is the phone number of the man with the first name Timmothy and the last name Ward?,"['What', 'is', 'the', 'phone', 'number', 'of', 'the', 'man', 'with', 'the', 'first', 'name', 'Timmothy', 'and', 'the', 'last', 'name', 'Ward', '?']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 38, False], None]]]], 'where': [[False, 2, [0, [0, 35, False], None], '""Timmothy""', None], 'and', [False, 2, [0, [0, 37, False], None], '""Ward""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward',"['select', 'cell_mobile_number', 'from', 'students', 'where', 'first_name', '=', '""timmothy""', 'and', 'last_name', '=', '""ward""']","['select', 'cell_mobile_number', 'from', 'students', 'where', 'first_name', '=', 'value', 'and', 'last_name', '=', 'value']",What is the mobile phone number of the student named Timmothy Ward ?,"['What', 'is', 'the', 'mobile', 'phone', 'number', 'of', 'the', 'student', 'named', 'Timmothy', 'Ward', '?']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 38, False], None]]]], 'where': [[False, 2, [0, [0, 35, False], None], '""timmothy""', None], 'and', [False, 2, [0, [0, 37, False], None], '""ward""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1","['SELECT', 'first_name', ',', 'middle_name', ',', 'last_name', 'FROM', 'Students', 'ORDER', 'BY', 'date_first_registered', 'ASC', 'LIMIT', '1']","['select', 'first_name', ',', 'middle_name', ',', 'last_name', 'from', 'students', 'order', 'by', 'date_first_registered', 'asc', 'limit', 'value']","Who is the first student to register? List the first name, middle name and last name.","['Who', 'is', 'the', 'first', 'student', 'to', 'register', '?', 'List', 'the', 'first', 'name', ',', 'middle', 'name', 'and', 'last', 'name', '.']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 41, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1","['SELECT', 'first_name', ',', 'middle_name', ',', 'last_name', 'FROM', 'Students', 'ORDER', 'BY', 'date_first_registered', 'ASC', 'LIMIT', '1']","['select', 'first_name', ',', 'middle_name', ',', 'last_name', 'from', 'students', 'order', 'by', 'date_first_registered', 'asc', 'limit', 'value']","What is the first, middle, and last name of the first student to register?","['What', 'is', 'the', 'first', ',', 'middle', ',', 'and', 'last', 'name', 'of', 'the', 'first', 'student', 'to', 'register', '?']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 41, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1","['SELECT', 'first_name', ',', 'middle_name', ',', 'last_name', 'FROM', 'Students', 'ORDER', 'BY', 'date_left', 'ASC', 'LIMIT', '1']","['select', 'first_name', ',', 'middle_name', ',', 'last_name', 'from', 'students', 'order', 'by', 'date_left', 'asc', 'limit', 'value']","Who is the earliest graduate of the school? List the first name, middle name and last name.","['Who', 'is', 'the', 'earliest', 'graduate', 'of', 'the', 'school', '?', 'List', 'the', 'first', 'name', ',', 'middle', 'name', 'and', 'last', 'name', '.']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 42, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1","['SELECT', 'first_name', ',', 'middle_name', ',', 'last_name', 'FROM', 'Students', 'ORDER', 'BY', 'date_left', 'ASC', 'LIMIT', '1']","['select', 'first_name', ',', 'middle_name', ',', 'last_name', 'from', 'students', 'order', 'by', 'date_left', 'asc', 'limit', 'value']","What is the first, middle, and last name of the earliest school graduate?","['What', 'is', 'the', 'first', ',', 'middle', ',', 'and', 'last', 'name', 'of', 'the', 'earliest', 'school', 'graduate', '?']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 35, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 42, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT first_name FROM Students WHERE current_address_id != permanent_address_id,"['SELECT', 'first_name', 'FROM', 'Students', 'WHERE', 'current_address_id', '!', '=', 'permanent_address_id']","['select', 'first_name', 'from', 'students', 'where', 'current_address_id', '!', '=', 'permanent_address_id']",Whose permanent address is different from his or her current address? List his or her first name.,"['Whose', 'permanent', 'address', 'is', 'different', 'from', 'his', 'or', 'her', 'current', 'address', '?', 'List', 'his', 'or', 'her', 'first', 'name', '.']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 35, False], None]]]], 'where': [[False, 7, [0, [0, 33, False], None], [0, 34, False], None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT first_name FROM Students WHERE current_address_id != permanent_address_id,"['SELECT', 'first_name', 'FROM', 'Students', 'WHERE', 'current_address_id', '!', '=', 'permanent_address_id']","['select', 'first_name', 'from', 'students', 'where', 'current_address_id', '!', '=', 'permanent_address_id']",What is the first name of the student whose permanent address is different from his or her current one?,"['What', 'is', 'the', 'first', 'name', 'of', 'the', 'student', 'whose', 'permanent', 'address', 'is', 'different', 'from', 'his', 'or', 'her', 'current', 'one', '?']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 35, False], None]]]], 'where': [[False, 7, [0, [0, 33, False], None], [0, 34, False], None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'T1.address_id', ',', 'T1.line_1', ',', 'T1.line_2', 'FROM', 'Addresses', 'AS', 'T1', 'JOIN', 'Students', 'AS', 'T2', 'ON', 'T1.address_id', '=', 'T2.current_address_id', 'GROUP', 'BY', 'T1.address_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'address_id', ',', 't1', '.', 'line_1', ',', 't1', '.', 'line_2', 'from', 'addresses', 'as', 't1', 'join', 'students', 'as', 't2', 'on', 't1', '.', 'address_id', '=', 't2', '.', 'current_address_id', 'group', 'by', 't1', '.', 'address_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which address holds the most number of students currently? List the address id and all lines.,"['Which', 'address', 'holds', 'the', 'most', 'number', 'of', 'students', 'currently', '?', 'List', 'the', 'address', 'id', 'and', 'all', 'lines', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 6]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 33, False], None]]}, 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [[0, 1, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'T1.address_id', ',', 'T1.line_1', ',', 'T1.line_2', 'FROM', 'Addresses', 'AS', 'T1', 'JOIN', 'Students', 'AS', 'T2', 'ON', 'T1.address_id', '=', 'T2.current_address_id', 'GROUP', 'BY', 'T1.address_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'address_id', ',', 't1', '.', 'line_1', ',', 't1', '.', 'line_2', 'from', 'addresses', 'as', 't1', 'join', 'students', 'as', 't2', 'on', 't1', '.', 'address_id', '=', 't2', '.', 'current_address_id', 'group', 'by', 't1', '.', 'address_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']","What is the id, line 1, and line 2 of the address with the most students?","['What', 'is', 'the', 'id', ',', 'line', '1', ',', 'and', 'line', '2', 'of', 'the', 'address', 'with', 'the', 'most', 'students', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 6]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 33, False], None]]}, 'select': [False, [[0, [0, [0, 1, False], None]], [0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [[0, 1, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT avg(transcript_date) FROM Transcripts,"['SELECT', 'avg', '(', 'transcript_date', ')', 'FROM', 'Transcripts']","['select', 'avg', '(', 'transcript_date', ')', 'from', 'transcripts']","On average, when were the transcripts printed?","['On', 'average', ',', 'when', 'were', 'the', 'transcripts', 'printed', '?']","{'from': {'table_units': [['table_unit', 9]], 'conds': []}, 'select': [False, [[5, [0, [0, 53, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT avg(transcript_date) FROM Transcripts,"['SELECT', 'avg', '(', 'transcript_date', ')', 'FROM', 'Transcripts']","['select', 'avg', '(', 'transcript_date', ')', 'from', 'transcripts']",What is the average transcript date?,"['What', 'is', 'the', 'average', 'transcript', 'date', '?']","{'from': {'table_units': [['table_unit', 9]], 'conds': []}, 'select': [False, [[5, [0, [0, 53, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1","['SELECT', 'transcript_date', ',', 'other_details', 'FROM', 'Transcripts', 'ORDER', 'BY', 'transcript_date', 'ASC', 'LIMIT', '1']","['select', 'transcript_date', ',', 'other_details', 'from', 'transcripts', 'order', 'by', 'transcript_date', 'asc', 'limit', 'value']",When is the first transcript released? List the date and details.,"['When', 'is', 'the', 'first', 'transcript', 'released', '?', 'List', 'the', 'date', 'and', 'details', '.']","{'from': {'table_units': [['table_unit', 9]], 'conds': []}, 'select': [False, [[0, [0, [0, 53, False], None]], [0, [0, [0, 54, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 53, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1","['SELECT', 'transcript_date', ',', 'other_details', 'FROM', 'Transcripts', 'ORDER', 'BY', 'transcript_date', 'ASC', 'LIMIT', '1']","['select', 'transcript_date', ',', 'other_details', 'from', 'transcripts', 'order', 'by', 'transcript_date', 'asc', 'limit', 'value']","What is the earliest date of a transcript release, and what details can you tell me?","['What', 'is', 'the', 'earliest', 'date', 'of', 'a', 'transcript', 'release', ',', 'and', 'what', 'details', 'can', 'you', 'tell', 'me', '?']","{'from': {'table_units': [['table_unit', 9]], 'conds': []}, 'select': [False, [[0, [0, [0, 53, False], None]], [0, [0, [0, 54, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 53, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT count(*) FROM Transcripts,"['SELECT', 'count', '(', '*', ')', 'FROM', 'Transcripts']","['select', 'count', '(', '*', ')', 'from', 'transcripts']",How many transcripts are released?,"['How', 'many', 'transcripts', 'are', 'released', '?']","{'from': {'table_units': [['table_unit', 9]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT count(*) FROM Transcripts,"['SELECT', 'count', '(', '*', ')', 'FROM', 'Transcripts']","['select', 'count', '(', '*', ')', 'from', 'transcripts']",How many transcripts are listed?,"['How', 'many', 'transcripts', 'are', 'listed', '?']","{'from': {'table_units': [['table_unit', 9]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1,"['SELECT', 'transcript_date', 'FROM', 'Transcripts', 'ORDER', 'BY', 'transcript_date', 'DESC', 'LIMIT', '1']","['select', 'transcript_date', 'from', 'transcripts', 'order', 'by', 'transcript_date', 'desc', 'limit', 'value']",What is the last transcript release date?,"['What', 'is', 'the', 'last', 'transcript', 'release', 'date', '?']","{'from': {'table_units': [['table_unit', 9]], 'conds': []}, 'select': [False, [[0, [0, [0, 53, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 53, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1,"['SELECT', 'transcript_date', 'FROM', 'Transcripts', 'ORDER', 'BY', 'transcript_date', 'DESC', 'LIMIT', '1']","['select', 'transcript_date', 'from', 'transcripts', 'order', 'by', 'transcript_date', 'desc', 'limit', 'value']",When was the last transcript released?,"['When', 'was', 'the', 'last', 'transcript', 'released', '?']","{'from': {'table_units': [['table_unit', 9]], 'conds': []}, 'select': [False, [[0, [0, [0, 53, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 53, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'count', '(', '*', ')', ',', 'student_course_id', 'FROM', 'Transcript_Contents', 'GROUP', 'BY', 'student_course_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'count', '(', '*', ')', ',', 'student_course_id', 'from', 'transcript_contents', 'group', 'by', 'student_course_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.,"['How', 'many', 'times', 'at', 'most', 'can', 'a', 'course', 'enrollment', 'result', 'show', 'in', 'different', 'transcripts', '?', 'Also', 'show', 'the', 'course', 'enrollment', 'id', '.']","{'from': {'table_units': [['table_unit', 10]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 55, False], None]]]], 'where': [], 'groupBy': [[0, 55, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'count', '(', '*', ')', ',', 'student_course_id', 'FROM', 'Transcript_Contents', 'GROUP', 'BY', 'student_course_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'count', '(', '*', ')', ',', 'student_course_id', 'from', 'transcript_contents', 'group', 'by', 'student_course_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?,"['What', 'is', 'the', 'maximum', 'number', 'of', 'times', 'that', 'a', 'course', 'shows', 'up', 'in', 'different', 'transcripts', 'and', 'what', 'is', 'that', 'course', ""'s"", 'enrollment', 'id', '?']","{'from': {'table_units': [['table_unit', 10]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 55, False], None]]]], 'where': [], 'groupBy': [[0, 55, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1","['SELECT', 'T2.transcript_date', ',', 'T1.transcript_id', 'FROM', 'Transcript_Contents', 'AS', 'T1', 'JOIN', 'Transcripts', 'AS', 'T2', 'ON', 'T1.transcript_id', '=', 'T2.transcript_id', 'GROUP', 'BY', 'T1.transcript_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'ASC', 'LIMIT', '1']","['select', 't2', '.', 'transcript_date', ',', 't1', '.', 'transcript_id', 'from', 'transcript_contents', 'as', 't1', 'join', 'transcripts', 'as', 't2', 'on', 't1', '.', 'transcript_id', '=', 't2', '.', 'transcript_id', 'group', 'by', 't1', '.', 'transcript_id', 'order', 'by', 'count', '(', '*', ')', 'asc', 'limit', 'value']","Show the date of the transcript which shows the least number of results, also list the id.","['Show', 'the', 'date', 'of', 'the', 'transcript', 'which', 'shows', 'the', 'least', 'number', 'of', 'results', ',', 'also', 'list', 'the', 'id', '.']","{'from': {'table_units': [['table_unit', 10], ['table_unit', 9]], 'conds': [[False, 2, [0, [0, 56, False], None], [0, 52, False], None]]}, 'select': [False, [[0, [0, [0, 53, False], None]], [0, [0, [0, 56, False], None]]]], 'where': [], 'groupBy': [[0, 56, False]], 'having': [], 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1","['SELECT', 'T2.transcript_date', ',', 'T1.transcript_id', 'FROM', 'Transcript_Contents', 'AS', 'T1', 'JOIN', 'Transcripts', 'AS', 'T2', 'ON', 'T1.transcript_id', '=', 'T2.transcript_id', 'GROUP', 'BY', 'T1.transcript_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'ASC', 'LIMIT', '1']","['select', 't2', '.', 'transcript_date', ',', 't1', '.', 'transcript_id', 'from', 'transcript_contents', 'as', 't1', 'join', 'transcripts', 'as', 't2', 'on', 't1', '.', 'transcript_id', '=', 't2', '.', 'transcript_id', 'group', 'by', 't1', '.', 'transcript_id', 'order', 'by', 'count', '(', '*', ')', 'asc', 'limit', 'value']",What is the date and id of the transcript with the least number of results?,"['What', 'is', 'the', 'date', 'and', 'id', 'of', 'the', 'transcript', 'with', 'the', 'least', 'number', 'of', 'results', '?']","{'from': {'table_units': [['table_unit', 10], ['table_unit', 9]], 'conds': [[False, 2, [0, [0, 56, False], None], [0, 52, False], None]]}, 'select': [False, [[0, [0, [0, 53, False], None]], [0, [0, [0, 56, False], None]]]], 'where': [], 'groupBy': [[0, 56, False]], 'having': [], 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor',"['SELECT', 'DISTINCT', 'T2.semester_id', 'FROM', 'Degree_Programs', 'AS', 'T1', 'JOIN', 'Student_Enrolment', 'AS', 'T2', 'ON', 'T1.degree_program_id', '=', 'T2.degree_program_id', 'WHERE', 'degree_summary_name', '=', ""'Master"", ""'"", 'INTERSECT', 'SELECT', 'DISTINCT', 'T2.semester_id', 'FROM', 'Degree_Programs', 'AS', 'T1', 'JOIN', 'Student_Enrolment', 'AS', 'T2', 'ON', 'T1.degree_program_id', '=', 'T2.degree_program_id', 'WHERE', 'degree_summary_name', '=', ""'Bachelor"", ""'""]","['select', 'distinct', 't2', '.', 'semester_id', 'from', 'degree_programs', 'as', 't1', 'join', 'student_enrolment', 'as', 't2', 'on', 't1', '.', 'degree_program_id', '=', 't2', '.', 'degree_program_id', 'where', 'degree_summary_name', '=', 'value', 'intersect', 'select', 'distinct', 't2', '.', 'semester_id', 'from', 'degree_programs', 'as', 't1', 'join', 'student_enrolment', 'as', 't2', 'on', 't1', '.', 'degree_program_id', '=', 't2', '.', 'degree_program_id', 'where', 'degree_summary_name', '=', 'value']",Find the semester when both Master students and Bachelor students got enrolled in.,"['Find', 'the', 'semester', 'when', 'both', 'Master', 'students', 'and', 'Bachelor', 'students', 'got', 'enrolled', 'in', '.']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]]}, 'select': [True, [[0, [0, [0, 46, False], None]]]], 'where': [[False, 2, [0, [0, 20, False], None], '""Master""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 3], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]]}, 'select': [True, [[0, [0, [0, 46, False], None]]]], 'where': [[False, 2, [0, [0, 20, False], None], '""Bachelor""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor',"['SELECT', 'DISTINCT', 'T2.semester_id', 'FROM', 'Degree_Programs', 'AS', 'T1', 'JOIN', 'Student_Enrolment', 'AS', 'T2', 'ON', 'T1.degree_program_id', '=', 'T2.degree_program_id', 'WHERE', 'degree_summary_name', '=', ""'Master"", ""'"", 'INTERSECT', 'SELECT', 'DISTINCT', 'T2.semester_id', 'FROM', 'Degree_Programs', 'AS', 'T1', 'JOIN', 'Student_Enrolment', 'AS', 'T2', 'ON', 'T1.degree_program_id', '=', 'T2.degree_program_id', 'WHERE', 'degree_summary_name', '=', ""'Bachelor"", ""'""]","['select', 'distinct', 't2', '.', 'semester_id', 'from', 'degree_programs', 'as', 't1', 'join', 'student_enrolment', 'as', 't2', 'on', 't1', '.', 'degree_program_id', '=', 't2', '.', 'degree_program_id', 'where', 'degree_summary_name', '=', 'value', 'intersect', 'select', 'distinct', 't2', '.', 'semester_id', 'from', 'degree_programs', 'as', 't1', 'join', 'student_enrolment', 'as', 't2', 'on', 't1', '.', 'degree_program_id', '=', 't2', '.', 'degree_program_id', 'where', 'degree_summary_name', '=', 'value']",What is the id of the semester that had both Masters and Bachelors students enrolled?,"['What', 'is', 'the', 'id', 'of', 'the', 'semester', 'that', 'had', 'both', 'Masters', 'and', 'Bachelors', 'students', 'enrolled', '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]]}, 'select': [True, [[0, [0, [0, 46, False], None]]]], 'where': [[False, 2, [0, [0, 20, False], None], '""Master""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 3], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 18, False], None], [0, 45, False], None]]}, 'select': [True, [[0, [0, [0, 46, False], None]]]], 'where': [[False, 2, [0, [0, 20, False], None], '""Bachelor""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT count(DISTINCT current_address_id) FROM Students,"['SELECT', 'count', '(', 'DISTINCT', 'current_address_id', ')', 'FROM', 'Students']","['select', 'count', '(', 'distinct', 'current_address_id', ')', 'from', 'students']",How many different addresses do the students currently live?,"['How', 'many', 'different', 'addresses', 'do', 'the', 'students', 'currently', 'live', '?']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[3, [0, [0, 33, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT count(DISTINCT current_address_id) FROM Students,"['SELECT', 'count', '(', 'DISTINCT', 'current_address_id', ')', 'FROM', 'Students']","['select', 'count', '(', 'distinct', 'current_address_id', ')', 'from', 'students']",What are the different addresses that have students living there?,"['What', 'are', 'the', 'different', 'addresses', 'that', 'have', 'students', 'living', 'there', '?']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[3, [0, [0, 33, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT other_student_details FROM Students ORDER BY other_student_details DESC,"['SELECT', 'other_student_details', 'FROM', 'Students', 'ORDER', 'BY', 'other_student_details', 'DESC']","['select', 'other_student_details', 'from', 'students', 'order', 'by', 'other_student_details', 'desc']",List all the student details in reversed lexicographical order.,"['List', 'all', 'the', 'student', 'details', 'in', 'reversed', 'lexicographical', 'order', '.']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 43, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 43, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT other_student_details FROM Students ORDER BY other_student_details DESC,"['SELECT', 'other_student_details', 'FROM', 'Students', 'ORDER', 'BY', 'other_student_details', 'DESC']","['select', 'other_student_details', 'from', 'students', 'order', 'by', 'other_student_details', 'desc']",What other details can you tell me about students in reverse alphabetical order?,"['What', 'other', 'details', 'can', 'you', 'tell', 'me', 'about', 'students', 'in', 'reverse', 'alphabetical', 'order', '?']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 43, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 43, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT section_description FROM Sections WHERE section_name  =  'h',"['SELECT', 'section_description', 'FROM', 'Sections', 'WHERE', 'section_name', '=', ""'h"", ""'""]","['select', 'section_description', 'from', 'sections', 'where', 'section_name', '=', 'value']",Describe the section h.,"['Describe', 'the', 'section', 'h', '.']","{'from': {'table_units': [['table_unit', 4]], 'conds': []}, 'select': [False, [[0, [0, [0, 26, False], None]]]], 'where': [[False, 2, [0, [0, 25, False], None], '""h""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,SELECT section_description FROM Sections WHERE section_name  =  'h',"['SELECT', 'section_description', 'FROM', 'Sections', 'WHERE', 'section_name', '=', ""'h"", ""'""]","['select', 'section_description', 'from', 'sections', 'where', 'section_name', '=', 'value']",What is the description for the section named h?,"['What', 'is', 'the', 'description', 'for', 'the', 'section', 'named', 'h', '?']","{'from': {'table_units': [['table_unit', 4]], 'conds': []}, 'select': [False, [[0, [0, [0, 26, False], None]]]], 'where': [[False, 2, [0, [0, 25, False], None], '""h""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582',"['select', 't1.first_name', 'from', 'students', 'as', 't1', 'join', 'addresses', 'as', 't2', 'on', 't1.permanent_address_id', '=', 't2.address_id', 'where', 't2.country', '=', '""haiti""', 'or', 't1.cell_mobile_number', '=', '""09700166582""']","['select', 't1', '.', 'first_name', 'from', 'students', 'as', 't1', 'join', 'addresses', 'as', 't2', 'on', 't1', '.', 'permanent_address_id', '=', 't2', '.', 'address_id', 'where', 't2', '.', 'country', '=', 'value', 'or', 't1', '.', 'cell_mobile_number', '=', 'value']",Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .,"['Find', 'the', 'first', 'name', 'of', 'the', 'students', 'who', 'permanently', 'live', 'in', 'the', 'country', 'Haiti', 'or', 'have', 'the', 'cell', 'phone', 'number', '09700166582', '.']","{'from': {'table_units': [['table_unit', 6], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 34, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 35, False], None]]]], 'where': [[False, 2, [0, [0, 8, False], None], '""haiti""', None], 'or', [False, 2, [0, [0, 38, False], None], '""09700166582""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
student_transcripts_tracking,select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582',"['select', 't1.first_name', 'from', 'students', 'as', 't1', 'join', 'addresses', 'as', 't2', 'on', 't1.permanent_address_id', '=', 't2.address_id', 'where', 't2.country', '=', '""haiti""', 'or', 't1.cell_mobile_number', '=', '""09700166582""']","['select', 't1', '.', 'first_name', 'from', 'students', 'as', 't1', 'join', 'addresses', 'as', 't2', 'on', 't1', '.', 'permanent_address_id', '=', 't2', '.', 'address_id', 'where', 't2', '.', 'country', '=', 'value', 'or', 't1', '.', 'cell_mobile_number', '=', 'value']",What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?,"['What', 'are', 'the', 'first', 'names', 'of', 'the', 'students', 'who', 'live', 'in', 'Haiti', 'permanently', 'or', 'have', 'the', 'cell', 'phone', 'number', '09700166582', '?']","{'from': {'table_units': [['table_unit', 6], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 34, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 35, False], None]]]], 'where': [[False, 2, [0, [0, 8, False], None], '""haiti""', None], 'or', [False, 2, [0, [0, 38, False], None], '""09700166582""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,SELECT Title FROM Cartoon ORDER BY title,"['SELECT', 'Title', 'FROM', 'Cartoon', 'ORDER', 'BY', 'title']","['select', 'title', 'from', 'cartoon', 'order', 'by', 'title']",List the title of all cartoons in alphabetical order.,"['List', 'the', 'title', 'of', 'all', 'cartoons', 'in', 'alphabetical', 'order', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 20, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 20, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,SELECT Title FROM Cartoon ORDER BY title,"['SELECT', 'Title', 'FROM', 'Cartoon', 'ORDER', 'BY', 'title']","['select', 'title', 'from', 'cartoon', 'order', 'by', 'title']",What are the titles of the cartoons sorted alphabetically?,"['What', 'are', 'the', 'titles', 'of', 'the', 'cartoons', 'sorted', 'alphabetically', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 20, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 20, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"";","['SELECT', 'Title', 'FROM', 'Cartoon', 'WHERE', 'Directed_by', '=', '``', 'Ben', 'Jones', ""''"", ';']","['select', 'title', 'from', 'cartoon', 'where', 'directed_by', '=', 'value']","List all cartoon directed by ""Ben Jones"".","['List', 'all', 'cartoon', 'directed', 'by', '``', 'Ben', 'Jones', ""''"", '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 20, False], None]]]], 'where': [[False, 2, [0, [0, 21, False], None], '""Ben Jones""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"";","['SELECT', 'Title', 'FROM', 'Cartoon', 'WHERE', 'Directed_by', '=', '``', 'Ben', 'Jones', ""''"", ';']","['select', 'title', 'from', 'cartoon', 'where', 'directed_by', '=', 'value']",What are the names of all cartoons directed by Ben Jones?,"['What', 'are', 'the', 'names', 'of', 'all', 'cartoons', 'directed', 'by', 'Ben', 'Jones', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 20, False], None]]]], 'where': [[False, 2, [0, [0, 21, False], None], '""Ben Jones""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT count(*) FROM Cartoon WHERE Written_by = ""Joseph Kuhr"";","['SELECT', 'count', '(', '*', ')', 'FROM', 'Cartoon', 'WHERE', 'Written_by', '=', '``', 'Joseph', 'Kuhr', ""''"", ';']","['select', 'count', '(', '*', ')', 'from', 'cartoon', 'where', 'written_by', '=', 'value']","How many cartoons were written by ""Joseph Kuhr""?","['How', 'many', 'cartoons', 'were', 'written', 'by', '``', 'Joseph', 'Kuhr', ""''"", '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 22, False], None], '""Joseph Kuhr""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT count(*) FROM Cartoon WHERE Written_by = ""Joseph Kuhr"";","['SELECT', 'count', '(', '*', ')', 'FROM', 'Cartoon', 'WHERE', 'Written_by', '=', '``', 'Joseph', 'Kuhr', ""''"", ';']","['select', 'count', '(', '*', ')', 'from', 'cartoon', 'where', 'written_by', '=', 'value']",What is the number of cartoones written by Joseph Kuhr?,"['What', 'is', 'the', 'number', 'of', 'cartoones', 'written', 'by', 'Joseph', 'Kuhr', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 22, False], None], '""Joseph Kuhr""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date","['SELECT', 'title', ',', 'Directed_by', 'FROM', 'Cartoon', 'ORDER', 'BY', 'Original_air_date']","['select', 'title', ',', 'directed_by', 'from', 'cartoon', 'order', 'by', 'original_air_date']",list all cartoon titles and their directors ordered by their air date,"['list', 'all', 'cartoon', 'titles', 'and', 'their', 'directors', 'ordered', 'by', 'their', 'air', 'date']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 20, False], None]], [0, [0, [0, 21, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 23, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date","['SELECT', 'title', ',', 'Directed_by', 'FROM', 'Cartoon', 'ORDER', 'BY', 'Original_air_date']","['select', 'title', ',', 'directed_by', 'from', 'cartoon', 'order', 'by', 'original_air_date']",What is the name and directors of all the cartoons that are ordered by air date?,"['What', 'is', 'the', 'name', 'and', 'directors', 'of', 'all', 'the', 'cartoons', 'that', 'are', 'ordered', 'by', 'air', 'date', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 20, False], None]], [0, [0, [0, 21, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 23, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"" OR Directed_by = ""Brandon Vietti"";","['SELECT', 'Title', 'FROM', 'Cartoon', 'WHERE', 'Directed_by', '=', '``', 'Ben', 'Jones', ""''"", 'OR', 'Directed_by', '=', '``', 'Brandon', 'Vietti', ""''"", ';']","['select', 'title', 'from', 'cartoon', 'where', 'directed_by', '=', 'value', 'or', 'directed_by', '=', 'value']","List the title of all cartoon directed by ""Ben Jones"" or ""Brandon Vietti"".","['List', 'the', 'title', 'of', 'all', 'cartoon', 'directed', 'by', '``', 'Ben', 'Jones', ""''"", 'or', '``', 'Brandon', 'Vietti', ""''"", '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 20, False], None]]]], 'where': [[False, 2, [0, [0, 21, False], None], '""Ben Jones""', None], 'or', [False, 2, [0, [0, 21, False], None], '""Brandon Vietti""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"" OR Directed_by = ""Brandon Vietti"";","['SELECT', 'Title', 'FROM', 'Cartoon', 'WHERE', 'Directed_by', '=', '``', 'Ben', 'Jones', ""''"", 'OR', 'Directed_by', '=', '``', 'Brandon', 'Vietti', ""''"", ';']","['select', 'title', 'from', 'cartoon', 'where', 'directed_by', '=', 'value', 'or', 'directed_by', '=', 'value']",What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?,"['What', 'are', 'the', 'titles', 'of', 'all', 'cartoons', 'directed', 'by', 'Ben', 'Jones', 'or', 'Brandon', 'Vietti', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 20, False], None]]]], 'where': [[False, 2, [0, [0, 21, False], None], '""Ben Jones""', None], 'or', [False, 2, [0, [0, 21, False], None], '""Brandon Vietti""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;","['SELECT', 'Country', ',', 'count', '(', '*', ')', 'FROM', 'TV_Channel', 'GROUP', 'BY', 'Country', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1', ';']","['select', 'country', ',', 'count', '(', '*', ')', 'from', 'tv_channel', 'group', 'by', 'country', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which country has the most of TV Channels? List the country and number of TV Channels it has.,"['Which', 'country', 'has', 'the', 'most', 'of', 'TV', 'Channels', '?', 'List', 'the', 'country', 'and', 'number', 'of', 'TV', 'Channels', 'it', 'has', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 3, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;","['SELECT', 'Country', ',', 'count', '(', '*', ')', 'FROM', 'TV_Channel', 'GROUP', 'BY', 'Country', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1', ';']","['select', 'country', ',', 'count', '(', '*', ')', 'from', 'tv_channel', 'group', 'by', 'country', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the country with the most number of TV Channels and how many does it have?,"['What', 'is', 'the', 'country', 'with', 'the', 'most', 'number', 'of', 'TV', 'Channels', 'and', 'how', 'many', 'does', 'it', 'have', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 3, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;","['SELECT', 'count', '(', 'DISTINCT', 'series_name', ')', ',', 'count', '(', 'DISTINCT', 'content', ')', 'FROM', 'TV_Channel', ';']","['select', 'count', '(', 'distinct', 'series_name', ')', ',', 'count', '(', 'distinct', 'content', ')', 'from', 'tv_channel']",List the number of different series names and contents in the TV Channel table.,"['List', 'the', 'number', 'of', 'different', 'series', 'names', 'and', 'contents', 'in', 'the', 'TV', 'Channel', 'table', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 2, True], None]], [3, [0, [0, 5, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;","['SELECT', 'count', '(', 'DISTINCT', 'series_name', ')', ',', 'count', '(', 'DISTINCT', 'content', ')', 'FROM', 'TV_Channel', ';']","['select', 'count', '(', 'distinct', 'series_name', ')', ',', 'count', '(', 'distinct', 'content', ')', 'from', 'tv_channel']",How many different series and contents are listed in the TV Channel table?,"['How', 'many', 'different', 'series', 'and', 'contents', 'are', 'listed', 'in', 'the', 'TV', 'Channel', 'table', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 2, True], None]], [3, [0, [0, 5, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT Content FROM TV_Channel WHERE series_name = ""Sky Radio"";","['SELECT', 'Content', 'FROM', 'TV_Channel', 'WHERE', 'series_name', '=', '``', 'Sky', 'Radio', ""''"", ';']","['select', 'content', 'from', 'tv_channel', 'where', 'series_name', '=', 'value']","What is the content of TV Channel with serial name ""Sky Radio""?","['What', 'is', 'the', 'content', 'of', 'TV', 'Channel', 'with', 'serial', 'name', '``', 'Sky', 'Radio', ""''"", '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Sky Radio""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT Content FROM TV_Channel WHERE series_name = ""Sky Radio"";","['SELECT', 'Content', 'FROM', 'TV_Channel', 'WHERE', 'series_name', '=', '``', 'Sky', 'Radio', ""''"", ';']","['select', 'content', 'from', 'tv_channel', 'where', 'series_name', '=', 'value']",What is the content of the series Sky Radio?,"['What', 'is', 'the', 'content', 'of', 'the', 'series', 'Sky', 'Radio', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Sky Radio""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT Package_Option FROM TV_Channel WHERE series_name = ""Sky Radio"";","['SELECT', 'Package_Option', 'FROM', 'TV_Channel', 'WHERE', 'series_name', '=', '``', 'Sky', 'Radio', ""''"", ';']","['select', 'package_option', 'from', 'tv_channel', 'where', 'series_name', '=', 'value']","What is the Package Option of TV Channel with serial name ""Sky Radio""?","['What', 'is', 'the', 'Package', 'Option', 'of', 'TV', 'Channel', 'with', 'serial', 'name', '``', 'Sky', 'Radio', ""''"", '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Sky Radio""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT Package_Option FROM TV_Channel WHERE series_name = ""Sky Radio"";","['SELECT', 'Package_Option', 'FROM', 'TV_Channel', 'WHERE', 'series_name', '=', '``', 'Sky', 'Radio', ""''"", ';']","['select', 'package_option', 'from', 'tv_channel', 'where', 'series_name', '=', 'value']",What are the Package Options of the TV Channels whose series names are Sky Radio?,"['What', 'are', 'the', 'Package', 'Options', 'of', 'the', 'TV', 'Channels', 'whose', 'series', 'names', 'are', 'Sky', 'Radio', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Sky Radio""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = ""English"";","['SELECT', 'count', '(', '*', ')', 'FROM', 'TV_Channel', 'WHERE', 'LANGUAGE', '=', '``', 'English', ""''"", ';']","['select', 'count', '(', '*', ')', 'from', 'tv_channel', 'where', 'language', '=', 'value']",How many TV Channel using language English?,"['How', 'many', 'TV', 'Channel', 'using', 'language', 'English', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 4, False], None], '""English""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = ""English"";","['SELECT', 'count', '(', '*', ')', 'FROM', 'TV_Channel', 'WHERE', 'LANGUAGE', '=', '``', 'English', ""''"", ';']","['select', 'count', '(', '*', ')', 'from', 'tv_channel', 'where', 'language', '=', 'value']",How many TV Channels use the English language?,"['How', 'many', 'TV', 'Channels', 'use', 'the', 'English', 'language', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 4, False], None], '""English""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;","['SELECT', 'LANGUAGE', ',', 'count', '(', '*', ')', 'FROM', 'TV_Channel', 'GROUP', 'BY', 'LANGUAGE', 'ORDER', 'BY', 'count', '(', '*', ')', 'ASC', 'LIMIT', '1', ';']","['select', 'language', ',', 'count', '(', '*', ')', 'from', 'tv_channel', 'group', 'by', 'language', 'order', 'by', 'count', '(', '*', ')', 'asc', 'limit', 'value']",List the language used least number of TV Channel. List language and number of TV Channel.,"['List', 'the', 'language', 'used', 'least', 'number', 'of', 'TV', 'Channel', '.', 'List', 'language', 'and', 'number', 'of', 'TV', 'Channel', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 4, False]], 'having': [], 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;","['SELECT', 'LANGUAGE', ',', 'count', '(', '*', ')', 'FROM', 'TV_Channel', 'GROUP', 'BY', 'LANGUAGE', 'ORDER', 'BY', 'count', '(', '*', ')', 'ASC', 'LIMIT', '1', ';']","['select', 'language', ',', 'count', '(', '*', ')', 'from', 'tv_channel', 'group', 'by', 'language', 'order', 'by', 'count', '(', '*', ')', 'asc', 'limit', 'value']",What are the languages used by the least number of TV Channels and how many channels use it?,"['What', 'are', 'the', 'languages', 'used', 'by', 'the', 'least', 'number', 'of', 'TV', 'Channels', 'and', 'how', 'many', 'channels', 'use', 'it', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 4, False]], 'having': [], 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE","['SELECT', 'LANGUAGE', ',', 'count', '(', '*', ')', 'FROM', 'TV_Channel', 'GROUP', 'BY', 'LANGUAGE']","['select', 'language', ',', 'count', '(', '*', ')', 'from', 'tv_channel', 'group', 'by', 'language']",List each language and the number of TV Channels using it.,"['List', 'each', 'language', 'and', 'the', 'number', 'of', 'TV', 'Channels', 'using', 'it', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 4, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE","['SELECT', 'LANGUAGE', ',', 'count', '(', '*', ')', 'FROM', 'TV_Channel', 'GROUP', 'BY', 'LANGUAGE']","['select', 'language', ',', 'count', '(', '*', ')', 'from', 'tv_channel', 'group', 'by', 'language']","For each language, list the number of TV Channels that use it.","['For', 'each', 'language', ',', 'list', 'the', 'number', 'of', 'TV', 'Channels', 'that', 'use', 'it', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 4, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = ""The Rise of the Blue Beetle!"";","['SELECT', 'T1.series_name', 'FROM', 'TV_Channel', 'AS', 'T1', 'JOIN', 'Cartoon', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.Channel', 'WHERE', 'T2.Title', '=', '``', 'The', 'Rise', 'of', 'the', 'Blue', 'Beetle', '!', '``', ';']","['select', 't1', '.', 'series_name', 'from', 'tv_channel', 'as', 't1', 'join', 'cartoon', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'channel', 'where', 't2', '.', 'title', '=', 'value']","What is the TV Channel that shows the cartoon ""The Rise of the Blue Beetle!""? List the TV Channel's series name.","['What', 'is', 'the', 'TV', 'Channel', 'that', 'shows', 'the', 'cartoon', '``', 'The', 'Rise', 'of', 'the', 'Blue', 'Beetle', '!', ""''"", '?', 'List', 'the', 'TV', 'Channel', ""'s"", 'series', 'name', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 20, False], None], '""The Rise of the Blue Beetle!""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = ""The Rise of the Blue Beetle!"";","['SELECT', 'T1.series_name', 'FROM', 'TV_Channel', 'AS', 'T1', 'JOIN', 'Cartoon', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.Channel', 'WHERE', 'T2.Title', '=', '``', 'The', 'Rise', 'of', 'the', 'Blue', 'Beetle', '!', '``', ';']","['select', 't1', '.', 'series_name', 'from', 'tv_channel', 'as', 't1', 'join', 'cartoon', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'channel', 'where', 't2', '.', 'title', '=', 'value']","What is the series name of the TV Channel that shows the cartoon ""The Rise of the Blue Beetle""?","['What', 'is', 'the', 'series', 'name', 'of', 'the', 'TV', 'Channel', 'that', 'shows', 'the', 'cartoon', '``', 'The', 'Rise', 'of', 'the', 'Blue', 'Beetle', ""''"", '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 20, False], None], '""The Rise of the Blue Beetle!""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio"";","['SELECT', 'T2.Title', 'FROM', 'TV_Channel', 'AS', 'T1', 'JOIN', 'Cartoon', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.Channel', 'WHERE', 'T1.series_name', '=', '``', 'Sky', 'Radio', ""''"", ';']","['select', 't2', '.', 'title', 'from', 'tv_channel', 'as', 't1', 'join', 'cartoon', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'channel', 'where', 't1', '.', 'series_name', '=', 'value']","List the title of all  Cartoons showed on TV Channel with series name ""Sky Radio"".","['List', 'the', 'title', 'of', 'all', 'Cartoons', 'showed', 'on', 'TV', 'Channel', 'with', 'series', 'name', '``', 'Sky', 'Radio', ""''"", '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]]}, 'select': [False, [[0, [0, [0, 20, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Sky Radio""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio"";","['SELECT', 'T2.Title', 'FROM', 'TV_Channel', 'AS', 'T1', 'JOIN', 'Cartoon', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.Channel', 'WHERE', 'T1.series_name', '=', '``', 'Sky', 'Radio', ""''"", ';']","['select', 't2', '.', 'title', 'from', 'tv_channel', 'as', 't1', 'join', 'cartoon', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'channel', 'where', 't1', '.', 'series_name', '=', 'value']","What is the title of all the cartools that are on the TV Channel with the series name ""Sky Radio""?","['What', 'is', 'the', 'title', 'of', 'all', 'the', 'cartools', 'that', 'are', 'on', 'the', 'TV', 'Channel', 'with', 'the', 'series', 'name', '``', 'Sky', 'Radio', ""''"", '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]]}, 'select': [False, [[0, [0, [0, 20, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Sky Radio""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,SELECT Episode FROM TV_series ORDER BY rating,"['SELECT', 'Episode', 'FROM', 'TV_series', 'ORDER', 'BY', 'rating']","['select', 'episode', 'from', 'tv_series', 'order', 'by', 'rating']",List the Episode of all TV series sorted by rating.,"['List', 'the', 'Episode', 'of', 'all', 'TV', 'series', 'sorted', 'by', 'rating', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,SELECT Episode FROM TV_series ORDER BY rating,"['SELECT', 'Episode', 'FROM', 'TV_series', 'ORDER', 'BY', 'rating']","['select', 'episode', 'from', 'tv_series', 'order', 'by', 'rating']",What are all of the episodes ordered by ratings?,"['What', 'are', 'all', 'of', 'the', 'episodes', 'ordered', 'by', 'ratings', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 13, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;","['SELECT', 'Episode', ',', 'Rating', 'FROM', 'TV_series', 'ORDER', 'BY', 'Rating', 'DESC', 'LIMIT', '3', ';']","['select', 'episode', ',', 'rating', 'from', 'tv_series', 'order', 'by', 'rating', 'desc', 'limit', 'value']",List top 3 highest Rating  TV series. List the TV series's Episode and Rating.,"['List', 'top', '3', 'highest', 'Rating', 'TV', 'series', '.', 'List', 'the', 'TV', 'series', ""'s"", 'Episode', 'and', 'Rating', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 13, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 13, False], None]]], 'limit': 3, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;","['SELECT', 'Episode', ',', 'Rating', 'FROM', 'TV_series', 'ORDER', 'BY', 'Rating', 'DESC', 'LIMIT', '3', ';']","['select', 'episode', ',', 'rating', 'from', 'tv_series', 'order', 'by', 'rating', 'desc', 'limit', 'value']",What are 3 most highly rated episodes in the TV series table and what were those ratings?,"['What', 'are', '3', 'most', 'highly', 'rated', 'episodes', 'in', 'the', 'TV', 'series', 'table', 'and', 'what', 'were', 'those', 'ratings', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 13, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 13, False], None]]], 'limit': 3, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT max(SHARE) , min(SHARE) FROM TV_series;","['SELECT', 'max', '(', 'SHARE', ')', ',', 'min', '(', 'SHARE', ')', 'FROM', 'TV_series', ';']","['select', 'max', '(', 'share', ')', ',', 'min', '(', 'share', ')', 'from', 'tv_series']",What is minimum and maximum share of TV series?,"['What', 'is', 'minimum', 'and', 'maximum', 'share', 'of', 'TV', 'series', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[1, [0, [0, 14, False], None]], [2, [0, [0, 14, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT max(SHARE) , min(SHARE) FROM TV_series;","['SELECT', 'max', '(', 'SHARE', ')', ',', 'min', '(', 'SHARE', ')', 'FROM', 'TV_series', ';']","['select', 'max', '(', 'share', ')', ',', 'min', '(', 'share', ')', 'from', 'tv_series']",What is the maximum and minimum share for the TV series?,"['What', 'is', 'the', 'maximum', 'and', 'minimum', 'share', 'for', 'the', 'TV', 'series', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[1, [0, [0, 14, False], None]], [2, [0, [0, 14, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT Air_Date FROM TV_series WHERE Episode = ""A Love of a Lifetime"";","['SELECT', 'Air_Date', 'FROM', 'TV_series', 'WHERE', 'Episode', '=', '``', 'A', 'Love', 'of', 'a', 'Lifetime', ""''"", ';']","['select', 'air_date', 'from', 'tv_series', 'where', 'episode', '=', 'value']","What is the air date of TV series with Episode ""A Love of a Lifetime""?","['What', 'is', 'the', 'air', 'date', 'of', 'TV', 'series', 'with', 'Episode', '``', 'A', 'Love', 'of', 'a', 'Lifetime', ""''"", '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 12, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""A Love of a Lifetime""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT Air_Date FROM TV_series WHERE Episode = ""A Love of a Lifetime"";","['SELECT', 'Air_Date', 'FROM', 'TV_series', 'WHERE', 'Episode', '=', '``', 'A', 'Love', 'of', 'a', 'Lifetime', ""''"", ';']","['select', 'air_date', 'from', 'tv_series', 'where', 'episode', '=', 'value']","When did the episode ""A Love of a Lifetime"" air?","['When', 'did', 'the', 'episode', '``', 'A', 'Love', 'of', 'a', 'Lifetime', ""''"", 'air', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 12, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""A Love of a Lifetime""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT Weekly_Rank FROM TV_series WHERE Episode = ""A Love of a Lifetime"";","['SELECT', 'Weekly_Rank', 'FROM', 'TV_series', 'WHERE', 'Episode', '=', '``', 'A', 'Love', 'of', 'a', 'Lifetime', ""''"", ';']","['select', 'weekly_rank', 'from', 'tv_series', 'where', 'episode', '=', 'value']","What is Weekly Rank of TV series with Episode ""A Love of a Lifetime""?","['What', 'is', 'Weekly', 'Rank', 'of', 'TV', 'series', 'with', 'Episode', '``', 'A', 'Love', 'of', 'a', 'Lifetime', ""''"", '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 17, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""A Love of a Lifetime""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT Weekly_Rank FROM TV_series WHERE Episode = ""A Love of a Lifetime"";","['SELECT', 'Weekly_Rank', 'FROM', 'TV_series', 'WHERE', 'Episode', '=', '``', 'A', 'Love', 'of', 'a', 'Lifetime', ""''"", ';']","['select', 'weekly_rank', 'from', 'tv_series', 'where', 'episode', '=', 'value']","What is the weekly rank for the episode ""A Love of a Lifetime""?","['What', 'is', 'the', 'weekly', 'rank', 'for', 'the', 'episode', '``', 'A', 'Love', 'of', 'a', 'Lifetime', ""''"", '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 17, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""A Love of a Lifetime""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = ""A Love of a Lifetime"";","['SELECT', 'T1.series_name', 'FROM', 'TV_Channel', 'AS', 'T1', 'JOIN', 'TV_series', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.Channel', 'WHERE', 'T2.Episode', '=', '``', 'A', 'Love', 'of', 'a', 'Lifetime', ""''"", ';']","['select', 't1', '.', 'series_name', 'from', 'tv_channel', 'as', 't1', 'join', 'tv_series', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'channel', 'where', 't2', '.', 'episode', '=', 'value']","What is the TV Channel of TV series with Episode ""A Love of a Lifetime""? List the TV Channel's series name.","['What', 'is', 'the', 'TV', 'Channel', 'of', 'TV', 'series', 'with', 'Episode', '``', 'A', 'Love', 'of', 'a', 'Lifetime', ""''"", '?', 'List', 'the', 'TV', 'Channel', ""'s"", 'series', 'name', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 18, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""A Love of a Lifetime""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = ""A Love of a Lifetime"";","['SELECT', 'T1.series_name', 'FROM', 'TV_Channel', 'AS', 'T1', 'JOIN', 'TV_series', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.Channel', 'WHERE', 'T2.Episode', '=', '``', 'A', 'Love', 'of', 'a', 'Lifetime', ""''"", ';']","['select', 't1', '.', 'series_name', 'from', 'tv_channel', 'as', 't1', 'join', 'tv_series', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'channel', 'where', 't2', '.', 'episode', '=', 'value']","What is the name of the series that has the episode ""A Love of a Lifetime""?","['What', 'is', 'the', 'name', 'of', 'the', 'series', 'that', 'has', 'the', 'episode', '``', 'A', 'Love', 'of', 'a', 'Lifetime', ""''"", '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 18, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""A Love of a Lifetime""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio"";","['SELECT', 'T2.Episode', 'FROM', 'TV_Channel', 'AS', 'T1', 'JOIN', 'TV_series', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.Channel', 'WHERE', 'T1.series_name', '=', '``', 'Sky', 'Radio', ""''"", ';']","['select', 't2', '.', 'episode', 'from', 'tv_channel', 'as', 't1', 'join', 'tv_series', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'channel', 'where', 't1', '.', 'series_name', '=', 'value']","List the Episode of all  TV series showed on TV Channel with series name ""Sky Radio"".","['List', 'the', 'Episode', 'of', 'all', 'TV', 'series', 'showed', 'on', 'TV', 'Channel', 'with', 'series', 'name', '``', 'Sky', 'Radio', ""''"", '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 18, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Sky Radio""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio"";","['SELECT', 'T2.Episode', 'FROM', 'TV_Channel', 'AS', 'T1', 'JOIN', 'TV_series', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.Channel', 'WHERE', 'T1.series_name', '=', '``', 'Sky', 'Radio', ""''"", ';']","['select', 't2', '.', 'episode', 'from', 'tv_channel', 'as', 't1', 'join', 'tv_series', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'channel', 'where', 't1', '.', 'series_name', '=', 'value']","What is the episode for the TV series named ""Sky Radio""?","['What', 'is', 'the', 'episode', 'for', 'the', 'TV', 'series', 'named', '``', 'Sky', 'Radio', ""''"", '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 18, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Sky Radio""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by","['SELECT', 'count', '(', '*', ')', ',', 'Directed_by', 'FROM', 'cartoon', 'GROUP', 'BY', 'Directed_by']","['select', 'count', '(', '*', ')', ',', 'directed_by', 'from', 'cartoon', 'group', 'by', 'directed_by']",Find the number of cartoons directed by each of the listed directors.,"['Find', 'the', 'number', 'of', 'cartoons', 'directed', 'by', 'each', 'of', 'the', 'listed', 'directors', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 21, False], None]]]], 'where': [], 'groupBy': [[0, 21, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by","['SELECT', 'count', '(', '*', ')', ',', 'Directed_by', 'FROM', 'cartoon', 'GROUP', 'BY', 'Directed_by']","['select', 'count', '(', '*', ')', ',', 'directed_by', 'from', 'cartoon', 'group', 'by', 'directed_by']",How many cartoons did each director create?,"['How', 'many', 'cartoons', 'did', 'each', 'director', 'create', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 21, False], None]]]], 'where': [], 'groupBy': [[0, 21, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"select production_code ,  channel from cartoon order by original_air_date desc limit 1","['select', 'production_code', ',', 'channel', 'from', 'cartoon', 'order', 'by', 'original_air_date', 'desc', 'limit', '1']","['select', 'production_code', ',', 'channel', 'from', 'cartoon', 'order', 'by', 'original_air_date', 'desc', 'limit', 'value']",Find the production code and channel of the most recently aired cartoon .,"['Find', 'the', 'production', 'code', 'and', 'channel', 'of', 'the', 'most', 'recently', 'aired', 'cartoon', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 24, False], None]], [0, [0, [0, 25, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 23, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
tvshow,"select production_code ,  channel from cartoon order by original_air_date desc limit 1","['select', 'production_code', ',', 'channel', 'from', 'cartoon', 'order', 'by', 'original_air_date', 'desc', 'limit', '1']","['select', 'production_code', ',', 'channel', 'from', 'cartoon', 'order', 'by', 'original_air_date', 'desc', 'limit', 'value']",What is the produdction code and channel of the most recent cartoon ?,"['What', 'is', 'the', 'produdction', 'code', 'and', 'channel', 'of', 'the', 'most', 'recent', 'cartoon', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 24, False], None]], [0, [0, [0, 25, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 23, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  ""yes""","['SELECT', 'package_option', ',', 'series_name', 'FROM', 'TV_Channel', 'WHERE', 'hight_definition_TV', '=', '``', 'yes', ""''""]","['select', 'package_option', ',', 'series_name', 'from', 'tv_channel', 'where', 'hight_definition_tv', '=', 'value']",Find the package choice and series name of the TV channel that has high definition TV.,"['Find', 'the', 'package', 'choice', 'and', 'series', 'name', 'of', 'the', 'TV', 'channel', 'that', 'has', 'high', 'definition', 'TV', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 7, False], None], '""yes""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  ""yes""","['SELECT', 'package_option', ',', 'series_name', 'FROM', 'TV_Channel', 'WHERE', 'hight_definition_TV', '=', '``', 'yes', ""''""]","['select', 'package_option', ',', 'series_name', 'from', 'tv_channel', 'where', 'hight_definition_tv', '=', 'value']",What are the package options and the name of the series for the TV Channel that supports high definition TV?,"['What', 'are', 'the', 'package', 'options', 'and', 'the', 'name', 'of', 'the', 'series', 'for', 'the', 'TV', 'Channel', 'that', 'supports', 'high', 'definition', 'TV', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 7, False], None], '""yes""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',"['SELECT', 'T1.country', 'FROM', 'TV_Channel', 'AS', 'T1', 'JOIN', 'cartoon', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.Channel', 'WHERE', 'T2.written_by', '=', ""'Todd"", 'Casey', ""'""]","['select', 't1', '.', 'country', 'from', 'tv_channel', 'as', 't1', 'join', 'cartoon', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'channel', 'where', 't2', '.', 'written_by', '=', 'value']",which countries' tv channels are playing some cartoon written by Todd Casey?,"['which', 'countries', ""'"", 'tv', 'channels', 'are', 'playing', 'some', 'cartoon', 'written', 'by', 'Todd', 'Casey', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 22, False], None], '""Todd Casey""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',"['SELECT', 'T1.country', 'FROM', 'TV_Channel', 'AS', 'T1', 'JOIN', 'cartoon', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.Channel', 'WHERE', 'T2.written_by', '=', ""'Todd"", 'Casey', ""'""]","['select', 't1', '.', 'country', 'from', 'tv_channel', 'as', 't1', 'join', 'cartoon', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'channel', 'where', 't2', '.', 'written_by', '=', 'value']",What are the countries that have cartoons on TV that were written by Todd Casey?,"['What', 'are', 'the', 'countries', 'that', 'have', 'cartoons', 'on', 'TV', 'that', 'were', 'written', 'by', 'Todd', 'Casey', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 22, False], None], '""Todd Casey""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',"['SELECT', 'country', 'FROM', 'TV_Channel', 'EXCEPT', 'SELECT', 'T1.country', 'FROM', 'TV_Channel', 'AS', 'T1', 'JOIN', 'cartoon', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.Channel', 'WHERE', 'T2.written_by', '=', ""'Todd"", 'Casey', ""'""]","['select', 'country', 'from', 'tv_channel', 'except', 'select', 't1', '.', 'country', 'from', 'tv_channel', 'as', 't1', 'join', 'cartoon', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'channel', 'where', 't2', '.', 'written_by', '=', 'value']",which countries' tv channels are not playing any cartoon written by Todd Casey?,"['which', 'countries', ""'"", 'tv', 'channels', 'are', 'not', 'playing', 'any', 'cartoon', 'written', 'by', 'Todd', 'Casey', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 22, False], None], '""Todd Casey""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
tvshow,SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',"['SELECT', 'country', 'FROM', 'TV_Channel', 'EXCEPT', 'SELECT', 'T1.country', 'FROM', 'TV_Channel', 'AS', 'T1', 'JOIN', 'cartoon', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.Channel', 'WHERE', 'T2.written_by', '=', ""'Todd"", 'Casey', ""'""]","['select', 'country', 'from', 'tv_channel', 'except', 'select', 't1', '.', 'country', 'from', 'tv_channel', 'as', 't1', 'join', 'cartoon', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'channel', 'where', 't2', '.', 'written_by', '=', 'value']",What are the countries that are not playing cartoons written by Todd Casey?,"['What', 'are', 'the', 'countries', 'that', 'are', 'not', 'playing', 'cartoons', 'written', 'by', 'Todd', 'Casey', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 22, False], None], '""Todd Casey""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
tvshow,"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'","['SELECT', 'T1.series_name', ',', 'T1.country', 'FROM', 'TV_Channel', 'AS', 'T1', 'JOIN', 'cartoon', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.Channel', 'WHERE', 'T2.directed_by', '=', ""'Michael"", 'Chang', ""'"", 'INTERSECT', 'SELECT', 'T1.series_name', ',', 'T1.country', 'FROM', 'TV_Channel', 'AS', 'T1', 'JOIN', 'cartoon', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.Channel', 'WHERE', 'T2.directed_by', '=', ""'Ben"", 'Jones', ""'""]","['select', 't1', '.', 'series_name', ',', 't1', '.', 'country', 'from', 'tv_channel', 'as', 't1', 'join', 'cartoon', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'channel', 'where', 't2', '.', 'directed_by', '=', 'value', 'intersect', 'select', 't1', '.', 'series_name', ',', 't1', '.', 'country', 'from', 'tv_channel', 'as', 't1', 'join', 'cartoon', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'channel', 'where', 't2', '.', 'directed_by', '=', 'value']",Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?,"['Find', 'the', 'series', 'name', 'and', 'country', 'of', 'the', 'tv', 'channel', 'that', 'is', 'playing', 'some', 'cartoons', 'directed', 'by', 'Ben', 'Jones', 'and', 'Michael', 'Chang', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 21, False], None], '""Michael Chang""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 21, False], None], '""Ben Jones""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
tvshow,"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'","['SELECT', 'T1.series_name', ',', 'T1.country', 'FROM', 'TV_Channel', 'AS', 'T1', 'JOIN', 'cartoon', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.Channel', 'WHERE', 'T2.directed_by', '=', ""'Michael"", 'Chang', ""'"", 'INTERSECT', 'SELECT', 'T1.series_name', ',', 'T1.country', 'FROM', 'TV_Channel', 'AS', 'T1', 'JOIN', 'cartoon', 'AS', 'T2', 'ON', 'T1.id', '=', 'T2.Channel', 'WHERE', 'T2.directed_by', '=', ""'Ben"", 'Jones', ""'""]","['select', 't1', '.', 'series_name', ',', 't1', '.', 'country', 'from', 'tv_channel', 'as', 't1', 'join', 'cartoon', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'channel', 'where', 't2', '.', 'directed_by', '=', 'value', 'intersect', 'select', 't1', '.', 'series_name', ',', 't1', '.', 'country', 'from', 'tv_channel', 'as', 't1', 'join', 'cartoon', 'as', 't2', 'on', 't1', '.', 'id', '=', 't2', '.', 'channel', 'where', 't2', '.', 'directed_by', '=', 'value']",What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?,"['What', 'is', 'the', 'series', 'name', 'and', 'country', 'of', 'all', 'TV', 'channels', 'that', 'are', 'playing', 'cartoons', 'directed', 'by', 'Ben', 'Jones', 'and', 'cartoons', 'directed', 'by', 'Michael', 'Chang', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 21, False], None], '""Michael Chang""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 25, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 21, False], None], '""Ben Jones""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
tvshow,"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'","['SELECT', 'Pixel_aspect_ratio_PAR', ',', 'country', 'FROM', 'tv_channel', 'WHERE', 'LANGUAGE', '!', '=', ""'English"", ""'""]","['select', 'pixel_aspect_ratio_par', ',', 'country', 'from', 'tv_channel', 'where', 'language', '!', '=', 'value']",find the pixel aspect ratio and nation of the tv channels that do not use English.,"['find', 'the', 'pixel', 'aspect', 'ratio', 'and', 'nation', 'of', 'the', 'tv', 'channels', 'that', 'do', 'not', 'use', 'English', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [[False, 7, [0, [0, 4, False], None], '""English""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'","['SELECT', 'Pixel_aspect_ratio_PAR', ',', 'country', 'FROM', 'tv_channel', 'WHERE', 'LANGUAGE', '!', '=', ""'English"", ""'""]","['select', 'pixel_aspect_ratio_par', ',', 'country', 'from', 'tv_channel', 'where', 'language', '!', '=', 'value']",What is the pixel aspect ratio and country of origin for all TV channels that do not use English?,"['What', 'is', 'the', 'pixel', 'aspect', 'ratio', 'and', 'country', 'of', 'origin', 'for', 'all', 'TV', 'channels', 'that', 'do', 'not', 'use', 'English', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [[False, 7, [0, [0, 4, False], None], '""English""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2,"['SELECT', 'id', 'FROM', 'tv_channel', 'GROUP', 'BY', 'country', 'HAVING', 'count', '(', '*', ')', '>', '2']","['select', 'id', 'from', 'tv_channel', 'group', 'by', 'country', 'having', 'count', '(', '*', ')', '>', 'value']",find id of the tv channels that from the countries where have more than two tv channels.,"['find', 'id', 'of', 'the', 'tv', 'channels', 'that', 'from', 'the', 'countries', 'where', 'have', 'more', 'than', 'two', 'tv', 'channels', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [], 'groupBy': [[0, 3, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2,"['SELECT', 'id', 'FROM', 'tv_channel', 'GROUP', 'BY', 'country', 'HAVING', 'count', '(', '*', ')', '>', '2']","['select', 'id', 'from', 'tv_channel', 'group', 'by', 'country', 'having', 'count', '(', '*', ')', '>', 'value']",What are the ids of all tv channels that have more than 2 TV channels?,"['What', 'are', 'the', 'ids', 'of', 'all', 'tv', 'channels', 'that', 'have', 'more', 'than', '2', 'TV', 'channels', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [], 'groupBy': [[0, 3, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones',"['SELECT', 'id', 'FROM', 'TV_Channel', 'EXCEPT', 'SELECT', 'channel', 'FROM', 'cartoon', 'WHERE', 'directed_by', '=', ""'Ben"", 'Jones', ""'""]","['select', 'id', 'from', 'tv_channel', 'except', 'select', 'channel', 'from', 'cartoon', 'where', 'directed_by', '=', 'value']",find the id of tv channels that do not play any cartoon directed by Ben Jones.,"['find', 'the', 'id', 'of', 'tv', 'channels', 'that', 'do', 'not', 'play', 'any', 'cartoon', 'directed', 'by', 'Ben', 'Jones', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 25, False], None]]]], 'where': [[False, 2, [0, [0, 21, False], None], '""Ben Jones""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
tvshow,SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones',"['SELECT', 'id', 'FROM', 'TV_Channel', 'EXCEPT', 'SELECT', 'channel', 'FROM', 'cartoon', 'WHERE', 'directed_by', '=', ""'Ben"", 'Jones', ""'""]","['select', 'id', 'from', 'tv_channel', 'except', 'select', 'channel', 'from', 'cartoon', 'where', 'directed_by', '=', 'value']",What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?,"['What', 'are', 'the', 'ids', 'of', 'the', 'TV', 'channels', 'that', 'do', 'not', 'have', 'any', 'cartoons', 'directed', 'by', 'Ben', 'Jones', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 25, False], None]]]], 'where': [[False, 2, [0, [0, 21, False], None], '""Ben Jones""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
tvshow,SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'),"['SELECT', 'package_option', 'FROM', 'TV_Channel', 'WHERE', 'id', 'NOT', 'IN', '(', 'SELECT', 'channel', 'FROM', 'cartoon', 'WHERE', 'directed_by', '=', ""'Ben"", 'Jones', ""'"", ')']","['select', 'package_option', 'from', 'tv_channel', 'where', 'id', 'not', 'in', '(', 'select', 'channel', 'from', 'cartoon', 'where', 'directed_by', '=', 'value', ')']",find the package option of the tv channel that do not have any cartoon directed by Ben Jones.,"['find', 'the', 'package', 'option', 'of', 'the', 'tv', 'channel', 'that', 'do', 'not', 'have', 'any', 'cartoon', 'directed', 'by', 'Ben', 'Jones', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[True, 8, [0, [0, 1, False], None], {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 25, False], None]]]], 'where': [[False, 2, [0, [0, 21, False], None], '""Ben Jones""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
tvshow,SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'),"['SELECT', 'package_option', 'FROM', 'TV_Channel', 'WHERE', 'id', 'NOT', 'IN', '(', 'SELECT', 'channel', 'FROM', 'cartoon', 'WHERE', 'directed_by', '=', ""'Ben"", 'Jones', ""'"", ')']","['select', 'package_option', 'from', 'tv_channel', 'where', 'id', 'not', 'in', '(', 'select', 'channel', 'from', 'cartoon', 'where', 'directed_by', '=', 'value', ')']",What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?,"['What', 'are', 'the', 'package', 'options', 'of', 'all', 'tv', 'channels', 'that', 'are', 'not', 'playing', 'any', 'cartoons', 'directed', 'by', 'Ben', 'Jones', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[True, 8, [0, [0, 1, False], None], {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 25, False], None]]]], 'where': [[False, 2, [0, [0, 21, False], None], '""Ben Jones""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT count(*) FROM poker_player,"['SELECT', 'count', '(', '*', ')', 'FROM', 'poker_player']","['select', 'count', '(', '*', ')', 'from', 'poker_player']",How many poker players are there?,"['How', 'many', 'poker', 'players', 'are', 'there', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT count(*) FROM poker_player,"['SELECT', 'count', '(', '*', ')', 'FROM', 'poker_player']","['select', 'count', '(', '*', ')', 'from', 'poker_player']",Count the number of poker players.,"['Count', 'the', 'number', 'of', 'poker', 'players', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT Earnings FROM poker_player ORDER BY Earnings DESC,"['SELECT', 'Earnings', 'FROM', 'poker_player', 'ORDER', 'BY', 'Earnings', 'DESC']","['select', 'earnings', 'from', 'poker_player', 'order', 'by', 'earnings', 'desc']",List the earnings of poker players in descending order.,"['List', 'the', 'earnings', 'of', 'poker', 'players', 'in', 'descending', 'order', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 6, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT Earnings FROM poker_player ORDER BY Earnings DESC,"['SELECT', 'Earnings', 'FROM', 'poker_player', 'ORDER', 'BY', 'Earnings', 'DESC']","['select', 'earnings', 'from', 'poker_player', 'order', 'by', 'earnings', 'desc']","What are the earnings of poker players, ordered descending by value?","['What', 'are', 'the', 'earnings', 'of', 'poker', 'players', ',', 'ordered', 'descending', 'by', 'value', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 6, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,"SELECT Final_Table_Made ,  Best_Finish FROM poker_player","['SELECT', 'Final_Table_Made', ',', 'Best_Finish', 'FROM', 'poker_player']","['select', 'final_table_made', ',', 'best_finish', 'from', 'poker_player']",List the final tables made and the best finishes of poker players.,"['List', 'the', 'final', 'tables', 'made', 'and', 'the', 'best', 'finishes', 'of', 'poker', 'players', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,"SELECT Final_Table_Made ,  Best_Finish FROM poker_player","['SELECT', 'Final_Table_Made', ',', 'Best_Finish', 'FROM', 'poker_player']","['select', 'final_table_made', ',', 'best_finish', 'from', 'poker_player']",What are the final tables made and best finishes for all poker players?,"['What', 'are', 'the', 'final', 'tables', 'made', 'and', 'best', 'finishes', 'for', 'all', 'poker', 'players', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT avg(Earnings) FROM poker_player,"['SELECT', 'avg', '(', 'Earnings', ')', 'FROM', 'poker_player']","['select', 'avg', '(', 'earnings', ')', 'from', 'poker_player']",What is the average earnings of poker players?,"['What', 'is', 'the', 'average', 'earnings', 'of', 'poker', 'players', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[5, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT avg(Earnings) FROM poker_player,"['SELECT', 'avg', '(', 'Earnings', ')', 'FROM', 'poker_player']","['select', 'avg', '(', 'earnings', ')', 'from', 'poker_player']",Return the average earnings across all poker players.,"['Return', 'the', 'average', 'earnings', 'across', 'all', 'poker', 'players', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[5, [0, [0, 6, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1,"['SELECT', 'Money_Rank', 'FROM', 'poker_player', 'ORDER', 'BY', 'Earnings', 'DESC', 'LIMIT', '1']","['select', 'money_rank', 'from', 'poker_player', 'order', 'by', 'earnings', 'desc', 'limit', 'value']",What is the money rank of the poker player with the highest earnings?,"['What', 'is', 'the', 'money', 'rank', 'of', 'the', 'poker', 'player', 'with', 'the', 'highest', 'earnings', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 6, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1,"['SELECT', 'Money_Rank', 'FROM', 'poker_player', 'ORDER', 'BY', 'Earnings', 'DESC', 'LIMIT', '1']","['select', 'money_rank', 'from', 'poker_player', 'order', 'by', 'earnings', 'desc', 'limit', 'value']",Return the money rank of the player with the greatest earnings.,"['Return', 'the', 'money', 'rank', 'of', 'the', 'player', 'with', 'the', 'greatest', 'earnings', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 6, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000,"['SELECT', 'max', '(', 'Final_Table_Made', ')', 'FROM', 'poker_player', 'WHERE', 'Earnings', '<', '200000']","['select', 'max', '(', 'final_table_made', ')', 'from', 'poker_player', 'where', 'earnings', '<', 'value']",What is the maximum number of final tables made among poker players with earnings less than 200000?,"['What', 'is', 'the', 'maximum', 'number', 'of', 'final', 'tables', 'made', 'among', 'poker', 'players', 'with', 'earnings', 'less', 'than', '200000', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[1, [0, [0, 3, False], None]]]], 'where': [[False, 4, [0, [0, 6, False], None], 200000.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000,"['SELECT', 'max', '(', 'Final_Table_Made', ')', 'FROM', 'poker_player', 'WHERE', 'Earnings', '<', '200000']","['select', 'max', '(', 'final_table_made', ')', 'from', 'poker_player', 'where', 'earnings', '<', 'value']",Return the maximum final tables made across all poker players who have earnings below 200000.,"['Return', 'the', 'maximum', 'final', 'tables', 'made', 'across', 'all', 'poker', 'players', 'who', 'have', 'earnings', 'below', '200000', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[1, [0, [0, 3, False], None]]]], 'where': [[False, 4, [0, [0, 6, False], None], 200000.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID,"['SELECT', 'T1.Name', 'FROM', 'people', 'AS', 'T1', 'JOIN', 'poker_player', 'AS', 'T2', 'ON', 'T1.People_ID', '=', 'T2.People_ID']","['select', 't1', '.', 'name', 'from', 'people', 'as', 't1', 'join', 'poker_player', 'as', 't2', 'on', 't1', '.', 'people_id', '=', 't2', '.', 'people_id']",What are the names of poker players?,"['What', 'are', 'the', 'names', 'of', 'poker', 'players', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID,"['SELECT', 'T1.Name', 'FROM', 'people', 'AS', 'T1', 'JOIN', 'poker_player', 'AS', 'T2', 'ON', 'T1.People_ID', '=', 'T2.People_ID']","['select', 't1', '.', 'name', 'from', 'people', 'as', 't1', 'join', 'poker_player', 'as', 't2', 'on', 't1', '.', 'people_id', '=', 't2', '.', 'people_id']",Return the names of all the poker players.,"['Return', 'the', 'names', 'of', 'all', 'the', 'poker', 'players', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000,"['SELECT', 'T1.Name', 'FROM', 'people', 'AS', 'T1', 'JOIN', 'poker_player', 'AS', 'T2', 'ON', 'T1.People_ID', '=', 'T2.People_ID', 'WHERE', 'T2.Earnings', '>', '300000']","['select', 't1', '.', 'name', 'from', 'people', 'as', 't1', 'join', 'poker_player', 'as', 't2', 'on', 't1', '.', 'people_id', '=', 't2', '.', 'people_id', 'where', 't2', '.', 'earnings', '>', 'value']",What are the names of poker players whose earnings is higher than 300000?,"['What', 'are', 'the', 'names', 'of', 'poker', 'players', 'whose', 'earnings', 'is', 'higher', 'than', '300000', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 3, [0, [0, 6, False], None], 300000.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000,"['SELECT', 'T1.Name', 'FROM', 'people', 'AS', 'T1', 'JOIN', 'poker_player', 'AS', 'T2', 'ON', 'T1.People_ID', '=', 'T2.People_ID', 'WHERE', 'T2.Earnings', '>', '300000']","['select', 't1', '.', 'name', 'from', 'people', 'as', 't1', 'join', 'poker_player', 'as', 't2', 'on', 't1', '.', 'people_id', '=', 't2', '.', 'people_id', 'where', 't2', '.', 'earnings', '>', 'value']",Give the names of poker players who have earnings above 300000.,"['Give', 'the', 'names', 'of', 'poker', 'players', 'who', 'have', 'earnings', 'above', '300000', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 3, [0, [0, 6, False], None], 300000.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made,"['SELECT', 'T1.Name', 'FROM', 'people', 'AS', 'T1', 'JOIN', 'poker_player', 'AS', 'T2', 'ON', 'T1.People_ID', '=', 'T2.People_ID', 'ORDER', 'BY', 'T2.Final_Table_Made']","['select', 't1', '.', 'name', 'from', 'people', 'as', 't1', 'join', 'poker_player', 'as', 't2', 'on', 't1', '.', 'people_id', '=', 't2', '.', 'people_id', 'order', 'by', 't2', '.', 'final_table_made']",List the names of poker players ordered by the final tables made in ascending order.,"['List', 'the', 'names', 'of', 'poker', 'players', 'ordered', 'by', 'the', 'final', 'tables', 'made', 'in', 'ascending', 'order', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 3, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made,"['SELECT', 'T1.Name', 'FROM', 'people', 'AS', 'T1', 'JOIN', 'poker_player', 'AS', 'T2', 'ON', 'T1.People_ID', '=', 'T2.People_ID', 'ORDER', 'BY', 'T2.Final_Table_Made']","['select', 't1', '.', 'name', 'from', 'people', 'as', 't1', 'join', 'poker_player', 'as', 't2', 'on', 't1', '.', 'people_id', '=', 't2', '.', 'people_id', 'order', 'by', 't2', '.', 'final_table_made']","What are the names of poker players, ordered ascending by the number of final tables they have made?","['What', 'are', 'the', 'names', 'of', 'poker', 'players', ',', 'ordered', 'ascending', 'by', 'the', 'number', 'of', 'final', 'tables', 'they', 'have', 'made', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 3, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1,"['SELECT', 'T1.Birth_Date', 'FROM', 'people', 'AS', 'T1', 'JOIN', 'poker_player', 'AS', 'T2', 'ON', 'T1.People_ID', '=', 'T2.People_ID', 'ORDER', 'BY', 'T2.Earnings', 'ASC', 'LIMIT', '1']","['select', 't1', '.', 'birth_date', 'from', 'people', 'as', 't1', 'join', 'poker_player', 'as', 't2', 'on', 't1', '.', 'people_id', '=', 't2', '.', 'people_id', 'order', 'by', 't2', '.', 'earnings', 'asc', 'limit', 'value']",What is the birth date of the poker player with the lowest earnings?,"['What', 'is', 'the', 'birth', 'date', 'of', 'the', 'poker', 'player', 'with', 'the', 'lowest', 'earnings', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]]}, 'select': [False, [[0, [0, [0, 10, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 6, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1,"['SELECT', 'T1.Birth_Date', 'FROM', 'people', 'AS', 'T1', 'JOIN', 'poker_player', 'AS', 'T2', 'ON', 'T1.People_ID', '=', 'T2.People_ID', 'ORDER', 'BY', 'T2.Earnings', 'ASC', 'LIMIT', '1']","['select', 't1', '.', 'birth_date', 'from', 'people', 'as', 't1', 'join', 'poker_player', 'as', 't2', 'on', 't1', '.', 'people_id', '=', 't2', '.', 'people_id', 'order', 'by', 't2', '.', 'earnings', 'asc', 'limit', 'value']",Return the birth date of the poker player with the lowest earnings.,"['Return', 'the', 'birth', 'date', 'of', 'the', 'poker', 'player', 'with', 'the', 'lowest', 'earnings', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]]}, 'select': [False, [[0, [0, [0, 10, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 6, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1,"['SELECT', 'T2.Money_Rank', 'FROM', 'people', 'AS', 'T1', 'JOIN', 'poker_player', 'AS', 'T2', 'ON', 'T1.People_ID', '=', 'T2.People_ID', 'ORDER', 'BY', 'T1.Height', 'DESC', 'LIMIT', '1']","['select', 't2', '.', 'money_rank', 'from', 'people', 'as', 't1', 'join', 'poker_player', 'as', 't2', 'on', 't1', '.', 'people_id', '=', 't2', '.', 'people_id', 'order', 'by', 't1', '.', 'height', 'desc', 'limit', 'value']",What is the money rank of the tallest poker player?,"['What', 'is', 'the', 'money', 'rank', 'of', 'the', 'tallest', 'poker', 'player', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 11, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1,"['SELECT', 'T2.Money_Rank', 'FROM', 'people', 'AS', 'T1', 'JOIN', 'poker_player', 'AS', 'T2', 'ON', 'T1.People_ID', '=', 'T2.People_ID', 'ORDER', 'BY', 'T1.Height', 'DESC', 'LIMIT', '1']","['select', 't2', '.', 'money_rank', 'from', 'people', 'as', 't1', 'join', 'poker_player', 'as', 't2', 'on', 't1', '.', 'people_id', '=', 't2', '.', 'people_id', 'order', 'by', 't1', '.', 'height', 'desc', 'limit', 'value']",Return the money rank of the poker player with the greatest height.,"['Return', 'the', 'money', 'rank', 'of', 'the', 'poker', 'player', 'with', 'the', 'greatest', 'height', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]]}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 11, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200,"['SELECT', 'avg', '(', 'T2.Earnings', ')', 'FROM', 'people', 'AS', 'T1', 'JOIN', 'poker_player', 'AS', 'T2', 'ON', 'T1.People_ID', '=', 'T2.People_ID', 'WHERE', 'T1.Height', '>', '200']","['select', 'avg', '(', 't2', '.', 'earnings', ')', 'from', 'people', 'as', 't1', 'join', 'poker_player', 'as', 't2', 'on', 't1', '.', 'people_id', '=', 't2', '.', 'people_id', 'where', 't1', '.', 'height', '>', 'value']",What is the average earnings of poker players with height higher than 200?,"['What', 'is', 'the', 'average', 'earnings', 'of', 'poker', 'players', 'with', 'height', 'higher', 'than', '200', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]]}, 'select': [False, [[5, [0, [0, 6, False], None]]]], 'where': [[False, 3, [0, [0, 11, False], None], 200.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200,"['SELECT', 'avg', '(', 'T2.Earnings', ')', 'FROM', 'people', 'AS', 'T1', 'JOIN', 'poker_player', 'AS', 'T2', 'ON', 'T1.People_ID', '=', 'T2.People_ID', 'WHERE', 'T1.Height', '>', '200']","['select', 'avg', '(', 't2', '.', 'earnings', ')', 'from', 'people', 'as', 't1', 'join', 'poker_player', 'as', 't2', 'on', 't1', '.', 'people_id', '=', 't2', '.', 'people_id', 'where', 't1', '.', 'height', '>', 'value']",Give average earnings of poker players who are taller than 200.,"['Give', 'average', 'earnings', 'of', 'poker', 'players', 'who', 'are', 'taller', 'than', '200', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]]}, 'select': [False, [[5, [0, [0, 6, False], None]]]], 'where': [[False, 3, [0, [0, 11, False], None], 200.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC,"['SELECT', 'T1.Name', 'FROM', 'people', 'AS', 'T1', 'JOIN', 'poker_player', 'AS', 'T2', 'ON', 'T1.People_ID', '=', 'T2.People_ID', 'ORDER', 'BY', 'T2.Earnings', 'DESC']","['select', 't1', '.', 'name', 'from', 'people', 'as', 't1', 'join', 'poker_player', 'as', 't2', 'on', 't1', '.', 'people_id', '=', 't2', '.', 'people_id', 'order', 'by', 't2', '.', 'earnings', 'desc']",What are the names of poker players in descending order of earnings?,"['What', 'are', 'the', 'names', 'of', 'poker', 'players', 'in', 'descending', 'order', 'of', 'earnings', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 6, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC,"['SELECT', 'T1.Name', 'FROM', 'people', 'AS', 'T1', 'JOIN', 'poker_player', 'AS', 'T2', 'ON', 'T1.People_ID', '=', 'T2.People_ID', 'ORDER', 'BY', 'T2.Earnings', 'DESC']","['select', 't1', '.', 'name', 'from', 'people', 'as', 't1', 'join', 'poker_player', 'as', 't2', 'on', 't1', '.', 'people_id', '=', 't2', '.', 'people_id', 'order', 'by', 't2', '.', 'earnings', 'desc']",Return the names of poker players sorted by their earnings descending.,"['Return', 'the', 'names', 'of', 'poker', 'players', 'sorted', 'by', 'their', 'earnings', 'descending', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 7, False], None], [0, 2, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 6, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality","['SELECT', 'Nationality', ',', 'COUNT', '(', '*', ')', 'FROM', 'people', 'GROUP', 'BY', 'Nationality']","['select', 'nationality', ',', 'count', '(', '*', ')', 'from', 'people', 'group', 'by', 'nationality']",What are different nationalities of people and the corresponding number of people from each nation?,"['What', 'are', 'different', 'nationalities', 'of', 'people', 'and', 'the', 'corresponding', 'number', 'of', 'people', 'from', 'each', 'nation', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 8, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 8, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality","['SELECT', 'Nationality', ',', 'COUNT', '(', '*', ')', 'FROM', 'people', 'GROUP', 'BY', 'Nationality']","['select', 'nationality', ',', 'count', '(', '*', ')', 'from', 'people', 'group', 'by', 'nationality']",How many people are there of each nationality?,"['How', 'many', 'people', 'are', 'there', 'of', 'each', 'nationality', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 8, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 8, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1,"['SELECT', 'Nationality', 'FROM', 'people', 'GROUP', 'BY', 'Nationality', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'nationality', 'from', 'people', 'group', 'by', 'nationality', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the most common nationality of people?,"['What', 'is', 'the', 'most', 'common', 'nationality', 'of', 'people', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 8, False], None]]]], 'where': [], 'groupBy': [[0, 8, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1,"['SELECT', 'Nationality', 'FROM', 'people', 'GROUP', 'BY', 'Nationality', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'nationality', 'from', 'people', 'group', 'by', 'nationality', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Give the nationality that is most common across all people.,"['Give', 'the', 'nationality', 'that', 'is', 'most', 'common', 'across', 'all', 'people', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 8, False], None]]]], 'where': [], 'groupBy': [[0, 8, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2,"['SELECT', 'Nationality', 'FROM', 'people', 'GROUP', 'BY', 'Nationality', 'HAVING', 'COUNT', '(', '*', ')', '>', '=', '2']","['select', 'nationality', 'from', 'people', 'group', 'by', 'nationality', 'having', 'count', '(', '*', ')', '>', '=', 'value']",What are the nationalities that are shared by at least two people?,"['What', 'are', 'the', 'nationalities', 'that', 'are', 'shared', 'by', 'at', 'least', 'two', 'people', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 8, False], None]]]], 'where': [], 'groupBy': [[0, 8, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2,"['SELECT', 'Nationality', 'FROM', 'people', 'GROUP', 'BY', 'Nationality', 'HAVING', 'COUNT', '(', '*', ')', '>', '=', '2']","['select', 'nationality', 'from', 'people', 'group', 'by', 'nationality', 'having', 'count', '(', '*', ')', '>', '=', 'value']",Return the nationalities for which there are two or more people.,"['Return', 'the', 'nationalities', 'for', 'which', 'there', 'are', 'two', 'or', 'more', 'people', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 8, False], None]]]], 'where': [], 'groupBy': [[0, 8, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC","['SELECT', 'Name', ',', 'Birth_Date', 'FROM', 'people', 'ORDER', 'BY', 'Name', 'ASC']","['select', 'name', ',', 'birth_date', 'from', 'people', 'order', 'by', 'name', 'asc']",List the names and birth dates of people in ascending alphabetical order of name.,"['List', 'the', 'names', 'and', 'birth', 'dates', 'of', 'people', 'in', 'ascending', 'alphabetical', 'order', 'of', 'name', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 9, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC","['SELECT', 'Name', ',', 'Birth_Date', 'FROM', 'people', 'ORDER', 'BY', 'Name', 'ASC']","['select', 'name', ',', 'birth_date', 'from', 'people', 'order', 'by', 'name', 'asc']","What are the names and birth dates of people, ordered by their names in alphabetical order?","['What', 'are', 'the', 'names', 'and', 'birth', 'dates', 'of', 'people', ',', 'ordered', 'by', 'their', 'names', 'in', 'alphabetical', 'order', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 10, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 9, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,"SELECT Name FROM people WHERE Nationality != ""Russia""","['SELECT', 'Name', 'FROM', 'people', 'WHERE', 'Nationality', '!', '=', '``', 'Russia', ""''""]","['select', 'name', 'from', 'people', 'where', 'nationality', '!', '=', 'value']","Show names of people whose nationality is not ""Russia"".","['Show', 'names', 'of', 'people', 'whose', 'nationality', 'is', 'not', '``', 'Russia', ""''"", '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 7, [0, [0, 8, False], None], '""Russia""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,"SELECT Name FROM people WHERE Nationality != ""Russia""","['SELECT', 'Name', 'FROM', 'people', 'WHERE', 'Nationality', '!', '=', '``', 'Russia', ""''""]","['select', 'name', 'from', 'people', 'where', 'nationality', '!', '=', 'value']",What are the names of people who are not from Russia?,"['What', 'are', 'the', 'names', 'of', 'people', 'who', 'are', 'not', 'from', 'Russia', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 7, [0, [0, 8, False], None], '""Russia""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player),"['SELECT', 'Name', 'FROM', 'people', 'WHERE', 'People_ID', 'NOT', 'IN', '(', 'SELECT', 'People_ID', 'FROM', 'poker_player', ')']","['select', 'name', 'from', 'people', 'where', 'people_id', 'not', 'in', '(', 'select', 'people_id', 'from', 'poker_player', ')']",List the names of people that are not poker players.,"['List', 'the', 'names', 'of', 'people', 'that', 'are', 'not', 'poker', 'players', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[True, 8, [0, [0, 7, False], None], {'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player),"['SELECT', 'Name', 'FROM', 'people', 'WHERE', 'People_ID', 'NOT', 'IN', '(', 'SELECT', 'People_ID', 'FROM', 'poker_player', ')']","['select', 'name', 'from', 'people', 'where', 'people_id', 'not', 'in', '(', 'select', 'people_id', 'from', 'poker_player', ')']",What are the names of people who do not play poker?,"['What', 'are', 'the', 'names', 'of', 'people', 'who', 'do', 'not', 'play', 'poker', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[True, 8, [0, [0, 7, False], None], {'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT count(DISTINCT Nationality) FROM people,"['SELECT', 'count', '(', 'DISTINCT', 'Nationality', ')', 'FROM', 'people']","['select', 'count', '(', 'distinct', 'nationality', ')', 'from', 'people']",How many distinct nationalities are there?,"['How', 'many', 'distinct', 'nationalities', 'are', 'there', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 8, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
poker_player,SELECT count(DISTINCT Nationality) FROM people,"['SELECT', 'count', '(', 'DISTINCT', 'Nationality', ')', 'FROM', 'people']","['select', 'count', '(', 'distinct', 'nationality', ')', 'from', 'people']",Count the number of different nationalities.,"['Count', 'the', 'number', 'of', 'different', 'nationalities', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 8, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
voter_1,SELECT count(*) FROM area_code_state,"['SELECT', 'count', '(', '*', ')', 'FROM', 'area_code_state']","['select', 'count', '(', '*', ')', 'from', 'area_code_state']",How many states are there?,"['How', 'many', 'states', 'are', 'there', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
voter_1,"SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC","['SELECT', 'contestant_number', ',', 'contestant_name', 'FROM', 'contestants', 'ORDER', 'BY', 'contestant_name', 'DESC']","['select', 'contestant_number', ',', 'contestant_name', 'from', 'contestants', 'order', 'by', 'contestant_name', 'desc']","List the contestant numbers and names, ordered by contestant name descending.","['List', 'the', 'contestant', 'numbers', 'and', 'names', ',', 'ordered', 'by', 'contestant', 'name', 'descending', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 4, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
voter_1,"SELECT vote_id ,  phone_number ,  state FROM votes","['SELECT', 'vote_id', ',', 'phone_number', ',', 'state', 'FROM', 'votes']","['select', 'vote_id', ',', 'phone_number', ',', 'state', 'from', 'votes']","List the vote ids, phone numbers and states of all votes.","['List', 'the', 'vote', 'ids', ',', 'phone', 'numbers', 'and', 'states', 'of', 'all', 'votes', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]], [0, [0, [0, 6, False], None]], [0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
voter_1,"SELECT max(area_code) ,  min(area_code) FROM area_code_state","['SELECT', 'max', '(', 'area_code', ')', ',', 'min', '(', 'area_code', ')', 'FROM', 'area_code_state']","['select', 'max', '(', 'area_code', ')', ',', 'min', '(', 'area_code', ')', 'from', 'area_code_state']",What are the maximum and minimum values of area codes?,"['What', 'are', 'the', 'maximum', 'and', 'minimum', 'values', 'of', 'area', 'codes', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[1, [0, [0, 1, False], None]], [2, [0, [0, 1, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
voter_1,SELECT max(created) FROM votes WHERE state  =  'CA',"['SELECT', 'max', '(', 'created', ')', 'FROM', 'votes', 'WHERE', 'state', '=', ""'CA"", ""'""]","['select', 'max', '(', 'created', ')', 'from', 'votes', 'where', 'state', '=', 'value']",What is last date created of votes from the state 'CA'?,"['What', 'is', 'last', 'date', 'created', 'of', 'votes', 'from', 'the', 'state', ""'CA"", ""'"", '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[1, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 7, False], None], '""CA""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
voter_1,SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway',"['SELECT', 'contestant_name', 'FROM', 'contestants', 'WHERE', 'contestant_name', '!', '=', ""'Jessie"", 'Alloway', ""'""]","['select', 'contestant_name', 'from', 'contestants', 'where', 'contestant_name', '!', '=', 'value']",What are the names of the contestants whose names are not 'Jessie Alloway',"['What', 'are', 'the', 'names', 'of', 'the', 'contestants', 'whose', 'names', 'are', 'not', ""'Jessie"", 'Alloway', ""'""]","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [[False, 7, [0, [0, 4, False], None], '""Jessie Alloway""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
voter_1,"SELECT DISTINCT state ,  created FROM votes","['SELECT', 'DISTINCT', 'state', ',', 'created', 'FROM', 'votes']","['select', 'distinct', 'state', ',', 'created', 'from', 'votes']",What are the distinct states and create time of all votes?,"['What', 'are', 'the', 'distinct', 'states', 'and', 'create', 'time', 'of', 'all', 'votes', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [True, [[0, [0, [0, 7, False], None]], [0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
voter_1,"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2","['SELECT', 'T1.contestant_number', ',', 'T1.contestant_name', 'FROM', 'contestants', 'AS', 'T1', 'JOIN', 'votes', 'AS', 'T2', 'ON', 'T1.contestant_number', '=', 'T2.contestant_number', 'GROUP', 'BY', 'T1.contestant_number', 'HAVING', 'count', '(', '*', ')', '>', '=', '2']","['select', 't1', '.', 'contestant_number', ',', 't1', '.', 'contestant_name', 'from', 'contestants', 'as', 't1', 'join', 'votes', 'as', 't2', 'on', 't1', '.', 'contestant_number', '=', 't2', '.', 'contestant_number', 'group', 'by', 't1', '.', 'contestant_number', 'having', 'count', '(', '*', ')', '>', '=', 'value']",What are the contestant numbers and names of the contestants who had at least two votes?,"['What', 'are', 'the', 'contestant', 'numbers', 'and', 'names', 'of', 'the', 'contestants', 'who', 'had', 'at', 'least', 'two', 'votes', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [[0, 3, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
voter_1,"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1","['SELECT', 'T1.contestant_number', ',', 'T1.contestant_name', 'FROM', 'contestants', 'AS', 'T1', 'JOIN', 'votes', 'AS', 'T2', 'ON', 'T1.contestant_number', '=', 'T2.contestant_number', 'GROUP', 'BY', 'T1.contestant_number', 'ORDER', 'BY', 'count', '(', '*', ')', 'ASC', 'LIMIT', '1']","['select', 't1', '.', 'contestant_number', ',', 't1', '.', 'contestant_name', 'from', 'contestants', 'as', 't1', 'join', 'votes', 'as', 't2', 'on', 't1', '.', 'contestant_number', '=', 't2', '.', 'contestant_number', 'group', 'by', 't1', '.', 'contestant_number', 'order', 'by', 'count', '(', '*', ')', 'asc', 'limit', 'value']","Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?","['Of', 'all', 'the', 'contestants', 'who', 'got', 'voted', ',', 'what', 'is', 'the', 'contestant', 'number', 'and', 'name', 'of', 'the', 'contestant', 'who', 'got', 'least', 'votes', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [[0, 3, False]], 'having': [], 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
voter_1,SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA',"['SELECT', 'count', '(', '*', ')', 'FROM', 'votes', 'WHERE', 'state', '=', ""'NY"", ""'"", 'OR', 'state', '=', ""'CA"", ""'""]","['select', 'count', '(', '*', ')', 'from', 'votes', 'where', 'state', '=', 'value', 'or', 'state', '=', 'value']",What are the number of votes from state 'NY' or 'CA'?,"['What', 'are', 'the', 'number', 'of', 'votes', 'from', 'state', ""'NY"", ""'"", 'or', ""'CA"", ""'"", '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 7, False], None], '""NY""', None], 'or', [False, 2, [0, [0, 7, False], None], '""CA""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
voter_1,SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes ),"['SELECT', 'count', '(', '*', ')', 'FROM', 'contestants', 'WHERE', 'contestant_number', 'NOT', 'IN', '(', 'SELECT', 'contestant_number', 'FROM', 'votes', ')']","['select', 'count', '(', '*', ')', 'from', 'contestants', 'where', 'contestant_number', 'not', 'in', '(', 'select', 'contestant_number', 'from', 'votes', ')']",How many contestants did not get voted?,"['How', 'many', 'contestants', 'did', 'not', 'get', 'voted', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[True, 8, [0, [0, 3, False], None], {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 8, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
voter_1,SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T1.area_code', 'FROM', 'area_code_state', 'AS', 'T1', 'JOIN', 'votes', 'AS', 'T2', 'ON', 'T1.state', '=', 'T2.state', 'GROUP', 'BY', 'T1.area_code', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'area_code', 'from', 'area_code_state', 'as', 't1', 'join', 'votes', 'as', 't2', 'on', 't1', '.', 'state', '=', 't2', '.', 'state', 'group', 'by', 't1', '.', 'area_code', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the area code in which the most voters voted?,"['What', 'is', 'the', 'area', 'code', 'in', 'which', 'the', 'most', 'voters', 'voted', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 2, False], None], [0, 7, False], None]]}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [], 'groupBy': [[0, 1, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
voter_1,"SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'","['SELECT', 'T2.created', ',', 'T2.state', ',', 'T2.phone_number', 'FROM', 'contestants', 'AS', 'T1', 'JOIN', 'votes', 'AS', 'T2', 'ON', 'T1.contestant_number', '=', 'T2.contestant_number', 'WHERE', 'T1.contestant_name', '=', ""'Tabatha"", 'Gehling', ""'""]","['select', 't2', '.', 'created', ',', 't2', '.', 'state', ',', 't2', '.', 'phone_number', 'from', 'contestants', 'as', 't1', 'join', 'votes', 'as', 't2', 'on', 't1', '.', 'contestant_number', '=', 't2', '.', 'contestant_number', 'where', 't1', '.', 'contestant_name', '=', 'value']","What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?","['What', 'are', 'the', 'create', 'dates', ',', 'states', ',', 'and', 'phone', 'numbers', 'of', 'the', 'votes', 'that', 'were', 'for', 'the', 'contestant', 'named', ""'Tabatha"", 'Gehling', ""'"", '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 7, False], None]], [0, [0, [0, 6, False], None]]]], 'where': [[False, 2, [0, [0, 4, False], None], '""Tabatha Gehling""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
voter_1,SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss',"['SELECT', 'T3.area_code', 'FROM', 'contestants', 'AS', 'T1', 'JOIN', 'votes', 'AS', 'T2', 'ON', 'T1.contestant_number', '=', 'T2.contestant_number', 'JOIN', 'area_code_state', 'AS', 'T3', 'ON', 'T2.state', '=', 'T3.state', 'WHERE', 'T1.contestant_name', '=', ""'Tabatha"", 'Gehling', ""'"", 'INTERSECT', 'SELECT', 'T3.area_code', 'FROM', 'contestants', 'AS', 'T1', 'JOIN', 'votes', 'AS', 'T2', 'ON', 'T1.contestant_number', '=', 'T2.contestant_number', 'JOIN', 'area_code_state', 'AS', 'T3', 'ON', 'T2.state', '=', 'T3.state', 'WHERE', 'T1.contestant_name', '=', ""'Kelly"", 'Clauss', ""'""]","['select', 't3', '.', 'area_code', 'from', 'contestants', 'as', 't1', 'join', 'votes', 'as', 't2', 'on', 't1', '.', 'contestant_number', '=', 't2', '.', 'contestant_number', 'join', 'area_code_state', 'as', 't3', 'on', 't2', '.', 'state', '=', 't3', '.', 'state', 'where', 't1', '.', 'contestant_name', '=', 'value', 'intersect', 'select', 't3', '.', 'area_code', 'from', 'contestants', 'as', 't1', 'join', 'votes', 'as', 't2', 'on', 't1', '.', 'contestant_number', '=', 't2', '.', 'contestant_number', 'join', 'area_code_state', 'as', 't3', 'on', 't2', '.', 'state', '=', 't3', '.', 'state', 'where', 't1', '.', 'contestant_name', '=', 'value']",List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.,"['List', 'the', 'area', 'codes', 'in', 'which', 'voters', 'voted', 'both', 'for', 'the', 'contestant', ""'Tabatha"", 'Gehling', ""'"", 'and', 'the', 'contestant', ""'Kelly"", 'Clauss', ""'"", '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None], 'and', [False, 2, [0, [0, 7, False], None], [0, 2, False], None]]}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [[False, 2, [0, [0, 4, False], None], '""Tabatha Gehling""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 1], ['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None], 'and', [False, 2, [0, [0, 7, False], None], [0, 2, False], None]]}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [[False, 2, [0, [0, 4, False], None], '""Kelly Clauss""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
voter_1,"select contestant_name from contestants where contestant_name like ""%al%""","['select', 'contestant_name', 'from', 'contestants', 'where', 'contestant_name', 'like', '""%al%""']","['select', 'contestant_name', 'from', 'contestants', 'where', 'contestant_name', 'like', 'value']",Return the names of the contestants whose names contain the substring 'Al' .,"['Return', 'the', 'names', 'of', 'the', 'contestants', 'whose', 'names', 'contain', 'the', 'substring', ""'Al'"", '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [[False, 9, [0, [0, 4, False], None], '""%al%""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,SELECT Name FROM country WHERE IndepYear  >  1950,"['SELECT', 'Name', 'FROM', 'country', 'WHERE', 'IndepYear', '>', '1950']","['select', 'name', 'from', 'country', 'where', 'indepyear', '>', 'value']",What are the names of all the countries that became independent after 1950?,"['What', 'are', 'the', 'names', 'of', 'all', 'the', 'countries', 'that', 'became', 'independent', 'after', '1950', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 3, [0, [0, 13, False], None], 1950.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,SELECT Name FROM country WHERE IndepYear  >  1950,"['SELECT', 'Name', 'FROM', 'country', 'WHERE', 'IndepYear', '>', '1950']","['select', 'name', 'from', 'country', 'where', 'indepyear', '>', 'value']",Give the names of the nations that were founded after 1950.,"['Give', 'the', 'names', 'of', 'the', 'nations', 'that', 'were', 'founded', 'after', '1950', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 3, [0, [0, 13, False], None], 1950.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT count(*) FROM country WHERE GovernmentForm  =  ""Republic""","['SELECT', 'count', '(', '*', ')', 'FROM', 'country', 'WHERE', 'GovernmentForm', '=', '``', 'Republic', ""''""]","['select', 'count', '(', '*', ')', 'from', 'country', 'where', 'governmentform', '=', 'value']",How many countries have a republic as their form of government?,"['How', 'many', 'countries', 'have', 'a', 'republic', 'as', 'their', 'form', 'of', 'government', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 19, False], None], '""Republic""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT count(*) FROM country WHERE GovernmentForm  =  ""Republic""","['SELECT', 'count', '(', '*', ')', 'FROM', 'country', 'WHERE', 'GovernmentForm', '=', '``', 'Republic', ""''""]","['select', 'count', '(', '*', ')', 'from', 'country', 'where', 'governmentform', '=', 'value']",How many countries have governments that are republics?,"['How', 'many', 'countries', 'have', 'governments', 'that', 'are', 'republics', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 19, False], None], '""Republic""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT sum(SurfaceArea) FROM country WHERE Region  =  ""Caribbean""","['SELECT', 'sum', '(', 'SurfaceArea', ')', 'FROM', 'country', 'WHERE', 'Region', '=', '``', 'Caribbean', ""''""]","['select', 'sum', '(', 'surfacearea', ')', 'from', 'country', 'where', 'region', '=', 'value']",What is the total surface area of the countries in the Caribbean region?,"['What', 'is', 'the', 'total', 'surface', 'area', 'of', 'the', 'countries', 'in', 'the', 'Caribbean', 'region', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[4, [0, [0, 12, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""Caribbean""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT sum(SurfaceArea) FROM country WHERE Region  =  ""Caribbean""","['SELECT', 'sum', '(', 'SurfaceArea', ')', 'FROM', 'country', 'WHERE', 'Region', '=', '``', 'Caribbean', ""''""]","['select', 'sum', '(', 'surfacearea', ')', 'from', 'country', 'where', 'region', '=', 'value']",How much surface area do the countires in the Carribean cover together?,"['How', 'much', 'surface', 'area', 'do', 'the', 'countires', 'in', 'the', 'Carribean', 'cover', 'together', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[4, [0, [0, 12, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""Caribbean""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Continent FROM country WHERE Name  =  ""Anguilla""","['SELECT', 'Continent', 'FROM', 'country', 'WHERE', 'Name', '=', '``', 'Anguilla', ""''""]","['select', 'continent', 'from', 'country', 'where', 'name', '=', 'value']",Which continent is Anguilla in?,"['Which', 'continent', 'is', 'Anguilla', 'in', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 10, False], None]]]], 'where': [[False, 2, [0, [0, 9, False], None], '""Anguilla""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Continent FROM country WHERE Name  =  ""Anguilla""","['SELECT', 'Continent', 'FROM', 'country', 'WHERE', 'Name', '=', '``', 'Anguilla', ""''""]","['select', 'continent', 'from', 'country', 'where', 'name', '=', 'value']",What is the continent name which Anguilla belongs to?,"['What', 'is', 'the', 'continent', 'name', 'which', 'Anguilla', 'belongs', 'to', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 10, False], None]]]], 'where': [[False, 2, [0, [0, 9, False], None], '""Anguilla""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  ""Kabul""","['SELECT', 'Region', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'city', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Name', '=', '``', 'Kabul', ""''""]","['select', 'region', 'from', 'country', 'as', 't1', 'join', 'city', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'name', '=', 'value']",Which region is the city Kabul located in?,"['Which', 'region', 'is', 'the', 'city', 'Kabul', 'located', 'in', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 3, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Kabul""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  ""Kabul""","['SELECT', 'Region', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'city', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Name', '=', '``', 'Kabul', ""''""]","['select', 'region', 'from', 'country', 'as', 't1', 'join', 'city', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'name', '=', 'value']",What region is Kabul in?,"['What', 'region', 'is', 'Kabul', 'in', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 3, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Kabul""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Aruba"" ORDER BY Percentage DESC LIMIT 1","['SELECT', 'T2.Language', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T1.Name', '=', '``', 'Aruba', ""''"", 'ORDER', 'BY', 'Percentage', 'DESC', 'LIMIT', '1']","['select', 't2', '.', 'language', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't1', '.', 'name', '=', 'value', 'order', 'by', 'percentage', 'desc', 'limit', 'value']",Which language is the most popular in Aruba?,"['Which', 'language', 'is', 'the', 'most', 'popular', 'in', 'Aruba', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 24, False], None]]]], 'where': [[False, 2, [0, [0, 9, False], None], '""Aruba""', None]], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 26, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Aruba"" ORDER BY Percentage DESC LIMIT 1","['SELECT', 'T2.Language', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T1.Name', '=', '``', 'Aruba', ""''"", 'ORDER', 'BY', 'Percentage', 'DESC', 'LIMIT', '1']","['select', 't2', '.', 'language', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't1', '.', 'name', '=', 'value', 'order', 'by', 'percentage', 'desc', 'limit', 'value']",What language is predominantly spoken in Aruba?,"['What', 'language', 'is', 'predominantly', 'spoken', 'in', 'Aruba', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 24, False], None]]]], 'where': [[False, 2, [0, [0, 9, False], None], '""Aruba""', None]], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 26, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  ""Brazil""","['SELECT', 'Population', ',', 'LifeExpectancy', 'FROM', 'country', 'WHERE', 'Name', '=', '``', 'Brazil', ""''""]","['select', 'population', ',', 'lifeexpectancy', 'from', 'country', 'where', 'name', '=', 'value']",What are the population and life expectancies in Brazil?,"['What', 'are', 'the', 'population', 'and', 'life', 'expectancies', 'in', 'Brazil', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 14, False], None]], [0, [0, [0, 15, False], None]]]], 'where': [[False, 2, [0, [0, 9, False], None], '""Brazil""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  ""Brazil""","['SELECT', 'Population', ',', 'LifeExpectancy', 'FROM', 'country', 'WHERE', 'Name', '=', '``', 'Brazil', ""''""]","['select', 'population', ',', 'lifeexpectancy', 'from', 'country', 'where', 'name', '=', 'value']",Give me Brazil’s population and life expectancies.,"['Give', 'me', 'Brazil’s', 'population', 'and', 'life', 'expectancies', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 14, False], None]], [0, [0, [0, 15, False], None]]]], 'where': [[False, 2, [0, [0, 9, False], None], '""Brazil""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Population ,  Region FROM country WHERE Name  =  ""Angola""","['SELECT', 'Population', ',', 'Region', 'FROM', 'country', 'WHERE', 'Name', '=', '``', 'Angola', ""''""]","['select', 'population', ',', 'region', 'from', 'country', 'where', 'name', '=', 'value']",What are the region and population of Angola?,"['What', 'are', 'the', 'region', 'and', 'population', 'of', 'Angola', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 14, False], None]], [0, [0, [0, 11, False], None]]]], 'where': [[False, 2, [0, [0, 9, False], None], '""Angola""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Population ,  Region FROM country WHERE Name  =  ""Angola""","['SELECT', 'Population', ',', 'Region', 'FROM', 'country', 'WHERE', 'Name', '=', '``', 'Angola', ""''""]","['select', 'population', ',', 'region', 'from', 'country', 'where', 'name', '=', 'value']",What region does Angola belong to and what is its population?,"['What', 'region', 'does', 'Angola', 'belong', 'to', 'and', 'what', 'is', 'its', 'population', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 14, False], None]], [0, [0, [0, 11, False], None]]]], 'where': [[False, 2, [0, [0, 9, False], None], '""Angola""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  ""Central Africa""","['SELECT', 'avg', '(', 'LifeExpectancy', ')', 'FROM', 'country', 'WHERE', 'Region', '=', '``', 'Central', 'Africa', ""''""]","['select', 'avg', '(', 'lifeexpectancy', ')', 'from', 'country', 'where', 'region', '=', 'value']",What is the average expected life expectancy for countries in the region of Central Africa?,"['What', 'is', 'the', 'average', 'expected', 'life', 'expectancy', 'for', 'countries', 'in', 'the', 'region', 'of', 'Central', 'Africa', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[5, [0, [0, 15, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""Central Africa""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  ""Central Africa""","['SELECT', 'avg', '(', 'LifeExpectancy', ')', 'FROM', 'country', 'WHERE', 'Region', '=', '``', 'Central', 'Africa', ""''""]","['select', 'avg', '(', 'lifeexpectancy', ')', 'from', 'country', 'where', 'region', '=', 'value']",How long is the people’s average life expectancy in Central Africa?,"['How', 'long', 'is', 'the', 'people’s', 'average', 'life', 'expectancy', 'in', 'Central', 'Africa', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[5, [0, [0, 15, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""Central Africa""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Name FROM country WHERE Continent  =  ""Asia"" ORDER BY LifeExpectancy LIMIT 1","['SELECT', 'Name', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Asia', ""''"", 'ORDER', 'BY', 'LifeExpectancy', 'LIMIT', '1']","['select', 'name', 'from', 'country', 'where', 'continent', '=', 'value', 'order', 'by', 'lifeexpectancy', 'limit', 'value']",What is the name of country that has the shortest life expectancy in Asia?,"['What', 'is', 'the', 'name', 'of', 'country', 'that', 'has', 'the', 'shortest', 'life', 'expectancy', 'in', 'Asia', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Asia""', None]], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 15, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Name FROM country WHERE Continent  =  ""Asia"" ORDER BY LifeExpectancy LIMIT 1","['SELECT', 'Name', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Asia', ""''"", 'ORDER', 'BY', 'LifeExpectancy', 'LIMIT', '1']","['select', 'name', 'from', 'country', 'where', 'continent', '=', 'value', 'order', 'by', 'lifeexpectancy', 'limit', 'value']",Give the name of the country in Asia with the lowest life expectancy.,"['Give', 'the', 'name', 'of', 'the', 'country', 'in', 'Asia', 'with', 'the', 'lowest', 'life', 'expectancy', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Asia""', None]], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 15, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  ""Asia""","['SELECT', 'sum', '(', 'Population', ')', ',', 'max', '(', 'GNP', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Asia', ""''""]","['select', 'sum', '(', 'population', ')', ',', 'max', '(', 'gnp', ')', 'from', 'country', 'where', 'continent', '=', 'value']",What is the total population and maximum GNP in Asia?,"['What', 'is', 'the', 'total', 'population', 'and', 'maximum', 'GNP', 'in', 'Asia', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[4, [0, [0, 14, False], None]], [1, [0, [0, 16, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Asia""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  ""Asia""","['SELECT', 'sum', '(', 'Population', ')', ',', 'max', '(', 'GNP', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Asia', ""''""]","['select', 'sum', '(', 'population', ')', ',', 'max', '(', 'gnp', ')', 'from', 'country', 'where', 'continent', '=', 'value']","How many people live in Asia, and what is the largest GNP among them?","['How', 'many', 'people', 'live', 'in', 'Asia', ',', 'and', 'what', 'is', 'the', 'largest', 'GNP', 'among', 'them', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[4, [0, [0, 14, False], None]], [1, [0, [0, 16, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Asia""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  ""Africa"" AND GovernmentForm  =  ""Republic""","['SELECT', 'avg', '(', 'LifeExpectancy', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Africa', ""''"", 'AND', 'GovernmentForm', '=', '``', 'Republic', ""''""]","['select', 'avg', '(', 'lifeexpectancy', ')', 'from', 'country', 'where', 'continent', '=', 'value', 'and', 'governmentform', '=', 'value']",What is the average life expectancy in African countries that are republics?,"['What', 'is', 'the', 'average', 'life', 'expectancy', 'in', 'African', 'countries', 'that', 'are', 'republics', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[5, [0, [0, 15, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Africa""', None], 'and', [False, 2, [0, [0, 19, False], None], '""Republic""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  ""Africa"" AND GovernmentForm  =  ""Republic""","['SELECT', 'avg', '(', 'LifeExpectancy', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Africa', ""''"", 'AND', 'GovernmentForm', '=', '``', 'Republic', ""''""]","['select', 'avg', '(', 'lifeexpectancy', ')', 'from', 'country', 'where', 'continent', '=', 'value', 'and', 'governmentform', '=', 'value']",Give the average life expectancy for countries in Africa which are republics?,"['Give', 'the', 'average', 'life', 'expectancy', 'for', 'countries', 'in', 'Africa', 'which', 'are', 'republics', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[5, [0, [0, 15, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Africa""', None], 'and', [False, 2, [0, [0, 19, False], None], '""Republic""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  ""Asia"" OR Continent  =  ""Europe""","['SELECT', 'sum', '(', 'SurfaceArea', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Asia', ""''"", 'OR', 'Continent', '=', '``', 'Europe', ""''""]","['select', 'sum', '(', 'surfacearea', ')', 'from', 'country', 'where', 'continent', '=', 'value', 'or', 'continent', '=', 'value']",What is the total surface area of the continents Asia and Europe?,"['What', 'is', 'the', 'total', 'surface', 'area', 'of', 'the', 'continents', 'Asia', 'and', 'Europe', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[4, [0, [0, 12, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Asia""', None], 'or', [False, 2, [0, [0, 10, False], None], '""Europe""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  ""Asia"" OR Continent  =  ""Europe""","['SELECT', 'sum', '(', 'SurfaceArea', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Asia', ""''"", 'OR', 'Continent', '=', '``', 'Europe', ""''""]","['select', 'sum', '(', 'surfacearea', ')', 'from', 'country', 'where', 'continent', '=', 'value', 'or', 'continent', '=', 'value']",Give the total surface area covered by countries in Asia or Europe.,"['Give', 'the', 'total', 'surface', 'area', 'covered', 'by', 'countries', 'in', 'Asia', 'or', 'Europe', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[4, [0, [0, 12, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Asia""', None], 'or', [False, 2, [0, [0, 10, False], None], '""Europe""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT sum(Population) FROM city WHERE District  =  ""Gelderland""","['SELECT', 'sum', '(', 'Population', ')', 'FROM', 'city', 'WHERE', 'District', '=', '``', 'Gelderland', ""''""]","['select', 'sum', '(', 'population', ')', 'from', 'city', 'where', 'district', '=', 'value']",How many people live in Gelderland district?,"['How', 'many', 'people', 'live', 'in', 'Gelderland', 'district', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[4, [0, [0, 5, False], None]]]], 'where': [[False, 2, [0, [0, 4, False], None], '""Gelderland""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT sum(Population) FROM city WHERE District  =  ""Gelderland""","['SELECT', 'sum', '(', 'Population', ')', 'FROM', 'city', 'WHERE', 'District', '=', '``', 'Gelderland', ""''""]","['select', 'sum', '(', 'population', ')', 'from', 'city', 'where', 'district', '=', 'value']",What is the total population of Gelderland district?,"['What', 'is', 'the', 'total', 'population', 'of', 'Gelderland', 'district', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[4, [0, [0, 5, False], None]]]], 'where': [[False, 2, [0, [0, 4, False], None], '""Gelderland""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  ""US Territory""","['SELECT', 'avg', '(', 'GNP', ')', ',', 'sum', '(', 'population', ')', 'FROM', 'country', 'WHERE', 'GovernmentForm', '=', '``', 'US', 'Territory', ""''""]","['select', 'avg', '(', 'gnp', ')', ',', 'sum', '(', 'population', ')', 'from', 'country', 'where', 'governmentform', '=', 'value']",What is the average GNP and total population in all nations whose government is US territory?,"['What', 'is', 'the', 'average', 'GNP', 'and', 'total', 'population', 'in', 'all', 'nations', 'whose', 'government', 'is', 'US', 'territory', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[5, [0, [0, 16, False], None]], [4, [0, [0, 14, False], None]]]], 'where': [[False, 2, [0, [0, 19, False], None], '""US Territory""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  ""US Territory""","['SELECT', 'avg', '(', 'GNP', ')', ',', 'sum', '(', 'population', ')', 'FROM', 'country', 'WHERE', 'GovernmentForm', '=', '``', 'US', 'Territory', ""''""]","['select', 'avg', '(', 'gnp', ')', ',', 'sum', '(', 'population', ')', 'from', 'country', 'where', 'governmentform', '=', 'value']",Give the mean GNP and total population of nations which are considered US territory.,"['Give', 'the', 'mean', 'GNP', 'and', 'total', 'population', 'of', 'nations', 'which', 'are', 'considered', 'US', 'territory', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[5, [0, [0, 16, False], None]], [4, [0, [0, 14, False], None]]]], 'where': [[False, 2, [0, [0, 19, False], None], '""US Territory""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,SELECT count(DISTINCT LANGUAGE) FROM countrylanguage,"['SELECT', 'count', '(', 'DISTINCT', 'LANGUAGE', ')', 'FROM', 'countrylanguage']","['select', 'count', '(', 'distinct', 'language', ')', 'from', 'countrylanguage']",How many unique languages are spoken in the world?,"['How', 'many', 'unique', 'languages', 'are', 'spoken', 'in', 'the', 'world', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[3, [0, [0, 24, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,SELECT count(DISTINCT LANGUAGE) FROM countrylanguage,"['SELECT', 'count', '(', 'DISTINCT', 'LANGUAGE', ')', 'FROM', 'countrylanguage']","['select', 'count', '(', 'distinct', 'language', ')', 'from', 'countrylanguage']",What is the number of distinct languages used around the world?,"['What', 'is', 'the', 'number', 'of', 'distinct', 'languages', 'used', 'around', 'the', 'world', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[3, [0, [0, 24, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  ""Africa""","['SELECT', 'count', '(', 'DISTINCT', 'GovernmentForm', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Africa', ""''""]","['select', 'count', '(', 'distinct', 'governmentform', ')', 'from', 'country', 'where', 'continent', '=', 'value']",How many type of governments are in Africa?,"['How', 'many', 'type', 'of', 'governments', 'are', 'in', 'Africa', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 19, True], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Africa""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  ""Africa""","['SELECT', 'count', '(', 'DISTINCT', 'GovernmentForm', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Africa', ""''""]","['select', 'count', '(', 'distinct', 'governmentform', ')', 'from', 'country', 'where', 'continent', '=', 'value']",How many different forms of governments are there in Africa?,"['How', 'many', 'different', 'forms', 'of', 'governments', 'are', 'there', 'in', 'Africa', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 19, True], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Africa""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Aruba""","['SELECT', 'COUNT', '(', 'T2.Language', ')', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T1.Name', '=', '``', 'Aruba', ""''""]","['select', 'count', '(', 't2', '.', 'language', ')', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't1', '.', 'name', '=', 'value']",What is the total number of languages used in Aruba?,"['What', 'is', 'the', 'total', 'number', 'of', 'languages', 'used', 'in', 'Aruba', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[3, [0, [0, 24, False], None]]]], 'where': [[False, 2, [0, [0, 9, False], None], '""Aruba""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Aruba""","['SELECT', 'COUNT', '(', 'T2.Language', ')', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T1.Name', '=', '``', 'Aruba', ""''""]","['select', 'count', '(', 't2', '.', 'language', ')', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't1', '.', 'name', '=', 'value']",How many languages are spoken in Aruba?,"['How', 'many', 'languages', 'are', 'spoken', 'in', 'Aruba', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[3, [0, [0, 24, False], None]]]], 'where': [[False, 2, [0, [0, 9, False], None], '""Aruba""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Afghanistan"" AND IsOfficial  =  ""T""","['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T1.Name', '=', '``', 'Afghanistan', ""''"", 'AND', 'IsOfficial', '=', '``', 'T', ""''""]","['select', 'count', '(', '*', ')', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't1', '.', 'name', '=', 'value', 'and', 'isofficial', '=', 'value']",How many official languages does Afghanistan have?,"['How', 'many', 'official', 'languages', 'does', 'Afghanistan', 'have', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 9, False], None], '""Afghanistan""', None], 'and', [False, 2, [0, [0, 25, False], None], '""T""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Afghanistan"" AND IsOfficial  =  ""T""","['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T1.Name', '=', '``', 'Afghanistan', ""''"", 'AND', 'IsOfficial', '=', '``', 'T', ""''""]","['select', 'count', '(', '*', ')', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't1', '.', 'name', '=', 'value', 'and', 'isofficial', '=', 'value']",How many official languages are spoken in Afghanistan?,"['How', 'many', 'official', 'languages', 'are', 'spoken', 'in', 'Afghanistan', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 9, False], None], '""Afghanistan""', None], 'and', [False, 2, [0, [0, 25, False], None], '""T""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1,"['SELECT', 'T1.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'GROUP', 'BY', 'T1.Name', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'group', 'by', 't1', '.', 'name', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is name of the country that speaks the largest number of languages?,"['What', 'is', 'name', 'of', 'the', 'country', 'that', 'speaks', 'the', 'largest', 'number', 'of', 'languages', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [[0, 9, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
world_1,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1,"['SELECT', 'T1.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'GROUP', 'BY', 'T1.Name', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'group', 'by', 't1', '.', 'name', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Give the name of the nation that uses the greatest amount of languages.,"['Give', 'the', 'name', 'of', 'the', 'nation', 'that', 'uses', 'the', 'greatest', 'amount', 'of', 'languages', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [[0, 9, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
world_1,SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1,"['SELECT', 'T1.Continent', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'GROUP', 'BY', 'T1.Continent', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'continent', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'group', 'by', 't1', '.', 'continent', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which continent has the most diverse languages?,"['Which', 'continent', 'has', 'the', 'most', 'diverse', 'languages', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 10, False], None]]]], 'where': [], 'groupBy': [[0, 10, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
world_1,SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1,"['SELECT', 'T1.Continent', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'GROUP', 'BY', 'T1.Continent', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'continent', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'group', 'by', 't1', '.', 'continent', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which continent speaks the most languages?,"['Which', 'continent', 'speaks', 'the', 'most', 'languages', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 10, False], None]]]], 'where': [], 'groupBy': [[0, 10, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Dutch"")","['SELECT', 'COUNT', '(', '*', ')', 'FROM', '(', 'SELECT', 'T1.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'English', ""''"", 'INTERSECT', 'SELECT', 'T1.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'Dutch', ""''"", ')']","['select', 'count', '(', '*', ')', 'from', '(', 'select', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', 'intersect', 'select', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', ')']",How many countries speak both English and Dutch?,"['How', 'many', 'countries', 'speak', 'both', 'English', 'and', 'Dutch', '?']","{'from': {'table_units': [['sql', {'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""English""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""Dutch""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Dutch"")","['SELECT', 'COUNT', '(', '*', ')', 'FROM', '(', 'SELECT', 'T1.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'English', ""''"", 'INTERSECT', 'SELECT', 'T1.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'Dutch', ""''"", ')']","['select', 'count', '(', '*', ')', 'from', '(', 'select', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', 'intersect', 'select', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', ')']",What is the number of nations that use English and Dutch?,"['What', 'is', 'the', 'number', 'of', 'nations', 'that', 'use', 'English', 'and', 'Dutch', '?']","{'from': {'table_units': [['sql', {'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""English""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""Dutch""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""French""","['SELECT', 'T1.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'English', ""''"", 'INTERSECT', 'SELECT', 'T1.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'French', ""''""]","['select', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', 'intersect', 'select', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value']",What are the names of nations speak both English and French?,"['What', 'are', 'the', 'names', 'of', 'nations', 'speak', 'both', 'English', 'and', 'French', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""English""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""French""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
world_1,"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""French""","['SELECT', 'T1.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'English', ""''"", 'INTERSECT', 'SELECT', 'T1.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'French', ""''""]","['select', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', 'intersect', 'select', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value']",Give the names of nations that speak both English and French.,"['Give', 'the', 'names', 'of', 'nations', 'that', 'speak', 'both', 'English', 'and', 'French', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""English""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""French""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
world_1,"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND T2.IsOfficial  =  ""T"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""French"" AND T2.IsOfficial  =  ""T""","['SELECT', 'T1.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'English', ""''"", 'AND', 'T2.IsOfficial', '=', '``', 'T', ""''"", 'INTERSECT', 'SELECT', 'T1.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'French', ""''"", 'AND', 'T2.IsOfficial', '=', '``', 'T', ""''""]","['select', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', 'and', 't2', '.', 'isofficial', '=', 'value', 'intersect', 'select', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', 'and', 't2', '.', 'isofficial', '=', 'value']",What are the names of nations where both English and French are official languages?,"['What', 'are', 'the', 'names', 'of', 'nations', 'where', 'both', 'English', 'and', 'French', 'are', 'official', 'languages', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""English""', None], 'and', [False, 2, [0, [0, 25, False], None], '""T""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""French""', None], 'and', [False, 2, [0, [0, 25, False], None], '""T""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
world_1,"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND T2.IsOfficial  =  ""T"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""French"" AND T2.IsOfficial  =  ""T""","['SELECT', 'T1.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'English', ""''"", 'AND', 'T2.IsOfficial', '=', '``', 'T', ""''"", 'INTERSECT', 'SELECT', 'T1.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'French', ""''"", 'AND', 'T2.IsOfficial', '=', '``', 'T', ""''""]","['select', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', 'and', 't2', '.', 'isofficial', '=', 'value', 'intersect', 'select', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', 'and', 't2', '.', 'isofficial', '=', 'value']",Give the names of countries with English and French as official languages.,"['Give', 'the', 'names', 'of', 'countries', 'with', 'English', 'and', 'French', 'as', 'official', 'languages', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""English""', None], 'and', [False, 2, [0, [0, 25, False], None], '""T""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""French""', None], 'and', [False, 2, [0, [0, 25, False], None], '""T""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
world_1,"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Chinese""","['SELECT', 'COUNT', '(', 'DISTINCT', 'Continent', ')', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'Chinese', ""''""]","['select', 'count', '(', 'distinct', 'continent', ')', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value']",What is the number of distinct continents where Chinese is spoken?,"['What', 'is', 'the', 'number', 'of', 'distinct', 'continents', 'where', 'Chinese', 'is', 'spoken', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[3, [0, [0, 10, True], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""Chinese""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Chinese""","['SELECT', 'COUNT', '(', 'DISTINCT', 'Continent', ')', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'Chinese', ""''""]","['select', 'count', '(', 'distinct', 'continent', ')', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value']",How many continents speak Chinese?,"['How', 'many', 'continents', 'speak', 'Chinese', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[3, [0, [0, 10, True], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""Chinese""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" OR T2.Language  =  ""Dutch""","['SELECT', 'DISTINCT', 'T1.Region', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'English', ""''"", 'OR', 'T2.Language', '=', '``', 'Dutch', ""''""]","['select', 'distinct', 't1', '.', 'region', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', 'or', 't2', '.', 'language', '=', 'value']",What are the regions that use English or Dutch?,"['What', 'are', 'the', 'regions', 'that', 'use', 'English', 'or', 'Dutch', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [True, [[0, [0, [0, 11, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""English""', None], 'or', [False, 2, [0, [0, 24, False], None], '""Dutch""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" OR T2.Language  =  ""Dutch""","['SELECT', 'DISTINCT', 'T1.Region', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'English', ""''"", 'OR', 'T2.Language', '=', '``', 'Dutch', ""''""]","['select', 'distinct', 't1', '.', 'region', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', 'or', 't2', '.', 'language', '=', 'value']",Which regions speak Dutch or English?,"['Which', 'regions', 'speak', 'Dutch', 'or', 'English', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [True, [[0, [0, [0, 11, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""English""', None], 'or', [False, 2, [0, [0, 24, False], None], '""Dutch""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  ""english"" and isofficial  =  ""t"" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  ""dutch"" and isofficial  =  ""t""","['select', 't1.name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1.code', '=', 't2.countrycode', 'where', 't2.language', '=', '""english""', 'and', 'isofficial', '=', '""t""', 'union', 'select', 't1.name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1.code', '=', 't2.countrycode', 'where', 't2.language', '=', '""dutch""', 'and', 'isofficial', '=', '""t""']","['select', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', 'and', 'isofficial', '=', 'value', 'union', 'select', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', 'and', 'isofficial', '=', 'value']",What are the countries where either English or Dutch is the official language ?,"['What', 'are', 'the', 'countries', 'where', 'either', 'English', 'or', 'Dutch', 'is', 'the', 'official', 'language', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""english""', None], 'and', [False, 2, [0, [0, 25, False], None], '""t""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': {'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""dutch""', None], 'and', [False, 2, [0, [0, 25, False], None], '""t""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'except': None}"
world_1,"SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND IsOfficial  =  ""T"" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Dutch"" AND IsOfficial  =  ""T""","['SELECT', '*', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'English', ""''"", 'AND', 'IsOfficial', '=', '``', 'T', ""''"", 'UNION', 'SELECT', '*', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'Dutch', ""''"", 'AND', 'IsOfficial', '=', '``', 'T', ""''""]","['select', '*', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', 'and', 'isofficial', '=', 'value', 'union', 'select', '*', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', 'and', 'isofficial', '=', 'value']",Which countries have either English or Dutch as an official language?,"['Which', 'countries', 'have', 'either', 'English', 'or', 'Dutch', 'as', 'an', 'official', 'language', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""English""', None], 'and', [False, 2, [0, [0, 25, False], None], '""T""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': {'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""Dutch""', None], 'and', [False, 2, [0, [0, 25, False], None], '""T""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'except': None}"
world_1,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  ""Asia"" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1","['SELECT', 'T2.Language', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T1.Continent', '=', '``', 'Asia', ""''"", 'GROUP', 'BY', 'T2.Language', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't2', '.', 'language', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't1', '.', 'continent', '=', 'value', 'group', 'by', 't2', '.', 'language', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which language is the most popular on the Asian continent?,"['Which', 'language', 'is', 'the', 'most', 'popular', 'on', 'the', 'Asian', 'continent', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 24, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Asia""', None]], 'groupBy': [[0, 24, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  ""Asia"" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1","['SELECT', 'T2.Language', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T1.Continent', '=', '``', 'Asia', ""''"", 'GROUP', 'BY', 'T2.Language', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't2', '.', 'language', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't1', '.', 'continent', '=', 'value', 'group', 'by', 't2', '.', 'language', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the language that is used by the largest number of Asian nations?,"['What', 'is', 'the', 'language', 'that', 'is', 'used', 'by', 'the', 'largest', 'number', 'of', 'Asian', 'nations', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 24, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Asia""', None]], 'groupBy': [[0, 24, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  ""Republic"" GROUP BY T2.Language HAVING COUNT(*)  =  1","['SELECT', 'T2.Language', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T1.GovernmentForm', '=', '``', 'Republic', ""''"", 'GROUP', 'BY', 'T2.Language', 'HAVING', 'COUNT', '(', '*', ')', '=', '1']","['select', 't2', '.', 'language', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't1', '.', 'governmentform', '=', 'value', 'group', 'by', 't2', '.', 'language', 'having', 'count', '(', '*', ')', '=', 'value']",Which languages are spoken by only one country in republic governments?,"['Which', 'languages', 'are', 'spoken', 'by', 'only', 'one', 'country', 'in', 'republic', 'governments', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 24, False], None]]]], 'where': [[False, 2, [0, [0, 19, False], None], '""Republic""', None]], 'groupBy': [[0, 24, False]], 'having': [[False, 2, [0, [3, 0, False], None], 1.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  ""Republic"" GROUP BY T2.Language HAVING COUNT(*)  =  1","['SELECT', 'T2.Language', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T1.GovernmentForm', '=', '``', 'Republic', ""''"", 'GROUP', 'BY', 'T2.Language', 'HAVING', 'COUNT', '(', '*', ')', '=', '1']","['select', 't2', '.', 'language', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't1', '.', 'governmentform', '=', 'value', 'group', 'by', 't2', '.', 'language', 'having', 'count', '(', '*', ')', '=', 'value']",What languages are only used by a single country with a republic government?,"['What', 'languages', 'are', 'only', 'used', 'by', 'a', 'single', 'country', 'with', 'a', 'republic', 'government', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 24, False], None]]]], 'where': [[False, 2, [0, [0, 19, False], None], '""Republic""', None]], 'groupBy': [[0, 24, False]], 'having': [[False, 2, [0, [3, 0, False], None], 1.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  ""English"" ORDER BY T1.Population DESC LIMIT 1","['SELECT', 'T1.Name', ',', 'T1.Population', 'FROM', 'city', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.CountryCode', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'English', ""''"", 'ORDER', 'BY', 'T1.Population', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'name', ',', 't1', '.', 'population', 'from', 'city', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'countrycode', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', 'order', 'by', 't1', '.', 'population', 'desc', 'limit', 'value']",Find the city with the largest population that uses English.,"['Find', 'the', 'city', 'with', 'the', 'largest', 'population', 'that', 'uses', 'English', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 5, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""English""', None]], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 5, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  ""English"" ORDER BY T1.Population DESC LIMIT 1","['SELECT', 'T1.Name', ',', 'T1.Population', 'FROM', 'city', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.CountryCode', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'English', ""''"", 'ORDER', 'BY', 'T1.Population', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'name', ',', 't1', '.', 'population', 'from', 'city', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'countrycode', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', 'order', 'by', 't1', '.', 'population', 'desc', 'limit', 'value']",What is the most populace city that speaks English?,"['What', 'is', 'the', 'most', 'populace', 'city', 'that', 'speaks', 'English', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 5, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""English""', None]], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 5, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  ""Asia"" ORDER BY SurfaceArea DESC LIMIT 1","['SELECT', 'Name', ',', 'Population', ',', 'LifeExpectancy', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Asia', ""''"", 'ORDER', 'BY', 'SurfaceArea', 'DESC', 'LIMIT', '1']","['select', 'name', ',', 'population', ',', 'lifeexpectancy', 'from', 'country', 'where', 'continent', '=', 'value', 'order', 'by', 'surfacearea', 'desc', 'limit', 'value']","Find the name, population and expected life length of asian country with the largest area?","['Find', 'the', 'name', ',', 'population', 'and', 'expected', 'life', 'length', 'of', 'asian', 'country', 'with', 'the', 'largest', 'area', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 14, False], None]], [0, [0, [0, 15, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Asia""', None]], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 12, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  ""Asia"" ORDER BY SurfaceArea DESC LIMIT 1","['SELECT', 'Name', ',', 'Population', ',', 'LifeExpectancy', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Asia', ""''"", 'ORDER', 'BY', 'SurfaceArea', 'DESC', 'LIMIT', '1']","['select', 'name', ',', 'population', ',', 'lifeexpectancy', 'from', 'country', 'where', 'continent', '=', 'value', 'order', 'by', 'surfacearea', 'desc', 'limit', 'value']","What are the name, population, and life expectancy of the largest Asian country by land?","['What', 'are', 'the', 'name', ',', 'population', ',', 'and', 'life', 'expectancy', 'of', 'the', 'largest', 'Asian', 'country', 'by', 'land', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 14, False], None]], [0, [0, [0, 15, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Asia""', None]], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 12, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND T2.IsOfficial  =  ""T"")","['SELECT', 'avg', '(', 'LifeExpectancy', ')', 'FROM', 'country', 'WHERE', 'Name', 'NOT', 'IN', '(', 'SELECT', 'T1.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'English', ""''"", 'AND', 'T2.IsOfficial', '=', '``', 'T', ""''"", ')']","['select', 'avg', '(', 'lifeexpectancy', ')', 'from', 'country', 'where', 'name', 'not', 'in', '(', 'select', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', 'and', 't2', '.', 'isofficial', '=', 'value', ')']",What is average life expectancy in the countries where English is not the official language?,"['What', 'is', 'average', 'life', 'expectancy', 'in', 'the', 'countries', 'where', 'English', 'is', 'not', 'the', 'official', 'language', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[5, [0, [0, 15, False], None]]]], 'where': [[True, 8, [0, [0, 9, False], None], {'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""English""', None], 'and', [False, 2, [0, [0, 25, False], None], '""T""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND T2.IsOfficial  =  ""T"")","['SELECT', 'avg', '(', 'LifeExpectancy', ')', 'FROM', 'country', 'WHERE', 'Name', 'NOT', 'IN', '(', 'SELECT', 'T1.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'English', ""''"", 'AND', 'T2.IsOfficial', '=', '``', 'T', ""''"", ')']","['select', 'avg', '(', 'lifeexpectancy', ')', 'from', 'country', 'where', 'name', 'not', 'in', '(', 'select', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', 'and', 't2', '.', 'isofficial', '=', 'value', ')']",Give the mean life expectancy of countries in which English is not the official language.,"['Give', 'the', 'mean', 'life', 'expectancy', 'of', 'countries', 'in', 'which', 'English', 'is', 'not', 'the', 'official', 'language', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[5, [0, [0, 15, False], None]]]], 'where': [[True, 8, [0, [0, 9, False], None], {'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""English""', None], 'and', [False, 2, [0, [0, 25, False], None], '""T""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"")","['SELECT', 'sum', '(', 'Population', ')', 'FROM', 'country', 'WHERE', 'Name', 'NOT', 'IN', '(', 'SELECT', 'T1.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'English', ""''"", ')']","['select', 'sum', '(', 'population', ')', 'from', 'country', 'where', 'name', 'not', 'in', '(', 'select', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', ')']",What is the total number of people living in the nations that do not use English?,"['What', 'is', 'the', 'total', 'number', 'of', 'people', 'living', 'in', 'the', 'nations', 'that', 'do', 'not', 'use', 'English', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[4, [0, [0, 14, False], None]]]], 'where': [[True, 8, [0, [0, 9, False], None], {'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""English""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"")","['SELECT', 'sum', '(', 'Population', ')', 'FROM', 'country', 'WHERE', 'Name', 'NOT', 'IN', '(', 'SELECT', 'T1.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T2.Language', '=', '``', 'English', ""''"", ')']","['select', 'sum', '(', 'population', ')', 'from', 'country', 'where', 'name', 'not', 'in', '(', 'select', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't2', '.', 'language', '=', 'value', ')']",How many people live in countries that do not speak English?,"['How', 'many', 'people', 'live', 'in', 'countries', 'that', 'do', 'not', 'speak', 'English', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[4, [0, [0, 14, False], None]]]], 'where': [[True, 8, [0, [0, 9, False], None], {'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""English""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  ""Beatrix"" AND T2.IsOfficial  =  ""T""","['SELECT', 'T2.Language', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T1.HeadOfState', '=', '``', 'Beatrix', ""''"", 'AND', 'T2.IsOfficial', '=', '``', 'T', ""''""]","['select', 't2', '.', 'language', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't1', '.', 'headofstate', '=', 'value', 'and', 't2', '.', 'isofficial', '=', 'value']",What is the official language spoken in the country whose head of state is Beatrix?,"['What', 'is', 'the', 'official', 'language', 'spoken', 'in', 'the', 'country', 'whose', 'head', 'of', 'state', 'is', 'Beatrix', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 24, False], None]]]], 'where': [[False, 2, [0, [0, 20, False], None], '""Beatrix""', None], 'and', [False, 2, [0, [0, 25, False], None], '""T""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  ""Beatrix"" AND T2.IsOfficial  =  ""T""","['SELECT', 'T2.Language', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'T1.HeadOfState', '=', '``', 'Beatrix', ""''"", 'AND', 'T2.IsOfficial', '=', '``', 'T', ""''""]","['select', 't2', '.', 'language', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 't1', '.', 'headofstate', '=', 'value', 'and', 't2', '.', 'isofficial', '=', 'value']",What is the official language used in the country the name of whose head of state is Beatrix.,"['What', 'is', 'the', 'official', 'language', 'used', 'in', 'the', 'country', 'the', 'name', 'of', 'whose', 'head', 'of', 'state', 'is', 'Beatrix', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 24, False], None]]]], 'where': [[False, 2, [0, [0, 20, False], None], '""Beatrix""', None], 'and', [False, 2, [0, [0, 25, False], None], '""T""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  ""T""","['SELECT', 'count', '(', 'DISTINCT', 'T2.Language', ')', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'IndepYear', '<', '1930', 'AND', 'T2.IsOfficial', '=', '``', 'T', ""''""]","['select', 'count', '(', 'distinct', 't2', '.', 'language', ')', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 'indepyear', '<', 'value', 'and', 't2', '.', 'isofficial', '=', 'value']",What is the total number of unique official languages spoken in the countries that are founded before 1930?,"['What', 'is', 'the', 'total', 'number', 'of', 'unique', 'official', 'languages', 'spoken', 'in', 'the', 'countries', 'that', 'are', 'founded', 'before', '1930', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[3, [0, [0, 24, True], None]]]], 'where': [[False, 4, [0, [0, 13, False], None], 1930.0, None], 'and', [False, 2, [0, [0, 25, False], None], '""T""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  ""T""","['SELECT', 'count', '(', 'DISTINCT', 'T2.Language', ')', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'WHERE', 'IndepYear', '<', '1930', 'AND', 'T2.IsOfficial', '=', '``', 'T', ""''""]","['select', 'count', '(', 'distinct', 't2', '.', 'language', ')', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'where', 'indepyear', '<', 'value', 'and', 't2', '.', 'isofficial', '=', 'value']","For the countries founded before 1930, what is the total number of distinct official languages?","['For', 'the', 'countries', 'founded', 'before', '1930', ',', 'what', 'is', 'the', 'total', 'number', 'of', 'distinct', 'official', 'languages', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[3, [0, [0, 24, True], None]]]], 'where': [[False, 4, [0, [0, 13, False], None], 1930.0, None], 'and', [False, 2, [0, [0, 25, False], None], '""T""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  ""Europe"")","['SELECT', 'Name', 'FROM', 'country', 'WHERE', 'SurfaceArea', '>', '(', 'SELECT', 'min', '(', 'SurfaceArea', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Europe', ""''"", ')']","['select', 'name', 'from', 'country', 'where', 'surfacearea', '>', '(', 'select', 'min', '(', 'surfacearea', ')', 'from', 'country', 'where', 'continent', '=', 'value', ')']",What are the countries that have greater surface area than any country in Europe?,"['What', 'are', 'the', 'countries', 'that', 'have', 'greater', 'surface', 'area', 'than', 'any', 'country', 'in', 'Europe', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 3, [0, [0, 12, False], None], {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[2, [0, [0, 12, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Europe""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  ""Europe"")","['SELECT', 'Name', 'FROM', 'country', 'WHERE', 'SurfaceArea', '>', '(', 'SELECT', 'min', '(', 'SurfaceArea', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Europe', ""''"", ')']","['select', 'name', 'from', 'country', 'where', 'surfacearea', '>', '(', 'select', 'min', '(', 'surfacearea', ')', 'from', 'country', 'where', 'continent', '=', 'value', ')']",Which countries have greater area than that of any country in Europe?,"['Which', 'countries', 'have', 'greater', 'area', 'than', 'that', 'of', 'any', 'country', 'in', 'Europe', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 3, [0, [0, 12, False], None], {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[2, [0, [0, 12, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Europe""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Name FROM country WHERE Continent  =  ""Africa""  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  ""Asia"")","['SELECT', 'Name', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Africa', ""''"", 'AND', 'population', '<', '(', 'SELECT', 'max', '(', 'population', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Asia', ""''"", ')']","['select', 'name', 'from', 'country', 'where', 'continent', '=', 'value', 'and', 'population', '<', '(', 'select', 'max', '(', 'population', ')', 'from', 'country', 'where', 'continent', '=', 'value', ')']",What are the African countries that have a  population less than any country in Asia?,"['What', 'are', 'the', 'African', 'countries', 'that', 'have', 'a', 'population', 'less', 'than', 'any', 'country', 'in', 'Asia', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Africa""', None], 'and', [False, 4, [0, [0, 14, False], None], {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[1, [0, [0, 14, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Asia""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Name FROM country WHERE Continent  =  ""Africa""  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  ""Asia"")","['SELECT', 'Name', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Africa', ""''"", 'AND', 'population', '<', '(', 'SELECT', 'min', '(', 'population', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Asia', ""''"", ')']","['select', 'name', 'from', 'country', 'where', 'continent', '=', 'value', 'and', 'population', '<', '(', 'select', 'min', '(', 'population', ')', 'from', 'country', 'where', 'continent', '=', 'value', ')']",Which African countries have a smaller population than that of any country in Asia?,"['Which', 'African', 'countries', 'have', 'a', 'smaller', 'population', 'than', 'that', 'of', 'any', 'country', 'in', 'Asia', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Africa""', None], 'and', [False, 4, [0, [0, 14, False], None], {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[2, [0, [0, 14, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Asia""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Name FROM country WHERE Continent  =  ""Asia""  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  ""Africa"")","['SELECT', 'Name', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Asia', ""''"", 'AND', 'population', '>', '(', 'SELECT', 'max', '(', 'population', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Africa', ""''"", ')']","['select', 'name', 'from', 'country', 'where', 'continent', '=', 'value', 'and', 'population', '>', '(', 'select', 'max', '(', 'population', ')', 'from', 'country', 'where', 'continent', '=', 'value', ')']",Which Asian countries have a population that is larger than any country in Africa?,"['Which', 'Asian', 'countries', 'have', 'a', 'population', 'that', 'is', 'larger', 'than', 'any', 'country', 'in', 'Africa', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Asia""', None], 'and', [False, 3, [0, [0, 14, False], None], {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[1, [0, [0, 14, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Africa""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Name FROM country WHERE Continent  =  ""Asia""  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  ""Africa"")","['SELECT', 'Name', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Asia', ""''"", 'AND', 'population', '>', '(', 'SELECT', 'min', '(', 'population', ')', 'FROM', 'country', 'WHERE', 'Continent', '=', '``', 'Africa', ""''"", ')']","['select', 'name', 'from', 'country', 'where', 'continent', '=', 'value', 'and', 'population', '>', '(', 'select', 'min', '(', 'population', ')', 'from', 'country', 'where', 'continent', '=', 'value', ')']",What are the Asian countries which have a population larger than that of any country in Africa?,"['What', 'are', 'the', 'Asian', 'countries', 'which', 'have', 'a', 'population', 'larger', 'than', 'that', 'of', 'any', 'country', 'in', 'Africa', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Asia""', None], 'and', [False, 3, [0, [0, 14, False], None], {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[2, [0, [0, 14, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Africa""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  ""English""","['SELECT', 'CountryCode', 'FROM', 'countrylanguage', 'EXCEPT', 'SELECT', 'CountryCode', 'FROM', 'countrylanguage', 'WHERE', 'LANGUAGE', '=', '``', 'English', ""''""]","['select', 'countrycode', 'from', 'countrylanguage', 'except', 'select', 'countrycode', 'from', 'countrylanguage', 'where', 'language', '=', 'value']",What are the country codes for countries that do not speak English?,"['What', 'are', 'the', 'country', 'codes', 'for', 'countries', 'that', 'do', 'not', 'speak', 'English', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 23, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 23, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""English""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
world_1,"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  ""English""","['SELECT', 'CountryCode', 'FROM', 'countrylanguage', 'EXCEPT', 'SELECT', 'CountryCode', 'FROM', 'countrylanguage', 'WHERE', 'LANGUAGE', '=', '``', 'English', ""''""]","['select', 'countrycode', 'from', 'countrylanguage', 'except', 'select', 'countrycode', 'from', 'countrylanguage', 'where', 'language', '=', 'value']",Return the country codes for countries that do not speak English.,"['Return', 'the', 'country', 'codes', 'for', 'countries', 'that', 'do', 'not', 'speak', 'English', '.']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 23, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 23, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""English""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
world_1,"SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != ""English""","['SELECT', 'DISTINCT', 'CountryCode', 'FROM', 'countrylanguage', 'WHERE', 'LANGUAGE', '!', '=', '``', 'English', ""''""]","['select', 'distinct', 'countrycode', 'from', 'countrylanguage', 'where', 'language', '!', '=', 'value']",What are the country codes of countries where people use languages other than English?,"['What', 'are', 'the', 'country', 'codes', 'of', 'countries', 'where', 'people', 'use', 'languages', 'other', 'than', 'English', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [True, [[0, [0, [0, 23, False], None]]]], 'where': [[False, 7, [0, [0, 24, False], None], '""English""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != ""English""","['SELECT', 'DISTINCT', 'CountryCode', 'FROM', 'countrylanguage', 'WHERE', 'LANGUAGE', '!', '=', '``', 'English', ""''""]","['select', 'distinct', 'countrycode', 'from', 'countrylanguage', 'where', 'language', '!', '=', 'value']",Give the country codes for countries in which people speak langauges that are not English.,"['Give', 'the', 'country', 'codes', 'for', 'countries', 'in', 'which', 'people', 'speak', 'langauges', 'that', 'are', 'not', 'English', '.']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [True, [[0, [0, [0, 23, False], None]]]], 'where': [[False, 7, [0, [0, 24, False], None], '""English""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Code FROM country WHERE GovernmentForm != ""Republic"" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  ""English""","['SELECT', 'Code', 'FROM', 'country', 'WHERE', 'GovernmentForm', '!', '=', '``', 'Republic', ""''"", 'EXCEPT', 'SELECT', 'CountryCode', 'FROM', 'countrylanguage', 'WHERE', 'LANGUAGE', '=', '``', 'English', ""''""]","['select', 'code', 'from', 'country', 'where', 'governmentform', '!', '=', 'value', 'except', 'select', 'countrycode', 'from', 'countrylanguage', 'where', 'language', '=', 'value']",What are the codes of the countries that do not speak English and whose government forms are not Republic?,"['What', 'are', 'the', 'codes', 'of', 'the', 'countries', 'that', 'do', 'not', 'speak', 'English', 'and', 'whose', 'government', 'forms', 'are', 'not', 'Republic', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 8, False], None]]]], 'where': [[False, 7, [0, [0, 19, False], None], '""Republic""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 23, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""English""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
world_1,"SELECT Code FROM country WHERE GovernmentForm != ""Republic"" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  ""English""","['SELECT', 'Code', 'FROM', 'country', 'WHERE', 'GovernmentForm', '!', '=', '``', 'Republic', ""''"", 'EXCEPT', 'SELECT', 'CountryCode', 'FROM', 'countrylanguage', 'WHERE', 'LANGUAGE', '=', '``', 'English', ""''""]","['select', 'code', 'from', 'country', 'where', 'governmentform', '!', '=', 'value', 'except', 'select', 'countrycode', 'from', 'countrylanguage', 'where', 'language', '=', 'value']",Return the codes of countries that do not speak English and do not have Republics for governments.,"['Return', 'the', 'codes', 'of', 'countries', 'that', 'do', 'not', 'speak', 'English', 'and', 'do', 'not', 'have', 'Republics', 'for', 'governments', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 8, False], None]]]], 'where': [[False, 7, [0, [0, 19, False], None], '""Republic""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 23, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""English""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
world_1,SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English'),"['SELECT', 'DISTINCT', 'T2.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'city', 'AS', 'T2', 'ON', 'T2.CountryCode', '=', 'T1.Code', 'WHERE', 'T1.Continent', '=', ""'Europe"", ""'"", 'AND', 'T1.Name', 'NOT', 'IN', '(', 'SELECT', 'T3.Name', 'FROM', 'country', 'AS', 'T3', 'JOIN', 'countrylanguage', 'AS', 'T4', 'ON', 'T3.Code', '=', 'T4.CountryCode', 'WHERE', 'T4.IsOfficial', '=', ""'T"", ""'"", 'AND', 'T4.Language', '=', ""'English"", ""'"", ')']","['select', 'distinct', 't2', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'city', 'as', 't2', 'on', 't2', '.', 'countrycode', '=', 't1', '.', 'code', 'where', 't1', '.', 'continent', '=', 'value', 'and', 't1', '.', 'name', 'not', 'in', '(', 'select', 't3', '.', 'name', 'from', 'country', 'as', 't3', 'join', 'countrylanguage', 'as', 't4', 'on', 't3', '.', 'code', '=', 't4', '.', 'countrycode', 'where', 't4', '.', 'isofficial', '=', 'value', 'and', 't4', '.', 'language', '=', 'value', ')']",Which cities are in European countries where English is not the official language?,"['Which', 'cities', 'are', 'in', 'European', 'countries', 'where', 'English', 'is', 'not', 'the', 'official', 'language', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None]]}, 'select': [True, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Europe""', None], 'and', [True, 8, [0, [0, 9, False], None], {'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 25, False], None], '""T""', None], 'and', [False, 2, [0, [0, 24, False], None], '""English""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English'),"['SELECT', 'DISTINCT', 'T2.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'city', 'AS', 'T2', 'ON', 'T2.CountryCode', '=', 'T1.Code', 'WHERE', 'T1.Continent', '=', ""'Europe"", ""'"", 'AND', 'T1.Name', 'NOT', 'IN', '(', 'SELECT', 'T3.Name', 'FROM', 'country', 'AS', 'T3', 'JOIN', 'countrylanguage', 'AS', 'T4', 'ON', 'T3.Code', '=', 'T4.CountryCode', 'WHERE', 'T4.IsOfficial', '=', ""'T"", ""'"", 'AND', 'T4.Language', '=', ""'English"", ""'"", ')']","['select', 'distinct', 't2', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'city', 'as', 't2', 'on', 't2', '.', 'countrycode', '=', 't1', '.', 'code', 'where', 't1', '.', 'continent', '=', 'value', 'and', 't1', '.', 'name', 'not', 'in', '(', 'select', 't3', '.', 'name', 'from', 'country', 'as', 't3', 'join', 'countrylanguage', 'as', 't4', 'on', 't3', '.', 'code', '=', 't4', '.', 'countrycode', 'where', 't4', '.', 'isofficial', '=', 'value', 'and', 't4', '.', 'language', '=', 'value', ')']",What are the names of cities in Europe for which English is not the official language?,"['What', 'are', 'the', 'names', 'of', 'cities', 'in', 'Europe', 'for', 'which', 'English', 'is', 'not', 'the', 'official', 'language', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 3, False], None], [0, 8, False], None]]}, 'select': [True, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Europe""', None], 'and', [True, 8, [0, [0, 9, False], None], {'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 25, False], None], '""T""', None], 'and', [False, 2, [0, [0, 24, False], None], '""English""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  ""asia""","['select', 'distinct', 't3.name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1.code', '=', 't2.countrycode', 'join', 'city', 'as', 't3', 'on', 't1.code', '=', 't3.countrycode', 'where', 't2.isofficial', '=', '""t""', 'and', 't2.language', '=', '""chinese""', 'and', 't1.continent', '=', '""asia""']","['select', 'distinct', 't3', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'join', 'city', 'as', 't3', 'on', 't1', '.', 'code', '=', 't3', '.', 'countrycode', 'where', 't2', '.', 'isofficial', '=', 'value', 'and', 't2', '.', 'language', '=', 'value', 'and', 't1', '.', 'continent', '=', 'value']",Which unique cities are in Asian countries where Chinese is the official language ?,"['Which', 'unique', 'cities', 'are', 'in', 'Asian', 'countries', 'where', 'Chinese', 'is', 'the', 'official', 'language', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None], 'and', [False, 2, [0, [0, 8, False], None], [0, 3, False], None]]}, 'select': [True, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 25, False], None], '""t""', None], 'and', [False, 2, [0, [0, 24, False], None], '""chinese""', None], 'and', [False, 2, [0, [0, 10, False], None], '""asia""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  ""Asia""","['SELECT', 'DISTINCT', 'T3.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'JOIN', 'city', 'AS', 'T3', 'ON', 'T1.Code', '=', 'T3.CountryCode', 'WHERE', 'T2.IsOfficial', '=', ""'T"", ""'"", 'AND', 'T2.Language', '=', ""'Chinese"", ""'"", 'AND', 'T1.Continent', '=', '``', 'Asia', ""''""]","['select', 'distinct', 't3', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'join', 'city', 'as', 't3', 'on', 't1', '.', 'code', '=', 't3', '.', 'countrycode', 'where', 't2', '.', 'isofficial', '=', 'value', 'and', 't2', '.', 'language', '=', 'value', 'and', 't1', '.', 'continent', '=', 'value']",Return the different names of cities that are in Asia and for which Chinese is the official language.,"['Return', 'the', 'different', 'names', 'of', 'cities', 'that', 'are', 'in', 'Asia', 'and', 'for', 'which', 'Chinese', 'is', 'the', 'official', 'language', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None], 'and', [False, 2, [0, [0, 8, False], None], [0, 3, False], None]]}, 'select': [True, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 25, False], None], '""T""', None], 'and', [False, 2, [0, [0, 24, False], None], '""Chinese""', None], 'and', [False, 2, [0, [0, 10, False], None], '""Asia""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1","['SELECT', 'Name', ',', 'SurfaceArea', ',', 'IndepYear', 'FROM', 'country', 'ORDER', 'BY', 'Population', 'LIMIT', '1']","['select', 'name', ',', 'surfacearea', ',', 'indepyear', 'from', 'country', 'order', 'by', 'population', 'limit', 'value']","What are the name, independence year, and surface area of the country with the smallest population?","['What', 'are', 'the', 'name', ',', 'independence', 'year', ',', 'and', 'surface', 'area', 'of', 'the', 'country', 'with', 'the', 'smallest', 'population', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 12, False], None]], [0, [0, [0, 13, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 14, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1","['SELECT', 'Name', ',', 'SurfaceArea', ',', 'IndepYear', 'FROM', 'country', 'ORDER', 'BY', 'Population', 'LIMIT', '1']","['select', 'name', ',', 'surfacearea', ',', 'indepyear', 'from', 'country', 'order', 'by', 'population', 'limit', 'value']","Give the name, year of independence, and surface area of the country that has the lowest population.","['Give', 'the', 'name', ',', 'year', 'of', 'independence', ',', 'and', 'surface', 'area', 'of', 'the', 'country', 'that', 'has', 'the', 'lowest', 'population', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 12, False], None]], [0, [0, [0, 13, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 14, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1","['SELECT', 'Name', ',', 'population', ',', 'HeadOfState', 'FROM', 'country', 'ORDER', 'BY', 'SurfaceArea', 'DESC', 'LIMIT', '1']","['select', 'name', ',', 'population', ',', 'headofstate', 'from', 'country', 'order', 'by', 'surfacearea', 'desc', 'limit', 'value']","What are the population, name and leader of the country with the largest area?","['What', 'are', 'the', 'population', ',', 'name', 'and', 'leader', 'of', 'the', 'country', 'with', 'the', 'largest', 'area', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 14, False], None]], [0, [0, [0, 20, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 12, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1","['SELECT', 'Name', ',', 'population', ',', 'HeadOfState', 'FROM', 'country', 'ORDER', 'BY', 'SurfaceArea', 'DESC', 'LIMIT', '1']","['select', 'name', ',', 'population', ',', 'headofstate', 'from', 'country', 'order', 'by', 'surfacearea', 'desc', 'limit', 'value']","Give the name, population, and head of state for the country that has the largest area.","['Give', 'the', 'name', ',', 'population', ',', 'and', 'head', 'of', 'state', 'for', 'the', 'country', 'that', 'has', 'the', 'largest', 'area', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 14, False], None]], [0, [0, [0, 20, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 12, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2","['SELECT', 'COUNT', '(', 'T2.Language', ')', ',', 'T1.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'GROUP', 'BY', 'T1.Name', 'HAVING', 'COUNT', '(', '*', ')', '>', '2']","['select', 'count', '(', 't2', '.', 'language', ')', ',', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'group', 'by', 't1', '.', 'name', 'having', 'count', '(', '*', ')', '>', 'value']",Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.,"['Return', 'the', 'country', 'name', 'and', 'the', 'numbers', 'of', 'languages', 'spoken', 'for', 'each', 'country', 'that', 'speaks', 'at', 'least', '3', 'languages', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[3, [0, [0, 24, False], None]], [0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [[0, 9, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2","['SELECT', 'COUNT', '(', 'T2.Language', ')', ',', 'T1.Name', 'FROM', 'country', 'AS', 'T1', 'JOIN', 'countrylanguage', 'AS', 'T2', 'ON', 'T1.Code', '=', 'T2.CountryCode', 'GROUP', 'BY', 'T1.Name', 'HAVING', 'COUNT', '(', '*', ')', '>', '2']","['select', 'count', '(', 't2', '.', 'language', ')', ',', 't1', '.', 'name', 'from', 'country', 'as', 't1', 'join', 'countrylanguage', 'as', 't2', 'on', 't1', '.', 'code', '=', 't2', '.', 'countrycode', 'group', 'by', 't1', '.', 'name', 'having', 'count', '(', '*', ')', '>', 'value']","What are the names of countries that speak more than 2 languages, as well as how many languages they speak?","['What', 'are', 'the', 'names', 'of', 'countries', 'that', 'speak', 'more', 'than', '2', 'languages', ',', 'as', 'well', 'as', 'how', 'many', 'languages', 'they', 'speak', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 23, False], None]]}, 'select': [False, [[3, [0, [0, 24, False], None]], [0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [[0, 9, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District","['SELECT', 'count', '(', '*', ')', ',', 'District', 'FROM', 'city', 'WHERE', 'Population', '>', '(', 'SELECT', 'avg', '(', 'Population', ')', 'FROM', 'city', ')', 'GROUP', 'BY', 'District']","['select', 'count', '(', '*', ')', ',', 'district', 'from', 'city', 'where', 'population', '>', '(', 'select', 'avg', '(', 'population', ')', 'from', 'city', ')', 'group', 'by', 'district']",Find the number of cities in each district whose population is greater than the average population of cities?,"['Find', 'the', 'number', 'of', 'cities', 'in', 'each', 'district', 'whose', 'population', 'is', 'greater', 'than', 'the', 'average', 'population', 'of', 'cities', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [[False, 3, [0, [0, 5, False], None], {'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[5, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [[0, 4, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District","['SELECT', 'count', '(', '*', ')', ',', 'District', 'FROM', 'city', 'WHERE', 'Population', '>', '(', 'SELECT', 'avg', '(', 'Population', ')', 'FROM', 'city', ')', 'GROUP', 'BY', 'District']","['select', 'count', '(', '*', ')', ',', 'district', 'from', 'city', 'where', 'population', '>', '(', 'select', 'avg', '(', 'population', ')', 'from', 'city', ')', 'group', 'by', 'district']",How many cities in each district have a population that is above the average population across all cities?,"['How', 'many', 'cities', 'in', 'each', 'district', 'have', 'a', 'population', 'that', 'is', 'above', 'the', 'average', 'population', 'across', 'all', 'cities', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]], [0, [0, [0, 4, False], None]]]], 'where': [[False, 3, [0, [0, 5, False], None], {'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[5, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [[0, 4, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72","['SELECT', 'sum', '(', 'Population', ')', ',', 'GovernmentForm', 'FROM', 'country', 'GROUP', 'BY', 'GovernmentForm', 'HAVING', 'avg', '(', 'LifeExpectancy', ')', '>', '72']","['select', 'sum', '(', 'population', ')', ',', 'governmentform', 'from', 'country', 'group', 'by', 'governmentform', 'having', 'avg', '(', 'lifeexpectancy', ')', '>', 'value']",Find the government form name and total population for each government form whose average life expectancy is longer than 72.,"['Find', 'the', 'government', 'form', 'name', 'and', 'total', 'population', 'for', 'each', 'government', 'form', 'whose', 'average', 'life', 'expectancy', 'is', 'longer', 'than', '72', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[4, [0, [0, 14, False], None]], [0, [0, [0, 19, False], None]]]], 'where': [], 'groupBy': [[0, 19, False]], 'having': [[False, 3, [0, [5, 15, False], None], 72.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72","['SELECT', 'sum', '(', 'Population', ')', ',', 'GovernmentForm', 'FROM', 'country', 'GROUP', 'BY', 'GovernmentForm', 'HAVING', 'avg', '(', 'LifeExpectancy', ')', '>', '72']","['select', 'sum', '(', 'population', ')', ',', 'governmentform', 'from', 'country', 'group', 'by', 'governmentform', 'having', 'avg', '(', 'lifeexpectancy', ')', '>', 'value']",What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?,"['What', 'are', 'the', 'different', 'government', 'forms', 'and', 'what', 'is', 'the', 'total', 'population', 'of', 'each', 'for', 'government', 'forms', 'that', 'have', 'an', 'average', 'life', 'expectancy', 'greater', 'than', '72', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[4, [0, [0, 14, False], None]], [0, [0, [0, 19, False], None]]]], 'where': [], 'groupBy': [[0, 19, False]], 'having': [[False, 3, [0, [5, 15, False], None], 72.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72","['SELECT', 'sum', '(', 'Population', ')', ',', 'avg', '(', 'LifeExpectancy', ')', ',', 'Continent', 'FROM', 'country', 'GROUP', 'BY', 'Continent', 'HAVING', 'avg', '(', 'LifeExpectancy', ')', '<', '72']","['select', 'sum', '(', 'population', ')', ',', 'avg', '(', 'lifeexpectancy', ')', ',', 'continent', 'from', 'country', 'group', 'by', 'continent', 'having', 'avg', '(', 'lifeexpectancy', ')', '<', 'value']",Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?,"['Find', 'the', 'average', 'life', 'expectancy', 'and', 'total', 'population', 'for', 'each', 'continent', 'where', 'the', 'average', 'life', 'expectancy', 'is', 'shorter', 'than', '72', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[4, [0, [0, 14, False], None]], [5, [0, [0, 15, False], None]], [0, [0, [0, 10, False], None]]]], 'where': [], 'groupBy': [[0, 10, False]], 'having': [[False, 4, [0, [5, 15, False], None], 72.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72","['SELECT', 'sum', '(', 'Population', ')', ',', 'avg', '(', 'LifeExpectancy', ')', ',', 'Continent', 'FROM', 'country', 'GROUP', 'BY', 'Continent', 'HAVING', 'avg', '(', 'LifeExpectancy', ')', '<', '72']","['select', 'sum', '(', 'population', ')', ',', 'avg', '(', 'lifeexpectancy', ')', ',', 'continent', 'from', 'country', 'group', 'by', 'continent', 'having', 'avg', '(', 'lifeexpectancy', ')', '<', 'value']","What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?","['What', 'are', 'the', 'different', 'continents', 'and', 'the', 'total', 'popuation', 'and', 'average', 'life', 'expectancy', 'corresponding', 'to', 'each', ',', 'for', 'continents', 'that', 'have', 'an', 'average', 'life', 'expectancy', 'less', 'than', '72', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[4, [0, [0, 14, False], None]], [5, [0, [0, 15, False], None]], [0, [0, [0, 10, False], None]]]], 'where': [], 'groupBy': [[0, 10, False]], 'having': [[False, 4, [0, [5, 15, False], None], 72.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5","['SELECT', 'Name', ',', 'SurfaceArea', 'FROM', 'country', 'ORDER', 'BY', 'SurfaceArea', 'DESC', 'LIMIT', '5']","['select', 'name', ',', 'surfacearea', 'from', 'country', 'order', 'by', 'surfacearea', 'desc', 'limit', 'value']",What are the names and areas of countries with the top 5 largest area?,"['What', 'are', 'the', 'names', 'and', 'areas', 'of', 'countries', 'with', 'the', 'top', '5', 'largest', 'area', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 12, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 12, False], None]]], 'limit': 5, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5","['SELECT', 'Name', ',', 'SurfaceArea', 'FROM', 'country', 'ORDER', 'BY', 'SurfaceArea', 'DESC', 'LIMIT', '5']","['select', 'name', ',', 'surfacearea', 'from', 'country', 'order', 'by', 'surfacearea', 'desc', 'limit', 'value']",Return the names and surface areas of the 5 largest countries.,"['Return', 'the', 'names', 'and', 'surface', 'areas', 'of', 'the', '5', 'largest', 'countries', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [0, [0, [0, 12, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 12, False], None]]], 'limit': 5, 'intersect': None, 'union': None, 'except': None}"
world_1,SELECT Name FROM country ORDER BY Population DESC LIMIT 3,"['SELECT', 'Name', 'FROM', 'country', 'ORDER', 'BY', 'Population', 'DESC', 'LIMIT', '3']","['select', 'name', 'from', 'country', 'order', 'by', 'population', 'desc', 'limit', 'value']",What are names of countries with the top 3 largest population?,"['What', 'are', 'names', 'of', 'countries', 'with', 'the', 'top', '3', 'largest', 'population', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 14, False], None]]], 'limit': 3, 'intersect': None, 'union': None, 'except': None}"
world_1,SELECT Name FROM country ORDER BY Population DESC LIMIT 3,"['SELECT', 'Name', 'FROM', 'country', 'ORDER', 'BY', 'Population', 'DESC', 'LIMIT', '3']","['select', 'name', 'from', 'country', 'order', 'by', 'population', 'desc', 'limit', 'value']",Return the names of the 3 most populated countries.,"['Return', 'the', 'names', 'of', 'the', '3', 'most', 'populated', 'countries', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 14, False], None]]], 'limit': 3, 'intersect': None, 'union': None, 'except': None}"
world_1,SELECT Name FROM country ORDER BY Population ASC LIMIT 3,"['SELECT', 'Name', 'FROM', 'country', 'ORDER', 'BY', 'Population', 'ASC', 'LIMIT', '3']","['select', 'name', 'from', 'country', 'order', 'by', 'population', 'asc', 'limit', 'value']",What are the names of the nations with the 3 lowest populations?,"['What', 'are', 'the', 'names', 'of', 'the', 'nations', 'with', 'the', '3', 'lowest', 'populations', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 14, False], None]]], 'limit': 3, 'intersect': None, 'union': None, 'except': None}"
world_1,SELECT Name FROM country ORDER BY Population ASC LIMIT 3,"['SELECT', 'Name', 'FROM', 'country', 'ORDER', 'BY', 'Population', 'ASC', 'LIMIT', '3']","['select', 'name', 'from', 'country', 'order', 'by', 'population', 'asc', 'limit', 'value']",Return the names of the 3 countries with the fewest people.,"['Return', 'the', 'names', 'of', 'the', '3', 'countries', 'with', 'the', 'fewest', 'people', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 14, False], None]]], 'limit': 3, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT count(*) FROM country WHERE continent  =  ""Asia""","['SELECT', 'count', '(', '*', ')', 'FROM', 'country', 'WHERE', 'continent', '=', '``', 'Asia', ""''""]","['select', 'count', '(', '*', ')', 'from', 'country', 'where', 'continent', '=', 'value']",how many countries are in Asia?,"['how', 'many', 'countries', 'are', 'in', 'Asia', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Asia""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT count(*) FROM country WHERE continent  =  ""Asia""","['SELECT', 'count', '(', '*', ')', 'FROM', 'country', 'WHERE', 'continent', '=', '``', 'Asia', ""''""]","['select', 'count', '(', '*', ')', 'from', 'country', 'where', 'continent', '=', 'value']",Count the number of countries in Asia.,"['Count', 'the', 'number', 'of', 'countries', 'in', 'Asia', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Asia""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Name FROM country WHERE continent  =  ""Europe"" AND Population  =  ""80000""","['SELECT', 'Name', 'FROM', 'country', 'WHERE', 'continent', '=', '``', 'Europe', ""''"", 'AND', 'Population', '=', '``', '80000', ""''""]","['select', 'name', 'from', 'country', 'where', 'continent', '=', 'value', 'and', 'population', '=', 'value']",What are the names of the countries that are in the continent of Europe and have a population of 80000?,"['What', 'are', 'the', 'names', 'of', 'the', 'countries', 'that', 'are', 'in', 'the', 'continent', 'of', 'Europe', 'and', 'have', 'a', 'population', 'of', '80000', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Europe""', None], 'and', [False, 2, [0, [0, 14, False], None], '""80000""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT Name FROM country WHERE continent  =  ""Europe"" AND Population  =  ""80000""","['SELECT', 'Name', 'FROM', 'country', 'WHERE', 'continent', '=', '``', 'Europe', ""''"", 'AND', 'Population', '=', '``', '80000', ""''""]","['select', 'name', 'from', 'country', 'where', 'continent', '=', 'value', 'and', 'population', '=', 'value']",Give the names of countries that are in Europe and have a population equal to 80000.,"['Give', 'the', 'names', 'of', 'countries', 'that', 'are', 'in', 'Europe', 'and', 'have', 'a', 'population', 'equal', 'to', '80000', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Europe""', None], 'and', [False, 2, [0, [0, 14, False], None], '""80000""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"select sum(population) ,  avg(surfacearea) from country where continent  =  ""north america"" and surfacearea  >  3000","['select', 'sum', '(', 'population', ')', ',', 'avg', '(', 'surfacearea', ')', 'from', 'country', 'where', 'continent', '=', '""north america""', 'and', 'surfacearea', '>', '3000']","['select', 'sum', '(', 'population', ')', ',', 'avg', '(', 'surfacearea', ')', 'from', 'country', 'where', 'continent', '=', 'value', 'and', 'surfacearea', '>', 'value']",What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?,"['What', 'is', 'the', 'total', 'population', 'and', 'average', 'area', 'of', 'countries', 'in', 'the', 'continent', 'of', 'North', 'America', 'whose', 'area', 'is', 'bigger', 'than', '3000', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[4, [0, [0, 14, False], None]], [5, [0, [0, 12, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""north america""', None], 'and', [False, 3, [0, [0, 12, False], None], 3000.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"select sum(population) ,  avg(surfacearea) from country where continent  =  ""north america"" and surfacearea  >  3000","['select', 'sum', '(', 'population', ')', ',', 'avg', '(', 'surfacearea', ')', 'from', 'country', 'where', 'continent', '=', '""north america""', 'and', 'surfacearea', '>', '3000']","['select', 'sum', '(', 'population', ')', ',', 'avg', '(', 'surfacearea', ')', 'from', 'country', 'where', 'continent', '=', 'value', 'and', 'surfacearea', '>', 'value']",Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .,"['Give', 'the', 'total', 'population', 'and', 'average', 'surface', 'area', 'corresponding', 'to', 'countries', 'in', 'North', 'America', 'that', 'have', 'a', 'surface', 'area', 'greater', 'than', '3000', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[4, [0, [0, 14, False], None]], [5, [0, [0, 12, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""north america""', None], 'and', [False, 3, [0, [0, 12, False], None], 3000.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000,"['SELECT', 'name', 'FROM', 'city', 'WHERE', 'Population', 'BETWEEN', '160000', 'AND', '900000']","['select', 'name', 'from', 'city', 'where', 'population', 'between', 'value', 'and', 'value']",What are the cities whose population is between 160000 and 900000?,"['What', 'are', 'the', 'cities', 'whose', 'population', 'is', 'between', '160000', 'and', '900000', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 1, [0, [0, 5, False], None], 160000.0, 900000.0]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,select name from city where population between 160000 and 900000,"['select', 'name', 'from', 'city', 'where', 'population', 'between', '160000', 'and', '900000']","['select', 'name', 'from', 'city', 'where', 'population', 'between', 'value', 'and', 'value']",Return the names of cities that have a population between 160000 and 900000 .,"['Return', 'the', 'names', 'of', 'cities', 'that', 'have', 'a', 'population', 'between', '160000', 'and', '900000', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 1, [0, [0, 5, False], None], 160000.0, 900000.0]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'LANGUAGE', 'FROM', 'countrylanguage', 'GROUP', 'BY', 'LANGUAGE', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'language', 'from', 'countrylanguage', 'group', 'by', 'language', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which language is spoken by the largest number of countries?,"['Which', 'language', 'is', 'spoken', 'by', 'the', 'largest', 'number', 'of', 'countries', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 24, False], None]]]], 'where': [], 'groupBy': [[0, 24, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
world_1,SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'LANGUAGE', 'FROM', 'countrylanguage', 'GROUP', 'BY', 'LANGUAGE', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'language', 'from', 'countrylanguage', 'group', 'by', 'language', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Give the language that is spoken in the most countries.,"['Give', 'the', 'language', 'that', 'is', 'spoken', 'in', 'the', 'most', 'countries', '.']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 24, False], None]]]], 'where': [], 'groupBy': [[0, 24, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode","['SELECT', 'LANGUAGE', ',', 'CountryCode', ',', 'max', '(', 'Percentage', ')', 'FROM', 'countrylanguage', 'GROUP', 'BY', 'CountryCode']","['select', 'language', ',', 'countrycode', ',', 'max', '(', 'percentage', ')', 'from', 'countrylanguage', 'group', 'by', 'countrycode']",What is the language spoken by the largest percentage of people in each country?,"['What', 'is', 'the', 'language', 'spoken', 'by', 'the', 'largest', 'percentage', 'of', 'people', 'in', 'each', 'country', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 24, False], None]], [0, [0, [0, 23, False], None]], [1, [0, [0, 26, False], None]]]], 'where': [], 'groupBy': [[0, 23, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode","['SELECT', 'LANGUAGE', ',', 'CountryCode', ',', 'max', '(', 'Percentage', ')', 'FROM', 'countrylanguage', 'GROUP', 'BY', 'CountryCode']","['select', 'language', ',', 'countrycode', ',', 'max', '(', 'percentage', ')', 'from', 'countrylanguage', 'group', 'by', 'countrycode']","What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?","['What', 'are', 'the', 'country', 'codes', 'of', 'the', 'different', 'countries', ',', 'and', 'what', 'are', 'the', 'languages', 'spoken', 'by', 'the', 'greatest', 'percentage', 'of', 'people', 'for', 'each', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 24, False], None]], [0, [0, [0, 23, False], None]], [1, [0, [0, 26, False], None]]]], 'where': [], 'groupBy': [[0, 23, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  ""Spanish"" GROUP BY CountryCode","['SELECT', 'count', '(', '*', ')', ',', 'max', '(', 'Percentage', ')', 'FROM', 'countrylanguage', 'WHERE', 'LANGUAGE', '=', '``', 'Spanish', ""''"", 'GROUP', 'BY', 'CountryCode']","['select', 'count', '(', '*', ')', ',', 'max', '(', 'percentage', ')', 'from', 'countrylanguage', 'where', 'language', '=', 'value', 'group', 'by', 'countrycode']",What is the total number of countries where Spanish is spoken by the largest percentage of people?,"['What', 'is', 'the', 'total', 'number', 'of', 'countries', 'where', 'Spanish', 'is', 'spoken', 'by', 'the', 'largest', 'percentage', 'of', 'people', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]], [1, [0, [0, 26, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""Spanish""', None]], 'groupBy': [[0, 23, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  ""Spanish"" GROUP BY CountryCode","['SELECT', 'count', '(', '*', ')', ',', 'max', '(', 'Percentage', ')', 'FROM', 'countrylanguage', 'WHERE', 'LANGUAGE', '=', '``', 'Spanish', ""''"", 'GROUP', 'BY', 'CountryCode']","['select', 'count', '(', '*', ')', ',', 'max', '(', 'percentage', ')', 'from', 'countrylanguage', 'where', 'language', '=', 'value', 'group', 'by', 'countrycode']",Count the number of countries for which Spanish is the predominantly spoken language.,"['Count', 'the', 'number', 'of', 'countries', 'for', 'which', 'Spanish', 'is', 'the', 'predominantly', 'spoken', 'language', '.']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]], [1, [0, [0, 26, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""Spanish""', None]], 'groupBy': [[0, 23, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  ""Spanish"" GROUP BY CountryCode","['SELECT', 'CountryCode', ',', 'max', '(', 'Percentage', ')', 'FROM', 'countrylanguage', 'WHERE', 'LANGUAGE', '=', '``', 'Spanish', ""''"", 'GROUP', 'BY', 'CountryCode']","['select', 'countrycode', ',', 'max', '(', 'percentage', ')', 'from', 'countrylanguage', 'where', 'language', '=', 'value', 'group', 'by', 'countrycode']",What are the codes of countries where Spanish is spoken by the largest percentage of people?,"['What', 'are', 'the', 'codes', 'of', 'countries', 'where', 'Spanish', 'is', 'spoken', 'by', 'the', 'largest', 'percentage', 'of', 'people', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 23, False], None]], [1, [0, [0, 26, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""Spanish""', None]], 'groupBy': [[0, 23, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
world_1,"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  ""Spanish"" GROUP BY CountryCode","['SELECT', 'CountryCode', ',', 'max', '(', 'Percentage', ')', 'FROM', 'countrylanguage', 'WHERE', 'LANGUAGE', '=', '``', 'Spanish', ""''"", 'GROUP', 'BY', 'CountryCode']","['select', 'countrycode', ',', 'max', '(', 'percentage', ')', 'from', 'countrylanguage', 'where', 'language', '=', 'value', 'group', 'by', 'countrycode']",Return the codes of countries for which Spanish is the predominantly spoken language.,"['Return', 'the', 'codes', 'of', 'countries', 'for', 'which', 'Spanish', 'is', 'the', 'predominantly', 'spoken', 'language', '.']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 23, False], None]], [1, [0, [0, 26, False], None]]]], 'where': [[False, 2, [0, [0, 24, False], None], '""Spanish""', None]], 'groupBy': [[0, 23, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT count(*) FROM conductor,"['SELECT', 'count', '(', '*', ')', 'FROM', 'conductor']","['select', 'count', '(', '*', ')', 'from', 'conductor']",How many conductors are there?,"['How', 'many', 'conductors', 'are', 'there', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT count(*) FROM conductor,"['SELECT', 'count', '(', '*', ')', 'FROM', 'conductor']","['select', 'count', '(', '*', ')', 'from', 'conductor']",Count the number of conductors.,"['Count', 'the', 'number', 'of', 'conductors', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT Name FROM conductor ORDER BY Age ASC,"['SELECT', 'Name', 'FROM', 'conductor', 'ORDER', 'BY', 'Age', 'ASC']","['select', 'name', 'from', 'conductor', 'order', 'by', 'age', 'asc']",List the names of conductors in ascending order of age.,"['List', 'the', 'names', 'of', 'conductors', 'in', 'ascending', 'order', 'of', 'age', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 3, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT Name FROM conductor ORDER BY Age ASC,"['SELECT', 'Name', 'FROM', 'conductor', 'ORDER', 'BY', 'Age', 'ASC']","['select', 'name', 'from', 'conductor', 'order', 'by', 'age', 'asc']","What are the names of conductors, ordered by age?","['What', 'are', 'the', 'names', 'of', 'conductors', ',', 'ordered', 'by', 'age', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 3, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT Name FROM conductor WHERE Nationality != 'USA',"['SELECT', 'Name', 'FROM', 'conductor', 'WHERE', 'Nationality', '!', '=', ""'USA"", ""'""]","['select', 'name', 'from', 'conductor', 'where', 'nationality', '!', '=', 'value']","What are the names of conductors whose nationalities are not ""USA""?","['What', 'are', 'the', 'names', 'of', 'conductors', 'whose', 'nationalities', 'are', 'not', '``', 'USA', ""''"", '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 7, [0, [0, 4, False], None], '""USA""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT Name FROM conductor WHERE Nationality != 'USA',"['SELECT', 'Name', 'FROM', 'conductor', 'WHERE', 'Nationality', '!', '=', ""'USA"", ""'""]","['select', 'name', 'from', 'conductor', 'where', 'nationality', '!', '=', 'value']","Return the names of conductors that do not have the nationality ""USA"".","['Return', 'the', 'names', 'of', 'conductors', 'that', 'do', 'not', 'have', 'the', 'nationality', '``', 'USA', ""''"", '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 7, [0, [0, 4, False], None], '""USA""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC,"['SELECT', 'Record_Company', 'FROM', 'orchestra', 'ORDER', 'BY', 'Year_of_Founded', 'DESC']","['select', 'record_company', 'from', 'orchestra', 'order', 'by', 'year_of_founded', 'desc']",What are the record companies of orchestras in descending order of years in which they were founded?,"['What', 'are', 'the', 'record', 'companies', 'of', 'orchestras', 'in', 'descending', 'order', 'of', 'years', 'in', 'which', 'they', 'were', 'founded', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 10, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC,"['SELECT', 'Record_Company', 'FROM', 'orchestra', 'ORDER', 'BY', 'Year_of_Founded', 'DESC']","['select', 'record_company', 'from', 'orchestra', 'order', 'by', 'year_of_founded', 'desc']","Return the record companies of orchestras, sorted descending by the years in which they were founded.","['Return', 'the', 'record', 'companies', 'of', 'orchestras', ',', 'sorted', 'descending', 'by', 'the', 'years', 'in', 'which', 'they', 'were', 'founded', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 10, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT avg(Attendance) FROM SHOW,"['SELECT', 'avg', '(', 'Attendance', ')', 'FROM', 'SHOW']","['select', 'avg', '(', 'attendance', ')', 'from', 'show']",What is the average attendance of shows?,"['What', 'is', 'the', 'average', 'attendance', 'of', 'shows', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[5, [0, [0, 23, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT avg(Attendance) FROM SHOW,"['SELECT', 'avg', '(', 'Attendance', ')', 'FROM', 'SHOW']","['select', 'avg', '(', 'attendance', ')', 'from', 'show']",Return the average attendance across all shows.,"['Return', 'the', 'average', 'attendance', 'across', 'all', 'shows', '.']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[5, [0, [0, 23, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != ""Live final""","['SELECT', 'max', '(', 'SHARE', ')', ',', 'min', '(', 'SHARE', ')', 'FROM', 'performance', 'WHERE', 'TYPE', '!', '=', '``', 'Live', 'final', ""''""]","['select', 'max', '(', 'share', ')', ',', 'min', '(', 'share', ')', 'from', 'performance', 'where', 'type', '!', '=', 'value']","What are the maximum and minimum share of performances whose type is not ""Live final"".","['What', 'are', 'the', 'maximum', 'and', 'minimum', 'share', 'of', 'performances', 'whose', 'type', 'is', 'not', '``', 'Live', 'final', ""''"", '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[1, [0, [0, 18, False], None]], [2, [0, [0, 18, False], None]]]], 'where': [[False, 7, [0, [0, 14, False], None], '""Live final""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != ""Live final""","['SELECT', 'max', '(', 'SHARE', ')', ',', 'min', '(', 'SHARE', ')', 'FROM', 'performance', 'WHERE', 'TYPE', '!', '=', '``', 'Live', 'final', ""''""]","['select', 'max', '(', 'share', ')', ',', 'min', '(', 'share', ')', 'from', 'performance', 'where', 'type', '!', '=', 'value']","Return the maximum and minimum shares for performances that do not have the type ""Live final"".","['Return', 'the', 'maximum', 'and', 'minimum', 'shares', 'for', 'performances', 'that', 'do', 'not', 'have', 'the', 'type', '``', 'Live', 'final', ""''"", '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[1, [0, [0, 18, False], None]], [2, [0, [0, 18, False], None]]]], 'where': [[False, 7, [0, [0, 14, False], None], '""Live final""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT count(DISTINCT Nationality) FROM conductor,"['SELECT', 'count', '(', 'DISTINCT', 'Nationality', ')', 'FROM', 'conductor']","['select', 'count', '(', 'distinct', 'nationality', ')', 'from', 'conductor']",How many different nationalities do conductors have?,"['How', 'many', 'different', 'nationalities', 'do', 'conductors', 'have', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 4, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT count(DISTINCT Nationality) FROM conductor,"['SELECT', 'count', '(', 'DISTINCT', 'Nationality', ')', 'FROM', 'conductor']","['select', 'count', '(', 'distinct', 'nationality', ')', 'from', 'conductor']",Count the number of different nationalities of conductors.,"['Count', 'the', 'number', 'of', 'different', 'nationalities', 'of', 'conductors', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 4, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT Name FROM conductor ORDER BY Year_of_Work DESC,"['SELECT', 'Name', 'FROM', 'conductor', 'ORDER', 'BY', 'Year_of_Work', 'DESC']","['select', 'name', 'from', 'conductor', 'order', 'by', 'year_of_work', 'desc']",List names of conductors in descending order of years of work.,"['List', 'names', 'of', 'conductors', 'in', 'descending', 'order', 'of', 'years', 'of', 'work', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 5, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT Name FROM conductor ORDER BY Year_of_Work DESC,"['SELECT', 'Name', 'FROM', 'conductor', 'ORDER', 'BY', 'Year_of_Work', 'DESC']","['select', 'name', 'from', 'conductor', 'order', 'by', 'year_of_work', 'desc']","What are the names of conductors, sorted descending by the number of years they have worked?","['What', 'are', 'the', 'names', 'of', 'conductors', ',', 'sorted', 'descending', 'by', 'the', 'number', 'of', 'years', 'they', 'have', 'worked', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 5, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1,"['SELECT', 'Name', 'FROM', 'conductor', 'ORDER', 'BY', 'Year_of_Work', 'DESC', 'LIMIT', '1']","['select', 'name', 'from', 'conductor', 'order', 'by', 'year_of_work', 'desc', 'limit', 'value']",List the name of the conductor with the most years of work.,"['List', 'the', 'name', 'of', 'the', 'conductor', 'with', 'the', 'most', 'years', 'of', 'work', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 5, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1,"['SELECT', 'Name', 'FROM', 'conductor', 'ORDER', 'BY', 'Year_of_Work', 'DESC', 'LIMIT', '1']","['select', 'name', 'from', 'conductor', 'order', 'by', 'year_of_work', 'desc', 'limit', 'value']",What is the name of the conductor who has worked the greatest number of years?,"['What', 'is', 'the', 'name', 'of', 'the', 'conductor', 'who', 'has', 'worked', 'the', 'greatest', 'number', 'of', 'years', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 5, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
orchestra,"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID","['SELECT', 'T1.Name', ',', 'T2.Orchestra', 'FROM', 'conductor', 'AS', 'T1', 'JOIN', 'orchestra', 'AS', 'T2', 'ON', 'T1.Conductor_ID', '=', 'T2.Conductor_ID']","['select', 't1', '.', 'name', ',', 't2', '.', 'orchestra', 'from', 'conductor', 'as', 't1', 'join', 'orchestra', 'as', 't2', 'on', 't1', '.', 'conductor_id', '=', 't2', '.', 'conductor_id']",Show the names of conductors and the orchestras they have conducted.,"['Show', 'the', 'names', 'of', 'conductors', 'and', 'the', 'orchestras', 'they', 'have', 'conducted', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID","['SELECT', 'T1.Name', ',', 'T2.Orchestra', 'FROM', 'conductor', 'AS', 'T1', 'JOIN', 'orchestra', 'AS', 'T2', 'ON', 'T1.Conductor_ID', '=', 'T2.Conductor_ID']","['select', 't1', '.', 'name', ',', 't2', '.', 'orchestra', 'from', 'conductor', 'as', 't1', 'join', 'orchestra', 'as', 't2', 'on', 't1', '.', 'conductor_id', '=', 't2', '.', 'conductor_id']",What are the names of conductors as well as the corresonding orchestras that they have conducted?,"['What', 'are', 'the', 'names', 'of', 'conductors', 'as', 'well', 'as', 'the', 'corresonding', 'orchestras', 'that', 'they', 'have', 'conducted', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1,"['SELECT', 'T1.Name', 'FROM', 'conductor', 'AS', 'T1', 'JOIN', 'orchestra', 'AS', 'T2', 'ON', 'T1.Conductor_ID', '=', 'T2.Conductor_ID', 'GROUP', 'BY', 'T2.Conductor_ID', 'HAVING', 'COUNT', '(', '*', ')', '>', '1']","['select', 't1', '.', 'name', 'from', 'conductor', 'as', 't1', 'join', 'orchestra', 'as', 't2', 'on', 't1', '.', 'conductor_id', '=', 't2', '.', 'conductor_id', 'group', 'by', 't2', '.', 'conductor_id', 'having', 'count', '(', '*', ')', '>', 'value']",Show the names of conductors that have conducted more than one orchestras.,"['Show', 'the', 'names', 'of', 'conductors', 'that', 'have', 'conducted', 'more', 'than', 'one', 'orchestras', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 8, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1,"['SELECT', 'T1.Name', 'FROM', 'conductor', 'AS', 'T1', 'JOIN', 'orchestra', 'AS', 'T2', 'ON', 'T1.Conductor_ID', '=', 'T2.Conductor_ID', 'GROUP', 'BY', 'T2.Conductor_ID', 'HAVING', 'COUNT', '(', '*', ')', '>', '1']","['select', 't1', '.', 'name', 'from', 'conductor', 'as', 't1', 'join', 'orchestra', 'as', 't2', 'on', 't1', '.', 'conductor_id', '=', 't2', '.', 'conductor_id', 'group', 'by', 't2', '.', 'conductor_id', 'having', 'count', '(', '*', ')', '>', 'value']",What are the names of conductors who have conducted at more than one orchestra?,"['What', 'are', 'the', 'names', 'of', 'conductors', 'who', 'have', 'conducted', 'at', 'more', 'than', 'one', 'orchestra', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 8, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1,"['SELECT', 'T1.Name', 'FROM', 'conductor', 'AS', 'T1', 'JOIN', 'orchestra', 'AS', 'T2', 'ON', 'T1.Conductor_ID', '=', 'T2.Conductor_ID', 'GROUP', 'BY', 'T2.Conductor_ID', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'name', 'from', 'conductor', 'as', 't1', 'join', 'orchestra', 'as', 't2', 'on', 't1', '.', 'conductor_id', '=', 't2', '.', 'conductor_id', 'group', 'by', 't2', '.', 'conductor_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Show the name of the conductor that has conducted the most number of orchestras.,"['Show', 'the', 'name', 'of', 'the', 'conductor', 'that', 'has', 'conducted', 'the', 'most', 'number', 'of', 'orchestras', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 8, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1,"['SELECT', 'T1.Name', 'FROM', 'conductor', 'AS', 'T1', 'JOIN', 'orchestra', 'AS', 'T2', 'ON', 'T1.Conductor_ID', '=', 'T2.Conductor_ID', 'GROUP', 'BY', 'T2.Conductor_ID', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'name', 'from', 'conductor', 'as', 't1', 'join', 'orchestra', 'as', 't2', 'on', 't1', '.', 'conductor_id', '=', 't2', '.', 'conductor_id', 'group', 'by', 't2', '.', 'conductor_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the name of the conductor who has conducted the most orchestras?,"['What', 'is', 'the', 'name', 'of', 'the', 'conductor', 'who', 'has', 'conducted', 'the', 'most', 'orchestras', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 8, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008,"['SELECT', 'T1.Name', 'FROM', 'conductor', 'AS', 'T1', 'JOIN', 'orchestra', 'AS', 'T2', 'ON', 'T1.Conductor_ID', '=', 'T2.Conductor_ID', 'WHERE', 'Year_of_Founded', '>', '2008']","['select', 't1', '.', 'name', 'from', 'conductor', 'as', 't1', 'join', 'orchestra', 'as', 't2', 'on', 't1', '.', 'conductor_id', '=', 't2', '.', 'conductor_id', 'where', 'year_of_founded', '>', 'value']",Please show the name of the conductor that has conducted orchestras founded after 2008.,"['Please', 'show', 'the', 'name', 'of', 'the', 'conductor', 'that', 'has', 'conducted', 'orchestras', 'founded', 'after', '2008', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 3, [0, [0, 10, False], None], 2008.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008,"['SELECT', 'T1.Name', 'FROM', 'conductor', 'AS', 'T1', 'JOIN', 'orchestra', 'AS', 'T2', 'ON', 'T1.Conductor_ID', '=', 'T2.Conductor_ID', 'WHERE', 'Year_of_Founded', '>', '2008']","['select', 't1', '.', 'name', 'from', 'conductor', 'as', 't1', 'join', 'orchestra', 'as', 't2', 'on', 't1', '.', 'conductor_id', '=', 't2', '.', 'conductor_id', 'where', 'year_of_founded', '>', 'value']",What are the names of conductors who have conducted orchestras founded after the year 2008?,"['What', 'are', 'the', 'names', 'of', 'conductors', 'who', 'have', 'conducted', 'orchestras', 'founded', 'after', 'the', 'year', '2008', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 3, [0, [0, 10, False], None], 2008.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company","['SELECT', 'Record_Company', ',', 'COUNT', '(', '*', ')', 'FROM', 'orchestra', 'GROUP', 'BY', 'Record_Company']","['select', 'record_company', ',', 'count', '(', '*', ')', 'from', 'orchestra', 'group', 'by', 'record_company']",Please show the different record companies and the corresponding number of orchestras.,"['Please', 'show', 'the', 'different', 'record', 'companies', 'and', 'the', 'corresponding', 'number', 'of', 'orchestras', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 9, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company","['SELECT', 'Record_Company', ',', 'COUNT', '(', '*', ')', 'FROM', 'orchestra', 'GROUP', 'BY', 'Record_Company']","['select', 'record_company', ',', 'count', '(', '*', ')', 'from', 'orchestra', 'group', 'by', 'record_company']",How many orchestras does each record company manage?,"['How', 'many', 'orchestras', 'does', 'each', 'record', 'company', 'manage', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 9, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC,"['SELECT', 'Major_Record_Format', 'FROM', 'orchestra', 'GROUP', 'BY', 'Major_Record_Format', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'ASC']","['select', 'major_record_format', 'from', 'orchestra', 'group', 'by', 'major_record_format', 'order', 'by', 'count', '(', '*', ')', 'asc']",Please show the record formats of orchestras in ascending order of count.,"['Please', 'show', 'the', 'record', 'formats', 'of', 'orchestras', 'in', 'ascending', 'order', 'of', 'count', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [], 'groupBy': [[0, 11, False]], 'having': [], 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC,"['SELECT', 'Major_Record_Format', 'FROM', 'orchestra', 'GROUP', 'BY', 'Major_Record_Format', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'ASC']","['select', 'major_record_format', 'from', 'orchestra', 'group', 'by', 'major_record_format', 'order', 'by', 'count', '(', '*', ')', 'asc']","What are the major record formats of orchestras, sorted by their frequency?","['What', 'are', 'the', 'major', 'record', 'formats', 'of', 'orchestras', ',', 'sorted', 'by', 'their', 'frequency', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [], 'groupBy': [[0, 11, False]], 'having': [], 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1,"['SELECT', 'Record_Company', 'FROM', 'orchestra', 'GROUP', 'BY', 'Record_Company', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'record_company', 'from', 'orchestra', 'group', 'by', 'record_company', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",List the record company shared by the most number of orchestras.,"['List', 'the', 'record', 'company', 'shared', 'by', 'the', 'most', 'number', 'of', 'orchestras', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [[0, 9, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1,"['SELECT', 'Record_Company', 'FROM', 'orchestra', 'GROUP', 'BY', 'Record_Company', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'record_company', 'from', 'orchestra', 'group', 'by', 'record_company', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the record company used by the greatest number of orchestras?,"['What', 'is', 'the', 'record', 'company', 'used', 'by', 'the', 'greatest', 'number', 'of', 'orchestras', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [[0, 9, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance),"['SELECT', 'Orchestra', 'FROM', 'orchestra', 'WHERE', 'Orchestra_ID', 'NOT', 'IN', '(', 'SELECT', 'Orchestra_ID', 'FROM', 'performance', ')']","['select', 'orchestra', 'from', 'orchestra', 'where', 'orchestra_id', 'not', 'in', '(', 'select', 'orchestra_id', 'from', 'performance', ')']",List the names of orchestras that have no performance.,"['List', 'the', 'names', 'of', 'orchestras', 'that', 'have', 'no', 'performance', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 7, False], None]]]], 'where': [[True, 8, [0, [0, 6, False], None], {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 13, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance),"['SELECT', 'Orchestra', 'FROM', 'orchestra', 'WHERE', 'Orchestra_ID', 'NOT', 'IN', '(', 'SELECT', 'Orchestra_ID', 'FROM', 'performance', ')']","['select', 'orchestra', 'from', 'orchestra', 'where', 'orchestra_id', 'not', 'in', '(', 'select', 'orchestra_id', 'from', 'performance', ')']",What are the orchestras that do not have any performances?,"['What', 'are', 'the', 'orchestras', 'that', 'do', 'not', 'have', 'any', 'performances', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 7, False], None]]]], 'where': [[True, 8, [0, [0, 6, False], None], {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 13, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003,"['SELECT', 'Record_Company', 'FROM', 'orchestra', 'WHERE', 'Year_of_Founded', '<', '2003', 'INTERSECT', 'SELECT', 'Record_Company', 'FROM', 'orchestra', 'WHERE', 'Year_of_Founded', '>', '2003']","['select', 'record_company', 'from', 'orchestra', 'where', 'year_of_founded', '<', 'value', 'intersect', 'select', 'record_company', 'from', 'orchestra', 'where', 'year_of_founded', '>', 'value']",Show the record companies shared by orchestras founded before 2003 and after 2003.,"['Show', 'the', 'record', 'companies', 'shared', 'by', 'orchestras', 'founded', 'before', '2003', 'and', 'after', '2003', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 4, [0, [0, 10, False], None], 2003.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 3, [0, [0, 10, False], None], 2003.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
orchestra,SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003,"['SELECT', 'Record_Company', 'FROM', 'orchestra', 'WHERE', 'Year_of_Founded', '<', '2003', 'INTERSECT', 'SELECT', 'Record_Company', 'FROM', 'orchestra', 'WHERE', 'Year_of_Founded', '>', '2003']","['select', 'record_company', 'from', 'orchestra', 'where', 'year_of_founded', '<', 'value', 'intersect', 'select', 'record_company', 'from', 'orchestra', 'where', 'year_of_founded', '>', 'value']",What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?,"['What', 'are', 'the', 'record', 'companies', 'that', 'are', 'used', 'by', 'both', 'orchestras', 'founded', 'before', '2003', 'and', 'those', 'founded', 'after', '2003', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 4, [0, [0, 10, False], None], 2003.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [[False, 3, [0, [0, 10, False], None], 2003.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
orchestra,"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  ""CD"" OR Major_Record_Format  =  ""DVD""","['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'orchestra', 'WHERE', 'Major_Record_Format', '=', '``', 'CD', ""''"", 'OR', 'Major_Record_Format', '=', '``', 'DVD', ""''""]","['select', 'count', '(', '*', ')', 'from', 'orchestra', 'where', 'major_record_format', '=', 'value', 'or', 'major_record_format', '=', 'value']","Find the number of orchestras whose record format is ""CD"" or ""DVD"".","['Find', 'the', 'number', 'of', 'orchestras', 'whose', 'record', 'format', 'is', '``', 'CD', ""''"", 'or', '``', 'DVD', ""''"", '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""CD""', None], 'or', [False, 2, [0, [0, 11, False], None], '""DVD""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  ""CD"" OR Major_Record_Format  =  ""DVD""","['SELECT', 'COUNT', '(', '*', ')', 'FROM', 'orchestra', 'WHERE', 'Major_Record_Format', '=', '``', 'CD', ""''"", 'OR', 'Major_Record_Format', '=', '``', 'DVD', ""''""]","['select', 'count', '(', '*', ')', 'from', 'orchestra', 'where', 'major_record_format', '=', 'value', 'or', 'major_record_format', '=', 'value']",Count the number of orchestras that have CD or DVD as their record format.,"['Count', 'the', 'number', 'of', 'orchestras', 'that', 'have', 'CD', 'or', 'DVD', 'as', 'their', 'record', 'format', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 11, False], None], '""CD""', None], 'or', [False, 2, [0, [0, 11, False], None], '""DVD""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1,"['SELECT', 'Year_of_Founded', 'FROM', 'orchestra', 'AS', 'T1', 'JOIN', 'performance', 'AS', 'T2', 'ON', 'T1.Orchestra_ID', '=', 'T2.Orchestra_ID', 'GROUP', 'BY', 'T2.Orchestra_ID', 'HAVING', 'COUNT', '(', '*', ')', '>', '1']","['select', 'year_of_founded', 'from', 'orchestra', 'as', 't1', 'join', 'performance', 'as', 't2', 'on', 't1', '.', 'orchestra_id', '=', 't2', '.', 'orchestra_id', 'group', 'by', 't2', '.', 'orchestra_id', 'having', 'count', '(', '*', ')', '>', 'value']",Show the years in which orchestras that have given more than one performance are founded.,"['Show', 'the', 'years', 'in', 'which', 'orchestras', 'that', 'have', 'given', 'more', 'than', 'one', 'performance', 'are', 'founded', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]]}, 'select': [False, [[0, [0, [0, 10, False], None]]]], 'where': [], 'groupBy': [[0, 13, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
orchestra,SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1,"['SELECT', 'Year_of_Founded', 'FROM', 'orchestra', 'AS', 'T1', 'JOIN', 'performance', 'AS', 'T2', 'ON', 'T1.Orchestra_ID', '=', 'T2.Orchestra_ID', 'GROUP', 'BY', 'T2.Orchestra_ID', 'HAVING', 'COUNT', '(', '*', ')', '>', '1']","['select', 'year_of_founded', 'from', 'orchestra', 'as', 't1', 'join', 'performance', 'as', 't2', 'on', 't1', '.', 'orchestra_id', '=', 't2', '.', 'orchestra_id', 'group', 'by', 't2', '.', 'orchestra_id', 'having', 'count', '(', '*', ')', '>', 'value']",What are years of founding for orchestras that have had more than a single performance?,"['What', 'are', 'years', 'of', 'founding', 'for', 'orchestras', 'that', 'have', 'had', 'more', 'than', 'a', 'single', 'performance', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 2]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 13, False], None]]}, 'select': [False, [[0, [0, [0, 10, False], None]]]], 'where': [], 'groupBy': [[0, 13, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT count(*) FROM Highschooler,"['SELECT', 'count', '(', '*', ')', 'FROM', 'Highschooler']","['select', 'count', '(', '*', ')', 'from', 'highschooler']",How many high schoolers are there?,"['How', 'many', 'high', 'schoolers', 'are', 'there', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT count(*) FROM Highschooler,"['SELECT', 'count', '(', '*', ')', 'FROM', 'Highschooler']","['select', 'count', '(', '*', ')', 'from', 'highschooler']",Count the number of high schoolers.,"['Count', 'the', 'number', 'of', 'high', 'schoolers', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT name ,  grade FROM Highschooler","['SELECT', 'name', ',', 'grade', 'FROM', 'Highschooler']","['select', 'name', ',', 'grade', 'from', 'highschooler']",Show the names and grades of each high schooler.,"['Show', 'the', 'names', 'and', 'grades', 'of', 'each', 'high', 'schooler', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT name ,  grade FROM Highschooler","['SELECT', 'name', ',', 'grade', 'FROM', 'Highschooler']","['select', 'name', ',', 'grade', 'from', 'highschooler']",What are the names and grades for each high schooler?,"['What', 'are', 'the', 'names', 'and', 'grades', 'for', 'each', 'high', 'schooler', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]], [0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT grade FROM Highschooler,"['SELECT', 'grade', 'FROM', 'Highschooler']","['select', 'grade', 'from', 'highschooler']",Show all the grades of the high schoolers.,"['Show', 'all', 'the', 'grades', 'of', 'the', 'high', 'schoolers', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT grade FROM Highschooler,"['SELECT', 'grade', 'FROM', 'Highschooler']","['select', 'grade', 'from', 'highschooler']",What is the grade of each high schooler?,"['What', 'is', 'the', 'grade', 'of', 'each', 'high', 'schooler', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT grade FROM Highschooler WHERE name  =  ""Kyle""","['SELECT', 'grade', 'FROM', 'Highschooler', 'WHERE', 'name', '=', '``', 'Kyle', ""''""]","['select', 'grade', 'from', 'highschooler', 'where', 'name', '=', 'value']",What grade is Kyle in?,"['What', 'grade', 'is', 'Kyle', 'in', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Kyle""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT grade FROM Highschooler WHERE name  =  ""Kyle""","['SELECT', 'grade', 'FROM', 'Highschooler', 'WHERE', 'name', '=', '``', 'Kyle', ""''""]","['select', 'grade', 'from', 'highschooler', 'where', 'name', '=', 'value']",Return the grade for the high schooler named Kyle.,"['Return', 'the', 'grade', 'for', 'the', 'high', 'schooler', 'named', 'Kyle', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Kyle""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT name FROM Highschooler WHERE grade  =  10,"['SELECT', 'name', 'FROM', 'Highschooler', 'WHERE', 'grade', '=', '10']","['select', 'name', 'from', 'highschooler', 'where', 'grade', '=', 'value']",Show the names of all high schoolers in grade 10.,"['Show', 'the', 'names', 'of', 'all', 'high', 'schoolers', 'in', 'grade', '10', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 3, False], None], 10.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT name FROM Highschooler WHERE grade  =  10,"['SELECT', 'name', 'FROM', 'Highschooler', 'WHERE', 'grade', '=', '10']","['select', 'name', 'from', 'highschooler', 'where', 'grade', '=', 'value']",What are the names of all high schoolers in grade 10?,"['What', 'are', 'the', 'names', 'of', 'all', 'high', 'schoolers', 'in', 'grade', '10', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 3, False], None], 10.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT ID FROM Highschooler WHERE name  =  ""Kyle""","['SELECT', 'ID', 'FROM', 'Highschooler', 'WHERE', 'name', '=', '``', 'Kyle', ""''""]","['select', 'id', 'from', 'highschooler', 'where', 'name', '=', 'value']",Show the ID of the high schooler named Kyle.,"['Show', 'the', 'ID', 'of', 'the', 'high', 'schooler', 'named', 'Kyle', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Kyle""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT ID FROM Highschooler WHERE name  =  ""Kyle""","['SELECT', 'ID', 'FROM', 'Highschooler', 'WHERE', 'name', '=', '``', 'Kyle', ""''""]","['select', 'id', 'from', 'highschooler', 'where', 'name', '=', 'value']",What is Kyle's id?,"['What', 'is', 'Kyle', ""'s"", 'id', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Kyle""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10,"['SELECT', 'count', '(', '*', ')', 'FROM', 'Highschooler', 'WHERE', 'grade', '=', '9', 'OR', 'grade', '=', '10']","['select', 'count', '(', '*', ')', 'from', 'highschooler', 'where', 'grade', '=', 'value', 'or', 'grade', '=', 'value']",How many high schoolers are there in grade 9 or 10?,"['How', 'many', 'high', 'schoolers', 'are', 'there', 'in', 'grade', '9', 'or', '10', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 3, False], None], 9.0, None], 'or', [False, 2, [0, [0, 3, False], None], 10.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10,"['SELECT', 'count', '(', '*', ')', 'FROM', 'Highschooler', 'WHERE', 'grade', '=', '9', 'OR', 'grade', '=', '10']","['select', 'count', '(', '*', ')', 'from', 'highschooler', 'where', 'grade', '=', 'value', 'or', 'grade', '=', 'value']",Count the number of high schoolers in grades 9 or 10.,"['Count', 'the', 'number', 'of', 'high', 'schoolers', 'in', 'grades', '9', 'or', '10', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 3, False], None], 9.0, None], 'or', [False, 2, [0, [0, 3, False], None], 10.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade","['SELECT', 'grade', ',', 'count', '(', '*', ')', 'FROM', 'Highschooler', 'GROUP', 'BY', 'grade']","['select', 'grade', ',', 'count', '(', '*', ')', 'from', 'highschooler', 'group', 'by', 'grade']",Show the number of high schoolers for each grade.,"['Show', 'the', 'number', 'of', 'high', 'schoolers', 'for', 'each', 'grade', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 3, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade","['SELECT', 'grade', ',', 'count', '(', '*', ')', 'FROM', 'Highschooler', 'GROUP', 'BY', 'grade']","['select', 'grade', ',', 'count', '(', '*', ')', 'from', 'highschooler', 'group', 'by', 'grade']",How many high schoolers are in each grade?,"['How', 'many', 'high', 'schoolers', 'are', 'in', 'each', 'grade', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 3, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'grade', 'FROM', 'Highschooler', 'GROUP', 'BY', 'grade', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'grade', 'from', 'highschooler', 'group', 'by', 'grade', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which grade has the most high schoolers?,"['Which', 'grade', 'has', 'the', 'most', 'high', 'schoolers', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [[0, 3, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'grade', 'FROM', 'Highschooler', 'GROUP', 'BY', 'grade', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'grade', 'from', 'highschooler', 'group', 'by', 'grade', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Return the grade that has the greatest number of high schoolers.,"['Return', 'the', 'grade', 'that', 'has', 'the', 'greatest', 'number', 'of', 'high', 'schoolers', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [[0, 3, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4,"['SELECT', 'grade', 'FROM', 'Highschooler', 'GROUP', 'BY', 'grade', 'HAVING', 'count', '(', '*', ')', '>', '=', '4']","['select', 'grade', 'from', 'highschooler', 'group', 'by', 'grade', 'having', 'count', '(', '*', ')', '>', '=', 'value']",Show me all grades that have at least 4 students.,"['Show', 'me', 'all', 'grades', 'that', 'have', 'at', 'least', '4', 'students', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [[0, 3, False]], 'having': [[False, 5, [0, [3, 0, False], None], 4.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4,"['SELECT', 'grade', 'FROM', 'Highschooler', 'GROUP', 'BY', 'grade', 'HAVING', 'count', '(', '*', ')', '>', '=', '4']","['select', 'grade', 'from', 'highschooler', 'group', 'by', 'grade', 'having', 'count', '(', '*', ')', '>', '=', 'value']",Which grades have 4 or more high schoolers?,"['Which', 'grades', 'have', '4', 'or', 'more', 'high', 'schoolers', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]]]], 'where': [], 'groupBy': [[0, 3, False]], 'having': [[False, 5, [0, [3, 0, False], None], 4.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id","['SELECT', 'student_id', ',', 'count', '(', '*', ')', 'FROM', 'Friend', 'GROUP', 'BY', 'student_id']","['select', 'student_id', ',', 'count', '(', '*', ')', 'from', 'friend', 'group', 'by', 'student_id']",Show the student IDs and numbers of friends corresponding to each.,"['Show', 'the', 'student', 'IDs', 'and', 'numbers', 'of', 'friends', 'corresponding', 'to', 'each', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 4, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id","['SELECT', 'student_id', ',', 'count', '(', '*', ')', 'FROM', 'Friend', 'GROUP', 'BY', 'student_id']","['select', 'student_id', ',', 'count', '(', '*', ')', 'from', 'friend', 'group', 'by', 'student_id']",How many friends does each student have?,"['How', 'many', 'friends', 'does', 'each', 'student', 'have', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 4, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","['SELECT', 'T2.name', ',', 'count', '(', '*', ')', 'FROM', 'Friend', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'GROUP', 'BY', 'T1.student_id']","['select', 't2', '.', 'name', ',', 'count', '(', '*', ')', 'from', 'friend', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'group', 'by', 't1', '.', 'student_id']",Show the names of high school students and their corresponding number of friends.,"['Show', 'the', 'names', 'of', 'high', 'school', 'students', 'and', 'their', 'corresponding', 'number', 'of', 'friends', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 4, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","['SELECT', 'T2.name', ',', 'count', '(', '*', ')', 'FROM', 'Friend', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'GROUP', 'BY', 'T1.student_id']","['select', 't2', '.', 'name', ',', 'count', '(', '*', ')', 'from', 'friend', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'group', 'by', 't1', '.', 'student_id']",What are the names of the high schoolers and how many friends does each have?,"['What', 'are', 'the', 'names', 'of', 'the', 'high', 'schoolers', 'and', 'how', 'many', 'friends', 'does', 'each', 'have', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 4, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T2.name', 'FROM', 'Friend', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'GROUP', 'BY', 'T1.student_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't2', '.', 'name', 'from', 'friend', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'group', 'by', 't1', '.', 'student_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the name of the high schooler who has the greatest number of friends?,"['What', 'is', 'the', 'name', 'of', 'the', 'high', 'schooler', 'who', 'has', 'the', 'greatest', 'number', 'of', 'friends', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 4, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T2.name', 'FROM', 'Friend', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'GROUP', 'BY', 'T1.student_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't2', '.', 'name', 'from', 'friend', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'group', 'by', 't1', '.', 'student_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Return the name of the high school student with the most friends.,"['Return', 'the', 'name', 'of', 'the', 'high', 'school', 'student', 'with', 'the', 'most', 'friends', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 4, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3,"['SELECT', 'T2.name', 'FROM', 'Friend', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'GROUP', 'BY', 'T1.student_id', 'HAVING', 'count', '(', '*', ')', '>', '=', '3']","['select', 't2', '.', 'name', 'from', 'friend', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'group', 'by', 't1', '.', 'student_id', 'having', 'count', '(', '*', ')', '>', '=', 'value']",Show the names of high schoolers who have at least 3 friends.,"['Show', 'the', 'names', 'of', 'high', 'schoolers', 'who', 'have', 'at', 'least', '3', 'friends', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 4, False]], 'having': [[False, 5, [0, [3, 0, False], None], 3.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3,"['SELECT', 'T2.name', 'FROM', 'Friend', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'GROUP', 'BY', 'T1.student_id', 'HAVING', 'count', '(', '*', ')', '>', '=', '3']","['select', 't2', '.', 'name', 'from', 'friend', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'group', 'by', 't1', '.', 'student_id', 'having', 'count', '(', '*', ')', '>', '=', 'value']",What are the names of high schoolers who have 3 or more friends?,"['What', 'are', 'the', 'names', 'of', 'high', 'schoolers', 'who', 'have', '3', 'or', 'more', 'friends', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 4, False]], 'having': [[False, 5, [0, [3, 0, False], None], 3.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  ""Kyle""","['SELECT', 'T3.name', 'FROM', 'Friend', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'JOIN', 'Highschooler', 'AS', 'T3', 'ON', 'T1.friend_id', '=', 'T3.id', 'WHERE', 'T2.name', '=', '``', 'Kyle', ""''""]","['select', 't3', '.', 'name', 'from', 'friend', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'join', 'highschooler', 'as', 't3', 'on', 't1', '.', 'friend_id', '=', 't3', '.', 'id', 'where', 't2', '.', 'name', '=', 'value']",Show the names of all of the high schooler Kyle's friends.,"['Show', 'the', 'names', 'of', 'all', 'of', 'the', 'high', 'schooler', 'Kyle', ""'s"", 'friends', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None], 'and', [False, 2, [0, [0, 5, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Kyle""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  ""Kyle""","['SELECT', 'T3.name', 'FROM', 'Friend', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'JOIN', 'Highschooler', 'AS', 'T3', 'ON', 'T1.friend_id', '=', 'T3.id', 'WHERE', 'T2.name', '=', '``', 'Kyle', ""''""]","['select', 't3', '.', 'name', 'from', 'friend', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'join', 'highschooler', 'as', 't3', 'on', 't1', '.', 'friend_id', '=', 't3', '.', 'id', 'where', 't2', '.', 'name', '=', 'value']",Return the names of friends of the high school student Kyle.,"['Return', 'the', 'names', 'of', 'friends', 'of', 'the', 'high', 'school', 'student', 'Kyle', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None], 'and', [False, 2, [0, [0, 5, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Kyle""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  ""Kyle""","['SELECT', 'count', '(', '*', ')', 'FROM', 'Friend', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'WHERE', 'T2.name', '=', '``', 'Kyle', ""''""]","['select', 'count', '(', '*', ')', 'from', 'friend', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'where', 't2', '.', 'name', '=', 'value']",How many friends does the high school student Kyle have?,"['How', 'many', 'friends', 'does', 'the', 'high', 'school', 'student', 'Kyle', 'have', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Kyle""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  ""Kyle""","['SELECT', 'count', '(', '*', ')', 'FROM', 'Friend', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'WHERE', 'T2.name', '=', '``', 'Kyle', ""''""]","['select', 'count', '(', '*', ')', 'from', 'friend', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'where', 't2', '.', 'name', '=', 'value']",Count the number of friends Kyle has.,"['Count', 'the', 'number', 'of', 'friends', 'Kyle', 'has', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Kyle""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend,"['SELECT', 'id', 'FROM', 'Highschooler', 'EXCEPT', 'SELECT', 'student_id', 'FROM', 'Friend']","['select', 'id', 'from', 'highschooler', 'except', 'select', 'student_id', 'from', 'friend']",Show ids of all students who do not have any friends.,"['Show', 'ids', 'of', 'all', 'students', 'who', 'do', 'not', 'have', 'any', 'friends', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
network_1,SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend,"['SELECT', 'id', 'FROM', 'Highschooler', 'EXCEPT', 'SELECT', 'student_id', 'FROM', 'Friend']","['select', 'id', 'from', 'highschooler', 'except', 'select', 'student_id', 'from', 'friend']",What are the ids of high school students who do not have friends?,"['What', 'are', 'the', 'ids', 'of', 'high', 'school', 'students', 'who', 'do', 'not', 'have', 'friends', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 1, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
network_1,SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id,"['SELECT', 'name', 'FROM', 'Highschooler', 'EXCEPT', 'SELECT', 'T2.name', 'FROM', 'Friend', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id']","['select', 'name', 'from', 'highschooler', 'except', 'select', 't2', '.', 'name', 'from', 'friend', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id']",Show names of all high school students who do not have any friends.,"['Show', 'names', 'of', 'all', 'high', 'school', 'students', 'who', 'do', 'not', 'have', 'any', 'friends', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
network_1,SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id,"['SELECT', 'name', 'FROM', 'Highschooler', 'EXCEPT', 'SELECT', 'T2.name', 'FROM', 'Friend', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id']","['select', 'name', 'from', 'highschooler', 'except', 'select', 't2', '.', 'name', 'from', 'friend', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id']",What are the names of students who have no friends?,"['What', 'are', 'the', 'names', 'of', 'students', 'who', 'have', 'no', 'friends', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
network_1,SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes,"['SELECT', 'student_id', 'FROM', 'Friend', 'INTERSECT', 'SELECT', 'liked_id', 'FROM', 'Likes']","['select', 'student_id', 'from', 'friend', 'intersect', 'select', 'liked_id', 'from', 'likes']",Show the ids of high schoolers who have friends and are also liked by someone else.,"['Show', 'the', 'ids', 'of', 'high', 'schoolers', 'who', 'have', 'friends', 'and', 'are', 'also', 'liked', 'by', 'someone', 'else', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
network_1,SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes,"['SELECT', 'student_id', 'FROM', 'Friend', 'INTERSECT', 'SELECT', 'liked_id', 'FROM', 'Likes']","['select', 'student_id', 'from', 'friend', 'intersect', 'select', 'liked_id', 'from', 'likes']",What are the ids of students who both have friends and are liked?,"['What', 'are', 'the', 'ids', 'of', 'students', 'who', 'both', 'have', 'friends', 'and', 'are', 'liked', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 7, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
network_1,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id,"['SELECT', 'T2.name', 'FROM', 'Friend', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'INTERSECT', 'SELECT', 'T2.name', 'FROM', 'Likes', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.liked_id', '=', 'T2.id']","['select', 't2', '.', 'name', 'from', 'friend', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'intersect', 'select', 't2', '.', 'name', 'from', 'likes', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'liked_id', '=', 't2', '.', 'id']",Show name of all students who have some friends and also are liked by someone else.,"['Show', 'name', 'of', 'all', 'students', 'who', 'have', 'some', 'friends', 'and', 'also', 'are', 'liked', 'by', 'someone', 'else', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 7, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
network_1,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id,"['SELECT', 'T2.name', 'FROM', 'Friend', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'INTERSECT', 'SELECT', 'T2.name', 'FROM', 'Likes', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.liked_id', '=', 'T2.id']","['select', 't2', '.', 'name', 'from', 'friend', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'intersect', 'select', 't2', '.', 'name', 'from', 'likes', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'liked_id', '=', 't2', '.', 'id']",What are the names of high schoolers who both have friends and are liked?,"['What', 'are', 'the', 'names', 'of', 'high', 'schoolers', 'who', 'both', 'have', 'friends', 'and', 'are', 'liked', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 7, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
network_1,"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id","['SELECT', 'student_id', ',', 'count', '(', '*', ')', 'FROM', 'Likes', 'GROUP', 'BY', 'student_id']","['select', 'student_id', ',', 'count', '(', '*', ')', 'from', 'likes', 'group', 'by', 'student_id']",Count the number of likes for each student id.,"['Count', 'the', 'number', 'of', 'likes', 'for', 'each', 'student', 'id', '.']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id","['SELECT', 'student_id', ',', 'count', '(', '*', ')', 'FROM', 'Likes', 'GROUP', 'BY', 'student_id']","['select', 'student_id', ',', 'count', '(', '*', ')', 'from', 'likes', 'group', 'by', 'student_id']",How many likes correspond to each student id?,"['How', 'many', 'likes', 'correspond', 'to', 'each', 'student', 'id', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[0, [0, [0, 6, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","['SELECT', 'T2.name', ',', 'count', '(', '*', ')', 'FROM', 'Likes', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'GROUP', 'BY', 'T1.student_id']","['select', 't2', '.', 'name', ',', 'count', '(', '*', ')', 'from', 'likes', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'group', 'by', 't1', '.', 'student_id']","Show the names of high schoolers who have likes, and numbers of likes for each.","['Show', 'the', 'names', 'of', 'high', 'schoolers', 'who', 'have', 'likes', ',', 'and', 'numbers', 'of', 'likes', 'for', 'each', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","['SELECT', 'T2.name', ',', 'count', '(', '*', ')', 'FROM', 'Likes', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'GROUP', 'BY', 'T1.student_id']","['select', 't2', '.', 'name', ',', 'count', '(', '*', ')', 'from', 'likes', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'group', 'by', 't1', '.', 'student_id']","What are the names of high schoolers who have likes, and how many likes does each have?","['What', 'are', 'the', 'names', 'of', 'high', 'schoolers', 'who', 'have', 'likes', ',', 'and', 'how', 'many', 'likes', 'does', 'each', 'have', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T2.name', 'FROM', 'Likes', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'GROUP', 'BY', 'T1.student_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't2', '.', 'name', 'from', 'likes', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'group', 'by', 't1', '.', 'student_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the name of the high schooler who has the greatest number of likes?,"['What', 'is', 'the', 'name', 'of', 'the', 'high', 'schooler', 'who', 'has', 'the', 'greatest', 'number', 'of', 'likes', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T2.name', 'FROM', 'Likes', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'GROUP', 'BY', 'T1.student_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't2', '.', 'name', 'from', 'likes', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'group', 'by', 't1', '.', 'student_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Give the name of the student with the most likes.,"['Give', 'the', 'name', 'of', 'the', 'student', 'with', 'the', 'most', 'likes', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2,"['SELECT', 'T2.name', 'FROM', 'Likes', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'GROUP', 'BY', 'T1.student_id', 'HAVING', 'count', '(', '*', ')', '>', '=', '2']","['select', 't2', '.', 'name', 'from', 'likes', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'group', 'by', 't1', '.', 'student_id', 'having', 'count', '(', '*', ')', '>', '=', 'value']",Show the names of students who have at least 2 likes.,"['Show', 'the', 'names', 'of', 'students', 'who', 'have', 'at', 'least', '2', 'likes', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2,"['SELECT', 'T2.name', 'FROM', 'Likes', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'GROUP', 'BY', 'T1.student_id', 'HAVING', 'count', '(', '*', ')', '>', '=', '2']","['select', 't2', '.', 'name', 'from', 'likes', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'group', 'by', 't1', '.', 'student_id', 'having', 'count', '(', '*', ')', '>', '=', 'value']",What are the names of students who have 2 or more likes?,"['What', 'are', 'the', 'names', 'of', 'students', 'who', 'have', '2', 'or', 'more', 'likes', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 6, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2,"['SELECT', 'T2.name', 'FROM', 'Friend', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'WHERE', 'T2.grade', '>', '5', 'GROUP', 'BY', 'T1.student_id', 'HAVING', 'count', '(', '*', ')', '>', '=', '2']","['select', 't2', '.', 'name', 'from', 'friend', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'where', 't2', '.', 'grade', '>', 'value', 'group', 'by', 't1', '.', 'student_id', 'having', 'count', '(', '*', ')', '>', '=', 'value']",Show the names of students who have a grade higher than 5 and have at least 2 friends.,"['Show', 'the', 'names', 'of', 'students', 'who', 'have', 'a', 'grade', 'higher', 'than', '5', 'and', 'have', 'at', 'least', '2', 'friends', '.']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 3, [0, [0, 3, False], None], 5.0, None]], 'groupBy': [[0, 4, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2,"['SELECT', 'T2.name', 'FROM', 'Friend', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'WHERE', 'T2.grade', '>', '5', 'GROUP', 'BY', 'T1.student_id', 'HAVING', 'count', '(', '*', ')', '>', '=', '2']","['select', 't2', '.', 'name', 'from', 'friend', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'where', 't2', '.', 'grade', '>', 'value', 'group', 'by', 't1', '.', 'student_id', 'having', 'count', '(', '*', ')', '>', '=', 'value']",What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?,"['What', 'are', 'the', 'names', 'of', 'high', 'schoolers', 'who', 'have', 'a', 'grade', 'of', 'over', '5', 'and', 'have', '2', 'or', 'more', 'friends', '?']","{'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 3, [0, [0, 3, False], None], 5.0, None]], 'groupBy': [[0, 4, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  ""Kyle""","['SELECT', 'count', '(', '*', ')', 'FROM', 'Likes', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'WHERE', 'T2.name', '=', '``', 'Kyle', ""''""]","['select', 'count', '(', '*', ')', 'from', 'likes', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'where', 't2', '.', 'name', '=', 'value']",How many likes does Kyle have?,"['How', 'many', 'likes', 'does', 'Kyle', 'have', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Kyle""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  ""Kyle""","['SELECT', 'count', '(', '*', ')', 'FROM', 'Likes', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', 'WHERE', 'T2.name', '=', '``', 'Kyle', ""''""]","['select', 'count', '(', '*', ')', 'from', 'likes', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', 'where', 't2', '.', 'name', '=', 'value']",Return the number of likes that the high schooler named Kyle has.,"['Return', 'the', 'number', 'of', 'likes', 'that', 'the', 'high', 'schooler', 'named', 'Kyle', 'has', '.']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]]}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 2, [0, [0, 2, False], None], '""Kyle""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),"['SELECT', 'avg', '(', 'grade', ')', 'FROM', 'Highschooler', 'WHERE', 'id', 'IN', '(', 'SELECT', 'T1.student_id', 'FROM', 'Friend', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', ')']","['select', 'avg', '(', 'grade', ')', 'from', 'highschooler', 'where', 'id', 'in', '(', 'select', 't1', '.', 'student_id', 'from', 'friend', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', ')']",Find the average grade of all students who have some friends.,"['Find', 'the', 'average', 'grade', 'of', 'all', 'students', 'who', 'have', 'some', 'friends', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[5, [0, [0, 3, False], None]]]], 'where': [[False, 8, [0, [0, 1, False], None], {'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),"['SELECT', 'avg', '(', 'grade', ')', 'FROM', 'Highschooler', 'WHERE', 'id', 'IN', '(', 'SELECT', 'T1.student_id', 'FROM', 'Friend', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', ')']","['select', 'avg', '(', 'grade', ')', 'from', 'highschooler', 'where', 'id', 'in', '(', 'select', 't1', '.', 'student_id', 'from', 'friend', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', ')']",What is the average grade of students who have friends?,"['What', 'is', 'the', 'average', 'grade', 'of', 'students', 'who', 'have', 'friends', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[5, [0, [0, 3, False], None]]]], 'where': [[False, 8, [0, [0, 1, False], None], {'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),"['SELECT', 'min', '(', 'grade', ')', 'FROM', 'Highschooler', 'WHERE', 'id', 'NOT', 'IN', '(', 'SELECT', 'T1.student_id', 'FROM', 'Friend', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', ')']","['select', 'min', '(', 'grade', ')', 'from', 'highschooler', 'where', 'id', 'not', 'in', '(', 'select', 't1', '.', 'student_id', 'from', 'friend', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', ')']",Find the minimum grade of students who have no friends.,"['Find', 'the', 'minimum', 'grade', 'of', 'students', 'who', 'have', 'no', 'friends', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[2, [0, [0, 3, False], None]]]], 'where': [[True, 8, [0, [0, 1, False], None], {'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
network_1,SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),"['SELECT', 'min', '(', 'grade', ')', 'FROM', 'Highschooler', 'WHERE', 'id', 'NOT', 'IN', '(', 'SELECT', 'T1.student_id', 'FROM', 'Friend', 'AS', 'T1', 'JOIN', 'Highschooler', 'AS', 'T2', 'ON', 'T1.student_id', '=', 'T2.id', ')']","['select', 'min', '(', 'grade', ')', 'from', 'highschooler', 'where', 'id', 'not', 'in', '(', 'select', 't1', '.', 'student_id', 'from', 'friend', 'as', 't1', 'join', 'highschooler', 'as', 't2', 'on', 't1', '.', 'student_id', '=', 't2', '.', 'id', ')']",What is the lowest grade of students who do not have any friends?,"['What', 'is', 'the', 'lowest', 'grade', 'of', 'students', 'who', 'do', 'not', 'have', 'any', 'friends', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[2, [0, [0, 3, False], None]]]], 'where': [[True, 8, [0, [0, 1, False], None], {'from': {'table_units': [['table_unit', 1], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 4, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT state FROM Owners INTERSECT SELECT state FROM Professionals,"['SELECT', 'state', 'FROM', 'Owners', 'INTERSECT', 'SELECT', 'state', 'FROM', 'Professionals']","['select', 'state', 'from', 'owners', 'intersect', 'select', 'state', 'from', 'professionals']",Which states have both owners and professionals living there?,"['Which', 'states', 'have', 'both', 'owners', 'and', 'professionals', 'living', 'there', '?']","{'from': {'table_units': [['table_unit', 4]], 'conds': []}, 'select': [False, [[0, [0, [0, 15, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 38, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
dog_kennels,SELECT state FROM Owners INTERSECT SELECT state FROM Professionals,"['SELECT', 'state', 'FROM', 'Owners', 'INTERSECT', 'SELECT', 'state', 'FROM', 'Professionals']","['select', 'state', 'from', 'owners', 'intersect', 'select', 'state', 'from', 'professionals']",Find the states where both owners and professionals live.,"['Find', 'the', 'states', 'where', 'both', 'owners', 'and', 'professionals', 'live', '.']","{'from': {'table_units': [['table_unit', 4]], 'conds': []}, 'select': [False, [[0, [0, [0, 15, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 38, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
dog_kennels,SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ),"['SELECT', 'avg', '(', 'age', ')', 'FROM', 'Dogs', 'WHERE', 'dog_id', 'IN', '(', 'SELECT', 'dog_id', 'FROM', 'Treatments', ')']","['select', 'avg', '(', 'age', ')', 'from', 'dogs', 'where', 'dog_id', 'in', '(', 'select', 'dog_id', 'from', 'treatments', ')']",What is the average age of the dogs who have gone through any treatments?,"['What', 'is', 'the', 'average', 'age', 'of', 'the', 'dogs', 'who', 'have', 'gone', 'through', 'any', 'treatments', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[5, [0, [0, 26, False], None]]]], 'where': [[False, 8, [0, [0, 20, False], None], {'from': {'table_units': [['table_unit', 7]], 'conds': []}, 'select': [False, [[0, [0, [0, 45, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ),"['SELECT', 'avg', '(', 'age', ')', 'FROM', 'Dogs', 'WHERE', 'dog_id', 'IN', '(', 'SELECT', 'dog_id', 'FROM', 'Treatments', ')']","['select', 'avg', '(', 'age', ')', 'from', 'dogs', 'where', 'dog_id', 'in', '(', 'select', 'dog_id', 'from', 'treatments', ')']",Find the average age of the dogs who went through treatments.,"['Find', 'the', 'average', 'age', 'of', 'the', 'dogs', 'who', 'went', 'through', 'treatments', '.']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[5, [0, [0, 26, False], None]]]], 'where': [[False, 8, [0, [0, 20, False], None], {'from': {'table_units': [['table_unit', 7]], 'conds': []}, 'select': [False, [[0, [0, [0, 45, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2","['SELECT', 'professional_id', ',', 'last_name', ',', 'cell_number', 'FROM', 'Professionals', 'WHERE', 'state', '=', ""'Indiana"", ""'"", 'UNION', 'SELECT', 'T1.professional_id', ',', 'T1.last_name', ',', 'T1.cell_number', 'FROM', 'Professionals', 'AS', 'T1', 'JOIN', 'Treatments', 'AS', 'T2', 'ON', 'T1.professional_id', '=', 'T2.professional_id', 'GROUP', 'BY', 'T1.professional_id', 'HAVING', 'count', '(', '*', ')', '>', '2']","['select', 'professional_id', ',', 'last_name', ',', 'cell_number', 'from', 'professionals', 'where', 'state', '=', 'value', 'union', 'select', 't1', '.', 'professional_id', ',', 't1', '.', 'last_name', ',', 't1', '.', 'cell_number', 'from', 'professionals', 'as', 't1', 'join', 'treatments', 'as', 't2', 'on', 't1', '.', 'professional_id', '=', 't2', '.', 'professional_id', 'group', 'by', 't1', '.', 'professional_id', 'having', 'count', '(', '*', ')', '>', 'value']","Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.","['Which', 'professionals', 'live', 'in', 'the', 'state', 'of', 'Indiana', 'or', 'have', 'done', 'treatment', 'on', 'more', 'than', '2', 'treatments', '?', 'List', 'his', 'or', 'her', 'id', ',', 'last', 'name', 'and', 'cell', 'phone', '.']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 40, False], None]], [0, [0, [0, 43, False], None]]]], 'where': [[False, 2, [0, [0, 38, False], None], '""Indiana""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': {'from': {'table_units': [['table_unit', 6], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]]}, 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 40, False], None]], [0, [0, [0, 43, False], None]]]], 'where': [], 'groupBy': [[0, 33, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'except': None}"
dog_kennels,"SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2","['SELECT', 'professional_id', ',', 'last_name', ',', 'cell_number', 'FROM', 'Professionals', 'WHERE', 'state', '=', ""'Indiana"", ""'"", 'UNION', 'SELECT', 'T1.professional_id', ',', 'T1.last_name', ',', 'T1.cell_number', 'FROM', 'Professionals', 'AS', 'T1', 'JOIN', 'Treatments', 'AS', 'T2', 'ON', 'T1.professional_id', '=', 'T2.professional_id', 'GROUP', 'BY', 'T1.professional_id', 'HAVING', 'count', '(', '*', ')', '>', '2']","['select', 'professional_id', ',', 'last_name', ',', 'cell_number', 'from', 'professionals', 'where', 'state', '=', 'value', 'union', 'select', 't1', '.', 'professional_id', ',', 't1', '.', 'last_name', ',', 't1', '.', 'cell_number', 'from', 'professionals', 'as', 't1', 'join', 'treatments', 'as', 't2', 'on', 't1', '.', 'professional_id', '=', 't2', '.', 'professional_id', 'group', 'by', 't1', '.', 'professional_id', 'having', 'count', '(', '*', ')', '>', 'value']","Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.","['Find', 'the', 'id', ',', 'last', 'name', 'and', 'cell', 'phone', 'of', 'the', 'professionals', 'who', 'live', 'in', 'the', 'state', 'of', 'Indiana', 'or', 'have', 'performed', 'more', 'than', 'two', 'treatments', '.']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 40, False], None]], [0, [0, [0, 43, False], None]]]], 'where': [[False, 2, [0, [0, 38, False], None], '""Indiana""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': {'from': {'table_units': [['table_unit', 6], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]]}, 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 40, False], None]], [0, [0, [0, 43, False], None]]]], 'where': [], 'groupBy': [[0, 33, False]], 'having': [[False, 3, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'except': None}"
dog_kennels,select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 ),"['select', 'name', 'from', 'dogs', 'where', 'dog_id', 'not', 'in', '(', 'select', 'dog_id', 'from', 'treatments', 'group', 'by', 'dog_id', 'having', 'sum', '(', 'cost_of_treatment', ')', '>', '1000', ')']","['select', 'name', 'from', 'dogs', 'where', 'dog_id', 'not', 'in', '(', 'select', 'dog_id', 'from', 'treatments', 'group', 'by', 'dog_id', 'having', 'sum', '(', 'cost_of_treatment', ')', '>', 'value', ')']",Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .,"['Which', 'dogs', 'have', 'not', 'cost', 'their', 'owner', 'more', 'than', '1000', 'for', 'treatment', '?', 'List', 'the', 'dog', 'names', '.']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[0, [0, [0, 25, False], None]]]], 'where': [[True, 8, [0, [0, 20, False], None], {'from': {'table_units': [['table_unit', 7]], 'conds': []}, 'select': [False, [[0, [0, [0, 45, False], None]]]], 'where': [], 'groupBy': [[0, 45, False]], 'having': [[False, 3, [0, [4, 49, False], None], 1000.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 ),"['select', 'name', 'from', 'dogs', 'where', 'dog_id', 'not', 'in', '(', 'select', 'dog_id', 'from', 'treatments', 'group', 'by', 'dog_id', 'having', 'sum', '(', 'cost_of_treatment', ')', '>', '1000', ')']","['select', 'name', 'from', 'dogs', 'where', 'dog_id', 'not', 'in', '(', 'select', 'dog_id', 'from', 'treatments', 'group', 'by', 'dog_id', 'having', 'sum', '(', 'cost_of_treatment', ')', '>', 'value', ')']",What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?,"['What', 'are', 'the', 'names', 'of', 'the', 'dogs', 'for', 'which', 'the', 'owner', 'has', 'not', 'spend', 'more', 'than', '1000', 'for', 'treatment', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[0, [0, [0, 25, False], None]]]], 'where': [[True, 8, [0, [0, 20, False], None], {'from': {'table_units': [['table_unit', 7]], 'conds': []}, 'select': [False, [[0, [0, [0, 45, False], None]]]], 'where': [], 'groupBy': [[0, 45, False]], 'having': [[False, 3, [0, [4, 49, False], None], 1000.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs,"['SELECT', 'first_name', 'FROM', 'Professionals', 'UNION', 'SELECT', 'first_name', 'FROM', 'Owners', 'EXCEPT', 'SELECT', 'name', 'FROM', 'Dogs']","['select', 'first_name', 'from', 'professionals', 'union', 'select', 'first_name', 'from', 'owners', 'except', 'select', 'name', 'from', 'dogs']",Which first names are used for professionals or owners but are not used as dog names?,"['Which', 'first', 'names', 'are', 'used', 'for', 'professionals', 'or', 'owners', 'but', 'are', 'not', 'used', 'as', 'dog', 'names', '?']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 35, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': {'from': {'table_units': [['table_unit', 4]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[0, [0, [0, 25, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}, 'except': None}"
dog_kennels,SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs,"['SELECT', 'first_name', 'FROM', 'Professionals', 'UNION', 'SELECT', 'first_name', 'FROM', 'Owners', 'EXCEPT', 'SELECT', 'name', 'FROM', 'Dogs']","['select', 'first_name', 'from', 'professionals', 'union', 'select', 'first_name', 'from', 'owners', 'except', 'select', 'name', 'from', 'dogs']",Find the first names that are used for professionals or owners but are not used as dog names.,"['Find', 'the', 'first', 'names', 'that', 'are', 'used', 'for', 'professionals', 'or', 'owners', 'but', 'are', 'not', 'used', 'as', 'dog', 'names', '.']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 35, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': {'from': {'table_units': [['table_unit', 4]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[0, [0, [0, 25, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}, 'except': None}"
dog_kennels,"SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id","['SELECT', 'professional_id', ',', 'role_code', ',', 'email_address', 'FROM', 'Professionals', 'EXCEPT', 'SELECT', 'T1.professional_id', ',', 'T1.role_code', ',', 'T1.email_address', 'FROM', 'Professionals', 'AS', 'T1', 'JOIN', 'Treatments', 'AS', 'T2', 'ON', 'T1.professional_id', '=', 'T2.professional_id']","['select', 'professional_id', ',', 'role_code', ',', 'email_address', 'from', 'professionals', 'except', 'select', 't1', '.', 'professional_id', ',', 't1', '.', 'role_code', ',', 't1', '.', 'email_address', 'from', 'professionals', 'as', 't1', 'join', 'treatments', 'as', 't2', 'on', 't1', '.', 'professional_id', '=', 't2', '.', 'professional_id']","Which professional did not operate any treatment on dogs? List the professional's id, role and email.","['Which', 'professional', 'did', 'not', 'operate', 'any', 'treatment', 'on', 'dogs', '?', 'List', 'the', 'professional', ""'s"", 'id', ',', 'role', 'and', 'email', '.']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 34, False], None]], [0, [0, [0, 41, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 6], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]]}, 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 34, False], None]], [0, [0, [0, 41, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
dog_kennels,"SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id","['SELECT', 'professional_id', ',', 'role_code', ',', 'email_address', 'FROM', 'Professionals', 'EXCEPT', 'SELECT', 'T1.professional_id', ',', 'T1.role_code', ',', 'T1.email_address', 'FROM', 'Professionals', 'AS', 'T1', 'JOIN', 'Treatments', 'AS', 'T2', 'ON', 'T1.professional_id', '=', 'T2.professional_id']","['select', 'professional_id', ',', 'role_code', ',', 'email_address', 'from', 'professionals', 'except', 'select', 't1', '.', 'professional_id', ',', 't1', '.', 'role_code', ',', 't1', '.', 'email_address', 'from', 'professionals', 'as', 't1', 'join', 'treatments', 'as', 't2', 'on', 't1', '.', 'professional_id', '=', 't2', '.', 'professional_id']","Give me the id, role and email of the professionals who did not perform any treatment on dogs.","['Give', 'me', 'the', 'id', ',', 'role', 'and', 'email', 'of', 'the', 'professionals', 'who', 'did', 'not', 'perform', 'any', 'treatment', 'on', 'dogs', '.']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 34, False], None]], [0, [0, [0, 41, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': {'from': {'table_units': [['table_unit', 6], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]]}, 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 34, False], None]], [0, [0, [0, 41, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}}"
dog_kennels,"SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'T1.owner_id', ',', 'T2.first_name', ',', 'T2.last_name', 'FROM', 'Dogs', 'AS', 'T1', 'JOIN', 'Owners', 'AS', 'T2', 'ON', 'T1.owner_id', '=', 'T2.owner_id', 'GROUP', 'BY', 'T1.owner_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'owner_id', ',', 't2', '.', 'first_name', ',', 't2', '.', 'last_name', 'from', 'dogs', 'as', 't1', 'join', 'owners', 'as', 't2', 'on', 't1', '.', 'owner_id', '=', 't2', '.', 'owner_id', 'group', 'by', 't1', '.', 'owner_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']","Which owner owns the most dogs? List the owner id, first name and last name.","['Which', 'owner', 'owns', 'the', 'most', 'dogs', '?', 'List', 'the', 'owner', 'id', ',', 'first', 'name', 'and', 'last', 'name', '.']","{'from': {'table_units': [['table_unit', 5], ['table_unit', 4]], 'conds': [[False, 2, [0, [0, 21, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 21, False], None]], [0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'where': [], 'groupBy': [[0, 21, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'T1.owner_id', ',', 'T2.first_name', ',', 'T2.last_name', 'FROM', 'Dogs', 'AS', 'T1', 'JOIN', 'Owners', 'AS', 'T2', 'ON', 'T1.owner_id', '=', 'T2.owner_id', 'GROUP', 'BY', 'T1.owner_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'owner_id', ',', 't2', '.', 'first_name', ',', 't2', '.', 'last_name', 'from', 'dogs', 'as', 't1', 'join', 'owners', 'as', 't2', 'on', 't1', '.', 'owner_id', '=', 't2', '.', 'owner_id', 'group', 'by', 't1', '.', 'owner_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']","Return the owner id, first name and last name of the owner who has the most dogs.","['Return', 'the', 'owner', 'id', ',', 'first', 'name', 'and', 'last', 'name', 'of', 'the', 'owner', 'who', 'has', 'the', 'most', 'dogs', '.']","{'from': {'table_units': [['table_unit', 5], ['table_unit', 4]], 'conds': [[False, 2, [0, [0, 21, False], None], [0, 10, False], None]]}, 'select': [False, [[0, [0, [0, 21, False], None]], [0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]]]], 'where': [], 'groupBy': [[0, 21, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","['SELECT', 'T1.professional_id', ',', 'T1.role_code', ',', 'T1.first_name', 'FROM', 'Professionals', 'AS', 'T1', 'JOIN', 'Treatments', 'AS', 'T2', 'ON', 'T1.professional_id', '=', 'T2.professional_id', 'GROUP', 'BY', 'T1.professional_id', 'HAVING', 'count', '(', '*', ')', '>', '=', '2']","['select', 't1', '.', 'professional_id', ',', 't1', '.', 'role_code', ',', 't1', '.', 'first_name', 'from', 'professionals', 'as', 't1', 'join', 'treatments', 'as', 't2', 'on', 't1', '.', 'professional_id', '=', 't2', '.', 'professional_id', 'group', 'by', 't1', '.', 'professional_id', 'having', 'count', '(', '*', ')', '>', '=', 'value']","Which professionals have done at least two treatments? List the professional's id, role, and first name.","['Which', 'professionals', 'have', 'done', 'at', 'least', 'two', 'treatments', '?', 'List', 'the', 'professional', ""'s"", 'id', ',', 'role', ',', 'and', 'first', 'name', '.']","{'from': {'table_units': [['table_unit', 6], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]]}, 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 34, False], None]], [0, [0, [0, 35, False], None]]]], 'where': [], 'groupBy': [[0, 33, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","['SELECT', 'T1.professional_id', ',', 'T1.role_code', ',', 'T1.first_name', 'FROM', 'Professionals', 'AS', 'T1', 'JOIN', 'Treatments', 'AS', 'T2', 'ON', 'T1.professional_id', '=', 'T2.professional_id', 'GROUP', 'BY', 'T1.professional_id', 'HAVING', 'count', '(', '*', ')', '>', '=', '2']","['select', 't1', '.', 'professional_id', ',', 't1', '.', 'role_code', ',', 't1', '.', 'first_name', 'from', 'professionals', 'as', 't1', 'join', 'treatments', 'as', 't2', 'on', 't1', '.', 'professional_id', '=', 't2', '.', 'professional_id', 'group', 'by', 't1', '.', 'professional_id', 'having', 'count', '(', '*', ')', '>', '=', 'value']","What are the id, role, and first name of the professionals who have performed two or more treatments?","['What', 'are', 'the', 'id', ',', 'role', ',', 'and', 'first', 'name', 'of', 'the', 'professionals', 'who', 'have', 'performed', 'two', 'or', 'more', 'treatments', '?']","{'from': {'table_units': [['table_unit', 6], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]]}, 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 34, False], None]], [0, [0, [0, 35, False], None]]]], 'where': [], 'groupBy': [[0, 33, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T1.breed_name', 'FROM', 'Breeds', 'AS', 'T1', 'JOIN', 'Dogs', 'AS', 'T2', 'ON', 'T1.breed_code', '=', 'T2.breed_code', 'GROUP', 'BY', 'T1.breed_name', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'breed_name', 'from', 'breeds', 'as', 't1', 'join', 'dogs', 'as', 't2', 'on', 't1', '.', 'breed_code', '=', 't2', '.', 'breed_code', 'group', 'by', 't1', '.', 'breed_name', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the name of the breed with the most dogs?,"['What', 'is', 'the', 'name', 'of', 'the', 'breed', 'with', 'the', 'most', 'dogs', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 2, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1,"['SELECT', 'T1.breed_name', 'FROM', 'Breeds', 'AS', 'T1', 'JOIN', 'Dogs', 'AS', 'T2', 'ON', 'T1.breed_code', '=', 'T2.breed_code', 'GROUP', 'BY', 'T1.breed_name', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'breed_name', 'from', 'breeds', 'as', 't1', 'join', 'dogs', 'as', 't2', 'on', 't1', '.', 'breed_code', '=', 't2', '.', 'breed_code', 'group', 'by', 't1', '.', 'breed_name', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which breed do the most dogs have? Give me the breed name.,"['Which', 'breed', 'do', 'the', 'most', 'dogs', 'have', '?', 'Give', 'me', 'the', 'breed', 'name', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 23, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 2, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'T1.owner_id', ',', 'T1.last_name', 'FROM', 'Owners', 'AS', 'T1', 'JOIN', 'Dogs', 'AS', 'T2', 'ON', 'T1.owner_id', '=', 'T2.owner_id', 'JOIN', 'Treatments', 'AS', 'T3', 'ON', 'T2.dog_id', '=', 'T3.dog_id', 'GROUP', 'BY', 'T1.owner_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'owner_id', ',', 't1', '.', 'last_name', 'from', 'owners', 'as', 't1', 'join', 'dogs', 'as', 't2', 'on', 't1', '.', 'owner_id', '=', 't2', '.', 'owner_id', 'join', 'treatments', 'as', 't3', 'on', 't2', '.', 'dog_id', '=', 't3', '.', 'dog_id', 'group', 'by', 't1', '.', 'owner_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.,"['Which', 'owner', 'has', 'paid', 'for', 'the', 'most', 'treatments', 'on', 'his', 'or', 'her', 'dogs', '?', 'List', 'the', 'owner', 'id', 'and', 'last', 'name', '.']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None], 'and', [False, 2, [0, [0, 20, False], None], [0, 45, False], None]]}, 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 12, False], None]]]], 'where': [], 'groupBy': [[0, 10, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","['SELECT', 'T1.owner_id', ',', 'T1.last_name', 'FROM', 'Owners', 'AS', 'T1', 'JOIN', 'Dogs', 'AS', 'T2', 'ON', 'T1.owner_id', '=', 'T2.owner_id', 'JOIN', 'Treatments', 'AS', 'T3', 'ON', 'T2.dog_id', '=', 'T3.dog_id', 'GROUP', 'BY', 'T1.owner_id', 'ORDER', 'BY', 'count', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'owner_id', ',', 't1', '.', 'last_name', 'from', 'owners', 'as', 't1', 'join', 'dogs', 'as', 't2', 'on', 't1', '.', 'owner_id', '=', 't2', '.', 'owner_id', 'join', 'treatments', 'as', 't3', 'on', 't2', '.', 'dog_id', '=', 't3', '.', 'dog_id', 'group', 'by', 't1', '.', 'owner_id', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.,"['Tell', 'me', 'the', 'owner', 'id', 'and', 'last', 'name', 'of', 'the', 'owner', 'who', 'spent', 'the', 'most', 'on', 'treatments', 'of', 'his', 'or', 'her', 'dogs', '.']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None], 'and', [False, 2, [0, [0, 20, False], None], [0, 45, False], None]]}, 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 12, False], None]]]], 'where': [], 'groupBy': [[0, 10, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1,"['SELECT', 'T1.treatment_type_description', 'FROM', 'Treatment_types', 'AS', 'T1', 'JOIN', 'Treatments', 'AS', 'T2', 'ON', 'T1.treatment_type_code', '=', 'T2.treatment_type_code', 'GROUP', 'BY', 'T1.treatment_type_code', 'ORDER', 'BY', 'sum', '(', 'cost_of_treatment', ')', 'ASC', 'LIMIT', '1']","['select', 't1', '.', 'treatment_type_description', 'from', 'treatment_types', 'as', 't1', 'join', 'treatments', 'as', 't2', 'on', 't1', '.', 'treatment_type_code', '=', 't2', '.', 'treatment_type_code', 'group', 'by', 't1', '.', 'treatment_type_code', 'order', 'by', 'sum', '(', 'cost_of_treatment', ')', 'asc', 'limit', 'value']",What is the description of the treatment type that costs the least money in total?,"['What', 'is', 'the', 'description', 'of', 'the', 'treatment', 'type', 'that', 'costs', 'the', 'least', 'money', 'in', 'total', '?']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 47, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [[0, 8, False]], 'having': [], 'orderBy': ['asc', [[0, [4, 49, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1,"['SELECT', 'T1.treatment_type_description', 'FROM', 'Treatment_types', 'AS', 'T1', 'JOIN', 'Treatments', 'AS', 'T2', 'ON', 'T1.treatment_type_code', '=', 'T2.treatment_type_code', 'GROUP', 'BY', 'T1.treatment_type_code', 'ORDER', 'BY', 'sum', '(', 'cost_of_treatment', ')', 'ASC', 'LIMIT', '1']","['select', 't1', '.', 'treatment_type_description', 'from', 'treatment_types', 'as', 't1', 'join', 'treatments', 'as', 't2', 'on', 't1', '.', 'treatment_type_code', '=', 't2', '.', 'treatment_type_code', 'group', 'by', 't1', '.', 'treatment_type_code', 'order', 'by', 'sum', '(', 'cost_of_treatment', ')', 'asc', 'limit', 'value']",Give me the description of the treatment type whose total cost is the lowest.,"['Give', 'me', 'the', 'description', 'of', 'the', 'treatment', 'type', 'whose', 'total', 'cost', 'is', 'the', 'lowest', '.']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 8, False], None], [0, 47, False], None]]}, 'select': [False, [[0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [[0, 8, False]], 'having': [], 'orderBy': ['asc', [[0, [4, 49, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1","['SELECT', 'T1.owner_id', ',', 'T1.zip_code', 'FROM', 'Owners', 'AS', 'T1', 'JOIN', 'Dogs', 'AS', 'T2', 'ON', 'T1.owner_id', '=', 'T2.owner_id', 'JOIN', 'Treatments', 'AS', 'T3', 'ON', 'T2.dog_id', '=', 'T3.dog_id', 'GROUP', 'BY', 'T1.owner_id', 'ORDER', 'BY', 'sum', '(', 'T3.cost_of_treatment', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'owner_id', ',', 't1', '.', 'zip_code', 'from', 'owners', 'as', 't1', 'join', 'dogs', 'as', 't2', 'on', 't1', '.', 'owner_id', '=', 't2', '.', 'owner_id', 'join', 'treatments', 'as', 't3', 'on', 't2', '.', 'dog_id', '=', 't3', '.', 'dog_id', 'group', 'by', 't1', '.', 'owner_id', 'order', 'by', 'sum', '(', 't3', '.', 'cost_of_treatment', ')', 'desc', 'limit', 'value']",Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.,"['Which', 'owner', 'has', 'paid', 'the', 'largest', 'amount', 'of', 'money', 'in', 'total', 'for', 'their', 'dogs', '?', 'Show', 'the', 'owner', 'id', 'and', 'zip', 'code', '.']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None], 'and', [False, 2, [0, [0, 20, False], None], [0, 45, False], None]]}, 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 16, False], None]]]], 'where': [], 'groupBy': [[0, 10, False]], 'having': [], 'orderBy': ['desc', [[0, [4, 49, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1","['SELECT', 'T1.owner_id', ',', 'T1.zip_code', 'FROM', 'Owners', 'AS', 'T1', 'JOIN', 'Dogs', 'AS', 'T2', 'ON', 'T1.owner_id', '=', 'T2.owner_id', 'JOIN', 'Treatments', 'AS', 'T3', 'ON', 'T2.dog_id', '=', 'T3.dog_id', 'GROUP', 'BY', 'T1.owner_id', 'ORDER', 'BY', 'sum', '(', 'T3.cost_of_treatment', ')', 'DESC', 'LIMIT', '1']","['select', 't1', '.', 'owner_id', ',', 't1', '.', 'zip_code', 'from', 'owners', 'as', 't1', 'join', 'dogs', 'as', 't2', 'on', 't1', '.', 'owner_id', '=', 't2', '.', 'owner_id', 'join', 'treatments', 'as', 't3', 'on', 't2', '.', 'dog_id', '=', 't3', '.', 'dog_id', 'group', 'by', 't1', '.', 'owner_id', 'order', 'by', 'sum', '(', 't3', '.', 'cost_of_treatment', ')', 'desc', 'limit', 'value']",Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.,"['Find', 'the', 'owner', 'id', 'and', 'zip', 'code', 'of', 'the', 'owner', 'who', 'spent', 'the', 'most', 'money', 'in', 'total', 'for', 'his', 'or', 'her', 'dogs', '.']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None], 'and', [False, 2, [0, [0, 20, False], None], [0, 45, False], None]]}, 'select': [False, [[0, [0, [0, 10, False], None]], [0, [0, [0, 16, False], None]]]], 'where': [], 'groupBy': [[0, 10, False]], 'having': [], 'orderBy': ['desc', [[0, [4, 49, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","['SELECT', 'T1.professional_id', ',', 'T1.cell_number', 'FROM', 'Professionals', 'AS', 'T1', 'JOIN', 'Treatments', 'AS', 'T2', 'ON', 'T1.professional_id', '=', 'T2.professional_id', 'GROUP', 'BY', 'T1.professional_id', 'HAVING', 'count', '(', '*', ')', '>', '=', '2']","['select', 't1', '.', 'professional_id', ',', 't1', '.', 'cell_number', 'from', 'professionals', 'as', 't1', 'join', 'treatments', 'as', 't2', 'on', 't1', '.', 'professional_id', '=', 't2', '.', 'professional_id', 'group', 'by', 't1', '.', 'professional_id', 'having', 'count', '(', '*', ')', '>', '=', 'value']",Which professionals have done at least two types of treatments? List the professional id and cell phone.,"['Which', 'professionals', 'have', 'done', 'at', 'least', 'two', 'types', 'of', 'treatments', '?', 'List', 'the', 'professional', 'id', 'and', 'cell', 'phone', '.']","{'from': {'table_units': [['table_unit', 6], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]]}, 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 43, False], None]]]], 'where': [], 'groupBy': [[0, 33, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","['SELECT', 'T1.professional_id', ',', 'T1.cell_number', 'FROM', 'Professionals', 'AS', 'T1', 'JOIN', 'Treatments', 'AS', 'T2', 'ON', 'T1.professional_id', '=', 'T2.professional_id', 'GROUP', 'BY', 'T1.professional_id', 'HAVING', 'count', '(', '*', ')', '>', '=', '2']","['select', 't1', '.', 'professional_id', ',', 't1', '.', 'cell_number', 'from', 'professionals', 'as', 't1', 'join', 'treatments', 'as', 't2', 'on', 't1', '.', 'professional_id', '=', 't2', '.', 'professional_id', 'group', 'by', 't1', '.', 'professional_id', 'having', 'count', '(', '*', ')', '>', '=', 'value']",Find the id and cell phone of the professionals who operate two or more types of treatments.,"['Find', 'the', 'id', 'and', 'cell', 'phone', 'of', 'the', 'professionals', 'who', 'operate', 'two', 'or', 'more', 'types', 'of', 'treatments', '.']","{'from': {'table_units': [['table_unit', 6], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None]]}, 'select': [False, [[0, [0, [0, 33, False], None]], [0, [0, [0, 43, False], None]]]], 'where': [], 'groupBy': [[0, 33, False]], 'having': [[False, 5, [0, [3, 0, False], None], 2.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )","['SELECT', 'DISTINCT', 'T1.first_name', ',', 'T1.last_name', 'FROM', 'Professionals', 'AS', 'T1', 'JOIN', 'Treatments', 'AS', 'T2', 'WHERE', 'cost_of_treatment', '<', '(', 'SELECT', 'avg', '(', 'cost_of_treatment', ')', 'FROM', 'Treatments', ')']","['select', 'distinct', 't1', '.', 'first_name', ',', 't1', '.', 'last_name', 'from', 'professionals', 'as', 't1', 'join', 'treatments', 'as', 't2', 'where', 'cost_of_treatment', '<', '(', 'select', 'avg', '(', 'cost_of_treatment', ')', 'from', 'treatments', ')']",What are the first name and last name of the professionals who have done treatment with cost below average?,"['What', 'are', 'the', 'first', 'name', 'and', 'last', 'name', 'of', 'the', 'professionals', 'who', 'have', 'done', 'treatment', 'with', 'cost', 'below', 'average', '?']","{'from': {'table_units': [['table_unit', 6], ['table_unit', 7]], 'conds': []}, 'select': [True, [[0, [0, [0, 35, False], None]], [0, [0, [0, 40, False], None]]]], 'where': [[False, 4, [0, [0, 49, False], None], {'from': {'table_units': [['table_unit', 7]], 'conds': []}, 'select': [False, [[5, [0, [0, 49, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )","['SELECT', 'DISTINCT', 'T1.first_name', ',', 'T1.last_name', 'FROM', 'Professionals', 'AS', 'T1', 'JOIN', 'Treatments', 'AS', 'T2', 'WHERE', 'cost_of_treatment', '<', '(', 'SELECT', 'avg', '(', 'cost_of_treatment', ')', 'FROM', 'Treatments', ')']","['select', 'distinct', 't1', '.', 'first_name', ',', 't1', '.', 'last_name', 'from', 'professionals', 'as', 't1', 'join', 'treatments', 'as', 't2', 'where', 'cost_of_treatment', '<', '(', 'select', 'avg', '(', 'cost_of_treatment', ')', 'from', 'treatments', ')']",Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.,"['Which', 'professionals', 'have', 'operated', 'a', 'treatment', 'that', 'costs', 'less', 'than', 'the', 'average', '?', 'Give', 'me', 'theor', 'first', 'names', 'and', 'last', 'names', '.']","{'from': {'table_units': [['table_unit', 6], ['table_unit', 7]], 'conds': []}, 'select': [True, [[0, [0, [0, 35, False], None]], [0, [0, [0, 40, False], None]]]], 'where': [[False, 4, [0, [0, 49, False], None], {'from': {'table_units': [['table_unit', 7]], 'conds': []}, 'select': [False, [[5, [0, [0, 49, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id","['SELECT', 'T1.date_of_treatment', ',', 'T2.first_name', 'FROM', 'Treatments', 'AS', 'T1', 'JOIN', 'Professionals', 'AS', 'T2', 'ON', 'T1.professional_id', '=', 'T2.professional_id']","['select', 't1', '.', 'date_of_treatment', ',', 't2', '.', 'first_name', 'from', 'treatments', 'as', 't1', 'join', 'professionals', 'as', 't2', 'on', 't1', '.', 'professional_id', '=', 't2', '.', 'professional_id']","List the date of each treatment, together with the first name of the professional who operated it.","['List', 'the', 'date', 'of', 'each', 'treatment', ',', 'together', 'with', 'the', 'first', 'name', 'of', 'the', 'professional', 'who', 'operated', 'it', '.']","{'from': {'table_units': [['table_unit', 7], ['table_unit', 6]], 'conds': [[False, 2, [0, [0, 46, False], None], [0, 33, False], None]]}, 'select': [False, [[0, [0, [0, 48, False], None]], [0, [0, [0, 35, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id","['SELECT', 'T1.date_of_treatment', ',', 'T2.first_name', 'FROM', 'Treatments', 'AS', 'T1', 'JOIN', 'Professionals', 'AS', 'T2', 'ON', 'T1.professional_id', '=', 'T2.professional_id']","['select', 't1', '.', 'date_of_treatment', ',', 't2', '.', 'first_name', 'from', 'treatments', 'as', 't1', 'join', 'professionals', 'as', 't2', 'on', 't1', '.', 'professional_id', '=', 't2', '.', 'professional_id']",What are the date and the operating professional's first name of each treatment?,"['What', 'are', 'the', 'date', 'and', 'the', 'operating', 'professional', ""'s"", 'first', 'name', 'of', 'each', 'treatment', '?']","{'from': {'table_units': [['table_unit', 7], ['table_unit', 6]], 'conds': [[False, 2, [0, [0, 46, False], None], [0, 33, False], None]]}, 'select': [False, [[0, [0, [0, 48, False], None]], [0, [0, [0, 35, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code","['SELECT', 'T1.cost_of_treatment', ',', 'T2.treatment_type_description', 'FROM', 'Treatments', 'AS', 'T1', 'JOIN', 'treatment_types', 'AS', 'T2', 'ON', 'T1.treatment_type_code', '=', 'T2.treatment_type_code']","['select', 't1', '.', 'cost_of_treatment', ',', 't2', '.', 'treatment_type_description', 'from', 'treatments', 'as', 't1', 'join', 'treatment_types', 'as', 't2', 'on', 't1', '.', 'treatment_type_code', '=', 't2', '.', 'treatment_type_code']",List the cost of each treatment and the corresponding treatment type description.,"['List', 'the', 'cost', 'of', 'each', 'treatment', 'and', 'the', 'corresponding', 'treatment', 'type', 'description', '.']","{'from': {'table_units': [['table_unit', 7], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 47, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 49, False], None]], [0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code","['SELECT', 'T1.cost_of_treatment', ',', 'T2.treatment_type_description', 'FROM', 'Treatments', 'AS', 'T1', 'JOIN', 'treatment_types', 'AS', 'T2', 'ON', 'T1.treatment_type_code', '=', 'T2.treatment_type_code']","['select', 't1', '.', 'cost_of_treatment', ',', 't2', '.', 'treatment_type_description', 'from', 'treatments', 'as', 't1', 'join', 'treatment_types', 'as', 't2', 'on', 't1', '.', 'treatment_type_code', '=', 't2', '.', 'treatment_type_code']",What are the cost and treatment type description of each treatment?,"['What', 'are', 'the', 'cost', 'and', 'treatment', 'type', 'description', 'of', 'each', 'treatment', '?']","{'from': {'table_units': [['table_unit', 7], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 47, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 49, False], None]], [0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","['SELECT', 'T1.first_name', ',', 'T1.last_name', ',', 'T2.size_code', 'FROM', 'Owners', 'AS', 'T1', 'JOIN', 'Dogs', 'AS', 'T2', 'ON', 'T1.owner_id', '=', 'T2.owner_id']","['select', 't1', '.', 'first_name', ',', 't1', '.', 'last_name', ',', 't2', '.', 'size_code', 'from', 'owners', 'as', 't1', 'join', 'dogs', 'as', 't2', 'on', 't1', '.', 'owner_id', '=', 't2', '.', 'owner_id']","List each owner's first name, last name, and the size of his for her dog.","['List', 'each', 'owner', ""'s"", 'first', 'name', ',', 'last', 'name', ',', 'and', 'the', 'size', 'of', 'his', 'for', 'her', 'dog', '.']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]], [0, [0, [0, 24, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","['SELECT', 'T1.first_name', ',', 'T1.last_name', ',', 'T2.size_code', 'FROM', 'Owners', 'AS', 'T1', 'JOIN', 'Dogs', 'AS', 'T2', 'ON', 'T1.owner_id', '=', 'T2.owner_id']","['select', 't1', '.', 'first_name', ',', 't1', '.', 'last_name', ',', 't2', '.', 'size_code', 'from', 'owners', 'as', 't1', 'join', 'dogs', 'as', 't2', 'on', 't1', '.', 'owner_id', '=', 't2', '.', 'owner_id']","What are each owner's first name, last name, and the size of their dog?","['What', 'are', 'each', 'owner', ""'s"", 'first', 'name', ',', 'last', 'name', ',', 'and', 'the', 'size', 'of', 'their', 'dog', '?']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]], [0, [0, [0, 24, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","['SELECT', 'T1.first_name', ',', 'T2.name', 'FROM', 'Owners', 'AS', 'T1', 'JOIN', 'Dogs', 'AS', 'T2', 'ON', 'T1.owner_id', '=', 'T2.owner_id']","['select', 't1', '.', 'first_name', ',', 't2', '.', 'name', 'from', 'owners', 'as', 't1', 'join', 'dogs', 'as', 't2', 'on', 't1', '.', 'owner_id', '=', 't2', '.', 'owner_id']",List pairs of the owner's first name and the dogs's name.,"['List', 'pairs', 'of', 'the', 'owner', ""'s"", 'first', 'name', 'and', 'the', 'dogs', ""'s"", 'name', '.']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 25, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","['SELECT', 'T1.first_name', ',', 'T2.name', 'FROM', 'Owners', 'AS', 'T1', 'JOIN', 'Dogs', 'AS', 'T2', 'ON', 'T1.owner_id', '=', 'T2.owner_id']","['select', 't1', '.', 'first_name', ',', 't2', '.', 'name', 'from', 'owners', 'as', 't1', 'join', 'dogs', 'as', 't2', 'on', 't1', '.', 'owner_id', '=', 't2', '.', 'owner_id']",What are each owner's first name and their dogs's name?,"['What', 'are', 'each', 'owner', ""'s"", 'first', 'name', 'and', 'their', 'dogs', ""'s"", 'name', '?']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 25, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )","['SELECT', 'T1.name', ',', 'T2.date_of_treatment', 'FROM', 'Dogs', 'AS', 'T1', 'JOIN', 'Treatments', 'AS', 'T2', 'ON', 'T1.dog_id', '=', 'T2.dog_id', 'WHERE', 'T1.breed_code', '=', '(', 'SELECT', 'breed_code', 'FROM', 'Dogs', 'GROUP', 'BY', 'breed_code', 'ORDER', 'BY', 'count', '(', '*', ')', 'ASC', 'LIMIT', '1', ')']","['select', 't1', '.', 'name', ',', 't2', '.', 'date_of_treatment', 'from', 'dogs', 'as', 't1', 'join', 'treatments', 'as', 't2', 'on', 't1', '.', 'dog_id', '=', 't2', '.', 'dog_id', 'where', 't1', '.', 'breed_code', '=', '(', 'select', 'breed_code', 'from', 'dogs', 'group', 'by', 'breed_code', 'order', 'by', 'count', '(', '*', ')', 'asc', 'limit', 'value', ')']",List the names of the dogs of the rarest breed and the treatment dates of them.,"['List', 'the', 'names', 'of', 'the', 'dogs', 'of', 'the', 'rarest', 'breed', 'and', 'the', 'treatment', 'dates', 'of', 'them', '.']","{'from': {'table_units': [['table_unit', 5], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 20, False], None], [0, 45, False], None]]}, 'select': [False, [[0, [0, [0, 25, False], None]], [0, [0, [0, 48, False], None]]]], 'where': [[False, 2, [0, [0, 23, False], None], {'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[0, [0, [0, 23, False], None]]]], 'where': [], 'groupBy': [[0, 23, False]], 'having': [], 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )","['SELECT', 'T1.name', ',', 'T2.date_of_treatment', 'FROM', 'Dogs', 'AS', 'T1', 'JOIN', 'Treatments', 'AS', 'T2', 'ON', 'T1.dog_id', '=', 'T2.dog_id', 'WHERE', 'T1.breed_code', '=', '(', 'SELECT', 'breed_code', 'FROM', 'Dogs', 'GROUP', 'BY', 'breed_code', 'ORDER', 'BY', 'count', '(', '*', ')', 'ASC', 'LIMIT', '1', ')']","['select', 't1', '.', 'name', ',', 't2', '.', 'date_of_treatment', 'from', 'dogs', 'as', 't1', 'join', 'treatments', 'as', 't2', 'on', 't1', '.', 'dog_id', '=', 't2', '.', 'dog_id', 'where', 't1', '.', 'breed_code', '=', '(', 'select', 'breed_code', 'from', 'dogs', 'group', 'by', 'breed_code', 'order', 'by', 'count', '(', '*', ')', 'asc', 'limit', 'value', ')']",Which dogs are of the rarest breed? Show their names and treatment dates.,"['Which', 'dogs', 'are', 'of', 'the', 'rarest', 'breed', '?', 'Show', 'their', 'names', 'and', 'treatment', 'dates', '.']","{'from': {'table_units': [['table_unit', 5], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 20, False], None], [0, 45, False], None]]}, 'select': [False, [[0, [0, [0, 25, False], None]], [0, [0, [0, 48, False], None]]]], 'where': [[False, 2, [0, [0, 23, False], None], {'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[0, [0, [0, 23, False], None]]]], 'where': [], 'groupBy': [[0, 23, False]], 'having': [], 'orderBy': ['asc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'","['SELECT', 'T1.first_name', ',', 'T2.name', 'FROM', 'Owners', 'AS', 'T1', 'JOIN', 'Dogs', 'AS', 'T2', 'ON', 'T1.owner_id', '=', 'T2.owner_id', 'WHERE', 'T1.state', '=', ""'Virginia"", ""'""]","['select', 't1', '.', 'first_name', ',', 't2', '.', 'name', 'from', 'owners', 'as', 't1', 'join', 'dogs', 'as', 't2', 'on', 't1', '.', 'owner_id', '=', 't2', '.', 'owner_id', 'where', 't1', '.', 'state', '=', 'value']",Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.,"['Which', 'dogs', 'are', 'owned', 'by', 'someone', 'who', 'lives', 'in', 'Virginia', '?', 'List', 'the', 'owner', ""'s"", 'first', 'name', 'and', 'the', 'dog', ""'s"", 'name', '.']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 25, False], None]]]], 'where': [[False, 2, [0, [0, 15, False], None], '""Virginia""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'","['SELECT', 'T1.first_name', ',', 'T2.name', 'FROM', 'Owners', 'AS', 'T1', 'JOIN', 'Dogs', 'AS', 'T2', 'ON', 'T1.owner_id', '=', 'T2.owner_id', 'WHERE', 'T1.state', '=', ""'Virginia"", ""'""]","['select', 't1', '.', 'first_name', ',', 't2', '.', 'name', 'from', 'owners', 'as', 't1', 'join', 'dogs', 'as', 't2', 'on', 't1', '.', 'owner_id', '=', 't2', '.', 'owner_id', 'where', 't1', '.', 'state', '=', 'value']",Find the first names of owners living in Virginia and the names of dogs they own.,"['Find', 'the', 'first', 'names', 'of', 'owners', 'living', 'in', 'Virginia', 'and', 'the', 'names', 'of', 'dogs', 'they', 'own', '.']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]]}, 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 25, False], None]]]], 'where': [[False, 2, [0, [0, 15, False], None], '""Virginia""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id","['SELECT', 'DISTINCT', 'T1.date_arrived', ',', 'T1.date_departed', 'FROM', 'Dogs', 'AS', 'T1', 'JOIN', 'Treatments', 'AS', 'T2', 'ON', 'T1.dog_id', '=', 'T2.dog_id']","['select', 'distinct', 't1', '.', 'date_arrived', ',', 't1', '.', 'date_departed', 'from', 'dogs', 'as', 't1', 'join', 'treatments', 'as', 't2', 'on', 't1', '.', 'dog_id', '=', 't2', '.', 'dog_id']",What are the arriving date and the departing date of the dogs who have gone through a treatment?,"['What', 'are', 'the', 'arriving', 'date', 'and', 'the', 'departing', 'date', 'of', 'the', 'dogs', 'who', 'have', 'gone', 'through', 'a', 'treatment', '?']","{'from': {'table_units': [['table_unit', 5], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 20, False], None], [0, 45, False], None]]}, 'select': [True, [[0, [0, [0, 30, False], None]], [0, [0, [0, 32, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id","['SELECT', 'DISTINCT', 'T1.date_arrived', ',', 'T1.date_departed', 'FROM', 'Dogs', 'AS', 'T1', 'JOIN', 'Treatments', 'AS', 'T2', 'ON', 'T1.dog_id', '=', 'T2.dog_id']","['select', 'distinct', 't1', '.', 'date_arrived', ',', 't1', '.', 'date_departed', 'from', 'dogs', 'as', 't1', 'join', 'treatments', 'as', 't2', 'on', 't1', '.', 'dog_id', '=', 't2', '.', 'dog_id']",Find the arriving date and the departing date of the dogs that received a treatment.,"['Find', 'the', 'arriving', 'date', 'and', 'the', 'departing', 'date', 'of', 'the', 'dogs', 'that', 'received', 'a', 'treatment', '.']","{'from': {'table_units': [['table_unit', 5], ['table_unit', 7]], 'conds': [[False, 2, [0, [0, 20, False], None], [0, 45, False], None]]}, 'select': [True, [[0, [0, [0, 30, False], None]], [0, [0, [0, 32, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs ),"['SELECT', 'T1.last_name', 'FROM', 'Owners', 'AS', 'T1', 'JOIN', 'Dogs', 'AS', 'T2', 'ON', 'T1.owner_id', '=', 'T2.owner_id', 'WHERE', 'T2.age', '=', '(', 'SELECT', 'max', '(', 'age', ')', 'FROM', 'Dogs', ')']","['select', 't1', '.', 'last_name', 'from', 'owners', 'as', 't1', 'join', 'dogs', 'as', 't2', 'on', 't1', '.', 'owner_id', '=', 't2', '.', 'owner_id', 'where', 't2', '.', 'age', '=', '(', 'select', 'max', '(', 'age', ')', 'from', 'dogs', ')']",List the last name of the owner owning the youngest dog.,"['List', 'the', 'last', 'name', 'of', 'the', 'owner', 'owning', 'the', 'youngest', 'dog', '.']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]]}, 'select': [False, [[0, [0, [0, 12, False], None]]]], 'where': [[False, 2, [0, [0, 26, False], None], {'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[1, [0, [0, 26, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs ),"['SELECT', 'T1.last_name', 'FROM', 'Owners', 'AS', 'T1', 'JOIN', 'Dogs', 'AS', 'T2', 'ON', 'T1.owner_id', '=', 'T2.owner_id', 'WHERE', 'T2.age', '=', '(', 'SELECT', 'max', '(', 'age', ')', 'FROM', 'Dogs', ')']","['select', 't1', '.', 'last_name', 'from', 'owners', 'as', 't1', 'join', 'dogs', 'as', 't2', 'on', 't1', '.', 'owner_id', '=', 't2', '.', 'owner_id', 'where', 't2', '.', 'age', '=', '(', 'select', 'max', '(', 'age', ')', 'from', 'dogs', ')']",Who owns the youngest dog? Give me his or her last name.,"['Who', 'owns', 'the', 'youngest', 'dog', '?', 'Give', 'me', 'his', 'or', 'her', 'last', 'name', '.']","{'from': {'table_units': [['table_unit', 4], ['table_unit', 5]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 21, False], None]]}, 'select': [False, [[0, [0, [0, 12, False], None]]]], 'where': [[False, 2, [0, [0, 26, False], None], {'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[1, [0, [0, 26, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin',"['SELECT', 'email_address', 'FROM', 'Professionals', 'WHERE', 'state', '=', ""'Hawaii"", ""'"", 'OR', 'state', '=', ""'Wisconsin"", ""'""]","['select', 'email_address', 'from', 'professionals', 'where', 'state', '=', 'value', 'or', 'state', '=', 'value']",List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.,"['List', 'the', 'emails', 'of', 'the', 'professionals', 'who', 'live', 'in', 'the', 'state', 'of', 'Hawaii', 'or', 'the', 'state', 'of', 'Wisconsin', '.']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 41, False], None]]]], 'where': [[False, 2, [0, [0, 38, False], None], '""Hawaii""', None], 'or', [False, 2, [0, [0, 38, False], None], '""Wisconsin""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin',"['SELECT', 'email_address', 'FROM', 'Professionals', 'WHERE', 'state', '=', ""'Hawaii"", ""'"", 'OR', 'state', '=', ""'Wisconsin"", ""'""]","['select', 'email_address', 'from', 'professionals', 'where', 'state', '=', 'value', 'or', 'state', '=', 'value']",What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?,"['What', 'are', 'the', 'emails', 'of', 'the', 'professionals', 'living', 'in', 'either', 'the', 'state', 'of', 'Hawaii', 'or', 'the', 'state', 'of', 'Wisconsin', '?']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 41, False], None]]]], 'where': [[False, 2, [0, [0, 38, False], None], '""Hawaii""', None], 'or', [False, 2, [0, [0, 38, False], None], '""Wisconsin""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT date_arrived ,  date_departed FROM Dogs","['SELECT', 'date_arrived', ',', 'date_departed', 'FROM', 'Dogs']","['select', 'date_arrived', ',', 'date_departed', 'from', 'dogs']",What are the arriving date and the departing date of all the dogs?,"['What', 'are', 'the', 'arriving', 'date', 'and', 'the', 'departing', 'date', 'of', 'all', 'the', 'dogs', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[0, [0, [0, 30, False], None]], [0, [0, [0, 32, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT date_arrived ,  date_departed FROM Dogs","['SELECT', 'date_arrived', ',', 'date_departed', 'FROM', 'Dogs']","['select', 'date_arrived', ',', 'date_departed', 'from', 'dogs']",List the arrival date and the departure date for all the dogs.,"['List', 'the', 'arrival', 'date', 'and', 'the', 'departure', 'date', 'for', 'all', 'the', 'dogs', '.']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[0, [0, [0, 30, False], None]], [0, [0, [0, 32, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT count(DISTINCT dog_id) FROM Treatments,"['SELECT', 'count', '(', 'DISTINCT', 'dog_id', ')', 'FROM', 'Treatments']","['select', 'count', '(', 'distinct', 'dog_id', ')', 'from', 'treatments']",How many dogs went through any treatments?,"['How', 'many', 'dogs', 'went', 'through', 'any', 'treatments', '?']","{'from': {'table_units': [['table_unit', 7]], 'conds': []}, 'select': [False, [[3, [0, [0, 45, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT count(DISTINCT dog_id) FROM Treatments,"['SELECT', 'count', '(', 'DISTINCT', 'dog_id', ')', 'FROM', 'Treatments']","['select', 'count', '(', 'distinct', 'dog_id', ')', 'from', 'treatments']",Count the number of dogs that went through a treatment.,"['Count', 'the', 'number', 'of', 'dogs', 'that', 'went', 'through', 'a', 'treatment', '.']","{'from': {'table_units': [['table_unit', 7]], 'conds': []}, 'select': [False, [[3, [0, [0, 45, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT count(DISTINCT professional_id) FROM Treatments,"['SELECT', 'count', '(', 'DISTINCT', 'professional_id', ')', 'FROM', 'Treatments']","['select', 'count', '(', 'distinct', 'professional_id', ')', 'from', 'treatments']",How many professionals have performed any treatment to dogs?,"['How', 'many', 'professionals', 'have', 'performed', 'any', 'treatment', 'to', 'dogs', '?']","{'from': {'table_units': [['table_unit', 7]], 'conds': []}, 'select': [False, [[3, [0, [0, 46, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT count(DISTINCT professional_id) FROM Treatments,"['SELECT', 'count', '(', 'DISTINCT', 'professional_id', ')', 'FROM', 'Treatments']","['select', 'count', '(', 'distinct', 'professional_id', ')', 'from', 'treatments']",Find the number of professionals who have ever treated dogs.,"['Find', 'the', 'number', 'of', 'professionals', 'who', 'have', 'ever', 'treated', 'dogs', '.']","{'from': {'table_units': [['table_unit', 7]], 'conds': []}, 'select': [False, [[3, [0, [0, 46, True], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'","['SELECT', 'role_code', ',', 'street', ',', 'city', ',', 'state', 'FROM', 'professionals', 'WHERE', 'city', 'LIKE', ""'"", '%', 'West', '%', ""'""]","['select', 'role_code', ',', 'street', ',', 'city', ',', 'state', 'from', 'professionals', 'where', 'city', 'like', 'value']","Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.","['Which', 'professionals', 'live', 'in', 'a', 'city', 'containing', 'the', 'substring', ""'West"", ""'"", '?', 'List', 'his', 'or', 'her', 'role', ',', 'street', ',', 'city', 'and', 'state', '.']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 34, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]], [0, [0, [0, 38, False], None]]]], 'where': [[False, 9, [0, [0, 37, False], None], '""%West%""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'","['SELECT', 'role_code', ',', 'street', ',', 'city', ',', 'state', 'FROM', 'professionals', 'WHERE', 'city', 'LIKE', ""'"", '%', 'West', '%', ""'""]","['select', 'role_code', ',', 'street', ',', 'city', ',', 'state', 'from', 'professionals', 'where', 'city', 'like', 'value']","Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.","['Find', 'the', 'role', ',', 'street', ',', 'city', 'and', 'state', 'of', 'the', 'professionals', 'living', 'in', 'a', 'city', 'that', 'contains', 'the', 'substring', ""'West"", ""'"", '.']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 34, False], None]], [0, [0, [0, 36, False], None]], [0, [0, [0, 37, False], None]], [0, [0, [0, 38, False], None]]]], 'where': [[False, 9, [0, [0, 37, False], None], '""%West%""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'","['SELECT', 'first_name', ',', 'last_name', ',', 'email_address', 'FROM', 'Owners', 'WHERE', 'state', 'LIKE', ""'"", '%', 'North', '%', ""'""]","['select', 'first_name', ',', 'last_name', ',', 'email_address', 'from', 'owners', 'where', 'state', 'like', 'value']","Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.","['Which', 'owners', 'live', 'in', 'the', 'state', 'whose', 'name', 'contains', 'the', 'substring', ""'North"", ""'"", '?', 'List', 'his', 'first', 'name', ',', 'last', 'name', 'and', 'email', '.']","{'from': {'table_units': [['table_unit', 4]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]], [0, [0, [0, 17, False], None]]]], 'where': [[False, 9, [0, [0, 15, False], None], '""%North%""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'","['SELECT', 'first_name', ',', 'last_name', ',', 'email_address', 'FROM', 'Owners', 'WHERE', 'state', 'LIKE', ""'"", '%', 'North', '%', ""'""]","['select', 'first_name', ',', 'last_name', ',', 'email_address', 'from', 'owners', 'where', 'state', 'like', 'value']","Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.","['Return', 'the', 'first', 'name', ',', 'last', 'name', 'and', 'email', 'of', 'the', 'owners', 'living', 'in', 'a', 'state', 'whose', 'name', 'contains', 'the', 'substring', ""'North"", ""'"", '.']","{'from': {'table_units': [['table_unit', 4]], 'conds': []}, 'select': [False, [[0, [0, [0, 11, False], None]], [0, [0, [0, 12, False], None]], [0, [0, [0, 17, False], None]]]], 'where': [[False, 9, [0, [0, 15, False], None], '""%North%""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs ),"['SELECT', 'count', '(', '*', ')', 'FROM', 'Dogs', 'WHERE', 'age', '<', '(', 'SELECT', 'avg', '(', 'age', ')', 'FROM', 'Dogs', ')']","['select', 'count', '(', '*', ')', 'from', 'dogs', 'where', 'age', '<', '(', 'select', 'avg', '(', 'age', ')', 'from', 'dogs', ')']",How many dogs have an age below the average?,"['How', 'many', 'dogs', 'have', 'an', 'age', 'below', 'the', 'average', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 4, [0, [0, 26, False], None], {'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[5, [0, [0, 26, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs ),"['SELECT', 'count', '(', '*', ')', 'FROM', 'Dogs', 'WHERE', 'age', '<', '(', 'SELECT', 'avg', '(', 'age', ')', 'FROM', 'Dogs', ')']","['select', 'count', '(', '*', ')', 'from', 'dogs', 'where', 'age', '<', '(', 'select', 'avg', '(', 'age', ')', 'from', 'dogs', ')']",Count the number of dogs of an age below the average.,"['Count', 'the', 'number', 'of', 'dogs', 'of', 'an', 'age', 'below', 'the', 'average', '.']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[False, 4, [0, [0, 26, False], None], {'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[5, [0, [0, 26, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1,"['SELECT', 'cost_of_treatment', 'FROM', 'Treatments', 'ORDER', 'BY', 'date_of_treatment', 'DESC', 'LIMIT', '1']","['select', 'cost_of_treatment', 'from', 'treatments', 'order', 'by', 'date_of_treatment', 'desc', 'limit', 'value']",How much does the most recent treatment cost?,"['How', 'much', 'does', 'the', 'most', 'recent', 'treatment', 'cost', '?']","{'from': {'table_units': [['table_unit', 7]], 'conds': []}, 'select': [False, [[0, [0, [0, 49, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 48, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1,"['SELECT', 'cost_of_treatment', 'FROM', 'Treatments', 'ORDER', 'BY', 'date_of_treatment', 'DESC', 'LIMIT', '1']","['select', 'cost_of_treatment', 'from', 'treatments', 'order', 'by', 'date_of_treatment', 'desc', 'limit', 'value']",Show me the cost of the most recently performed treatment.,"['Show', 'me', 'the', 'cost', 'of', 'the', 'most', 'recently', 'performed', 'treatment', '.']","{'from': {'table_units': [['table_unit', 7]], 'conds': []}, 'select': [False, [[0, [0, [0, 49, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 48, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments ),"['SELECT', 'count', '(', '*', ')', 'FROM', 'Dogs', 'WHERE', 'dog_id', 'NOT', 'IN', '(', 'SELECT', 'dog_id', 'FROM', 'Treatments', ')']","['select', 'count', '(', '*', ')', 'from', 'dogs', 'where', 'dog_id', 'not', 'in', '(', 'select', 'dog_id', 'from', 'treatments', ')']",How many dogs have not gone through any treatment?,"['How', 'many', 'dogs', 'have', 'not', 'gone', 'through', 'any', 'treatment', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[True, 8, [0, [0, 20, False], None], {'from': {'table_units': [['table_unit', 7]], 'conds': []}, 'select': [False, [[0, [0, [0, 45, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,select count(*) from dogs where dog_id not in ( select dog_id from treatments ),"['select', 'count', '(', '*', ')', 'from', 'dogs', 'where', 'dog_id', 'not', 'in', '(', 'select', 'dog_id', 'from', 'treatments', ')']","['select', 'count', '(', '*', ')', 'from', 'dogs', 'where', 'dog_id', 'not', 'in', '(', 'select', 'dog_id', 'from', 'treatments', ')']",Tell me the number of dogs that have not received any treatment .,"['Tell', 'me', 'the', 'number', 'of', 'dogs', 'that', 'have', 'not', 'received', 'any', 'treatment', '.']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[True, 8, [0, [0, 20, False], None], {'from': {'table_units': [['table_unit', 7]], 'conds': []}, 'select': [False, [[0, [0, [0, 45, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs ),"['SELECT', 'count', '(', '*', ')', 'FROM', 'Owners', 'WHERE', 'owner_id', 'NOT', 'IN', '(', 'SELECT', 'owner_id', 'FROM', 'Dogs', ')']","['select', 'count', '(', '*', ')', 'from', 'owners', 'where', 'owner_id', 'not', 'in', '(', 'select', 'owner_id', 'from', 'dogs', ')']",How many owners temporarily do not have any dogs?,"['How', 'many', 'owners', 'temporarily', 'do', 'not', 'have', 'any', 'dogs', '?']","{'from': {'table_units': [['table_unit', 4]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[True, 8, [0, [0, 10, False], None], {'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[0, [0, [0, 21, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs ),"['SELECT', 'count', '(', '*', ')', 'FROM', 'Owners', 'WHERE', 'owner_id', 'NOT', 'IN', '(', 'SELECT', 'owner_id', 'FROM', 'Dogs', ')']","['select', 'count', '(', '*', ')', 'from', 'owners', 'where', 'owner_id', 'not', 'in', '(', 'select', 'owner_id', 'from', 'dogs', ')']",Find the number of owners who do not own any dogs at this moment.,"['Find', 'the', 'number', 'of', 'owners', 'who', 'do', 'not', 'own', 'any', 'dogs', 'at', 'this', 'moment', '.']","{'from': {'table_units': [['table_unit', 4]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[True, 8, [0, [0, 10, False], None], {'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[0, [0, [0, 21, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments ),"['SELECT', 'count', '(', '*', ')', 'FROM', 'Professionals', 'WHERE', 'professional_id', 'NOT', 'IN', '(', 'SELECT', 'professional_id', 'FROM', 'Treatments', ')']","['select', 'count', '(', '*', ')', 'from', 'professionals', 'where', 'professional_id', 'not', 'in', '(', 'select', 'professional_id', 'from', 'treatments', ')']",How many professionals did not operate any treatment on dogs?,"['How', 'many', 'professionals', 'did', 'not', 'operate', 'any', 'treatment', 'on', 'dogs', '?']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[True, 8, [0, [0, 33, False], None], {'from': {'table_units': [['table_unit', 7]], 'conds': []}, 'select': [False, [[0, [0, [0, 46, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments ),"['SELECT', 'count', '(', '*', ')', 'FROM', 'Professionals', 'WHERE', 'professional_id', 'NOT', 'IN', '(', 'SELECT', 'professional_id', 'FROM', 'Treatments', ')']","['select', 'count', '(', '*', ')', 'from', 'professionals', 'where', 'professional_id', 'not', 'in', '(', 'select', 'professional_id', 'from', 'treatments', ')']",Find the number of professionals who have not treated any dogs.,"['Find', 'the', 'number', 'of', 'professionals', 'who', 'have', 'not', 'treated', 'any', 'dogs', '.']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [[True, 8, [0, [0, 33, False], None], {'from': {'table_units': [['table_unit', 7]], 'conds': []}, 'select': [False, [[0, [0, [0, 46, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1","['SELECT', 'name', ',', 'age', ',', 'weight', 'FROM', 'Dogs', 'WHERE', 'abandoned_yn', '=', '1']","['select', 'name', ',', 'age', ',', 'weight', 'from', 'dogs', 'where', 'abandoned_yn', '=', 'value']","List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.","['List', 'the', 'dog', 'name', ',', 'age', 'and', 'weight', 'of', 'the', 'dogs', 'who', 'have', 'been', 'abandoned', '?', '1', 'stands', 'for', 'yes', ',', 'and', '0', 'stands', 'for', 'no', '.']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[0, [0, [0, 25, False], None]], [0, [0, [0, 26, False], None]], [0, [0, [0, 29, False], None]]]], 'where': [[False, 2, [0, [0, 22, False], None], 1.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1","['SELECT', 'name', ',', 'age', ',', 'weight', 'FROM', 'Dogs', 'WHERE', 'abandoned_yn', '=', '1']","['select', 'name', ',', 'age', ',', 'weight', 'from', 'dogs', 'where', 'abandoned_yn', '=', 'value']","What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.","['What', 'are', 'the', 'dog', 'name', ',', 'age', 'and', 'weight', 'of', 'the', 'dogs', 'that', 'were', 'abandoned', '?', 'Note', 'that', '1', 'stands', 'for', 'yes', ',', 'and', '0', 'stands', 'for', 'no', 'in', 'the', 'tables', '.']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[0, [0, [0, 25, False], None]], [0, [0, [0, 26, False], None]], [0, [0, [0, 29, False], None]]]], 'where': [[False, 2, [0, [0, 22, False], None], 1.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT avg(age) FROM Dogs,"['SELECT', 'avg', '(', 'age', ')', 'FROM', 'Dogs']","['select', 'avg', '(', 'age', ')', 'from', 'dogs']",What is the average age of all the dogs?,"['What', 'is', 'the', 'average', 'age', 'of', 'all', 'the', 'dogs', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[5, [0, [0, 26, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT avg(age) FROM Dogs,"['SELECT', 'avg', '(', 'age', ')', 'FROM', 'Dogs']","['select', 'avg', '(', 'age', ')', 'from', 'dogs']",Compute the average age of all the dogs.,"['Compute', 'the', 'average', 'age', 'of', 'all', 'the', 'dogs', '.']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[5, [0, [0, 26, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT max(age) FROM Dogs,"['SELECT', 'max', '(', 'age', ')', 'FROM', 'Dogs']","['select', 'max', '(', 'age', ')', 'from', 'dogs']",What is the age of the oldest dog?,"['What', 'is', 'the', 'age', 'of', 'the', 'oldest', 'dog', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[1, [0, [0, 26, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT max(age) FROM Dogs,"['SELECT', 'max', '(', 'age', ')', 'FROM', 'Dogs']","['select', 'max', '(', 'age', ')', 'from', 'dogs']",Tell me the age of the oldest dog.,"['Tell', 'me', 'the', 'age', 'of', 'the', 'oldest', 'dog', '.']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [False, [[1, [0, [0, 26, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT charge_type ,  charge_amount FROM Charges","['SELECT', 'charge_type', ',', 'charge_amount', 'FROM', 'Charges']","['select', 'charge_type', ',', 'charge_amount', 'from', 'charges']",How much does each charge type costs? List both charge type and amount.,"['How', 'much', 'does', 'each', 'charge', 'type', 'costs', '?', 'List', 'both', 'charge', 'type', 'and', 'amount', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT charge_type ,  charge_amount FROM Charges","['SELECT', 'charge_type', ',', 'charge_amount', 'FROM', 'Charges']","['select', 'charge_type', ',', 'charge_amount', 'from', 'charges']",List each charge type and its amount.,"['List', 'each', 'charge', 'type', 'and', 'its', 'amount', '.']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 4, False], None]], [0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT max(charge_amount) FROM Charges,"['SELECT', 'max', '(', 'charge_amount', ')', 'FROM', 'Charges']","['select', 'max', '(', 'charge_amount', ')', 'from', 'charges']",How much does the most expensive charge type costs?,"['How', 'much', 'does', 'the', 'most', 'expensive', 'charge', 'type', 'costs', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[1, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,SELECT max(charge_amount) FROM Charges,"['SELECT', 'max', '(', 'charge_amount', ')', 'FROM', 'Charges']","['select', 'max', '(', 'charge_amount', ')', 'from', 'charges']",What is the charge amount of the most expensive charge type?,"['What', 'is', 'the', 'charge', 'amount', 'of', 'the', 'most', 'expensive', 'charge', 'type', '?']","{'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[1, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT email_address ,  cell_number ,  home_phone FROM professionals","['SELECT', 'email_address', ',', 'cell_number', ',', 'home_phone', 'FROM', 'professionals']","['select', 'email_address', ',', 'cell_number', ',', 'home_phone', 'from', 'professionals']","List the email, cell phone and home phone of all the professionals.","['List', 'the', 'email', ',', 'cell', 'phone', 'and', 'home', 'phone', 'of', 'all', 'the', 'professionals', '.']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 41, False], None]], [0, [0, [0, 43, False], None]], [0, [0, [0, 42, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT email_address ,  cell_number ,  home_phone FROM professionals","['SELECT', 'email_address', ',', 'cell_number', ',', 'home_phone', 'FROM', 'professionals']","['select', 'email_address', ',', 'cell_number', ',', 'home_phone', 'from', 'professionals']","What are the email, cell phone and home phone of each professional?","['What', 'are', 'the', 'email', ',', 'cell', 'phone', 'and', 'home', 'phone', 'of', 'each', 'professional', '?']","{'from': {'table_units': [['table_unit', 6]], 'conds': []}, 'select': [False, [[0, [0, [0, 41, False], None]], [0, [0, [0, 43, False], None]], [0, [0, [0, 42, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT DISTINCT breed_code ,  size_code FROM dogs","['SELECT', 'DISTINCT', 'breed_code', ',', 'size_code', 'FROM', 'dogs']","['select', 'distinct', 'breed_code', ',', 'size_code', 'from', 'dogs']",What are all the possible breed type and size type combinations?,"['What', 'are', 'all', 'the', 'possible', 'breed', 'type', 'and', 'size', 'type', 'combinations', '?']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [True, [[0, [0, [0, 23, False], None]], [0, [0, [0, 24, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT DISTINCT breed_code ,  size_code FROM dogs","['SELECT', 'DISTINCT', 'breed_code', ',', 'size_code', 'FROM', 'dogs']","['select', 'distinct', 'breed_code', ',', 'size_code', 'from', 'dogs']",Find the distinct breed type and size type combinations for dogs.,"['Find', 'the', 'distinct', 'breed', 'type', 'and', 'size', 'type', 'combinations', 'for', 'dogs', '.']","{'from': {'table_units': [['table_unit', 5]], 'conds': []}, 'select': [True, [[0, [0, [0, 23, False], None]], [0, [0, [0, 24, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code","['SELECT', 'DISTINCT', 'T1.first_name', ',', 'T3.treatment_type_description', 'FROM', 'professionals', 'AS', 'T1', 'JOIN', 'Treatments', 'AS', 'T2', 'ON', 'T1.professional_id', '=', 'T2.professional_id', 'JOIN', 'Treatment_types', 'AS', 'T3', 'ON', 'T2.treatment_type_code', '=', 'T3.treatment_type_code']","['select', 'distinct', 't1', '.', 'first_name', ',', 't3', '.', 'treatment_type_description', 'from', 'professionals', 'as', 't1', 'join', 'treatments', 'as', 't2', 'on', 't1', '.', 'professional_id', '=', 't2', '.', 'professional_id', 'join', 'treatment_types', 'as', 't3', 'on', 't2', '.', 'treatment_type_code', '=', 't3', '.', 'treatment_type_code']",List the first name of all the professionals along with the description of the treatment they have done.,"['List', 'the', 'first', 'name', 'of', 'all', 'the', 'professionals', 'along', 'with', 'the', 'description', 'of', 'the', 'treatment', 'they', 'have', 'done', '.']","{'from': {'table_units': [['table_unit', 6], ['table_unit', 7], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None], 'and', [False, 2, [0, [0, 47, False], None], [0, 8, False], None]]}, 'select': [True, [[0, [0, [0, 35, False], None]], [0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
dog_kennels,"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code","['SELECT', 'DISTINCT', 'T1.first_name', ',', 'T3.treatment_type_description', 'FROM', 'professionals', 'AS', 'T1', 'JOIN', 'Treatments', 'AS', 'T2', 'ON', 'T1.professional_id', '=', 'T2.professional_id', 'JOIN', 'Treatment_types', 'AS', 'T3', 'ON', 'T2.treatment_type_code', '=', 'T3.treatment_type_code']","['select', 'distinct', 't1', '.', 'first_name', ',', 't3', '.', 'treatment_type_description', 'from', 'professionals', 'as', 't1', 'join', 'treatments', 'as', 't2', 'on', 't1', '.', 'professional_id', '=', 't2', '.', 'professional_id', 'join', 'treatment_types', 'as', 't3', 'on', 't2', '.', 'treatment_type_code', '=', 't3', '.', 'treatment_type_code']",What are each professional's first name and description of the treatment they have performed?,"['What', 'are', 'each', 'professional', ""'s"", 'first', 'name', 'and', 'description', 'of', 'the', 'treatment', 'they', 'have', 'performed', '?']","{'from': {'table_units': [['table_unit', 6], ['table_unit', 7], ['table_unit', 3]], 'conds': [[False, 2, [0, [0, 33, False], None], [0, 46, False], None], 'and', [False, 2, [0, [0, 47, False], None], [0, 8, False], None]]}, 'select': [True, [[0, [0, [0, 35, False], None]], [0, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,SELECT count(*) FROM singer,"['SELECT', 'count', '(', '*', ')', 'FROM', 'singer']","['select', 'count', '(', '*', ')', 'from', 'singer']",How many singers are there?,"['How', 'many', 'singers', 'are', 'there', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,SELECT count(*) FROM singer,"['SELECT', 'count', '(', '*', ')', 'FROM', 'singer']","['select', 'count', '(', '*', ')', 'from', 'singer']",What is the count of singers?,"['What', 'is', 'the', 'count', 'of', 'singers', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC,"['SELECT', 'Name', 'FROM', 'singer', 'ORDER', 'BY', 'Net_Worth_Millions', 'ASC']","['select', 'name', 'from', 'singer', 'order', 'by', 'net_worth_millions', 'asc']",List the name of singers in ascending order of net worth.,"['List', 'the', 'name', 'of', 'singers', 'in', 'ascending', 'order', 'of', 'net', 'worth', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 4, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC,"['SELECT', 'Name', 'FROM', 'singer', 'ORDER', 'BY', 'Net_Worth_Millions', 'ASC']","['select', 'name', 'from', 'singer', 'order', 'by', 'net_worth_millions', 'asc']",What are the names of singers ordered by ascending net worth?,"['What', 'are', 'the', 'names', 'of', 'singers', 'ordered', 'by', 'ascending', 'net', 'worth', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['asc', [[0, [0, 4, False], None]]], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,"SELECT Birth_Year ,  Citizenship FROM singer","['SELECT', 'Birth_Year', ',', 'Citizenship', 'FROM', 'singer']","['select', 'birth_year', ',', 'citizenship', 'from', 'singer']",What are the birth year and citizenship of singers?,"['What', 'are', 'the', 'birth', 'year', 'and', 'citizenship', 'of', 'singers', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,"SELECT Birth_Year ,  Citizenship FROM singer","['SELECT', 'Birth_Year', ',', 'Citizenship', 'FROM', 'singer']","['select', 'birth_year', ',', 'citizenship', 'from', 'singer']",What are the birth years and citizenships of the singers?,"['What', 'are', 'the', 'birth', 'years', 'and', 'citizenships', 'of', 'the', 'singers', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 3, False], None]], [0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,"SELECT Name FROM singer WHERE Citizenship != ""France""","['SELECT', 'Name', 'FROM', 'singer', 'WHERE', 'Citizenship', '!', '=', '``', 'France', ""''""]","['select', 'name', 'from', 'singer', 'where', 'citizenship', '!', '=', 'value']","List the name of singers whose citizenship is not ""France"".","['List', 'the', 'name', 'of', 'singers', 'whose', 'citizenship', 'is', 'not', '``', 'France', ""''"", '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 7, [0, [0, 5, False], None], '""France""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,"SELECT Name FROM singer WHERE Citizenship != ""France""","['SELECT', 'Name', 'FROM', 'singer', 'WHERE', 'Citizenship', '!', '=', '``', 'France', ""''""]","['select', 'name', 'from', 'singer', 'where', 'citizenship', '!', '=', 'value']",What are the names of the singers who are not French citizens?,"['What', 'are', 'the', 'names', 'of', 'the', 'singers', 'who', 'are', 'not', 'French', 'citizens', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 7, [0, [0, 5, False], None], '""France""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949,"['SELECT', 'Name', 'FROM', 'singer', 'WHERE', 'Birth_Year', '=', '1948', 'OR', 'Birth_Year', '=', '1949']","['select', 'name', 'from', 'singer', 'where', 'birth_year', '=', 'value', 'or', 'birth_year', '=', 'value']",Show the name of singers whose birth year is either 1948 or 1949?,"['Show', 'the', 'name', 'of', 'singers', 'whose', 'birth', 'year', 'is', 'either', '1948', 'or', '1949', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 3, False], None], 1948.0, None], 'or', [False, 2, [0, [0, 3, False], None], 1949.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949,"['SELECT', 'Name', 'FROM', 'singer', 'WHERE', 'Birth_Year', '=', '1948', 'OR', 'Birth_Year', '=', '1949']","['select', 'name', 'from', 'singer', 'where', 'birth_year', '=', 'value', 'or', 'birth_year', '=', 'value']",What are the names of the singers whose birth years are either 1948 or 1949?,"['What', 'are', 'the', 'names', 'of', 'the', 'singers', 'whose', 'birth', 'years', 'are', 'either', '1948', 'or', '1949', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 3, False], None], 1948.0, None], 'or', [False, 2, [0, [0, 3, False], None], 1949.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1,"['SELECT', 'Name', 'FROM', 'singer', 'ORDER', 'BY', 'Net_Worth_Millions', 'DESC', 'LIMIT', '1']","['select', 'name', 'from', 'singer', 'order', 'by', 'net_worth_millions', 'desc', 'limit', 'value']",What is the name of the singer with the largest net worth?,"['What', 'is', 'the', 'name', 'of', 'the', 'singer', 'with', 'the', 'largest', 'net', 'worth', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 4, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
singer,SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1,"['SELECT', 'Name', 'FROM', 'singer', 'ORDER', 'BY', 'Net_Worth_Millions', 'DESC', 'LIMIT', '1']","['select', 'name', 'from', 'singer', 'order', 'by', 'net_worth_millions', 'desc', 'limit', 'value']",What is the name of the singer who is worth the most?,"['What', 'is', 'the', 'name', 'of', 'the', 'singer', 'who', 'is', 'worth', 'the', 'most', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': ['desc', [[0, [0, 4, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
singer,"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship","['SELECT', 'Citizenship', ',', 'COUNT', '(', '*', ')', 'FROM', 'singer', 'GROUP', 'BY', 'Citizenship']","['select', 'citizenship', ',', 'count', '(', '*', ')', 'from', 'singer', 'group', 'by', 'citizenship']",Show different citizenship of singers and the number of singers of each citizenship.,"['Show', 'different', 'citizenship', 'of', 'singers', 'and', 'the', 'number', 'of', 'singers', 'of', 'each', 'citizenship', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship","['SELECT', 'Citizenship', ',', 'COUNT', '(', '*', ')', 'FROM', 'singer', 'GROUP', 'BY', 'Citizenship']","['select', 'citizenship', ',', 'count', '(', '*', ')', 'from', 'singer', 'group', 'by', 'citizenship']","For each citizenship, how many singers are from that country?","['For', 'each', 'citizenship', ',', 'how', 'many', 'singers', 'are', 'from', 'that', 'country', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]], [3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1,"['SELECT', 'Citizenship', 'FROM', 'singer', 'GROUP', 'BY', 'Citizenship', 'ORDER', 'BY', 'COUNT', '(', '*', ')', 'DESC', 'LIMIT', '1']","['select', 'citizenship', 'from', 'singer', 'group', 'by', 'citizenship', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",Please show the most common citizenship of singers.,"['Please', 'show', 'the', 'most', 'common', 'citizenship', 'of', 'singers', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
singer,select citizenship from singer group by citizenship order by count(*) desc limit 1,"['select', 'citizenship', 'from', 'singer', 'group', 'by', 'citizenship', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', '1']","['select', 'citizenship', 'from', 'singer', 'group', 'by', 'citizenship', 'order', 'by', 'count', '(', '*', ')', 'desc', 'limit', 'value']",What is the most common singer citizenship ?,"['What', 'is', 'the', 'most', 'common', 'singer', 'citizenship', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [], 'orderBy': ['desc', [[0, [3, 0, False], None]]], 'limit': 1, 'intersect': None, 'union': None, 'except': None}"
singer,"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship","['SELECT', 'Citizenship', ',', 'max', '(', 'Net_Worth_Millions', ')', 'FROM', 'singer', 'GROUP', 'BY', 'Citizenship']","['select', 'citizenship', ',', 'max', '(', 'net_worth_millions', ')', 'from', 'singer', 'group', 'by', 'citizenship']",Show different citizenships and the maximum net worth of singers of each citizenship.,"['Show', 'different', 'citizenships', 'and', 'the', 'maximum', 'net', 'worth', 'of', 'singers', 'of', 'each', 'citizenship', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]], [1, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship","['SELECT', 'Citizenship', ',', 'max', '(', 'Net_Worth_Millions', ')', 'FROM', 'singer', 'GROUP', 'BY', 'Citizenship']","['select', 'citizenship', ',', 'max', '(', 'net_worth_millions', ')', 'from', 'singer', 'group', 'by', 'citizenship']","For each citizenship, what is the maximum net worth?","['For', 'each', 'citizenship', ',', 'what', 'is', 'the', 'maximum', 'net', 'worth', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]], [1, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [[0, 5, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID","['SELECT', 'T2.Title', ',', 'T1.Name', 'FROM', 'singer', 'AS', 'T1', 'JOIN', 'song', 'AS', 'T2', 'ON', 'T1.Singer_ID', '=', 'T2.Singer_ID']","['select', 't2', '.', 'title', ',', 't1', '.', 'name', 'from', 'singer', 'as', 't1', 'join', 'song', 'as', 't2', 'on', 't1', '.', 'singer_id', '=', 't2', '.', 'singer_id']",Show titles of songs and names of singers.,"['Show', 'titles', 'of', 'songs', 'and', 'names', 'of', 'singers', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 7, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID","['SELECT', 'T2.Title', ',', 'T1.Name', 'FROM', 'singer', 'AS', 'T1', 'JOIN', 'song', 'AS', 'T2', 'ON', 'T1.Singer_ID', '=', 'T2.Singer_ID']","['select', 't2', '.', 'title', ',', 't1', '.', 'name', 'from', 'singer', 'as', 't1', 'join', 'song', 'as', 't2', 'on', 't1', '.', 'singer_id', '=', 't2', '.', 'singer_id']",What are the song titles and singer names?,"['What', 'are', 'the', 'song', 'titles', 'and', 'singer', 'names', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 7, False], None]], [0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000,"['SELECT', 'DISTINCT', 'T1.Name', 'FROM', 'singer', 'AS', 'T1', 'JOIN', 'song', 'AS', 'T2', 'ON', 'T1.Singer_ID', '=', 'T2.Singer_ID', 'WHERE', 'T2.Sales', '>', '300000']","['select', 'distinct', 't1', '.', 'name', 'from', 'singer', 'as', 't1', 'join', 'song', 'as', 't2', 'on', 't1', '.', 'singer_id', '=', 't2', '.', 'singer_id', 'where', 't2', '.', 'sales', '>', 'value']",Show distinct names of singers that have songs with sales more than 300000.,"['Show', 'distinct', 'names', 'of', 'singers', 'that', 'have', 'songs', 'with', 'sales', 'more', 'than', '300000', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]]}, 'select': [True, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 3, [0, [0, 9, False], None], 300000.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000,"['SELECT', 'DISTINCT', 'T1.Name', 'FROM', 'singer', 'AS', 'T1', 'JOIN', 'song', 'AS', 'T2', 'ON', 'T1.Singer_ID', '=', 'T2.Singer_ID', 'WHERE', 'T2.Sales', '>', '300000']","['select', 'distinct', 't1', '.', 'name', 'from', 'singer', 'as', 't1', 'join', 'song', 'as', 't2', 'on', 't1', '.', 'singer_id', '=', 't2', '.', 'singer_id', 'where', 't2', '.', 'sales', '>', 'value']",what are the different names of the singers that have sales more than 300000?,"['what', 'are', 'the', 'different', 'names', 'of', 'the', 'singers', 'that', 'have', 'sales', 'more', 'than', '300000', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]]}, 'select': [True, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 3, [0, [0, 9, False], None], 300000.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1,"['SELECT', 'T1.Name', 'FROM', 'singer', 'AS', 'T1', 'JOIN', 'song', 'AS', 'T2', 'ON', 'T1.Singer_ID', '=', 'T2.Singer_ID', 'GROUP', 'BY', 'T1.Name', 'HAVING', 'COUNT', '(', '*', ')', '>', '1']","['select', 't1', '.', 'name', 'from', 'singer', 'as', 't1', 'join', 'song', 'as', 't2', 'on', 't1', '.', 'singer_id', '=', 't2', '.', 'singer_id', 'group', 'by', 't1', '.', 'name', 'having', 'count', '(', '*', ')', '>', 'value']",Show the names of singers that have more than one song.,"['Show', 'the', 'names', 'of', 'singers', 'that', 'have', 'more', 'than', 'one', 'song', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 2, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1,"['SELECT', 'T1.Name', 'FROM', 'singer', 'AS', 'T1', 'JOIN', 'song', 'AS', 'T2', 'ON', 'T1.Singer_ID', '=', 'T2.Singer_ID', 'GROUP', 'BY', 'T1.Name', 'HAVING', 'COUNT', '(', '*', ')', '>', '1']","['select', 't1', '.', 'name', 'from', 'singer', 'as', 't1', 'join', 'song', 'as', 't2', 'on', 't1', '.', 'singer_id', '=', 't2', '.', 'singer_id', 'group', 'by', 't1', '.', 'name', 'having', 'count', '(', '*', ')', '>', 'value']",What are the names of the singers that have more than one songs?,"['What', 'are', 'the', 'names', 'of', 'the', 'singers', 'that', 'have', 'more', 'than', 'one', 'songs', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [], 'groupBy': [[0, 2, False]], 'having': [[False, 3, [0, [3, 0, False], None], 1.0, None]], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name","['SELECT', 'T1.Name', ',', 'sum', '(', 'T2.Sales', ')', 'FROM', 'singer', 'AS', 'T1', 'JOIN', 'song', 'AS', 'T2', 'ON', 'T1.Singer_ID', '=', 'T2.Singer_ID', 'GROUP', 'BY', 'T1.Name']","['select', 't1', '.', 'name', ',', 'sum', '(', 't2', '.', 'sales', ')', 'from', 'singer', 'as', 't1', 'join', 'song', 'as', 't2', 'on', 't1', '.', 'singer_id', '=', 't2', '.', 'singer_id', 'group', 'by', 't1', '.', 'name']",Show the names of singers and the total sales of their songs.,"['Show', 'the', 'names', 'of', 'singers', 'and', 'the', 'total', 'sales', 'of', 'their', 'songs', '.']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [4, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [[0, 2, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name","['SELECT', 'T1.Name', ',', 'sum', '(', 'T2.Sales', ')', 'FROM', 'singer', 'AS', 'T1', 'JOIN', 'song', 'AS', 'T2', 'ON', 'T1.Singer_ID', '=', 'T2.Singer_ID', 'GROUP', 'BY', 'T1.Name']","['select', 't1', '.', 'name', ',', 'sum', '(', 't2', '.', 'sales', ')', 'from', 'singer', 'as', 't1', 'join', 'song', 'as', 't2', 'on', 't1', '.', 'singer_id', '=', 't2', '.', 'singer_id', 'group', 'by', 't1', '.', 'name']","For each singer name, what is the total sales for their songs?","['For', 'each', 'singer', 'name', ',', 'what', 'is', 'the', 'total', 'sales', 'for', 'their', 'songs', '?']","{'from': {'table_units': [['table_unit', 0], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 1, False], None], [0, 8, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]], [4, [0, [0, 9, False], None]]]], 'where': [], 'groupBy': [[0, 2, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song),"['SELECT', 'Name', 'FROM', 'singer', 'WHERE', 'Singer_ID', 'NOT', 'IN', '(', 'SELECT', 'Singer_ID', 'FROM', 'song', ')']","['select', 'name', 'from', 'singer', 'where', 'singer_id', 'not', 'in', '(', 'select', 'singer_id', 'from', 'song', ')']",List the name of singers that do not have any song.,"['List', 'the', 'name', 'of', 'singers', 'that', 'do', 'not', 'have', 'any', 'song', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[True, 8, [0, [0, 1, False], None], {'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 8, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song),"['SELECT', 'Name', 'FROM', 'singer', 'WHERE', 'Singer_ID', 'NOT', 'IN', '(', 'SELECT', 'Singer_ID', 'FROM', 'song', ')']","['select', 'name', 'from', 'singer', 'where', 'singer_id', 'not', 'in', '(', 'select', 'singer_id', 'from', 'song', ')']",What is the sname of every sing that does not have any song?,"['What', 'is', 'the', 'sname', 'of', 'every', 'sing', 'that', 'does', 'not', 'have', 'any', 'song', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[True, 8, [0, [0, 1, False], None], {'from': {'table_units': [['table_unit', 1]], 'conds': []}, 'select': [False, [[0, [0, [0, 8, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
singer,SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955,"['SELECT', 'Citizenship', 'FROM', 'singer', 'WHERE', 'Birth_Year', '<', '1945', 'INTERSECT', 'SELECT', 'Citizenship', 'FROM', 'singer', 'WHERE', 'Birth_Year', '>', '1955']","['select', 'citizenship', 'from', 'singer', 'where', 'birth_year', '<', 'value', 'intersect', 'select', 'citizenship', 'from', 'singer', 'where', 'birth_year', '>', 'value']",Show the citizenship shared by singers with birth year before 1945 and after 1955.,"['Show', 'the', 'citizenship', 'shared', 'by', 'singers', 'with', 'birth', 'year', 'before', '1945', 'and', 'after', '1955', '.']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [[False, 4, [0, [0, 3, False], None], 1945.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [[False, 3, [0, [0, 3, False], None], 1955.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
singer,SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955,"['SELECT', 'Citizenship', 'FROM', 'singer', 'WHERE', 'Birth_Year', '<', '1945', 'INTERSECT', 'SELECT', 'Citizenship', 'FROM', 'singer', 'WHERE', 'Birth_Year', '>', '1955']","['select', 'citizenship', 'from', 'singer', 'where', 'birth_year', '<', 'value', 'intersect', 'select', 'citizenship', 'from', 'singer', 'where', 'birth_year', '>', 'value']",What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?,"['What', 'are', 'the', 'citizenships', 'that', 'are', 'shared', 'by', 'singers', 'with', 'a', 'birth', 'year', 'before', '1945', 'and', 'after', '1955', '?']","{'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [[False, 4, [0, [0, 3, False], None], 1945.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': {'from': {'table_units': [['table_unit', 0]], 'conds': []}, 'select': [False, [[0, [0, [0, 5, False], None]]]], 'where': [[False, 3, [0, [0, 3, False], None], 1955.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'union': None, 'except': None}"
real_estate_properties,SELECT count(*) FROM Other_Available_Features,"['SELECT', 'count', '(', '*', ')', 'FROM', 'Other_Available_Features']","['select', 'count', '(', '*', ')', 'from', 'other_available_features']",How many available features are there in total?,"['How', 'many', 'available', 'features', 'are', 'there', 'in', 'total', '?']","{'from': {'table_units': [['table_unit', 2]], 'conds': []}, 'select': [False, [[3, [0, [0, 0, False], None]]]], 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
real_estate_properties,"SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  ""AirCon""","['SELECT', 'T2.feature_type_name', 'FROM', 'Other_Available_Features', 'AS', 'T1', 'JOIN', 'Ref_Feature_Types', 'AS', 'T2', 'ON', 'T1.feature_type_code', '=', 'T2.feature_type_code', 'WHERE', 'T1.feature_name', '=', '``', 'AirCon', ""''""]","['select', 't2', '.', 'feature_type_name', 'from', 'other_available_features', 'as', 't1', 'join', 'ref_feature_types', 'as', 't2', 'on', 't1', '.', 'feature_type_code', '=', 't2', '.', 'feature_type_code', 'where', 't1', '.', 'feature_name', '=', 'value']",What is the feature type name of feature AirCon?,"['What', 'is', 'the', 'feature', 'type', 'name', 'of', 'feature', 'AirCon', '?']","{'from': {'table_units': [['table_unit', 2], ['table_unit', 0]], 'conds': [[False, 2, [0, [0, 6, False], None], [0, 1, False], None]]}, 'select': [False, [[0, [0, [0, 2, False], None]]]], 'where': [[False, 2, [0, [0, 7, False], None], '""AirCon""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
real_estate_properties,SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code,"['SELECT', 'T2.property_type_description', 'FROM', 'Properties', 'AS', 'T1', 'JOIN', 'Ref_Property_Types', 'AS', 'T2', 'ON', 'T1.property_type_code', '=', 'T2.property_type_code', 'GROUP', 'BY', 'T1.property_type_code']","['select', 't2', '.', 'property_type_description', 'from', 'properties', 'as', 't1', 'join', 'ref_property_types', 'as', 't2', 'on', 't1', '.', 'property_type_code', '=', 't2', '.', 'property_type_code', 'group', 'by', 't1', '.', 'property_type_code']",Show the property type descriptions of properties belonging to that code.,"['Show', 'the', 'property', 'type', 'descriptions', 'of', 'properties', 'belonging', 'to', 'that', 'code', '.']","{'from': {'table_units': [['table_unit', 3], ['table_unit', 1]], 'conds': [[False, 2, [0, [0, 10, False], None], [0, 3, False], None]]}, 'select': [False, [[0, [0, [0, 4, False], None]]]], 'where': [], 'groupBy': [[0, 10, False]], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}"
real_estate_properties,"SELECT property_name FROM Properties WHERE property_type_code  =  ""House"" UNION SELECT property_name FROM Properties WHERE property_type_code  =  ""Apartment"" AND room_count  >  1","['SELECT', 'property_name', 'FROM', 'Properties', 'WHERE', 'property_type_code', '=', '``', 'House', ""''"", 'UNION', 'SELECT', 'property_name', 'FROM', 'Properties', 'WHERE', 'property_type_code', '=', '``', 'Apartment', ""''"", 'AND', 'room_count', '>', '1']","['select', 'property_name', 'from', 'properties', 'where', 'property_type_code', '=', 'value', 'union', 'select', 'property_name', 'from', 'properties', 'where', 'property_type_code', '=', 'value', 'and', 'room_count', '>', 'value']",What are the names of properties that are either houses or apartments with more than 1 room?,"['What', 'are', 'the', 'names', 'of', 'properties', 'that', 'are', 'either', 'houses', 'or', 'apartments', 'with', 'more', 'than', '1', 'room', '?']","{'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 13, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""House""', None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': {'from': {'table_units': [['table_unit', 3]], 'conds': []}, 'select': [False, [[0, [0, [0, 13, False], None]]]], 'where': [[False, 2, [0, [0, 10, False], None], '""Apartment""', None], 'and', [False, 3, [0, [0, 15, False], None], 1.0, None]], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None}, 'except': None}"
