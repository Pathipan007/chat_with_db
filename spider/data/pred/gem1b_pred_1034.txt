SELECT count(*) FROM singer
SELECT COUNT(*) FROM singer
SELECT Singer_ID, Name, Country, Age FROM singer ORDER BY Age DESC THEN SELECT Singer_ID FROM singer WHERE Age DESC LIMIT 1
SELECT Singer_ID, Country, Age FROM singer WHERE Age DESC
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
SELECT s.Name, c.Song_release_year FROM stadium s JOIN singer s ON s.Stadium_ID = s.Stadium_ID JOIN concert c ON s.Stadium_ID = c.Stadium_ID JOIN singer_in_concert si ON c.concert_ID = si.concert_ID WHERE si.Singer_ID = min(si.Singer_ID) AND si.Age = min(si.Age) ORDER BY si.Age ASC
SELECT s.Name, s.Song_release_year FROM stadium s JOIN singer s ON s.Stadium_ID = s.Stadium_ID JOIN singer_in_concert si ON s.Stadium_ID = si.Stadium_ID WHERE si.Singer_ID = (SELECT Singer_ID FROM singer WHERE Age = 'Youngest') ORDER BY s.Lowest ASC, s.Lowest DESC LIMIT 1
SELECT DISTINCT Country FROM singer WHERE Age > 20 AND Singer_ID IN (SELECT Singer_ID FROM singer_in_concert)
SELECT Country FROM singer WHERE Age > 20
SELECT Country, COUNT(*) FROM singer GROUP BY Country
SELECT Country, COUNT(*) FROM singer GROUP BY Country
SELECT s.Song_Name FROM singer AS s JOIN singer_in_concert AS s_ic ON s.Singer_ID = s_ic.Singer_ID WHERE s_ic.Age > (SELECT AVG(Age) FROM singer)
SELECT s.Song_Name FROM stadium s JOIN singer s1 ON s.Stadium_ID = s1.Stadium_ID JOIN singer_in_concert si1 ON s1.Singer_ID = si1.Singer_ID WHERE s1.Age > (SELECT AVG(Age) FROM singer)
SELECT stadium.Name, stadium.Location FROM stadium JOIN singer_in_concert ON stadium.Stadium_ID = singer_in_concert.Singer_ID WHERE stadium.Capacity BETWEEN 5000 AND 10000
SELECT `Location`, `Name` FROM stadium WHERE `Capacity` BETWEEN 5000 AND 10000
SELECT MAX(Capacity) FROM stadium
SELECT AVG(Capacity), MAX(Capacity) FROM stadium
SELECT s.Name, s.Capacity FROM stadium s JOIN singer s ON s.Stadium_ID = s.Stadium_ID JOIN singer_in_concert si ON s.Stadium_ID = si.Stadium_ID ORDER BY s.Lowest ORDER LIMIT 1
SELECT s.Name, s.Capacity FROM stadium s JOIN singer s ON s.Stadium_ID = s.Stadium_ID JOIN singer_in_concert si ON s.Stadium_ID = si.Stadium_ID ORDER BY s.Lowest ORDER WITHIN GROUP (ORDER BY s.Highest) LIMIT 1
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015
SELECT s.Name, COUNT(*) FROM stadium s JOIN singer s ON s.Stadium_ID = s.Singer_ID GROUP BY s.Name
SELECT stadium.Name FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name
SELECT s.Name, s.Capacity FROM stadium s JOIN singer_in_concert si_ic ON s.Stadium_ID = si_ic.Stadium_ID JOIN concert c ON si_ic.concert_ID = c.concert_ID WHERE c.Year = 2014 OR c.Year > 2014 GROUP BY s.Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT s.Name, s.Capacity FROM stadium s JOIN singer_in_concert si ON s.Stadium_ID = si.Stadium_ID WHERE si.Year > 2013 GROUP BY s.Stadium_ID ORDER BY s.Capacity DESC LIMIT 1
SELECT "Year" FROM concert GROUP BY "Year" ORDER BY "Count" DESC LIMIT 1
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1
SELECT Stadium_ID FROM stadium LEFT JOIN singer_in_concert ON stadium.Stadium_ID = singer_in_concert.Singer_ID
SELECT DISTINCT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
SELECT DISTINCT Country FROM singer WHERE Age > 40 AND Age < 30
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM stadium WHERE Year = 2014)
SELECT DISTINCT S.Name FROM stadium AS S JOIN singer_in_concert AS SC ON S.Stadium_ID = SC.Stadium_ID WHERE S.Lowest IS NULL AND SC.Year IS NULL AND SC.Year <> 2014
SELECT c.Theme, c.Song_Name FROM concert c JOIN singer_in_concert s i ON c.concert_ID = i.concert_ID
SELECT s.Name, c.Theme, COUNT(s.Singer_ID) FROM stadium AS s JOIN concert AS c ON s.Stadium_ID = c.Stadium_ID GROUP BY c.concert_ID ORDER BY c.Year
SELECT s.Name, COUNT(c.concert_ID) FROM singer s JOIN singer_in_concert ci ON s.Singer_ID = ci.Singer_ID GROUP BY s.Name
SELECT s.Name, c.concert_ID FROM singer s JOIN singer_in_concert si ON s.Singer_ID = si.Singer_ID GROUP BY s.Name
SELECT s.Name FROM singer AS s JOIN singer_in_concert AS ci ON s.Singer_ID = ci.Singer_ID WHERE ci.Year = 2014
SELECT s.Name FROM stadium s JOIN singer s ON s.Stadium_ID = s.Stadium_ID WHERE s.Song_release_year = 2014 AND s.Is_male = 1
SELECT s.Name, s.Country FROM stadium s JOIN singer s1 ON s.Stadium_ID = s1.Stadium_ID JOIN singer_in_concert si1 ON s1.Singer_ID = si1.Singer_ID WHERE s1.Song_Name = 'Hey'
SELECT s.Name, s.Country FROM stadium s JOIN singer s ON s.Stadium_ID = s.Singer_ID JOIN singer_in_concert si ON s.Singer_ID = si.Singer_ID WHERE si.Song_Name LIKE '%Hey%'
SELECT s.Name, s.Location FROM stadium s JOIN singer s ON s.Stadium_ID = s.Singer_ID JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year BETWEEN 2014 AND 2015
SELECT DISTINCT s.Name, s.Location FROM stadium s JOIN singer_in_concert si ON s.Stadium_ID = si.Stadium_ID JOIN concert c ON si.concert_ID = c.concert_ID WHERE c.Year IN (2014, 2015)
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Highest = 'X' ORDER BY Highest DESC LIMIT 1) AND Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Highest = 'X' ORDER BY Highest DESC LIMIT 1)
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Highest = 'Largest') AND Concert_Name = 'Concert'
SELECT COUNT(*) FROM Pets WHERE weight > 10
SELECT COUNT(*) FROM Has_Pet WHERE Pets.weight > 10
SELECT pet_age FROM Pets WHERE pet_type = 'Dog' ORDER BY pet_age ASC LIMIT 1
SELECT pets.pet_age FROM pets JOIN Has_Pet ON pets.StuID = Has_Pet.StuID WHERE pets.PetType = 'Dog' ORDER BY pets.pet_age LIMIT 1
SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType
SELECT pet_type, MAX(weight) FROM Pets GROUP BY pet_type
SELECT count(*) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20)
SELECT count(*) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student GROUP BY StuID HAVING Age > 20)
SELECT count(*) FROM Has_Pet WHERE PetType = 'Dog' AND Sex = 'Female'
SELECT count(*) FROM Student AS S JOIN Has_Pet AS P ON S.StuID = P.StuID WHERE S.Sex = 'Female' AND P.PetType = 'Dog'
SELECT DISTINCT PetType FROM Pets
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT LName FROM Student WHERE Major = 'Engineering' OR Major = 'Computer Science'
SELECT LName FROM Student GROUP BY LName HAVING PetType IN ('Cat', 'Dog')
SELECT LName FROM Student WHERE Major = 'Computer Science' AND PetType = 'Cat'
SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE hp.PetType IN ('Cat', 'Dog') AND s.LName != 'Unknown'
SELECT S.Major, S.Age FROM Student AS S JOIN Has_Pet AS H ON S.StuID = H.StuID WHERE H.PetType != 'Cat'
SELECT "Major" FROM Student WHERE "Sex" != "Female" AND "PetType" != "Cat"
SELECT StuID FROM Student WHERE Sex != 'Female' AND Pets.PetType != 'Cat'
SELECT S.StuID FROM Student AS S JOIN Has_Pet AS H ON S.StuID = H.StuID WHERE H.PetType != 'cat'
SELECT Fname, StuID FROM Student WHERE Sex != 'C' AND Has_Pet.PetID IS NOT NULL AND Pets.PetType IS NOT NULL AND Pets.pet_age IS NOT NULL AND Pets.PetID IS NOT NULL
SELECT Fname FROM Student WHERE Major != 'Computer Science' AND Pets.PetType != 'Cat'
SELECT PetType, pet_age FROM Pets ORDER BY pet_age LIMIT 1
SELECT PetType, pet_age FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT DISTINCT `pet_age` FROM Pets WHERE `pet_age` > 1
SELECT PetID, pet_age FROM Pets WHERE pet_age > 1
SELECT PetType, AVG(Age), MAX(Age) FROM Pets GROUP BY PetType
SELECT PetType, AVG(Age), MAX(Age) FROM Pets GROUP BY PetType
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType
SELECT LName, Age FROM StudentGROUP WHERE Has_Pet = True
SELECT DISTINCT LName, Age FROM Student WHERE Has_Pet
SELECT s.StuID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE s.LName = 'Smith'
SELECT DISTINCT `PetID` FROM Has_Pet WHERE `LName` = 'Smith'
SELECT S.StuID, COUNT(P.PetID) FROM Student AS S JOIN Has_Pet AS H ON S.StuID = H.StuID JOIN Pets AS P ON H.PetID = P.PetID GROUP BY S.StuID
SELECT s.StuID, p.PetID FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID JOIN Pets p ON h.PetID = p.PetID GROUP BY s.StuID, p.PetID
SELECT s.Fname, s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE hp.PetID IS NOT NULL GROUP BY s.StuID, s.LName HAVING COUNT(DISTINCT hp.PetID) > 1
SELECT S.Fname, S.LName FROM Student AS S JOIN Has_Pet AS H ON S.StuID = H.StuID GROUP BY S.StuID, S.LName HAVING COUNT(*) > 1
SELECT S.LName FROM Student AS S JOIN Has_Pet AS H ON S.StuID = H.StuID JOIN Pets AS P ON H.PetID = P.PetID WHERE P.pet_age = 3
SELECT S.LName FROM Student AS S JOIN Has_Pet AS H ON S.StuID = H.StuID WHERE H.PetID = (SELECT PetID FROM Pets WHERE pet_age = 3)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE Sex != 'Female' AND NOT EXISTS (SELECT 1 FROM Has_Pet WHERE StuID = Student.StuID)
SELECT COUNT(*) FROM continents
SELECT COUNT(*) FROM continents
SELECT c.Continent, c.ContinentName, COUNT(*) FROM continents AS c JOIN countries AS c ON c.Continent = c.Continent GROUP BY c.Continent
SELECT c.ContId, c.Continent, COUNT(c.ContId) FROM continents c JOIN countries c ON c.Continent = c.Continent GROUP BY c.Continent
SELECT count(*) FROM countries
SELECT COUNT(*) FROM continents
SELECT M.Maker, M.FullName, COUNT(C.ContId) FROM car_makers AS M JOIN continents AS C ON M.Maker = C.Continent GROUP BY M.Maker, M.FullName ORDER BY M.Maker
SELECT Maker, Model FROM model_list
SELECT `Model` FROM `car_names` WHERE `Accelerate` = MIN( `Accelerate` ) ORDER BY `Accelerate` ASC LIMIT 1
SELECT Make FROM car_names WHERE Accelerate = 'min' LIMIT 1
SELECT Make FROM car_names WHERE Weight < (SELECT AVG(Weight) FROM car_data)
SELECT Model FROM car_names WHERE Cars_Data.Weight < (SELECT AVG(Weight) FROM car_data)
SELECT M.Maker FROM car_makers M JOIN car_names C ON M.Id = C.Maker JOIN model_list ML ON C.ModelId = ML.ModelId WHERE ML.Model = 'Model X' AND ML.Year = 1970
SELECT M.Maker FROM car_names AS M JOIN car_names AS M2 ON M.Make = M2.Make JOIN car_makers AS M3 ON M2.Country = M3.Country WHERE M.Year = 1970
SELECT Maker, Model FROM car_names WHERE Year = (SELECT MIN(Year) FROM car_data)
SELECT Maker FROM car_names WHERE Year = (SELECT MIN(Year) FROM car_data)
SELECT DISTINCT Maker FROM car_names WHERE Model > '1980'
SELECT ModelId FROM car_names WHERE Year > 1980
SELECT c.Continent, COUNT(c.Id) FROM continents c JOIN countries c ON c.Continent = c.Continent GROUP BY c.Continent
SELECT c.Continent, COUNT(c.Id) FROM continents c JOIN countries c ON c.Continent = c.Country
SELECT c.CountryName FROM continents c JOIN countries c1 ON c.ContId = c1.Country GROUP BY c.ContId ORDER BY COUNT(*) DESC LIMIT 1
SELECT C.CountryName FROM continents AS C JOIN countries AS C1 ON C.Continent = C1.Continent GROUP BY C.Continent ORDER BY COUNT(*) DESC LIMIT 1
SELECT Maker, Model FROM car_names
SELECT Maker, Model FROM car_names
SELECT `Accelerate` FROM `cars_data` WHERE `Maker` = 'amac' AND `Model` = 'hornet sportabout (sw')
SELECT `Accelerate` FROM `car_names` WHERE `Make` = 'amc' AND `Model` = 'hornet sportabout (sw)'
SELECT count(*) FROM continents WHERE Continent = 'France'
SELECT count(*) FROM car_names AS c JOIN cars_data AS cd ON c.ModelId = cd.ModelId WHERE cd.Continent = 'France'
SELECT COUNT(*) FROM car_names AS "car_names" INNER JOIN cars_data AS "cars_data" ON "car_names".ModelId = "cars_data".ModelId WHERE "cars_data".Continent = "usa"
SELECT COUNT(*) FROM cars_data AS cd WHERE continents.Continent = 'United States'
SELECT AVG(mpg) FROM car_names WHERE Cylinders = 4
SELECT AVG(mpg) FROM car_names WHERE Cylinders = 4
SELECT MIN(Weight) FROM car_data WHERE Cylinders = 8 AND Year = 1974
SELECT MIN(c.Weight) FROM cars_data c JOIN car_names c ON c.Make = c.Make WHERE c.Year = 1974 AND c.Cylinders = 8
SELECT Maker, Model FROM car_names
SELECT Maker, Model FROM model_list
SELECT "CountryName", "ModelId" FROM "countries" JOIN "car_makers" ON "countries"."Continent" = "car_makers.""Continent"
SELECT c.CountryName, c.CountryId FROM countries c JOIN car_makers cm ON c.Country = cm.Country LIMIT 1
SELECT COUNT(*) FROM cars_data WHERE Accelerate > 150
SELECT COUNT(*) FROM cars_data WHERE Accelerate > 150
SELECT AVG(c.Weight) FROM cars_data AS c JOIN car_names AS a ON c.Id = a.ModelId WHERE c.Year = YEAR(MAX(cars_data.Year))
SELECT YEAR, AVG(Weight) AS AverageWeight, AVG(Year) AS AverageYear FROM car_data GROUP BY YEAR
SELECT DISTINCT C.CountryName FROM continents AS C JOIN countries AS C1 ON C.Continent = C1.Continent JOIN car_makers AS CMA ON C1.Country = CMA.CountryId WHERE C1.Continent = 'Europe' GROUP BY C.Continent HAVING COUNT(CMA.ModelId) >= 3
SELECT DISTINCT "Make" FROM continents WHERE Continent = 'Europe' AND "Model" >= 3
SELECT MAX(Horsepower) FROM car_names WHERE Cylinders = 3
SELECT MAX(Horsepower) FROM car_names WHERE Maker = 'Toyota'
SELECT "ModelId" FROM car_names WHERE "Make" = 'Toyota' ORDER BY "MPG" DESC LIMIT 1
SELECT m.Model FROM car_names AS m JOIN car_names AS m2 ON m.Make = m2.Make WHERE m2.MPG = (SELECT MAX(MPG) FROM car_names)
SELECT AVG(Horsepower) FROM car_data WHERE Year < 1980
SELECT AVG(Horsepower) FROM car_data WHERE Year < 1980
SELECT AVG(eDispl) FROM car_data JOIN cars_names ON car_data.Make = car_names.Make JOIN models ON car_data.Model = models.Model WHERE models.Maker = 'Volvo' AND models.Model = 'volvo'
SELECT AVG(edispl) FROM car_data WHERE Continent = 'Volvo'
SELECT MAX(Accelerate) FROM cars_data
SELECT MAX(Accelerate) FROM cars_data
SELECT "Model" FROM car_names GROUP BY "Make" ORDER BY COUNT(*) DESC LIMIT 1
SELECT "Model" FROM car_names GROUP BY "Make" ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
SELECT COUNT(*) FROM car_names AS `Name` INNER JOIN cars_data AS `Data` ON `Name`.`Name` = `Data` `Year` = 1980
SELECT COUNT(*) FROM car_names AS `car_names` INNER JOIN cars_data AS `cars_data` ON `car_names`.ModelId = `cars_data`.ModelId WHERE `cars_data`.Year = 1980
SELECT COUNT(*) FROM cars_data AS cd WHERE cd.Make = 'American Motor Company'
SELECT COUNT(*) FROM car_names AS c JOIN car_makers AS ma ON c.Maker = ma.Maker WHERE ma.Maker = 'American Motor Company'
SELECT m.Maker, m.FullName FROM car_makers m JOIN model_list mL ON m.Id = mL.ModelId GROUP BY m.Maker, m.FullName HAVING COUNT(*) > 3
SELECT m.Maker, c.Country FROM car_makers c JOIN model_list ml ON c.Id = ml.Maker JOIN car_names n ON ml.ModelId = n.Model GROUP BY m.Maker, c.Country HAVING COUNT(*) > 3
SELECT M.Make FROM car_names AS M JOIN car_names AS M2 ON M.Make = M2.Make JOIN car_makers AS C ON M.Maker = C.Maker WHERE C.Country = 'United States' OR M.Weight > 3500
SELECT m.Make FROM car_names AS m JOIN car_makers AS c ON m.Maker = c.Maker JOIN cars_data AS cd ON c.Id = cd.ModelId WHERE c.Country = 'United States' OR cd.Edispl > 3500
SELECT Year FROM car_data WHERE MPG >= 3000 AND MPG <= 4000
SELECT Year FROM cars_data WHERE MPG < 4000 AND Cylinders > 3000
SELECT c.Horsepower FROM car_names AS c JOIN cars_data AS d ON c.Model = d.Model WHERE d.Accelerate = 'Largest' ORDER BY d.Accelerate DESC LIMIT 1
SELECT "Cars_data"."Make" FROM "Cars_data" ORDER BY "Accelerate" DESC LIMIT 1
SELECT min(Accelerate) FROM car_names WHERE Maker = 'Volvo' AND Model = 'Volvo' LIMIT 1
SELECT A.Cylinders FROM car_names A JOIN car_makers M ON A.Maker = M.Maker JOIN continents C ON C.Continent = C.Id WHERE C.Continent = 'Volvo' ORDER BY A.Accelerate LIMIT 1
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Max(Accelerate) FROM cars_data)
SELECT COUNT(*) FROM cars_data AS c JOIN continents AS c ON c.Continent = c.Continent JOIN countries AS p ON p.Country = c.Continent WHERE c.Accelerate > MAX(p.Horsepower)
SELECT COUNT(*) FROM continents JOIN countries ON continents.Continent = countries.Continent GROUP BY continents.Continent HAVING COUNT(*) > 2
SELECT COUNT(*) FROM continents AS c JOIN countries AS c ON c.Continent = c.Continent WHERE c.Continent > 2
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT COUNT(*) FROM cars_data AS cd WHERE Accelerate > 6
SELECT Model FROM cars_data WHERE Cylinders = 4 AND Horsepower IS NOT NULL LIMIT 1
SELECT Model FROM car_names WHERE Make = 'Toyota' AND Cylinders > 4
SELECT m.Make, m.Model FROM car_names AS m JOIN car_names AS m2 ON m.Make = m2.Make JOIN car_makers AS m2_car ON m2.Id = m2_car.Id JOIN cars_data AS cd ON m2_car.Id = cd.ModelId GROUP BY m.Make, m.Model HAVING SUM(cd.Cylinders) <= 3
SELECT DISTINCT Maker, Make FROM car_names WHERE Make < 4
SELECT MAX(MPG) FROM car_names WHERE Maker = 'Toyota' AND Model LIKE 'Camry%'
SELECT MAX(mpg) FROM car_names WHERE Maker IN (8, '1980')
SELECT ModelId FROM car_names JOIN car_names ON car_names.Make = car_names.Make WHERE MPG < 3500 AND Maker != 'Ford Motor Company'
SELECT m.Model FROM car_names AS m JOIN car_names AS c ON m.Make = c.Make WHERE m.Model < 3500 AND c.Country <> 'Ford Motor Company'
SELECT CountryName FROM countries WHERE Continent IS NULL OR COUNT(DISTINCT Continent) = 1
SELECT CountryName FROM countries WHERE Continent IS NULL
SELECT M.Maker FROM car_makers AS M JOIN car_names AS C ON M.Maker = C.Make GROUP BY M.Maker HAVING COUNT(C.Model) >= 2 AND COUNT(M.Maker) > 3
SELECT DISTINCT Maker, Id FROM car_makers GROUP BY Maker, Id HAVING COUNT(*) >= 2 AND COUNT(*) > 3
SELECT c.CountryId, c.Name FROM countries c JOIN car_makers ca ON c.Country = ca.Country JOIN model_list ml ON ca.Id = ml.ModelId GROUP BY c.Country HAVING COUNT(DISTINCT ca.Maker) > 3 AND ml.Model = 'fiat'
SELECT c.CountryName FROM countries c JOIN continent c ON c.Continent = c.Continent JOIN car_makers cm ON c.Country = cm.CountryId GROUP BY c.CountryId HAVING COUNT(DISTINCT cm.Maker) > 3 OR COUNT(DISTINCT cm.Maker) = 1
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT A.Abbreviation FROM airlines AS A JOIN flights AS F ON A.Airline = F.Airline WHERE F.DestAirport = 'New York' AND A.Abbreviation = 'jetblue'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT `AirportName`, `City` FROM airports WHERE `AirportName` = 'Anthony'
SELECT A.AirportCode, A.AirportName FROM airlines AS A JOIN flights AS F ON A.Airline = F.Airline WHERE F.DestAirport = 'Anthony'
SELECT COUNT(DISTINCT Airline) FROM airlines
SELECT COUNT(*) FROM airlines
SELECT COUNT(*) FROM airports
SELECT count(*) FROM airports
SELECT COUNT(*) FROM flights
SELECT COUNT(*) FROM flights
SELECT A.Airline FROM airlines AS A JOIN flights AS F ON A.uid = F.SourceAirport WHERE F.Abbreviation = 'UAL'
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT count(*) FROM airlines WHERE Country = 'USA'
SELECT count(DISTINCT Airline) FROM airlines WHERE Country = 'USA'
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT AirportName FROM Airports WHERE AirportName = 'AKO'
SELECT AirportName FROM Airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM Airports WHERE AirportName = 'Aberdeen'
SELECT AirportName FROM Airports WHERE AirportName = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT count(*) FROM flights WHERE DestAirport = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'Aberdeen city'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'Aberdeen'
SELECT count(*) FROM flights WHERE DestAirport = 'Ashley' AND SourceAirport = 'Aberdeen'
SELECT count(*) FROM flights WHERE DestAirport = 'Ashley' AND SourceAirport = 'Aberdeen'
SELECT count(*) FROM flights WHERE airline = 'JetBlue Airways'
SELECT COUNT(*) FROM airlines WHERE Airline = 'Jetblue Airways'
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'AHD' AND Airline = 'United Airlines'
SELECT COUNT(DISTINCT Airline) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'Aberdeen'
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'Aberdeen'
SELECT `Country` FROM flights ORDER BY `COUNT(*) DESC LIMIT 1`
SELECT A.City FROM Flights AS F JOIN Airports AS A ON F.DestAirport = A.AirportName GROUP BY A.City ORDER BY COUNT(*) DESC
SELECT A.City FROM Flights AS F JOIN Airlines AS A ON F.Airline = A.Airline WHERE A.Abbreviation = 'most' ORDER BY F.FlightNo DESC LIMIT 1
SELECT "AirportName" FROM flightsGROUP BY "SourceAirport" ORDER BY COUNT(*) DESC
SELECT A.Country FROM flights JOIN airports ON flights.DestAirport = airports.AirportName GROUP BY A.Country ORDER BY COUNT(*) DESC LIMIT 1
SELECT A.AirportCode FROM Flights GROUP BY A.AirportCode ORDER BY COUNT(*) DESC LIMIT 1
SELECT A.Country FROM airlines AS A JOIN flights AS F ON A.uid = F.SourceAirport GROUP BY A.Airline ORDER BY COUNT(*) LIMIT 1
SELECT A.AirportCode FROM Airports A WHERE A.CountryAbbrev = 'United States' ORDER BY A.AirportCode ASC LIMIT 1
SELECT Airline FROM airlines GROUP BY Airline ORDER BY COUNT(*) DESC
SELECT Airline FROM airlines ORDER BY COUNT(*) DESC LIMIT 1
SELECT MIN(abbreviation) FROM airlines WHERE Airline = 'someAirline'
SELECT A.Abbreviation FROM airlines AS A JOIN flights AS F ON A.uid = F.SourceAirport GROUP BY A.uid ORDER BY COUNT(*) LIMIT 1
SELECT Airline FROM airlines WHERE Abbreviation LIKE 'AHD%'
SELECT A.Airline FROM airlines AS A JOIN flights AS F ON A.uid = F.SourceAirport WHERE F.DestAirport = 'AHD'
SELECT Airline FROM airlines WHERE Airline IN (SELECT Airline FROM flights WHERE DestAirport = 'AHD')
SELECT A.Airline FROM airlines A JOIN flights F ON A.uid = F.SourceAirport JOIN airports A1 ON F.DestAirport = A1.AirportName WHERE A1.AirportName = 'AHD'
SELECT A.Airline FROM airlines AS A JOIN flights AS F ON A.uid = F.SourceAirport AND A.uid = F.DestAirport WHERE F.SourceAirport = 'APG' AND F.DestAirport = 'CVO'
SELECT A.Airline FROM airlines AS A JOIN flights AS F ON A.uid = F.Airline JOIN airports AS A2 ON F.DestAirport = A2.AirportCode WHERE A2.AirportCode = 'APG' AND A2.AirportCode = 'CVO'
SELECT A.Airline FROM airlines A JOIN flights F ON A.uid = F.SourceAirport WHERE F.DestAirport = 'CVO' AND A.Airline != F.Airline AND A.Airline != F.Airline
SELECT A.Airline FROM airlines AS A JOIN flights AS F ON A.uid = F.SourceAirport WHERE F.DestAirport = 'CVO' AND F.DestAirport = 'APG' AND A.Airline <> F.Airline
SELECT A.Airline FROM airlines A JOIN flights F ON A.uid = F.SourceAirport GROUP BY A.Airline HAVING COUNT(*) >= 10
SELECT Airline FROM airlines WHERE Abbreviation >= 'J' AND Abbreviation <= 'N' AND COUNT(*) > 10
SELECT Airline FROM airlines GROUP BY Airline HAVING COUNT(*) < 200
SELECT Airline FROM airlines SELECT Airline FROM airlines
SELECT FlightNo FROM Flights WHERE Airline = 'United Airlines'
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'
SELECT FlightNo FROM Flights WHERE DestAirport = 'APG'
SELECT FlightNo FROM Flights WHERE DestAirport = 'APG'
SELECT FlightNo FROM Flights WHERE DestAirport = 'APG'
SELECT FlightNo FROM flights WHERE DestAirport = 'APG'
SELECT FlightNo FROM Flights WHERE DestAirport = 'Aberdeen'
SELECT FlightNo FROM Flights WHERE DestAirport = 'Aberdeen'
SELECT FlightNo FROM Flights WHERE DestAirport = 'Aberdeen'
SELECT FlightNo FROM Flights WHERE DestAirport = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'Aberdeen' OR DestAirport = 'Abilene'
SELECT COUNT(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene')
SELECT A.AirportName FROM Airports A WHERE A.AirportCode NOT IN (SELECT DISTINCT F.DestAirport FROM Flights F)
SELECT City FROM Airports WHERE CountryAbbrev NOT IN ('USA', 'Canada')
SELECT COUNT(*) FROM employee
SELECT COUNT(e.Employee_ID) FROM employee AS e
SELECT DISTINCT Employee_ID FROM employee ORDER BY Age ASC
SELECT Name FROM employee ORDER BY Age ASC
SELECT 'City' FROM employee
SELECT `City` FROM employee
SELECT DISTINCT City FROM employee WHERE Age > 30 GROUP BY City HAVING COUNT(*) > 1
SELECT City FROM employee WHERE Age > 30 GROUP BY Employee_ID HAVING COUNT(*) > 1
SELECT "Location" FROM shop
SELECT s.Location FROM shop AS s GROUP BY s.Location
SELECT s.Location, s.District FROM shop AS s JOIN hiring AS h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.District ORDER BY COUNT(*) DESC THEN SELECT 'Manager Name and District' FROM (SELECT s.Location, s.District FROM shop AS s JOIN hiring AS h ON s.Shop_ID = h.Shop_ID WHERE h.Number_products = (SELECT MAX(Number_products) FROM shop)) AS subquery
SELECT s.Location, s.District FROM shop AS s JOIN hiring AS h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Location, s.District ORDER BY COUNT(*) LIMIT 1
SELECT MIN(NumberOf_products) FROM shop
SELECT min(CASE WHEN e.Number_products = 0 THEN 0 ELSE 1 END) AS min_products, max(CASE WHEN e.Number_products = 0 THEN 0 ELSE 1 END) AS max_products FROM employee AS e JOIN shop AS s ON e.Shop_ID = s.Shop_ID GROUP BY e.Employee_ID
SELECT s.Name, s.Location, s.District FROM shop AS s JOIN hiring AS h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name, s.Location, s.District ORDER BY s.Number_products DESC
SELECT Shop_ID, Name, Location, District FROM shop ORDER BY Number_products DESC
SELECT DISTINCT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name HAVING COUNT(*) > (SELECT AVG(Number_products) FROM shop)
SELECT s.Name FROM hiring h JOIN shop s ON h.Shop_ID = s.Shop_ID GROUP BY s.Shop_ID HAVING AVG(s.Number_products) > (SELECT AVG(Number_products) FROM shop)
SELECT e.Name FROM employee e JOIN evaluation e ON e.Employee_ID = e.Employee_ID GROUP BY e.Name ORDER BY e.Bonus DESC LIMIT 1
SELECT e.Name FROM evaluation e JOIN employee e ON e.Employee_ID = e.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT E.Name FROM employee E JOIN evaluation E1 ON E.Employee_ID = E1.Employee_ID WHERE E1.Bonus = 'Highest one time bonus' ORDER BY E1.Bonus DESC LIMIT 1
SELECT E.Name FROM employee E JOIN evaluation E1 ON E.Employee_ID = E1.Employee_ID ORDER BY E1.Bonus DESC LIMIT 1
SELECT Name FROM employee WHERE Is_full_time = 0
SELECT Name FROM employee WHERE Is_full_time = 0
SELECT s.Name FROM employee e JOIN hiring h ON e.Employee_ID = h.Employee_ID GROUP BY s.Name ORDER BY SUM(h.Number_products) DESC LIMIT 1
SELECT s.Name FROM shop s GROUP BY s.Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT DISTINCT s.Name FROM shop AS s JOIN hiring AS h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name HAVING COUNT(*) = 0
SELECT DISTINCT s.Name FROM shop s WHERE s.Number_products = 0
SELECT s.Name, COUNT(e.Employee_ID) FROM hiring e JOIN shop s ON e.Shop_ID = s.Shop_ID GROUP BY s.Name
SELECT s.Name, COUNT(e.Employee_ID) FROM shop AS s JOIN employee AS e ON s.Shop_ID = e.Employee_ID GROUP BY s.Shop_ID
SELECT SUM(e.Bonus) FROM evaluation AS e JOIN employee AS o ON e.Employee_ID = o.Employee_ID
SELECT SUM(e.Bonus) FROM evaluation AS e
SELECT * FROM hiring
SELECT * FROM hiring
SELECT DISTINCT "District" FROM hiring JOIN employee ON hiring.Employee_ID = employee.Employee_ID JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY "District" HAVING COUNT(*) > 0 AND COUNT(*) > 10000
SELECT DISTINCT `District` FROM `shop` WHERE `Number_products` < 3000 AND `Number_products` > 10000
SELECT COUNT(*) FROM shop
SELECT DISTINCT `Location` FROM shop
SELECT COUNT(*) FROM Templates AS t JOIN Documents AS d ON t.Template_ID = d.Template_ID
SELECT COUNT(*) FROM Documents
SELECT t.Document_ID, t.Document_Name, t.Document_Description FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID SELECT d.Document_ID, d.Document_Name, d.Document_Description FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID
SELECT T.Template_ID, T.Template_Details, D.Document_Name FROM Templates AS T JOIN Documents AS D ON T.Template_ID = D.Template_ID
SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name LIKE '%w%'
SELECT DISTINCT t.Template_Type_Code, t.Template_ID FROM Templates AS t JOIN Documents AS d ON d.Template_ID = t.Template_ID WHERE d.Document_Name LIKE '%w%'
SELECT t.Template_ID, t.Template_Type_Description, d.Document_ID FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_Name = 'Robbin CV'
SELECT T.Document_ID, T.Template_ID, T.Template_Details FROM Documents AS T WHERE T.Document_Name = 'Robbin CV'
SELECT COUNT(DISTINCT Template_Type_Code) FROM Ref_Template_Types AS T JOIN Templates AS T1 ON T.Template_Type_Code = T1.Template_Type_Code
SELECT COUNT(DISTINCT Template_Type_Code) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code
SELECT COUNT(*) FROM Templates AS t JOIN Ref_Template_Types AS t1 ON t.Template_Type_Code = t1.Template_Type_Code WHERE t1.Template_Type_Description = 'PPT'
SELECT count(*) FROM Templates WHERE Template_Type_Code = 'PPT'
SELECT t.Template_Type_Code, COUNT(d.Document_ID) FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code
SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code
SELECT t1.Template_Type_Code, t1.Template_Type_Description FROM Ref_Template_Types AS t1 JOIN Templates AS t2 ON t1.Template_Type_Code = t2.Template_Type_Code GROUP BY t1.Template_Type_Code, t1.Template_Type_Description ORDER BY COUNT(*) DESC LIMIT 1
SELECT t.Template_Type_Code, t.Template_Type_Description FROM Ref_Template_Types AS t JOIN Templates AS t1 ON t.Template_Type_Code = t1.Template_Type_Code GROUP BY t.Template_Type_Code, t.Template_Type_Description ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(*) > 1
SELECT Template_Type_Code FROM Ref_Template_Types GROUP BY Template_Type_Code HAVING COUNT(*) > 1
SELECT t1.Template_ID FROM Templates t1 LEFT JOIN Ref_Template_Types t2 ON t1.Template_Type_Code = t2.Template_Type_Code WHERE t2.Template_Type_Code IS NULL GROUP BY t1.Template_ID
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IS NULL
SELECT COUNT(*) FROM Ref_Template_Types AS t JOIN Templates AS t1 ON t.Template_Type_Code = t1.Template_Type_Code
SELECT COUNT(*) FROM Ref_Template_Types
SELECT DISTINCT t.Template_Type_Code, t.Template_Type_Description, Templates.Template_ID FROM Ref_Template_Types AS t JOIN Templates AS t ON t.Template_ID = t.Template_ID JOIN Documents AS d ON d.Template_ID = t.Template_ID
SELECT t.Template_Type_Code, t.Template_Type_Description, t.Template_ID FROM Ref_Template_Types AS t JOIN Templates AS t ON t.Template_Type_Code = t.Template_Type_Code
SELECT Template_Type_Code FROM Ref_Template_Types
SELECT Template_Type_Code FROM Ref_Template_Types
SELECT t.Template_ID FROM Templates t JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code WHERE rt.Template_Type_Code IN ('PP', 'PPT')
SELECT DISTINCT t1.Template_Type_Code FROM Ref_Template_Types t1 JOIN Templates t2 ON t1.Template_Type_Code = t2.Template_Type_Code WHERE t2.Template_Type_Code IN ('PP', 'PPT')
SELECT COUNT(*) FROM Ref_Template_Types WHERE Template_Type_Code = 'CV'
SELECT COUNT(*) FROM Ref_Template_Types WHERE Template_Type_Code = 'CV'
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code > '5'
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code > 5
SELECT Template_Type_Code, COUNT(*) FROM Ref_Template_Types GROUP BY Template_Type_Code
SELECT Template_Type_Code, COUNT(*) FROM Ref_Template_Types GROUP BY Template_Type_Code
SELECT Template_Type_Code FROM Ref_Template_Types GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Template_Type_Code FROM Ref_Template_Types GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Template_Type_Code FROM Ref_Template_Types GROUP BY Template_Type_Code HAVING COUNT(*) < 3
SELECT Template_Type_Code FROM Ref_Template_Types GROUP BY Template_Type_Code HAVING COUNT(*) < 3
SELECT MIN(Template_Type_Code) FROM Ref_Template_Types LIMIT 1
SELECT t.Template_Type_Code, t.Template_Type_Description FROM Ref_Template_Types AS t JOIN Templates AS t1 ON t.Template_Type_Code = t1.Template_Type_Code JOIN Documents AS t2 ON t1.Template_ID = t2.Template_ID WHERE t2.Template_ID = 'some_template_id'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates WHERE Template_Type_Code = 'Data base')
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID = 'Data Base')
SELECT DISTINCT T.Template_ID FROM Templates AS T JOIN Ref_Template_Types AS R ON T.Template_Type_Code = R.Template_Type_Code WHERE R.Template_Type_Code = 'BK'
SELECT DISTINCT T.Template_ID FROM Templates T JOIN Ref_Template_Types R ON T.Template_Type_Code = R.Template_Type_Code WHERE R.Template_Type_Code = 'BK'
SELECT t.Template_Type_Code, COUNT(DISTINCT t.Template_Type_Code) FROM Ref_Template_Types AS t LEFT JOIN Templates AS t2 ON t.Template_Type_Code = t2.Template_Type_Code LEFT JOIN Documents AS d ON t.Template_Type_Code = d.Template_ID GROUP BY t.Template_Type_Code ORDER BY t.Template_Type_Code
SELECT Template_Type_Code, COUNT(*) FROM Ref_Template_Types GROUP BY Template_Type_Code
SELECT Template_Type_Code FROM Ref_Template_Types GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Template_Type_Code FROM Ref_Template_Types GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates)
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates)
SELECT "Template_Type_Description" FROM Ref_Template_Types
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates)
SELECT DISTINCT t.Template_Type_Description FROM Ref_Template_Types t JOIN Templates t ON t.Template_Type_Code = t.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Template_ID IN (SELECT Template_ID FROM Documents WHERE Document_Name LIKE '%your_search_term%')
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation'
SELECT t.Template_Type_Code FROM Templates AS t JOIN Ref_Template_Types AS t ON t.Template_Type_Code = t.Template_Type_Code WHERE t.Template_Type_Description = 'Presentation'
SELECT SUM(Paragraph_ID) FROM Paragraphs
SELECT COUNT(*) FROM Documents
SELECT COUNT(*) FROM Documents WHERE Template_ID = 'Summer Show'
SELECT COUNT(*) FROM Documents WHERE Template_ID = 'Summer Show'
SELECT `Paragraph_Text` FROM `Paragraphs` WHERE `Paragraph_Text` LIKE 'Korea '
SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'
SELECT 'Welcome to NY'.Paragraph_ID, 'Welcome to NY'.Paragraph_Text FROM Documents WHERE Template_ID = 'Welcome to NY'
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs AS p
SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = 'Customer reviews'
SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = 'Customer reviews'
SELECT T1.Document_ID, COUNT(T1.Paragraph_ID) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Document_ID ORDER BY T1.Document_ID
SELECT t1.Template_ID, COUNT(t2.Paragraph_ID) FROM Templates AS t1 JOIN Documents AS t2 ON t1.Template_ID = t2.Template_ID GROUP BY t1.Template_ID
SELECT T.Document_ID, T.Document_Name, COUNT(P.Paragraph_ID) AS Paragraph_Count FROM Documents AS T JOIN Paragraphs AS P ON T.Document_ID = P.Document_ID GROUP BY T.Document_ID, T.Document_Name ORDER BY T.Document_Name
SELECT T1.Template_ID, T1.Template_Type_Description, COUNT(T2.Paragraph_ID) AS ParagraphCount FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID, T1.Template_Type_Description ORDER BY T1.Template_Type_Description
SELECT t.Template_ID FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID HAVING COUNT(*) >= 2
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(*) >= 2
SELECT T1.Document_ID, T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T2.Document_ID = T1.Document_ID GROUP BY T1.Document_ID, T1.Document_Name ORDER BY COUNT(*) DESC
SELECT T1.Document_ID, T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT Template_ID FROM Templates GROUP BY Template_ID ORDER BY COUNT(*) ASC LIMIT 1
SELECT t.Template_ID FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID ORDER BY COUNT(*) LIMIT 1
SELECT t1.Document_ID FROM Documents t1 JOIN Paragraphs t2 ON t1.Document_ID = t2.Document_ID WHERE t2.Paragraph_ID BETWEEN 1 AND 2
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text IN (SELECT Paragraph_Text FROM Paragraphs WHERE Paragraph_Text IS NOT NULL AND Paragraph_Text > 0) AND p.Paragraph_Text BETWEEN 1 AND 2
SELECT t.Document_ID FROM Documents t JOIN Templates t ON t.Template_ID = t.Template_ID WHERE t.Template_Type_Description = 'Brazil' AND t.Template_Type_Description = 'Ireland'
SELECT DISTINCT t1.Document_ID FROM Documents AS t1 JOIN Templates AS t2 ON t1.Template_ID = t2.Template_ID JOIN Paragraphs AS p ON t1.Document_ID = p.Document_ID WHERE p.Paragraph_Text LIKE '%Brazil%' AND p.Paragraph_Text LIKE '%Ireland%'
SELECT COUNT(*) FROM teacher
SELECT COUNT(*) FROM teacher
SELECT Teacher_ID, Name FROM teacher WHERE Age ASC
SELECT Teacher_ID FROM teacher ORDER BY Age ASC
SELECT Teacher_ID, Hometown FROM teacher
SELECT `Teacher_ID`, `Hometown` FROM teacher
SELECT name FROM teacher WHERE Hometown != 'Little Lever Urban District'
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T2.Grade <> '' AND T2.Grade <> 'Little Lever Urban District'
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T2.Grade IN (32, 33)
SELECT t.Name FROM teacher AS t JOIN course_arrange AS ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Grade IN (32, 33)
SELECT T1.Hometown FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID AND T2.Grade = 1 WHERE T2.Teacher_ID = 1 AND T2.Age = 1
SELECT Teacher_ID FROM course_arrange ORDER BY Grade ASC LIMIT 1
SELECT t.Hometown, COUNT(*) FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Hometown
SELECT COUNT(Teacher_ID) FROM course_arrange GROUP BY Teacher_ID
SELECT "Hometown" FROM course_arrange GROUP BY "Hometown" ORDER BY COUNT(*) DESC
SELECT DISTINCT Hometown FROM teacher ORDER BY COUNT(*) DESC LIMIT 1
SELECT t.Hometown FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID HAVING COUNT(*) >= 2
SELECT DISTINCT Teacher.Hometown FROM course_arrange JOIN teacher ON course_arrange.Course_ID = teacher.Course_ID
SELECT t.Name, c.Course_ID FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID GROUP BY t.Teacher_ID, c.Course_ID
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID ORDER BY T1.Name ASC
SELECT T.Name, C.Course_ID FROM teacher AS T JOIN course_arrange AS C ON T.Teacher_ID = C.Teacher_ID ORDER BY T.Name ASC
SELECT T.Name FROM teacher AS T JOIN course_arrange AS R ON T.Teacher_ID = R.Teacher_ID WHERE R.Course = 'Math'
SELECT t.Name FROM teacher AS t JOIN course_arrange AS ar ON t.Teacher_ID = ar.Teacher_ID WHERE ar.Course_ID = 'Math'
SELECT teacher.Name, COUNT(course.Course_ID) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name
SELECT Teacher_ID, Name FROM teacher GROUP BY Teacher_ID
SELECT Teacher_ID FROM teacher WHERE Age > 0 GROUP BY Teacher_ID HAVING COUNT(*) >= 2
SELECT T2.Name FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID GROUP BY T1.Course_ID HAVING COUNT(*) >= 2
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Course_ID IS NULL
SELECT T2.Name FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID WHERE T2.Teacher_ID IS NULL
SELECT COUNT(*) FROM visitor WHERE Age < 30
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC
SELECT AVG(Age) FROM visit WHERE Level_of_membership <= 4
SELECT Name, Level_of_membership FROM museum GROUP BY Level_of_membership ORDER BY Age ASC
SELECT m.Museum_ID, m.Name FROM museum JOIN museum AS m ON m.Museum_ID = m.Museum_ID ORDER BY m.Num_of_Staff DESC LIMIT 1
SELECT avg(Num_of_Staff) FROM museum GROUP BY Museum_ID HAVING Open_Year < 2009
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'
SELECT M.Name FROM museum M JOIN visit V ON M.Museum_ID = V.Museum_ID WHERE V.Num_of_Ticket > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)
SELECT v.visitor_id, v.name, v.age FROM visitor AS v JOIN museum AS m ON v.Museum_ID = m.Museum_ID GROUP BY v.visitor_ID, v.name, v.age HAVING COUNT(*) > 1
SELECT v.visitor_id, v.name, v.level_of_membership FROM visit v JOIN museum m ON v.Museum_ID = m.Museum_ID GROUP BY v.visitor_id, v.name, v.level_of_membership ORDER BY SUM(v.Total_spent) DESC LIMIT 1
SELECT m.Name, v.ID FROM visit v JOIN museum m ON v.Museum_ID = m.Museum_ID GROUP BY v.Visitor_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT M.Name FROM museum M JOIN visit V ON M.Museum_ID = V.Museum_ID WHERE V.visitor_id IS NULL
SELECT DISTINCT v.Name, v.Age FROM visit AS v JOIN visitor AS v1 ON v.Museum_ID = v1.Museum_ID WHERE v1.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)
SELECT AVG(Num_of_Ticket) FROM visit GROUP BY visit_visitor_id
SELECT SUM(t1.Total_spent) FROM visit AS t1 JOIN museum AS t2 ON t1.Museum_ID = t2.Museum_ID WHERE t1.visitor_ID IN (SELECT visitor_ID FROM visitor WHERE level_of_membership = 1)
SELECT DISTINCT Name FROM visitor WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year < 2009 AND Open_Year > 2011)
SELECT count(*) FROM visitor WHERE age < 2010 AND museum_id NOT IN (SELECT Museum_ID FROM museum WHERE Open_Year > 2010)
SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008
SELECT COUNT(*) FROM players
SELECT COUNT(*) FROM players
SELECT COUNT(*) FROM matches
SELECT COUNT(*) FROM matches
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT AVG(age) FROM matches WHERE loser_id IS NOT NULL AND winner_id IS NOT NULL
SELECT AVG(CASE WHEN loser_age = 0 THEN loser_id ELSE NULL END) AS average_loser_age, AVG(CASE WHEN winner_age = 0 THEN winner_id ELSE NULL END) AS average_winner_age FROM matches
SELECT AVG(ranking_points) FROM rankings WHERE ranking_date = '2023-01-01'
SELECT AVG(ranking_points) FROM rankings WHERE ranking_date >= (SELECT match_num FROM matches WHERE tourney_id = 'YOUR_TOURNEY_ID')
SELECT r.ranking FROM rankings AS r JOIN matches AS m ON r.ranking_date = m.match_num WHERE m.loser_rank = 0
SELECT MAX(ranking) FROM rankings
SELECT DISTINCT country_code FROM players
SELECT COUNT(DISTINCT country_code) FROM players
SELECT DISTINCT loser_name FROM matches
SELECT COUNT(DISTINCT loser_name) FROM matches AS m JOIN players AS p ON m.player_id = p.player_id WHERE m.loser_id = 1
SELECT t.tourney_name FROM matches AS m JOIN players AS p ON m.best_of = p.player_id GROUP BY t.tourney_name HAVING COUNT(*) > 10
SELECT `winner_name` FROM matches GROUP BY `winner_rank_points` HAVING COUNT(*) > 10
SELECT p.first_name, p.last_name FROM players AS p WHERE p.player_id IN (SELECT best_of FROM matches WHERE match_num IN (SELECT tournament_num FROM tours WHERE tourney_date BETWEEN '2013-01-01' AND '2016-12-31' ) ) AND p.birth_date BETWEEN '2013-01-01' AND '2016-12-31'
SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.loser_id WHERE m.loser_age IS NOT NULL AND m.loser_rank_points IS NOT NULL AND m.loser_seed IS NOT NULL AND m.year = 2013 AND m.year = 2016
SELECT COUNT(*) FROM matches WHERE match_num IN (2013, 2016)
SELECT COUNT(*) FROM matches WHERE match_num > 2012 AND match_num < 2017
SELECT p.country_code, p.first_name FROM players p WHERE p.player_id IN (SELECT best_of FROM matches WHERE draw_size = 3) AND p.player_id IN (SELECT loser_id FROM matches WHERE match_num = 1)
SELECT p1.first_name, p1.country_code FROM players p1 JOIN matches m1 ON p1.player_id = m1.loser_id WHERE m1.loser_rank_points = 1 AND m1.loser_rank_points = 1
SELECT first_name, country_code FROM players ORDER BY birth_date DESC LIMIT 1
SELECT first_name, country_code FROM players ORDER BY birth_date DESC LIMIT 1
SELECT first_name, last_name FROM players ORDER BY birth_date
SELECT DISTINCT first_name, last_name FROM players ORDER BY birth_date
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date
SELECT first_name, last_name FROM players ORDER BY birth_date
SELECT p.first_name, p.country_code FROM players AS p JOIN matches AS m ON p.player_id = m.loser_id GROUP BY p.player_id, p.first_name, p.country_code ORDER BY COUNT(*) LIMIT 1
SELECT p.first_name, p.country_code FROM players AS p JOIN matches AS m ON p.player_id = m.loser_id WHERE m.loser_id IS NOT NULL ORDER BY m.tourney_date ASC LIMIT 1
SELECT match_num FROM matches GROUP BY match_num ORDER BY COUNT(*) DESC LIMIT 1
SELECT `match_num` FROM matches ORDER BY `match_num` DESC LIMIT 1
SELECT winner_name, ranking_points FROM rankings ORDER BY tours DESC LIMIT 1
SELECT winner_name FROM matches GROUP BY winner_id ORDER BY rank_points DESC LIMIT 1
SELECT winner_name FROM rankings WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM rankings) AND winner_seed = 'AUS' AND tourney_date = '2023-10-27'
SELECT winner_name FROM rankings WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM rankings) AND winner_seed = 'Australian Open' ORDER BY ranking_date LIMIT 1
SELECT w.winner_name FROM matches AS m JOIN players AS p ON m.loser_id = p.player_id JOIN rankings AS r ON m.match_num = r.match_num GROUP BY w.winner_name ORDER BY COUNT(*) LIMIT 1
SELECT winner_name, loser_name FROM matches WHERE match_num = 1 LIMIT 1
SELECT "player_id", "first_name" FROM rankings GROUP BY "player_id", "first_name" ORDER BY "player_id", "first_name"
SELECT p.first_name, AVG(r.ranking) FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name ORDER BY p.first_name
SELECT "player_id", "first_name" FROM ranking GROUP BY "player_id", "first_name" ORDER BY "ranking_date"
SELECT first_name, total_ranking_points FROM players
SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT "country_code" FROM players GROUP BY "country_code" HAVING COUNT(*) > 50
SELECT "country_code" FROM players GROUP BY "country_code" HAVING COUNT(*) > 50
SELECT tour_num FROM rankings GROUP BY tour_num
SELECT year, COUNT(*) AS total_tours FROM rankings GROUP BY year
SELECT match_num FROM matches GROUP BY match_num ORDER BY match_num
SELECT year FROM matches GROUP BY year ORDER BY year
SELECT winner_name, ranking FROM rankings WHERE ranking_date = '2023-01-01' order by ranking_points ASC LIMIT 3
SELECT w.first_name, w.last_name, r.ranking FROM rankings AS r JOIN players AS p ON r.player_id = p.player_id JOIN matches AS m ON m.best_of = p.player_id WHERE r.ranking > ( SELECT MAX(ranking) FROM rankings ) AND r.ranking < ( SELECT MAX(ranking) FROM rankings WHERE ranking > ( SELECT MAX(ranking) FROM rankings ) ) AND r.ranking_points > 0 ORDER BY r.ranking
SELECT COUNT(DISTINCT winner_id) FROM rankings WHERE winner_hand = 'Left' AND winner_ht = 'Left'
SELECT COUNT(*) FROM players WHERE hand = 'Left' AND player_id IN (SELECT best_of FROM matches)
SELECT p.first_name, p.country_code, p.birth_date FROM players AS p JOIN matches AS m ON p.player_id = m.winner_id WHERE p.ranking_points = ( SELECT MAX(ranking_points) FROM rankings )
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id GROUP BY p.player_id, p.first_name, p.country_code, p.birth_date ORDER BY total_winner_rank_points DESC LIMIT 1
SELECT table_name, COUNT(*) AS number_of_hands FROM matches GROUP BY table_name
SELECT table_name, COUNT(*) AS num_players FROM matches GROUP BY table_name, hand_type ORDER BY table_name, hand_type
SELECT COUNT(*) FROM battle AS b JOIN ship AS s ON b.id = s.id WHERE b.result = 'Captured'
SELECT name, tonnage FROM battle ORDER BY latin_commander DESC
SELECT name, date, result FROM battle
SELECT MAX(CASE WHEN caused_by_ship_id IS NOT NULL THEN killed ELSE 0 END) AS max_death_toll, MIN(CASE WHEN caused_by_ship_id IS NOT NULL THEN killed ELSE 0 END) AS min_death_toll FROM death
SELECT AVG(injured) FROM death JOIN ship ON death.killed = ship.lost_in_battle
SELECT `caused_by_ship_id`, `killed`, `injured` FROM death WHERE `ship_type` = 't' AND `location` = 'Unknown'
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'
SELECT DISTINCT b.id, b.name FROM battle b JOIN death d ON b.id = d.id WHERE d.caused_by_ship_id = 'Brig'
SELECT b.id, b.name FROM battle b JOIN death d ON b.id = d.id GROUP BY b.id, b.name HAVING COUNT(*) > 10
SELECT s.lost_in_battle, s.name FROM ship JOIN death ON ship.id = death.id GROUP BY s.lost_in_battle, s.name ORDER BY COUNT(*) DESC LIMIT 1
SELECT DISTINCT b.name FROM battle b JOIN ship s ON b.id = s.id WHERE b.bulgarian_commander = 'Kaloyan' AND s.latin_commander = 'Baldwin I'
SELECT COUNT(*) FROM battle
SELECT COUNT(*) FROM battle WHERE result IS NULL AND result LIKE '%225%'
SELECT name, date FROM battle WHERE result = 'Lost in battle' AND bulgarian_commander = 'Lettice' AND ship_type = 'HMS Atalanta'
SELECT b.name, b.result FROM battle b JOIN ship s ON b.id = s.id WHERE s.lost_in_battle = 0 AND b.bulgarian_commander IS NOT NULL
SELECT note FROM death WHERE caused_by_ship_id LIKE '%East%'
SELECT address_id FROM Addresses
SELECT line_1, line_2 FROM Addresses
SELECT COUNT(*) FROM Courses
SELECT COUNT(*) FROM Courses
SELECT course_description FROM Courses
SELECT "course_description" FROM Courses
SELECT line_3 FROM Addresses WHERE city = 'Port Chelsea'
SELECT zip_postcode FROM Addresses WHERE line_1 = 'Port Chelsea'
SELECT d.department_name, d.department_id FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_name, d.department_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT d.department_name, d.department_id FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(*) FROM Departments
SELECT COUNT(DISTINCT department_name) FROM Departments
SELECT COUNT(DISTINCT course_name) FROM Courses
SELECT COUNT(*) FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments)
SELECT COUNT(*) FROM Degrees WHERE DepartmentName = 'Engineering'
SELECT COUNT(*) FROM Degrees WHERE DepartmentName = 'Engineering'
SELECT "section_name", "section_description" FROM Sections
SELECT "section_name", "section_description" FROM Sections
SELECT c.course_name, c.course_id FROM Courses c JOIN Degree_Programs d ON c.course_id = d.course_id GROUP BY c.course_id HAVING COUNT(*) <= 2
SELECT c.course_name, c.course_id FROM Courses c JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id HAVING COUNT(s.section_id) < 2
SELECT DISTINCT section_name FROM Sections ORDER BY section_name REVERSE
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT "semester_name", "section_id" FROM "Semesters" GROUP BY "semester_name" ORDER BY "semester_name" LIMIT 1
SELECT c.course_name, c.course_id FROM Courses c JOIN Degree_Programs d ON c.course_id = d.course_id GROUP BY c.course_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT D.department_description FROM Departments AS D JOIN Transcript_Contents AS T ON T.transcript_id = T.transcript_id WHERE T.transcript_text LIKE '%the computer%'
SELECT "department_description" FROM Departments WHERE "department_name" LIKE '%computer%'
SELECT s.first_name, s.middle_name, s.last_name FROM Students JOIN Student_Enrolment AS SE ON s.student_id = SE.student_id JOIN Degree_Programs AS DP ON SE.student_enrolment_id = DP.degree_program_id WHERE DP.department_id = 1 GROUP BY s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT DP.degree_program_id) = 2
SELECT s.last_name, s.first_name, s.middle_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs d ON se.degree_program_id = d.degree_program_id WHERE d.department_id = 1 AND se.semester_id = 1 GROUP BY s.last_name, s.first_name, s.middle_name HAVING COUNT(DISTINCT d.department_id) = 1
SELECT first_name, middle_name, last_name FROM Students WHERE degree_summary_name = 'Bachelor'
SELECT first_name, middle_name, last_name FROM Students WHERE current_address_id = 'some_student_id'
SELECT d.department_name FROM Departments AS d JOIN Degree_Programs AS dp ON d.department_id = dp.department_id GROUP BY d.department_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT "degree_summary_name" FROM Degree_Programs GROUP BY "degree_summary_name" ORDER BY COUNT(*) DESC LIMIT 1
SELECT t1.department_name, t1.department_description FROM Departments AS t1 JOIN Degree_Programs AS t2 ON t1.department_id = t2.department_id GROUP BY t1.department_name, t1.department_description ORDER BY COUNT(*) LIMIT 1
SELECT d.department_name, s.degree_summary_name FROM Degree_Programs AS d JOIN Sections AS s ON d.degree_program_id = s.course_id GROUP BY d.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(t.student_course_id) AS num_enrollments FROM Students s JOIN Student_Enrolment t ON s.student_id = t.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY num_enrollments DESC LIMIT 1
SELECT s.last_name, s.first_name, s.middle_name, s.student_id, COUNT(e.student_enrolment_id) FROM Students s JOIN Student_Enrolment e ON s.student_id = e.student_id GROUP BY s.student_id ORDER BY COUNT(e.student_enrolment_id) DESC LIMIT 1
SELECT "semester_name" FROM Semesters WHERE "semester_id" NOT IN (SELECT "semester_id" FROM Students_Enrolment)
SELECT DISTINCT d.department_name FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id WHERE dp.degree_summary_name IS NULL
SELECT c.course_name FROM Courses c JOIN Degree_Programs d ON c.course_id = d.course_id JOIN Semester s ON d.semester_id = s.semester_id JOIN Students s2 ON s.student_id = s2.student_id WHERE s2.ssn IS NOT NULL
SELECT c.course_name FROM Courses c JOIN Degree_Programs d ON c.course_id = d.course_id JOIN Sections s ON d.degree_program_id = s.degree_program_id JOIN Semester s2 ON s.semester_id = s2.semester_id WHERE s2.course_id IN (SELECT course_id FROM Sections) GROUP BY c.course_name
SELECT c.course_name FROM Courses c JOIN Degree_Programs d ON c.course_id = d.course_id GROUP BY c.course_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT c.course_name FROM Courses c JOIN Degree_Programs d ON c.course_id = d.course_id GROUP BY c.course_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT DISTINCT s.last_name FROM Students s WHERE s.permanent_address_id IN (SELECT permanent_address_id FROM Addresses WHERE city = 'North Carolina') AND s.state_province_county = 'North Carolina'
SELECT DISTINCT s.last_name FROM Students s WHERE s.state_province_county = 'North Carolina' AND s.degree_program_id IS NULL
SELECT DISTINCT t1.transcript_id, t1.transcript_date FROM Transcript_Contents AS t1 JOIN Transcript_Contents AS t2 ON t1.transcript_id = t2.transcript_id GROUP BY t1.transcript_id, t1.transcript_date HAVING COUNT(*) >= 2
SELECT transcript_id, transcript_date FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) >= 2
SELECT phone_number FROM Transcripts WHERE student_course_id = 'Timmothy' AND student_course_id = 'Ward'
SELECT ssn FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT first_name, middle_name, last_name FROM Students WHERE current_address_id = 'some_unique_id'
SELECT first_name, middle_name, last_name FROM Students WHERE student_id = 'some_student_id'
SELECT "first_name", "middle_name", "last_name" FROM Degrees WHERE Degree_Summary_Name = 'Early Graduate'
SELECT "first_name", "middle_name", "last_name" FROM Courses WHERE course_name = 'First School'
SELECT DISTINCT l.first_name FROM Addresses a JOIN Addresses l ON a.address_id = l.address_id WHERE a.city != l.city
SELECT s.first_name FROM Students s WHERE s.permanent_address_id != s.current_address_id
SELECT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country FROM Addresses a ORDER BY a.line_1 LIMIT 1
SELECT address_id, line_1, line_2 FROM Addresses ORDER BY students_count DESC LIMIT 1
SELECT AVG(Transcript_Date) FROM Transcript_Contents
SELECT AVG(transcript_date) FROM Transcript_Contents
SELECT transcript_date, other_details FROM Transcript_Contents LIMIT 1
SELECT transcript_date FROM Transcript_Contents ORDER BY transcript_date LIMIT 1
SELECT COUNT(*) FROM Transcript_Contents AS t WHERE t.student_course_id IS NOT NULL
SELECT COUNT(*) FROM Transcript_Contents
SELECT transcript_date FROM Transcript_Contents
SELECT transcript_date FROM Transcript_Contents
SELECT COUNT(DISTINCT course_id) FROM Transcript_Contents GROUP BY course_id
SELECT "course_id", COUNT(*) FROM "Transcript_Contents" GROUP BY "transcript_id" ORDER BY COUNT(*) DESC LIMIT 1
SELECT t.transcript_date FROM Transcript_Contents AS t WHERE t.transcript_id IN (SELECT DISTINCT t2.transcript_id FROM Transcript_Contents AS t2 WHERE t2.student_id IN (SELECT student_id FROM Students WHERE current_address_id IS NOT NULL)) ORDER BY COUNT(*) ASC LIMIT 1
SELECT transcript_id FROM Transcript_Contents ORDER BY COUNT(*) ASC LIMIT 1
SELECT DISTINCT s.semester_name FROM Semesters s JOIN Students s1 ON s.semester_id = s1.semester_id JOIN Students s2 ON s1.student_id = s2.student_id WHERE s2.permanent_address_id IS NOT NULL
SELECT DISTINCT s.semester_id FROM Semesters s JOIN Students s1 ON s.semester_id = s1.semester_id JOIN Degree_Programs d ON s1.degree_program_id = d.degree_program_id WHERE d.degree_summary_name = 'Masters' AND d.degree_summary_description LIKE '%Bachelors%'
SELECT COUNT(DISTINCT address_id) FROM Addresses
SELECT A.address_id FROM Addresses A JOIN Students S ON A.address_id = S.permanent_address_id WHERE S.current_address_id IS NOT NULL
SELECT * FROM Students WHERE current_address_id = 'some_student_id' ORDER BY last_name ASC
SELECT other_address_details FROM Addresses ORDER BY other_address_details ASC
SELECT 'h' FROM Sections
SELECT "other_details" FROM Addresses WHERE line_1 = 'h'
SELECT first_name FROM Students WHERE permanent_address_id IN (country:Haiti, cell_phone_number:09700166582)
SELECT first_name FROM Students WHERE permanent_address_id LIKE '%Haiti%' OR cell_mobile_number = '09700166582'
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT id FROM Cartoon ORDER BY Title ASC
SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT COUNT(*) FROM Cartoon WHERE Directed_by = 'Joseph Kuhr'
SELECT title, directed_by FROM Cartoon ORDER BY air_date
SELECT c.Title, d.Directed_by FROM Cartoon AS c JOIN TV_series AS s ON c.id = s.id WHERE s.Air_Date = '2023-10-27'
SELECT title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
SELECT title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
SELECT "Country", COUNT(*) FROM TV_Channel GROUP BY "Country"
SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1
SELECT count(DISTINCT series_name) FROM TV_channel.
SELECT COUNT(DISTINCT tv_series.id, tv_channel.series_name) FROM tv_series JOIN tv_channel ON tv_series.channel_id = tv_channel.id
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT "Content" FROM TV_series WHERE Channel = 'Sky Radio'
SELECT "Package_Option" FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT DISTINCT "Package_Option" FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT count(DISTINCT t1.id) FROM TV_Channel t1 JOIN TV_series t2 ON t1.id = t2.id WHERE t2.Language = 'English'
SELECT count(DISTINCT channel_id) FROM TV_Channel WHERE Language = 'English'
SELECT language, COUNT(*) FROM TV_Channel GROUP BY language ORDER BY COUNT(*) DESC
SELECT COUNT(DISTINCT t1.id) FROM TV_Channel AS t1 INNER JOIN TV_series AS t2 ON t1.id = t2.id WHERE t1.Country = 'USA' GROUP BY t1.id
SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country
SELECT DISTINCT "Channel" FROM TV_Channel
SELECT T1.series_name FROM TV_channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.id WHERE T2.Title = 'The Rise of the Blue Beetle!'
SELECT DISTINCT T.series_name FROM TV_Channel T JOIN TV_series TS ON T.id = TS.id WHERE TS.Title = 'The Rise of the Blue Beetle'
SELECT title FROM Cartoon WHERE Channel = 'TV_Channel' AND series_name = 'Sky Radio'
SELECT * FROM TV_series WHERE Channel = 'TV_Channel' AND Series_name = 'Sky Radio'
SELECT series.Episode FROM TV_series AS series JOIN TV_channel AS tv_channel ON series.id = tv_channel.id ORDER BY tv_channel.Pay_per_view_PPV
SELECT * FROM TV_series ORDER BY Rating ASC
SELECT t.Episode, t.Rating FROM TV_series AS t ORDER BY t.Rating DESC LIMIT 3
SELECT episode FROM TV_series ORDER BY Rating LIMIT 3
SELECT MIN(18_49_Rating_Share) FROM TV_series
SELECT MAX(18_49_Rating_Share) FROM TV_series
SELECT Air_Date FROM TV_series WHERE Title = 'A Love of a Lifetime'
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT "Weekly_Rank" FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT `Channel` FROM TV_series WHERE `Episode` = 'A Love of a Lifetime'
SELECT DISTINCT T.TV_Channel FROM TV_Channel AS T JOIN TV_series AS S ON T.id = S.id WHERE S.episode = 'A Love of a Lifetime'
SELECT s.title FROM TV_series s JOIN TV_channel tc ON s.id = tc.id WHERE tc.series_name = 'A Love of a Lifetime'
SELECT t.Episode FROM TV_series AS t JOIN TV_channel AS t ON t.channel = t.id WHERE t.series_name = 'Sky Radio'
SELECT t.Episode FROM TV_series AS t JOIN TV_channel AS t1 ON t.id = t1.id JOIN TV_series AS t2 ON t2.id = t1.id WHERE t2.series_name = 'Sky Radio' AND t2.Channel = 'TV'
SELECT d.Title FROM Cartoon AS d WHERE d.Directed_by IS NOT NULL
SELECT d.Title FROM Cartoon c JOIN TV_series s ON c.Channel = s.Channel WHERE s.Directed_by = 'Director_name' GROUP BY d.Title
SELECT "Channel" FROM TV_series ORDER BY Air_Date DESC LIMIT 1
SELECT "Channel", "Production_code" FROM Cartoon ORDER BY "Weekly_Rank" DESC LIMIT 1
SELECT c.Channel, t.series_name FROM TV_Channel c JOIN TV_series t ON c.id = t.id WHERE c.Pay_per_view_PPV = 1
SELECT c.Channel, t.series_name FROM TV_Channel tc JOIN TV_series t ON tc.id = t.id WHERE tc.Country = 'USA' AND tc.Pixel_aspect_ratio_PAR = 'Wide'
SELECT DISTINCT Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.id JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Directed_by = 'Todd Casey'
SELECT c.Channel FROM Cartoon c JOIN TV_series t ON c.id = t.id WHERE t.Written_by = 'Todd Casey'
SELECT DISTINCT Country FROM TV_Channel WHERE Series_name NOT IN (SELECT id FROM Cartoon WHERE Directed_by = 'Todd Casey')
SELECT DISTINCT Country FROM TV_Channel WHERE Content NOT IN ('Todd Casey' AND Cartoon)
SELECT T.series_name, T.Country FROM TV_Channel AS T JOIN TV_series AS S ON T.id = S.id JOIN Cartoon AS C ON S.id = C.id WHERE C.Directed_by = 'Ben Jones' AND C.Written_by = 'Michael Chang'
SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.id WHERE T2.Directed_by = 'Ben Jones' AND T2.Directed_by = 'Michael Chang'
SELECT c.Channel, c.Country FROM TV_Channel c WHERE c.Content NOT IN ('English')
SELECT c.Channel, "TV_Channel".Country, "TV_Channel".Pixel_aspect_ratio_PAR FROM TV_Channel c INNER JOIN TV_series s ON c.id = s.id WHERE "TV_Channel".Language != 'English'
SELECT t1.id FROM TV_Channel t1 JOIN TV_series t2 ON t1.id = t2.id GROUP BY t1.id HAVING COUNT(*) > 2
SELECT DISTINCT t.id FROM TV_Channel t JOIN TV_series s ON t.id = s.id GROUP BY t.id HAVING COUNT(*) > 2
SELECT t1.id FROM TV_Channel t1 WHERE t1.id NOT IN (SELECT t2.id FROM TV_series t2 WHERE t2.Directed_by = 'Ben Jones' AND t2.Title IS NOT NULL)
SELECT DISTINCT t1.id FROM TV_Channel t1 JOIN TV_series t2 ON t1.id = t2.id WHERE t2.Directed_by != 'Ben Jones'
SELECT DISTINCT Package_Option FROM TV_Channel WHERE Channel NOT IN (SELECT Channel FROM Cartoon) AND Channel <> 'Ben Jones'
SELECT DISTINCT p.Channel FROM TV_Channel tc WHERE tc.id NOT IN (SELECT c.id FROM Cartoon c WHERE c.Directed_by = 'Ben Jones')
SELECT COUNT(*) FROM poker_player
SELECT COUNT(*) FROM poker_player
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
SELECT t1.People_ID, t1.Final_Table_Made, t1.Best_Finish FROM poker_player t1 JOIN people t2 ON t1.Poker_Player_ID = t2.People_ID
SELECT * FROM poker_player GROUP BY Poker_Player_ID ORDER BY Best_Finish DESC LIMIT 10
SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID
SELECT AVG(Earnings) FROM poker_player
SELECT Best_Finish FROM poker_player ORDER BY Earnings DESC LIMIT 1
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
SELECT COUNT(*) FROM poker_player WHERE Money_Rank = 'max' AND Earnings < 200000
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Money_Rank < 200000
SELECT Name FROM people
SELECT People_ID FROM poker_player
SELECT People_ID FROM poker_player WHERE Money_Rank > 300000
SELECT People_ID FROM poker_player WHERE Money_Rank > 300000
SELECT Name FROM people ORDER BY Final_Table_Made ASC
SELECT Name FROM people ORDER BY Final_Table_Made ASC
SELECT best_finish FROM poker_player ORDER BY Earnings ASC LIMIT 1
SELECT best_finish FROM poker_player ORDER BY Earnings ASC LIMIT 1
SELECT Best_Finish FROM poker_player ORDER BY Earnings DESC LIMIT 1
SELECT Best_Finish FROM poker_player ORDER BY Height DESC LIMIT 1
SELECT AVG(Earnings) FROM poker_player WHERE Best_Finish IS NOT NULL AND People_ID IN (SELECT People_ID FROM people WHERE Height > 200)
SELECT AVG(Earnings) FROM poker_player WHERE Best_Finish > 200 AND Height > 200
SELECT Name FROM poker_player ORDER BY Earnings DESC
SELECT Name FROM poker_player ORDER BY Earnings DESC
SELECT Nationality, COUNT(*) FROM people
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality
SELECT Nationality FROM people
SELECT "Nationality" FROM people GROUP BY "Nationality" ORDER BY COUNT(*) DESC LIMIT 1
SELECT DISTINCT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2
SELECT Nationality FROM people WHERE count(*) >= 2
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
SELECT People_ID FROM people WHERE Nationality != "Russia"
SELECT People_ID FROM people WHERE Nationality NOT LIKE 'Russia%'
SELECT People_ID FROM people WHERE People_ID NOT IN (SELECT Poker_Player_ID FROM poker_player)
SELECT People_ID FROM people WHERE People_ID NOT IN (SELECT Poker_Player_ID FROM poker_player)
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT Nationality FROM people
SELECT COUNT(*) FROM AREA_CODE_STATE
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC
SELECT vote_id, phone_number, state FROM VOTES
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE
SELECT MAX(created) FROM VOTES WHERE state = 'CA'
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'
SELECT DISTINCT state, created FROM VOTES
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number WHERE v.vote_id IN (SELECT vote_id FROM VOTES GROUP BY contestant_number HAVING COUNT(*) >= 2)
SELECT contestant_number, contestant_name FROM VOTES GROUP BY contestant_number ORDER BY COUNT(*) DESC LIMIT 1
SELECT count(*) FROM VOTES WHERE state IN ('NY', 'CA')
SELECT COUNT(*) FROM CONTESTANTS
SELECT area_code FROM AREA_CODE_STATE ORDER BY COUNT(*) DESC LIMIT 1
SELECT created, state, phone_number FROM VOTES WHERE contestant_number = 'Tabatha Gehling'
SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM VOTES WHERE contestant_number = 'Tabatha Gehling' AND contestant_number = 'Kelly Clauss')
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'
SELECT name FROM country WHERE IndepYear > 1950
SELECT name FROM sqlite_sequence WHERE seq > '1950'
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'
SELECT COUNT(*) FROM city AS c JOIN country ON c.Country = country.Code WHERE country.GovernmentForm = 'Republic'
SELECT "SurfaceArea" FROM country WHERE Continent = "Caribbean"
SELECT SUM(s.SurfaceArea) FROM country WHERE continent = 'Carribean' AND country = 'Country'
SELECT "Continent" FROM country WHERE "Name" = 'Anguilla'
SELECT C.Name FROM country WHERE C.Code = 'AA' AND C.Name = 'Anguilla'
SELECT "Region" FROM city WHERE Name = 'Kabul'
SELECT "Region" FROM country WHERE "Name" = "Kabul"
SELECT Language FROM country WHERE Region = 'Aruba' ORDER BY Percentage DESC LIMIT 1
SELECT Language FROM country WHERE Code = 'ARU' AND Name = 'Aruba'
SELECT `Population`, `LifeExpectancy` FROM city WHERE `CountryCode` = 'Brazil'
SELECT Population, LifeExpectancy FROM city
SELECT country.Region, country.Population FROM country WHERE country.Name = 'Angola'
SELECT country.Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = 'Angola' AND countrylanguage.Percentage = 'true'
SELECT AVG(L) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa'
SELECT AVG(LifeExpectancy) FROM countrylanguage WHERE Region = 'Central Africa'
SELECT DISTINCT `Name` FROM country WHERE `Continent` = 'Asia' ORDER BY `LifeExpectancy` ASC LIMIT 1
SELECT `Name` FROM `country` WHERE `Continent` = 'Asia` ORDER BY `LifeExpectancy` LIMIT 1
SELECT SUM(CASE WHEN "Region" = 'Asia' THEN "Population" ELSE 0 END) FROM city
SELECT COUNT(*) FROM city WHERE CountryCode = 'Asia'
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'
SELECT AVG(l.LifeExpectancy) FROM country l JOIN countrylanguage l2 ON l.Code = l2.CountryCode WHERE l2.IsOfficial = 'True' AND l2.Region = 'Africa' AND l2.GovernmentForm = 'Republic'
SELECT SUM(s.SurfaceArea) FROM country WHERE Country.Continent = 'Asia' AND Country.Continent = 'Europe'
SELECT SUM(s.SurfaceArea) FROM sqlite_sequence s JOIN country AS c ON s.country = c.Code WHERE c.Continent = 'Asia' OR c.Continent = 'Europe'
SELECT COUNT(*) FROM city AS c JOIN city_sequence AS s ON c.ID = s.seq WHERE c.District = 'Gelderland'
SELECT SUM(p.Population) FROM city AS c JOIN city_sequence AS c1 ON c.ID = c1.ID JOIN country AS c2 ON c1.District = c2.District WHERE c2.Name = 'Gelderland'
SELECT AVG(gnp) FROM city JOIN country ON city.Code = country.Code WHERE country.GovernmentForm = 'US'
SELECT AVG( GNP) FROM city JOIN country ON city.Code = country.Code WHERE country.Region = 'US'
SELECT COUNT(DISTINCT Language) FROM countrylanguage
SELECT COUNT(DISTINCT Language) FROM countrylanguage
SELECT COUNT(*) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Type'
SELECT DISTINCT "GovernmentForm" FROM country
SELECT COUNT(*) FROM country WHERE Code2 = 'Aruba' AND Language = 'Dutch'
SELECT COUNT(*) FROM country WHERE Code = 'ARU' AND Name = 'Aruba'
SELECT "Percentage" FROM country WHERE "Name" = "Afghanistan"
SELECT Percentage FROM countrylanguage WHERE CountryCode = 'Afghanistan'
SELECT "Name" FROM country WHERE "Percentage" = 'largest'
SELECT C.Name FROM city AS C JOIN country AS C1 ON C.ID = C1.Code JOIN countrylanguage AS C2 ON C1.Name = C2.Name GROUP BY C.Name ORDER BY SUM(C2.Percentage) DESC LIMIT 1
SELECT "Continent" FROM countrylanguage ORDER BY Percentage DESC LIMIT 1
SELECT c.Continent FROM country AS c JOIN countrylanguage AS l ON c.Code = l.CountryCode ORDER BY l.Percentage DESC LIMIT 1
SELECT COUNT(*) FROM country WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND Language = 'Dutch')
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'United States' AND Code2 = 'English' AND Code2 = 'Dutch'
SELECT DISTINCT Name FROM city
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage l ON c.Code = l.CountryCode WHERE l.Language = 'English' AND l.Language = 'French'
SELECT DISTINCT s.Name FROM sqlite_sequence AS s JOIN country AS c ON s.name = c.Code WHERE c.GovernmentForm = 'Government'
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage l ON c.Code = l.CountryCode WHERE l.Language = 'English' OR l.Language = 'French'
SELECT DISTINCT c.Continent FROM country AS c JOIN countrylanguage AS l ON c.Code = l.CountryCode
SELECT COUNT(*) FROM country WHERE Continent = 'Chinese'
SELECT DISTINCT c.Region FROM country AS c JOIN countrylanguage AS l ON c.Code = l.CountryCode WHERE l.Language = 'English' OR l.Language = 'Dutch'
SELECT DISTINCT 'Dutch' AS Language FROM country UNION SELECT DISTINCT 'English' AS Language FROM country
SELECT DISTINCT C.Name FROM country AS C JOIN countrylanguage AS L ON C.Code = L.CountryCode WHERE L.Language = 'English' OR L.Language = 'Dutch'
SELECT DISTINCT C.Name FROM country AS C JOIN countrylanguage AS L ON C.Code = L.CountryCode WHERE L.Language = 'English' OR L.Language = 'Dutch'
SELECT Language FROM countrylanguage WHERE Continent = "Asian" ORDER BY Percentage DESC LIMIT 1
SELECT Language FROM countrylanguage GROUP BY CountryCode ORDER BY COUNT(*) DESC LIMIT 1
SELECT Language FROM countrylanguage WHERE GovernmentForm = 'Republic' AND IsOfficial = TRUE GROUP BY Language HAVING COUNT(*) = 1
SELECT Language FROM countrylanguage WHERE GovernmentForm = 'Republic' AND CountryCode IN (SELECT CountryCode FROM country WHERE Population > 0)
SELECT * FROM city WHERE Name LIKE '%English%' ORDER BY Population DESC LIMIT 1
SELECT DISTINCT c.Name FROM city c JOIN country c1 ON c.ID = c1.Code WHERE c1.Population > 0 AND c.Name LIKE '%England%'
SELECT name, population, expected_life_length FROM city WHERE CountryCode = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1
SELECT name, population, life expectancy FROM city LIMIT 1 SELECT name, population, life expectancy FROM country BY Continent ORDER BY Population DESC
SELECT AVG(L) FROM country WHERE GovernmentForm <> 'Government' AND Language <> 'English'
SELECT AVG(L) FROM country WHERE GovernmentForm != 'Government' AND Language != 'English'
SELECT COUNT(*) FROM city WHERE CountryCode NOT IN ('US', 'GB', 'CA', 'DE', 'FR', 'JP', 'AU', 'BR', 'IN', 'ES', 'IT', 'PL', 'MX', 'BR', 'AR', 'RU', 'CN', 'VN')
SELECT COUNT(*) FROM city
SELECT Language FROM country WHERE GovernmentForm = 'Government' AND HeadOfState = 'Beatrix'
SELECT Language FROM country WHERE Name LIKE '%Beatrix%'
SELECT COUNT(DISTINCT "Language" FROM country WHERE "GovernmentForm" = 'Presidential' AND "HeadOfState" = 'President')
SELECT COUNT(DISTINCT language) FROM countrylanguage SELECT COUNT(*) FROM countrylanguage
SELECT c.Name FROM country c JOIN countrylanguage l ON c.Code = l.CountryCode WHERE l.Percentage > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT c.Code2 FROM country c JOIN countrylanguage l ON c.Code = l.CountryCode JOIN country ON l.CountryCode = c.Code GROUP BY c.Code2 HAVING SUM(c.SurfaceArea) > (SELECT MAX(SurfaceArea) FROM country) ORDER BY SUM(c.SurfaceArea) DESC LIMIT 1
SELECT DISTINCT c.Name FROM city c JOIN country c1 ON c.ID = c1.Code JOIN countrylanguage l1 ON c1.Code = l1.CountryCode JOIN country c2 ON l1.Country = c2.Code WHERE c2.Continent = 'Africa' AND c2.Population < c2.Population
SELECT c.Name FROM city c JOIN country c1 ON c.ID = c1.Code JOIN countrylanguage l ON c1.Code = l.CountryCode WHERE l.Continent = 'Africa' GROUP BY c.Name HAVING SUM(c.Population) < SUM(l.Population) ORDER BY SUM(c.Population) LIMIT 1
SELECT DISTINCT c.Name FROM city c JOIN country c1 ON c.ID = c1.Code JOIN countrylanguage l ON c1.Code = l.CountryCode JOIN sqlite_sequence s ON c1.ID = s.name WHERE l.Continent = 'Asia' ORDER BY c.Population DESC LIMIT 1
SELECT c.Name FROM country c JOIN countrylanguage l ON c.Code = l.CountryCode WHERE l.Continent = 'Asia' AND c.Population > (SELECT MAX(Population) FROM country)
SELECT Code FROM country WHERE Continent = 'Europe' AND Language != 'English'
SELECT Code FROM country WHERE Language != 'English'
SELECT "Code" FROM sqlite_sequence WHERE "Name" LIKE '%Other%'
SELECT DISTINCT c.Code FROM country c JOIN countrylanguage l ON c.Code = l.CountryCode WHERE l.Language NOT IN 'English'
SELECT "Code" FROM sqlite_sequence WHERE "CountryCode" NOT IN ('en') AND "GovernmentForm" NOT IN ('Republic') GROUP BY "Code" HAVING COUNT(*) > 0
SELECT Code FROM country WHERE Language != 'English' AND GovernmentForm != 'Republic' AND IsOfficial = 0
SELECT DISTINCT city.Name FROM city JOIN sqlite_sequence ON city.ID = sqlite_sequence.name WHERE city.CountryCode = 'European' AND sqlite_sequence.Language != 'English'
SELECT DISTINCT city.Name FROM city JOIN sqlite_sequence ON city.ID = sqlite_sequence.name WHERE city.CountryCode = 'Europe' AND sqlite_sequence.Language != 'English'
SELECT DISTINCT c.Name FROM city c JOIN sqlite_sequence s ON c.ID = s.seq WHERE s.CountryCode = 'Asian' AND c.District = 'China'
SELECT DISTINCT c.Name FROM city c JOIN sqlite_sequence s ON c.ID = s.seq WHERE c.Country = 'China' AND s.Language = 'Chinese'
SELECT name, seq, surfaceArea FROM city ORDER BY Population ASC LIMIT 1
SELECT name, seq, SurfaceArea FROM city ORDER BY Population ASC LIMIT 1
SELECT c.Name, c.Population, c.GovernmentForm FROM country AS c JOIN countrylanguage AS l ON c.Code = l.CountryCode LIMIT 1
SELECT c.Name, c.Population, c.HeadOfState FROM country c JOIN countrylanguage l ON c.Code = l.CountryCode WHERE l.Percentage = 0 ORDER BY c.SurfaceArea DESC LIMIT 1
SELECT c.Name, COUNT(DISTINCT s.seq) FROM country c JOIN sqlite_sequence s ON c.Code = s.seq GROUP BY c.Name HAVING COUNT(DISTINCT s.seq) >= 3
SELECT c.Name FROM city AS c JOIN sqlite_sequence AS s ON c.ID = s.seq WHERE c.District = 'Unknown' GROUP BY c.Name HAVING COUNT(DISTINCT s.seq) > 2
SELECT d.District, COUNT(*) FROM city AS c JOIN sqlite_sequence AS s ON c.ID = s.seq GROUP BY d.District
SELECT d.District, COUNT(*) FROM city JOIN district ON city.ID = district.ID GROUP BY d.District HAVING AVG(city.Population) > (SELECT AVG(Population) FROM city) ORDER BY d.District
SELECT g.GovernmentFormName, SUM(c.Population) FROM city c JOIN sqlite_sequence s ON c.ID = s.seq GROUP BY g.GovernmentFormName
SELECT DISTINCT country.Name, country.GovernmentForm FROM country JOIN countrylanguage ON country.Code = countrylanguage.Code WHERE country.LifeExpectancy > 72 GROUP BY country.GovernmentForm
SELECT c.Continent, AVG(cl.LifeExpectancy) AS AverageLifeExpectancy, SUM(cs.Population) AS TotalPopulation FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode JOIN country AS country AS cs ON c.Code = cs.CountryCode WHERE cl.Percentage < 72 GROUP BY c.Continent
SELECT c.Continent, SUM(s.Population) AS TotalPopulation, AVG(s.LifeExpectancy) AS AverageLifeExpectancy FROM country AS c JOIN sqlite_sequence AS s ON c.Code = s.seq WHERE s.LifeExpectancy < 72 GROUP BY c.Continent
SELECT c.Name, s.Seq FROM city c JOIN sqlite_sequence s ON c.ID = s.seq ORDER BY s.Seq DESC LIMIT 5
SELECT name, SurfaceArea FROM sqlite_sequence ORDER BY SurfaceArea DESC LIMIT 5
SELECT name FROM sqlite_sequence ORDER BY Percentage DESC LIMIT 3
SELECT name FROM country WHERE Population IN (SELECT MAX(Population) FROM country) ORDER BY Population DESC LIMIT 3
SELECT name FROM sqlite_sequence WHERE seq = '3' ORDER BY population ASC LIMIT 3
SELECT DISTINCT country.Name FROM country WHERE country.Population = (SELECT MIN(Population) FROM country)
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'
SELECT DISTINCT `Name` FROM country WHERE Continent = 'Europe' AND `Population` = 80000
SELECT DISTINCT `Name` FROM city WHERE `CountryCode` IN (SELECT `Code` FROM sqlite_sequence) AND `Population` = 80000
SELECT SUM(CASE WHEN Continent = 'North America' THEN Population ELSE 0 END) AS TotalPopulation, AVG(CASE WHEN Continent = 'North America' THEN Population ELSE 0 END) AS AverageArea FROM country WHERE SurfaceArea > 3000
SELECT c.Population, c.SurfaceArea FROM city AS c JOIN sqlite_sequence AS s ON c.ID = s.seq WHERE c.CountryCode = 'North America' AND c.SurfaceArea > 3000
SELECT * FROM city WHERE population BETWEEN 160000 AND 900000
SELECT Name FROM city LIMIT 1000000
SELECT Language FROM countrylanguage ORDER BY Percentage DESC
SELECT Language FROM countrylanguage WHERE Percentage = 100
SELECT c.Name FROM city AS c JOIN country AS co ON c.District = co.District WHERE c.Name = '...' ORDER BY co.Population DESC LIMIT 1
SELECT "Code", "Language" FROM country
SELECT COUNT(*) FROM city WHERE countrycode = 'en' AND language = 'Spanish' AND (country.Population / city.Population) > 0.5
SELECT COUNT(*) FROM country WHERE Language = 'Spanish' AND GovernmentForm = 'Official'
SELECT "Code" FROM sqlite_sequence WHERE Language = 'Spanish' AND Percentage > 50
SELECT Code FROM country WHERE Language = 'Spanish'
SELECT COUNT(*) FROM conductor
SELECT count(DISTINCT Conductor_ID) FROM conductor
SELECT Conductor_ID FROM conductor ORDER BY Age ASC
SELECT Conductor_ID FROM conductor ORDER BY Age DESC
SELECT Name FROM conductor WHERE Nationality != "USA"
SELECT Name FROM conductor WHERE Nationality != "USA"
SELECT Orchestra.Record_Company FROM orchestra ORDER BY orchestra.Year_of_Founded DESC
SELECT DISTINCT Orchestra.Record_Company FROM Orchestra ORDER BY Orchestra.Year_of_Founded DESC
SELECT AVG(Attendance) FROM show
SELECT AVG(Attendance) FROM show
SELECT MAX(CASE WHEN Type = 'Live final' THEN Share ELSE NULL END) AS Max_Share, MIN(CASE WHEN Type = 'Live final' THEN Share ELSE NULL END) AS Min_Share FROM performance
SELECT MAX(IF_FIRST_SHOW), MIN(Share) FROM performance WHERE Type != 'Live final'
SELECT COUNT(DISTINCT Nationality) FROM conductor
SELECT Nationality FROM conductor
SELECT Conductor_ID FROM conductor ORDER BY Age DESC
SELECT Conductor_ID, Name FROM conductor ORDER BY Age DESC
SELECT c.Name FROM conductor WHERE c.Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)
SELECT C.Name FROM conductor GROUP BY C.Name ORDER BY SUM(C.Age) DESC LIMIT 1
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID
SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Orchestra = o.Orchestra WHERE c.Name IS NOT NULL AND o.Orchestra IS NOT NULL
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name HAVING COUNT(*) > 1
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name HAVING COUNT(*) > 1
SELECT C.Name FROM conductor AS C JOIN orchestra AS O ON C.Conductor_ID = O.Conductor_ID GROUP BY C.Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT C.Name FROM conductor GROUP BY C.Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT C.Name FROM conductor AS C JOIN orchestra AS O ON C.Conductor_ID = O.Conductor_ID WHERE O.Year_of_Founded > 2008
SELECT C.Name FROM conductor AS C JOIN orchestra AS O ON C.Conductor_ID = O.Conductor_ID WHERE O.Year_of_Founded > 2008
SELECT Orchestra, Conductor_ID FROM Orchestra GROUP BY Orchestra ORDER BY Orchestra
SELECT orchestra.Orchestra FROM orchestra GROUP BY orchestra.Orchestra
SELECT DISTINCT Orchestra.Record_Company FROM Orchestra ORDER BY Orchestra.Record_Company ASC
SELECT DISTINCT Major_Record_Format FROM orchestra ORDER BY COUNT(*) DESC
SELECT DISTINCT `Record_Company` FROM performance AS p1 JOIN orchestra AS p2 ON p1.Orchestra = p2 WHERE p2.Orchestrator = p1.Conductor_ID GROUP BY `Record_Company` ORDER BY COUNT(*) DESC LIMIT 1
SELECT Orchestra FROM orchestra GROUP BY Orchestra ORDER BY COUNT(*) DESC LIMIT 1
SELECT DISTINCT O.Name FROM orchestra WHERE O.Orchestra NOT IN (SELECT c.Orchestra FROM conductor WHERE c.Year_of_Work = '2023')
SELECT Orchestra FROM orchestra WHERE Conductor_ID IS NULL AND Orchestra_ID IS NULL
SELECT DISTINCT `Record_Company` FROM orchestra WHERE `Year_of_Founded` < 2003 AND `Year_of_Founded` > 2003
SELECT DISTINCT Orchestra.Record_Company FROM Orchestra JOIN Orchestra ON Orchestra.Orchestra = Orchestra.Orchestra JOIN Performance ON Performance.Orchestra_ID = Orchestra.Orchestra WHERE Orchestra.Year_of_Founded < 2003
SELECT COUNT(*) FROM orchestra WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Year_of_Work IS NOT NULL) AND Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Year_of_Work IS NOT NULL)
SELECT count(DISTINCT "Major_Record_Format") FROM orchestra
SELECT DISTINCT "Year_of_Founded" FROM orchestra GROUP BY "Orchestra" HAVING COUNT(*) > 1
SELECT Orchestra.Year_of_Founded FROM orchestra GROUP BY Orchestra.Orchestra HAVING COUNT(*) > 1
SELECT COUNT(*) FROM Highschooler
SELECT COUNT(*) FROM Highschooler
SELECT h.name, h.grade FROM Highschooler h JOIN Friend f ON h.ID = f.student_id
SELECT h.name, h.grade FROM Highschooler h
SELECT Highschooler.grade FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id
SELECT h.grade FROM Highschooler h
SELECT Highschooler.grade FROM Highschooler WHERE name = 'Kyle'
SELECT Highschooler.grade FROM Highschooler WHERE name = 'Kyle'
SELECT DISTINCT name FROM Highschooler WHERE grade = 10
SELECT name FROM Highschooler WHERE grade = 10
SELECT id FROM highschooler WHERE name = 'Kyle'
SELECT ID FROM Highschooler
SELECT COUNT(DISTINCT "Highschooler".ID) FROM "Highschooler"
SELECT count(*) FROM Highschooler WHERE grade IN (9, 10)
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade
SELECT "grade" FROM Highschooler GROUP BY "grade" ORDER BY COUNT(*) DESC LIMIT 1
SELECT Highschooler.grade FROM Highschooler GROUP BY Highschooler.ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT * FROM Highschooler WHERE grade >= 4
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
SELECT DISTINCT e.ID, e.grade FROM Highschooler e JOIN Friend f ON e.ID = f.student_id WHERE f.friend_id = 'some_student_id'
SELECT "Likes".count() FROM "Likes" JOIN "Highschooler" ON "Likes".student_id = "Highschooler".ID JOIN "Friend" ON "Likes".friend_id = "Highschooler".ID
SELECT h.name, l.number_of_friends FROM Highschooler h JOIN Friend l ON h.ID = l.student_id GROUP BY h.ID
SELECT h.name, COUNT(f.student_id) FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name ORDER BY COUNT(*) DESC LIMIT 1
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID HAVING COUNT(*) >= 3
SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID HAVING COUNT(f.student_id) >= 3
SELECT DISTINCT f.friend_id FROM Friend JOIN Highschooler ON Friend.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle'
SELECT friend_id FROM Friend WHERE friend_id IN (SELECT student_id FROM Highschooler WHERE name = 'Kyle')
SELECT count(*) FROM Friend WHERE friend_id = 'Kyle'
SELECT count(*) FROM Friend WHERE friend_id = 'Kyle'
SELECT DISTINCT t1.ID FROM Highschooler t1 JOIN Friend t2 ON t1.ID = t2.student_id WHERE t2.friend_id IS NULL
SELECT DISTINCT ID FROM Highschooler WHERE ID NOT IN (SELECT friend_id FROM Friend)
SELECT DISTINCT name FROM Highschooler WHERE id NOT IN (SELECT friend_id FROM Friend)
SELECT name FROM Highschooler WHERE friend_id IS NULL
SELECT DISTINCT h.ID FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON f.friend_id = l.student_id WHERE l.liked_id IS NOT NULL
SELECT DISTINCT h1.ID FROM Highschooler h1 JOIN Friend f1 ON h1.ID = f1.student_id JOIN Likes l1 ON f1.student_id = l1.student_id WHERE l1.liked_id IN (SELECT liked_id FROM Likes)
SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON f.friend_id = l.student_id WHERE l.liked_id IS NOT NULL
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON f.student_id = l.student_id WHERE l.liked_id IN (SELECT liked_id FROM Likes WHERE student_id IN (SELECT student_id FROM Highschooler))
SELECT student_id, COUNT(*) FROM Likes
SELECT student_id, COUNT(*) FROM Likes
SELECT DISTINCT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.liked_id
SELECT h.name, l.likes FROM Highschooler h JOIN Likes l ON h.ID = l.liked_id
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.liked_id ORDER BY l.liked_id DESC LIMIT 1
SELECT name FROM Highschooler ORDER BY likes DESC LIMIT 1
SELECT DISTINCT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID HAVING COUNT(l.liked_id) >= 2
SELECT DISTINCT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID HAVING COUNT(l.liked_id) >= 2
SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID, h.name HAVING AVG(f.likes) > 5 AND COUNT(f.student_id) >= 2
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON f.friend_id = l.student_id WHERE h.grade > 5 GROUP BY h.name HAVING COUNT(DISTINCT f.student_id) >= 2
SELECT COUNT(*) FROM Likes WHERE liked_id = (SELECT liked_id FROM Friend WHERE friend_id = 'Kyle')
SELECT count(*) FROM Highschooler WHERE name = 'Kyle' AND liked_id IN (SELECT liked_id FROM Likes WHERE student_id = 'Kyle')
SELECT AVG(grade) FROM Highschooler WHERE EXISTS ( SELECT 1 FROM Friend WHERE Friend.student_id = Highschooler.ID )
SELECT AVG(g) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id
SELECT MIN(grade) FROM Highschooler WHERE friends IS NULL
SELECT MIN(grade) FROM Highschooler WHERE friends IS NULL AND name IS NOT NULL
SELECT DISTINCT state FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Breeds WHERE owner_id IS NOT NULL AND profession_id IS NOT NULL)
SELECT state FROM Breeds WHERE breed_code = 'some_breed_code' AND owner_id = 'some_owner_id' AND professionals_id = 'some_professional_id'
SELECT AVG(age) FROM Dogs GROUP BY dog_id
SELECT AVG(age) FROM Dogs GROUP BY dog_id
SELECT o.last_name, o.email_address FROM Owners AS o WHERE o.state = 'Indiana' OR COUNT(DISTINCT o.treatment_id) > 2
SELECT `professional_id`, `last_name`, `cell_phone` FROM Dogs WHERE `state` = 'Indiana' OR `treatment_id` > 2
SELECT DISTINCT "name" FROM Dogs WHERE "date_arrived" < '1000'
SELECT D.name FROM Dogs D JOIN Treatments T ON D.owner_id = T.dog_id WHERE T.cost_of_treatment <= 1000
SELECT DISTINCT first_name FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Breeds WHERE breed_name IS NULL) AND owner_id IN (SELECT owner_id FROM Breeds WHERE first_name IS NULL) AND breed_code NOT IN (SELECT breed_code FROM Breeds WHERE breed_name IS NOT NULL)
SELECT first_name FROM Breeds WHERE breed_code <> 'any' AND owner_id IS NOT NULL AND breed_code <> 'any' AND owner_id IS NOT NULL
SELECT professional_id, role, email FROM Treatments WHERE dog_id IS NULL
SELECT `professional_id`, `first_name`, `last_name` FROM Professionals WHERE `treatment_id` IS NULL AND `dog_id` IS NULL
SELECT "owner_id", "first_name", "last_name" FROM "Owners" GROUP BY "owner_id", "first_name", "last_name" ORDER BY count(*) DESC LIMIT 1
SELECT "owner_id", "first_name", "last_name" FROM Owners GROUP BY "owner_id" ORDER BY COUNT(*) DESC LIMIT 1
SELECT p.first_name, p.last_name FROM Professionals AS p JOIN Treatments AS t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.first_name, p.last_name HAVING COUNT(t.treatment_id) >= 2
SELECT p.first_name, p.role_code FROM Treatments AS p JOIN Owners AS o ON p.dog_id = o.owner_id GROUP BY p.professional_id, p.role_code HAVING COUNT(*) >= 2
SELECT b.breed_name FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT b.breed_name FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT O.last_name, O.first_name FROM Owners AS O JOIN Treatments AS T ON O.owner_id = T.dog_id GROUP BY O.first_name, O.last_name ORDER BY COUNT(T.treatment_id) DESC LIMIT 1
SELECT O.owner_id, O.last_name FROM Owners AS O JOIN Treatments AS T ON O.owner_id = T.dog_id GROUP BY O.owner_id, O.last_name ORDER BY SUM(T.cost_of_treatment) DESC LIMIT 1
SELECT treatment_type_description FROM Treatments GROUP BY treatment_type_description ORDER BY SUM(cost_of_treatment) LIMIT 1
SELECT treatment_type_description FROM Treatments GROUP BY treatment_type_code ORDER BY cost_of_treatment ASC LIMIT 1
SELECT DISTINCT "owner_id", "zip_code" FROM Dogs GROUP BY "owner_id" ORDER BY "charge_amount" DESC LIMIT 1
SELECT "owner_id", "zip_code" FROM Owners ORDER BY "charge_amount" DESC LIMIT 1
SELECT "professional_id", "cell_number" FROM Treatments GROUP BY "professional_id"HAVING COUNT(*) >= 2
SELECT DISTINCT "cell_phone" FROM Treatments GROUP BY "professional_id" HAVING COUNT(*) >= 2
SELECT first_name, last_name FROM Professionals WHERE treatment_type_description LIKE '%below average%' AND cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT first_name, last_name FROM Professionals WHERE treatment_type_code = 'some_value' AND cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT t.date_of_treatment, p.first_name FROM Treatments AS t JOIN Owners AS o ON t.dog_id = o.owner_id JOIN Professionals AS p ON o.owner_id = p.professional_id
SELECT t.date_of_treatment, p.first_name FROM Treatments AS t JOIN Owners AS o ON t.owner_id = o.owner_id JOIN Professionals AS p ON t.professional_id = p.professional_id
SELECT t.cost_of_treatment, t.treatment_type_description FROM Treatments AS t
SELECT t.treatment_type_description FROM Treatments AS t JOIN Treatments_Dogs AS t_d ON t.dog_id = t_d.dog_id
SELECT first_name, last_name, size FROM Breeds WHERE breed_code = 'some_breed_code'
SELECT first_name, last_name, size_code FROM Breeds WHERE breed_code = '...' SELECT first_name, last_name, size_code FROM Breeds WHERE breed_code = '...'
SELECT DISTINCT owner_name, dog_name FROM Dogs
SELECT "first_name", "breed_name" FROM Dogs
SELECT DISTINCT b.breed_name FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.treatment_type_description LIKE '%rare%' ORDER BY t.date_of_treatment LIMIT 1
SELECT d.name, t.date_of_treatment FROM Dogs AS d JOIN Treatments AS t ON d.dog_id = t.dog_id WHERE d.breed_code IN (SELECT breed_code FROM Breeds WHERE breed_name IS NOT NULL) GROUP BY d.name ORDER BY COUNT(*) DESC LIMIT 1
SELECT "first_name", "name" FROM Dogs WHERE "state" = 'Virginia'
SELECT first_name FROM Owners WHERE state = 'Virginia' AND dog_id IS NOT NULL
SELECT d.date_arrived, d.date_departed FROM Dogs AS d WHERE d.abandoned_yn = 1
SELECT d.date_arrived, d.date_departed FROM Dogs AS d WHERE d.owner_id IN ( SELECT owner_id FROM Owners WHERE first_name = 'John' )
SELECT DISTINCT `last_name` FROM Owners WHERE `date_of_birth` = (SELECT MIN(date_of_birth) FROM Dogs)
SELECT O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id WHERE D.age = (SELECT MIN(age) FROM Dogs)
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')
SELECT email_address FROM Owners WHERE state IN ('Hawaii', 'Wisconsin')
SELECT d.date_arrived, d.date_departed FROM Dogs AS d WHERE d.owner_id = 'some_owner_id'
SELECT d.date_arrived, d.date_departed FROM Dogs AS d
SELECT COUNT(*) FROM Dogs AS d JOIN Treatments AS t ON d.dog_id = t.dog_id
SELECT COUNT(dog_id) FROM Dogs
SELECT COUNT(*) FROM Treatments WHERE dog_id IN (SELECT dog_id FROM Dogs) AND professional_id IN (SELECT professional_id FROM Professionals)
SELECT count(*) FROM Treatments WHERE dog_id IS NOT NULL
SELECT `professional_id`, `first_name`, `street`, `city`, `state` FROM `Owners` WHERE `city` LIKE '%West%'
SELECT professional_id, street, city, state FROM Treatments WHERE treatment_type_description LIKE '%West%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT first_name, last_name, email FROM Owners WHERE state LIKE '%North%'
SELECT COUNT(d.dog_id) FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.date_of_treatment < (SELECT AVG(date_of_treatment) FROM Treatments)
SELECT COUNT(d.dog_id) FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.date_of_treatment < (SELECT AVG(date_of_treatment) FROM Treatments)
SELECT t.cost_of_treatment FROM Treatments AS t JOIN Dogs AS d ON t.dog_id = d.dog_id ORDER BY t.date_of_treatment DESC LIMIT 1
SELECT `cost_of_treatment` FROM `Treatments` ORDER BY `date_of_treatment` DESC LIMIT 1
SELECT COUNT(*) FROM Breeds WHERE breed_code IS NULL
SELECT COUNT(*) FROM Dogs WHERE date_arrived < CURRENT_DATE
SELECT COUNT(*) FROM Breeds WHERE breed_code IS NULL
SELECT count(DISTINCT owner_id) FROM Breeds WHERE breed_code IS NULL AND owner_id NOT IN (SELECT owner_id FROM Dogs)
SELECT COUNT(*) FROM Breeds AS b JOIN Treatments AS t ON b.breed_code = t.treatment_type_code WHERE b.breed_code IS NULL
SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT dog_id FROM Dogs)
SELECT d.name, d.age, d.weight FROM Dogs d WHERE d.abandoned = 1
SELECT d.name, d.age, d.weight FROM Dogs AS d WHERE d.abandoned = 1
SELECT AVG(age) FROM Dogs
SELECT AVG(age) FROM Dogs
SELECT d.age FROM Dogs AS d JOIN Treatments AS t ON d.dog_id = t.dog_id ORDER BY t.date_of_treatment LIMIT 1
SELECT oldest_dog.age FROM Dogs GROUP BY oldest_dog.breed_code ORDER BY oldest_dog.age DESC LIMIT 1
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges
SELECT SUM(charge_amount) FROM Charges ORDER BY charge_type DESC LIMIT 1
SELECT T.charge_amount FROM Charges AS T GROUP BY T.charge_type ORDER BY T.charge_amount DESC LIMIT 1
SELECT email, cell_phone, home_phone FROM Professionals
SELECT email, cell_phone, home_phone FROM Owners WHERE owner_id = 'some_owner_id'
SELECT breed_type, size_type FROM Breeds
SELECT DISTINCT breed_type, size_type FROM Dogs
SELECT `first_name` FROM `Professionals` SELECT `professional_id` FROM `Professionals`
SELECT "first_name", "treatment_type_description" FROM Treatments WHERE professional_id = 'some_professional_id'
SELECT COUNT(*) FROM singer
SELECT COUNT(*) FROM singer
SELECT Singer_ID FROM Singer ORDER BY Net_Worth_Millions ASC
SELECT Singer_ID FROM Singer ORDER BY Net_Worth_Millions ASC
SELECT Singer_ID, Birth_Year, Citizenship FROM singer
SELECT Singer_ID, Birth_Year, Citizenship FROM singer
SELECT Name FROM singer WHERE Citizenship != 'France'
SELECT Name FROM singer WHERE Citizenship != 'France'
SELECT Name FROM Singer GROUP BY Singer_ID WHERE Birth_Year IN (1948, 1949)
SELECT Name FROM Singer WHERE Birth_Year IN (1948, 1949)
SELECT S.Name FROM Singer S JOIN Song S ON S.Singer_ID = S.Singer_ID ORDER BY S.Net_Worth_Millions DESC LIMIT 1
SELECT Singer_ID FROM Singer GROUP BY Singer_ID ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship
SELECT Singer_ID FROM Singer GROUP BY Singer_ID HAVING Singer_ID IN (SELECT Singer_ID FROM Singer)
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
SELECT Singer_ID FROM singer GROUP BY Singer_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
SELECT Singer.Citizenship, MAX(Singer.Net_Worth_Millions) FROM singer JOIN song ON singer.Singer_ID = song.Singer_IDGROUP BY Singer.Citizenship
SELECT s.Title, s.Singer_ID FROM singer s JOIN song s ON s.Singer_ID = s.Singer_ID
SELECT Title, Singer_ID FROM song
SELECT DISTINCT Singer_ID FROM Singer GROUP BY Singer_ID HAVING SUM(Sales) > 300000
SELECT Singer_ID FROM Singer GROUP BY Singer_ID HAVING COUNT(*) > 300000
SELECT S.Name FROM singer S JOIN song S ON S.Singer_ID = S.Singer_ID GROUP BY S.Singer_ID HAVING COUNT(*) > 1
SELECT s.Name FROM singer s JOIN song s ON s.Singer_ID = s.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(*) > 1
SELECT s.Name FROM singer s JOIN song s ON s.Singer_ID = s.Singer_ID GROUP BY s.Singer_ID ORDER BY s.Name
SELECT s.Name FROM singer s JOIN song s ON s.Singer_ID = s.Singer_ID GROUP BY s.Name HAVING SUM(s.Sales) > 1000000
SELECT Singer_ID FROM Singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM Song)
SELECT s.Name FROM singer s JOIN song s ON s.Singer_ID = s.Singer_ID WHERE s.Singer_ID IS NULL
SELECT C.Citizenship FROM singer AS S JOIN song AS S2 ON S.Singer_ID = S2.Singer_ID WHERE S.Birth_Year < 1945 AND S.Birth_Year > 1955
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 AND Birth_Year > 1955
SELECT COUNT(*) FROM Ref_Feature_Types AS f
SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = 'AirCon'
SELECT DISTINCT p.property_type_description FROM Ref_Property_Types p JOIN Ref_Feature_Types ft ON p.property_type_code = ft.feature_type_code WHERE ft.feature_type_code = 'some_feature_code'
SELECT DISTINCT f.feature_name FROM Ref_Feature_Types f JOIN Ref_Property_Types pt ON f.feature_type_code = pt.property_type_code JOIN Other_Property_Features opf ON f.feature_id = opf.feature_id WHERE pt.property_type_code = 'house' OR pt.property_type_code = 'apartment' AND f.feature_id > 0
