===== Eval Round 1 =====
Database         : concert_singer
Prediction SQL   : SELECT count(*) FROM singer
Gold SQL         : SELECT count(*) FROM singer
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(6,)]
Gold Output      : [(6,)]

===== Eval Round 2 =====
Database         : concert_singer
Prediction SQL   : SELECT COUNT(*) FROM singer
Gold SQL         : SELECT count(*) FROM singer
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(6,)]
Gold Output      : [(6,)]

===== Eval Round 3 =====
Database         : concert_singer
Prediction SQL   : SELECT Name, Country, Age FROM singer ORDER BY Age DESC
Gold SQL         : SELECT name ,  country ,  age FROM singer ORDER BY age DESC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Joe Sharp', 'Netherlands', 52), ('John Nizinik', 'France', 43), ('Rose White', 'France', 41), ('Timbaland', 'United States', 32), ('Justin Brown', 'France', 29), ('Tribal King', 'France', 25)]
Gold Output      : [('Joe Sharp', 'Netherlands', 52), ('John Nizinik', 'France', 43), ('Rose White', 'France', 41), ('Timbaland', 'United States', 32), ('Justin Brown', 'France', 29), ('Tribal King', 'France', 25)]

===== Eval Round 4 =====
Database         : concert_singer
Prediction SQL   : SELECT Name, Country, Age FROM singer ORDER BY Age DESC
Gold SQL         : SELECT name ,  country ,  age FROM singer ORDER BY age DESC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Joe Sharp', 'Netherlands', 52), ('John Nizinik', 'France', 43), ('Rose White', 'France', 41), ('Timbaland', 'United States', 32), ('Justin Brown', 'France', 29), ('Tribal King', 'France', 25)]
Gold Output      : [('Joe Sharp', 'Netherlands', 52), ('John Nizinik', 'France', 43), ('Rose White', 'France', 41), ('Timbaland', 'United States', 32), ('Justin Brown', 'France', 29), ('Tribal King', 'France', 25)]

===== Eval Round 5 =====
Database         : concert_singer
Prediction SQL   : SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
Gold SQL         : SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(34.5, 25, 43)]
Gold Output      : [(34.5, 25, 43)]

===== Eval Round 6 =====
Database         : concert_singer
Prediction SQL   : SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
Gold SQL         : SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(34.5, 25, 43)]
Gold Output      : [(34.5, 25, 43)]

===== Eval Round 7 =====
Database         : concert_singer
Prediction SQL   : SELECT Name, Song_release_year FROM singer ORDER BY Age ASC LIMIT 1
Gold SQL         : SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Tribal King', '2016')]
Gold Output      : [('Love', '2016')]

===== Eval Round 8 =====
Database         : concert_singer
Prediction SQL   : SELECT Name, Song_release_year FROM singer ORDER BY Age ASC LIMIT 1
Gold SQL         : SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Tribal King', '2016')]
Gold Output      : [('Love', '2016')]

===== Eval Round 9 =====
Database         : concert_singer
Prediction SQL   : SELECT DISTINCT Country FROM singer WHERE Age > 20
Gold SQL         : SELECT DISTINCT country FROM singer WHERE age  >  20
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Netherlands',), ('United States',), ('France',)]
Gold Output      : [('Netherlands',), ('United States',), ('France',)]

===== Eval Round 10 =====
Database         : concert_singer
Prediction SQL   : SELECT DISTINCT Country FROM singer WHERE Age > 20
Gold SQL         : SELECT DISTINCT country FROM singer WHERE age  >  20
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Netherlands',), ('United States',), ('France',)]
Gold Output      : [('Netherlands',), ('United States',), ('France',)]

===== Eval Round 11 =====
Database         : concert_singer
Prediction SQL   : SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country
Gold SQL         : SELECT country ,  count(*) FROM singer GROUP BY country
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('France', 4), ('Netherlands', 1), ('United States', 1)]
Gold Output      : [('France', 4), ('Netherlands', 1), ('United States', 1)]

===== Eval Round 12 =====
Database         : concert_singer
Prediction SQL   : SELECT Country, count(*) FROM singer GROUP BY Country
Gold SQL         : SELECT country ,  count(*) FROM singer GROUP BY country
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('France', 4), ('Netherlands', 1), ('United States', 1)]
Gold Output      : [('France', 4), ('Netherlands', 1), ('United States', 1)]

===== Eval Round 13 =====
Database         : concert_singer
Prediction SQL   : SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)
Gold SQL         : SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('You',), ('Sun',), ('Gentleman',)]
Gold Output      : [('You',), ('Sun',), ('Gentleman',)]

===== Eval Round 14 =====
Database         : concert_singer
Prediction SQL   : SELECT DISTINCT T1.Song_Name FROM singer AS T1 WHERE T1.Age > (SELECT AVG(Age) FROM singer)
Gold SQL         : SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('You',), ('Sun',), ('Gentleman',)]
Gold Output      : [('You',), ('Sun',), ('Gentleman',)]

===== Eval Round 15 =====
Database         : concert_singer
Prediction SQL   : SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000
Gold SQL         : SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : []

===== Eval Round 16 =====
Database         : concert_singer
Prediction SQL   : SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000
Gold SQL         : SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : []

===== Eval Round 17 =====
Database         : concert_singer
Prediction SQL   : SELECT MAX(Capacity), AVG(Average) FROM stadium
Gold SQL         : select max(capacity), average from stadium
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(52500, 917.8888888888889)]
Gold Output      : [(52500, 730)]

===== Eval Round 18 =====
Database         : concert_singer
Prediction SQL   : SELECT avg(Capacity), max(Capacity) FROM stadium
Gold SQL         : select avg(capacity) ,  max(capacity) from stadium
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(10621.666666666666, 52500)]
Gold Output      : [(10621.666666666666, 52500)]

===== Eval Round 19 =====
Database         : concert_singer
Prediction SQL   : SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1
Gold SQL         : SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [("Stark's Park", 10104)]
Gold Output      : [("Stark's Park", 10104)]

===== Eval Round 20 =====
Database         : concert_singer
Prediction SQL   : SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1
Gold SQL         : SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [("Stark's Park", 10104)]
Gold Output      : [("Stark's Park", 10104)]

===== Eval Round 21 =====
Database         : concert_singer
Prediction SQL   : SELECT count(*) FROM concert WHERE Year IN (2014, 2015)
Gold SQL         : SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(6,)]
Gold Output      : [(6,)]

===== Eval Round 22 =====
Database         : concert_singer
Prediction SQL   : SELECT count(*) FROM concert WHERE Year IN (2014, 2015)
Gold SQL         : SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(6,)]
Gold Output      : [(6,)]

===== Eval Round 23 =====
Database         : concert_singer
Prediction SQL   : SELECT s.Name, COUNT(c.concert_ID) FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID
Gold SQL         : SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [("Stark's Park", 1), ('Somerset Park', 2), ('Recreation Park', 1), ('Balmoor', 1), ('Glebe Park', 1)]
Gold Output      : [("Stark's Park", 1), ('Glebe Park', 1), ('Somerset Park', 2), ('Recreation Park', 1), ('Balmoor', 1)]

===== Eval Round 24 =====
Database         : concert_singer
Prediction SQL   : SELECT s.Stadium_ID, COUNT(c.concert_ID) AS NumberOfConcerts FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID
Gold SQL         : SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(1, 1), (2, 2), (7, 1), (9, 1), (10, 1)]
Gold Output      : [("Stark's Park", 1), ('Glebe Park', 1), ('Somerset Park', 2), ('Recreation Park', 1), ('Balmoor', 1)]

===== Eval Round 25 =====
Database         : concert_singer
Prediction SQL   : SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Stadium_ID ORDER BY COUNT(concert.concert_ID) DESC LIMIT 1
Gold SQL         : SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Somerset Park', 11998)]
Gold Output      : [('Somerset Park', 11998)]

===== Eval Round 26 =====
Database         : concert_singer
Prediction SQL   : SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > 2013 GROUP BY s.Stadium_ID ORDER BY COUNT(c.concert_ID) DESC LIMIT 1
Gold SQL         : select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Somerset Park', 11998)]
Gold Output      : [('Somerset Park', 11998)]

===== Eval Round 27 =====
Database         : concert_singer
Prediction SQL   : SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('2015',)]
Gold Output      : [('2015',)]

===== Eval Round 28 =====
Database         : concert_singer
Prediction SQL   : SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('2015',)]
Gold Output      : [('2015',)]

===== Eval Round 29 =====
Database         : concert_singer
Prediction SQL   : SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
Gold SQL         : SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',)]
Gold Output      : [('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',)]

===== Eval Round 30 =====
Database         : concert_singer
Prediction SQL   : SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
Gold SQL         : SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',)]
Gold Output      : [('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',)]

===== Eval Round 31 =====
Database         : concert_singer
Prediction SQL   : SELECT DISTINCT Country FROM singer WHERE Age > 40 INTERSECT SELECT DISTINCT Country FROM singer WHERE Age < 30
Gold SQL         : SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('France',)]
Gold Output      : [('France',)]

===== Eval Round 32 =====
Database         : concert_singer
Prediction SQL   : SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)
Gold SQL         : SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',), ('Recreation Park',), ('Balmoor',)]
Gold Output      : [('Balmoor',), ('Bayview Stadium',), ('Forthbank Stadium',), ('Gayfield Park',), ('Hampden Park',), ('Recreation Park',)]

===== Eval Round 33 =====
Database         : concert_singer
Prediction SQL   : SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)
Gold SQL         : SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',), ('Recreation Park',), ('Balmoor',)]
Gold Output      : [('Balmoor',), ('Bayview Stadium',), ('Forthbank Stadium',), ('Gayfield Park',), ('Hampden Park',), ('Recreation Park',)]

===== Eval Round 34 =====
Database         : concert_singer
Prediction SQL   : SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS NumberOfSingers FROM concert c JOIN singer_in_concert s ON c.concert_ID = s.concert_ID GROUP BY c.concert_ID
Gold SQL         : SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Auditions', 'Free choice', 3), ('Super bootcamp', 'Free choice 2', 2), ('Home Visits', 'Bleeding Love', 1), ('Week 1', 'Wide Awake', 1), ('Week 1', 'Happy Tonight', 2), ('Week 2', 'Party All Night', 1)]
Gold Output      : [('Auditions', 'Free choice', 3), ('Super bootcamp', 'Free choice 2', 2), ('Home Visits', 'Bleeding Love', 1), ('Week 1', 'Wide Awake', 1), ('Week 1', 'Happy Tonight', 2), ('Week 2', 'Party All Night', 1)]

===== Eval Round 35 =====
Database         : concert_singer
Prediction SQL   : SELECT concert_Name, Theme, COUNT(Singer_ID) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert_Name, Theme
Gold SQL         : select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Auditions', 'Free choice', 3), ('Home Visits', 'Bleeding Love', 1), ('Super bootcamp', 'Free choice 2', 2), ('Week 1', 'Happy Tonight', 2), ('Week 1', 'Wide Awake', 1), ('Week 2', 'Party All Night', 1)]
Gold Output      : [('Auditions', 'Free choice', 3), ('Super bootcamp', 'Free choice 2', 2), ('Home Visits', 'Bleeding Love', 1), ('Week 1', 'Wide Awake', 1), ('Week 1', 'Happy Tonight', 2), ('Week 2', 'Party All Night', 1)]

===== Eval Round 36 =====
Database         : concert_singer
Prediction SQL   : SELECT s.Name, COUNT(sc.concert_ID) AS NumberOfConcerts FROM singer s JOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID GROUP BY s.Singer_ID
Gold SQL         : SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Timbaland', 2), ('Justin Brown', 3), ('Rose White', 1), ('John Nizinik', 2), ('Tribal King', 2)]
Gold Output      : [('Timbaland', 2), ('Justin Brown', 3), ('Rose White', 1), ('John Nizinik', 2), ('Tribal King', 2)]

===== Eval Round 37 =====
Database         : concert_singer
Prediction SQL   : SELECT s.Name, COUNT(sc.concert_ID) AS Number_of_concerts FROM singer s JOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID GROUP BY s.Singer_ID
Gold SQL         : SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Timbaland', 2), ('Justin Brown', 3), ('Rose White', 1), ('John Nizinik', 2), ('Tribal King', 2)]
Gold Output      : [('Timbaland', 2), ('Justin Brown', 3), ('Rose White', 1), ('John Nizinik', 2), ('Tribal King', 2)]

===== Eval Round 38 =====
Database         : concert_singer
Prediction SQL   : SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = 2014
Gold SQL         : SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Timbaland',), ('Justin Brown',), ('John Nizinik',), ('Justin Brown',), ('Tribal King',), ('Rose White',)]
Gold Output      : [('Timbaland',), ('Justin Brown',), ('John Nizinik',), ('Justin Brown',), ('Tribal King',), ('Rose White',)]

===== Eval Round 39 =====
Database         : concert_singer
Prediction SQL   : SELECT T1.Name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = 2014
Gold SQL         : SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Timbaland',), ('Justin Brown',), ('John Nizinik',), ('Justin Brown',), ('Tribal King',), ('Rose White',)]
Gold Output      : [('Timbaland',), ('Justin Brown',), ('John Nizinik',), ('Justin Brown',), ('Tribal King',), ('Rose White',)]

===== Eval Round 40 =====
Database         : concert_singer
Prediction SQL   : SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'
Gold SQL         : SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Justin Brown', 'France')]
Gold Output      : [('Justin Brown', 'France')]

===== Eval Round 41 =====
Database         : concert_singer
Prediction SQL   : SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'
Gold SQL         : SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Justin Brown', 'France')]
Gold Output      : [('Justin Brown', 'France')]

===== Eval Round 42 =====
Database         : concert_singer
Prediction SQL   : SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN (2014, 2015) GROUP BY s.Stadium_ID HAVING COUNT(DISTINCT c.Year) = 2
Gold SQL         : SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Somerset Park', 'Ayr United')]
Gold Output      : [('Somerset Park', 'Ayr United')]

===== Eval Round 43 =====
Database         : concert_singer
Prediction SQL   : SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN (2014, 2015) GROUP BY s.Stadium_ID HAVING COUNT(DISTINCT c.Year) = 2
Gold SQL         : SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Somerset Park', 'Ayr United')]
Gold Output      : [('Somerset Park', 'Ayr United')]

===== Eval Round 44 =====
Database         : concert_singer
Prediction SQL   : SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
Gold SQL         : select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 45 =====
Database         : concert_singer
Prediction SQL   : SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
Gold SQL         : select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 46 =====
Database         : pets_1
Prediction SQL   : SELECT count(*) FROM Pets WHERE weight > 10
Gold SQL         : SELECT count(*) FROM pets WHERE weight  >  10
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(2,)]
Gold Output      : [(2,)]

===== Eval Round 47 =====
Database         : pets_1
Prediction SQL   : SELECT count(*) FROM Pets WHERE weight > 10
Gold SQL         : SELECT count(*) FROM pets WHERE weight  >  10
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(2,)]
Gold Output      : [(2,)]

===== Eval Round 48 =====
Database         : pets_1
Prediction SQL   : SELECT MIN(weight) FROM Pets WHERE PetType = 'dog'
Gold SQL         : SELECT weight FROM pets ORDER BY pet_age LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(9.3,)]
Gold Output      : [(9.3,)]

===== Eval Round 49 =====
Database         : pets_1
Prediction SQL   : SELECT MIN(weight) FROM Pets WHERE PetType = 'dog'
Gold SQL         : SELECT weight FROM pets ORDER BY pet_age LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(9.3,)]
Gold Output      : [(9.3,)]

===== Eval Round 50 =====
Database         : pets_1
Prediction SQL   : SELECT Pets.PetType, MAX(Pets.weight) FROM Pets GROUP BY Pets.PetType
Gold SQL         : SELECT max(weight) ,  petType FROM pets GROUP BY petType
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('cat', 12.0), ('dog', 13.4)]
Gold Output      : [(12.0, 'cat'), (13.4, 'dog')]

===== Eval Round 51 =====
Database         : pets_1
Prediction SQL   : SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType
Gold SQL         : SELECT max(weight) ,  petType FROM pets GROUP BY petType
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('cat', 12.0), ('dog', 13.4)]
Gold Output      : [(12.0, 'cat'), (13.4, 'dog')]

===== Eval Round 52 =====
Database         : pets_1
Prediction SQL   : SELECT COUNT(HP.PetID) FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID WHERE S.Age > 20
Gold SQL         : SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 53 =====
Database         : pets_1
Prediction SQL   : SELECT COUNT(H.PetID) FROM Has_Pet H JOIN Student S ON H.StuID = S.StuID WHERE S.Age > 20
Gold SQL         : SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 54 =====
Database         : pets_1
Prediction SQL   : SELECT COUNT(P.PetID) FROM Pets P JOIN Has_Pet HP ON P.PetID = HP.PetID JOIN Student S ON HP.StuID = S.StuID WHERE P.PetType = 'dog' AND S.Sex = 'F'
Gold SQL         : SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(2,)]
Gold Output      : [(2,)]

===== Eval Round 55 =====
Database         : pets_1
Prediction SQL   : SELECT COUNT(P.PetID) FROM Pets P JOIN Has_Pet HP ON P.PetID = HP.PetID JOIN Student S ON HP.StuID = S.StuID WHERE P.PetType = 'dog' AND S.Sex = 'female'
Gold SQL         : SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(2,)]

===== Eval Round 56 =====
Database         : pets_1
Prediction SQL   : SELECT COUNT(DISTINCT PetType) FROM Pets
Gold SQL         : SELECT count(DISTINCT pettype) FROM pets
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(2,)]
Gold Output      : [(2,)]

===== Eval Round 57 =====
Database         : pets_1
Prediction SQL   : SELECT COUNT(DISTINCT PetType) FROM Pets
Gold SQL         : SELECT count(DISTINCT pettype) FROM pets
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(2,)]
Gold Output      : [(2,)]

===== Eval Round 58 =====
Database         : pets_1
Prediction SQL   : SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType IN ('cat', 'dog')
Gold SQL         : SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Linda',), ('Tracy',), ('Tracy',)]
Gold Output      : [('Linda',), ('Tracy',)]

===== Eval Round 59 =====
Database         : pets_1
Prediction SQL   : SELECT DISTINCT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('cat', 'dog')
Gold SQL         : SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Linda',), ('Tracy',)]
Gold Output      : [('Linda',), ('Tracy',)]

===== Eval Round 60 =====
Database         : pets_1
Prediction SQL   : SELECT DISTINCT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND EXISTS (SELECT 1 FROM Has_Pet HP2 JOIN Pets P2 ON HP2.PetID = P2.PetID WHERE HP2.StuID = S.StuID AND P2.PetType = 'dog')
Gold SQL         : select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 61 =====
Database         : pets_1
Prediction SQL   : SELECT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' INTERSECT SELECT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog'
Gold SQL         : SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 62 =====
Database         : pets_1
Prediction SQL   : SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))
Gold SQL         : SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(600, 19), (600, 21), (600, 20), (600, 26), (600, 18), (600, 18), (600, 20), (600, 19), (600, 17), (600, 22), (600, 20), (600, 18), (600, 16), (600, 17), (600, 27), (600, 20), (600, 18), (520, 22), (520, 19), (540, 17), (520, 20), (540, 18), (520, 18), (520, 19), (520, 18), (550, 20), (100, 17), (550, 21), (550, 20), (550, 20), (550, 18), (50, 18), (50, 26)]
Gold Output      : [(600, 19), (600, 21), (600, 20), (600, 26), (600, 18), (600, 18), (600, 20), (600, 19), (600, 17), (600, 22), (600, 20), (600, 18), (600, 16), (600, 17), (600, 27), (600, 20), (600, 18), (520, 22), (520, 19), (540, 17), (520, 20), (540, 18), (520, 18), (520, 19), (520, 18), (550, 20), (100, 17), (550, 21), (550, 20), (550, 20), (550, 18), (50, 18), (50, 26)]

===== Eval Round 63 =====
Database         : pets_1
Prediction SQL   : SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))
Gold SQL         : SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(600, 19), (600, 21), (600, 20), (600, 26), (600, 18), (600, 18), (600, 20), (600, 19), (600, 17), (600, 22), (600, 20), (600, 18), (600, 16), (600, 17), (600, 27), (600, 20), (600, 18), (520, 22), (520, 19), (540, 17), (520, 20), (540, 18), (520, 18), (520, 19), (520, 18), (550, 20), (100, 17), (550, 21), (550, 20), (550, 20), (550, 18), (50, 18), (50, 26)]
Gold Output      : [(600, 19), (600, 21), (600, 20), (600, 26), (600, 18), (600, 18), (600, 20), (600, 19), (600, 17), (600, 22), (600, 20), (600, 18), (600, 16), (600, 17), (600, 27), (600, 20), (600, 18), (520, 22), (520, 19), (540, 17), (520, 20), (540, 18), (520, 18), (520, 19), (520, 18), (550, 20), (100, 17), (550, 21), (550, 20), (550, 20), (550, 18), (50, 18), (50, 26)]

===== Eval Round 64 =====
Database         : pets_1
Prediction SQL   : SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))
Gold SQL         : SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1002,), (1003,), (1004,), (1005,), (1006,), (1007,), (1008,), (1009,), (1010,), (1011,), (1012,), (1014,), (1015,), (1016,), (1017,), (1018,), (1019,), (1020,), (1021,), (1022,), (1023,), (1024,), (1025,), (1026,), (1027,), (1028,), (1029,), (1030,), (1031,), (1032,), (1033,), (1034,), (1035,)]
Gold Output      : [(1002,), (1003,), (1004,), (1005,), (1006,), (1007,), (1008,), (1009,), (1010,), (1011,), (1012,), (1014,), (1015,), (1016,), (1017,), (1018,), (1019,), (1020,), (1021,), (1022,), (1023,), (1024,), (1025,), (1026,), (1027,), (1028,), (1029,), (1030,), (1031,), (1032,), (1033,), (1034,), (1035,)]

===== Eval Round 65 =====
Database         : pets_1
Prediction SQL   : SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))
Gold SQL         : SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1002,), (1003,), (1004,), (1005,), (1006,), (1007,), (1008,), (1009,), (1010,), (1011,), (1012,), (1014,), (1015,), (1016,), (1017,), (1018,), (1019,), (1020,), (1021,), (1022,), (1023,), (1024,), (1025,), (1026,), (1027,), (1028,), (1029,), (1030,), (1031,), (1032,), (1033,), (1034,), (1035,)]
Gold Output      : [(1002,), (1003,), (1004,), (1005,), (1006,), (1007,), (1008,), (1009,), (1010,), (1011,), (1012,), (1014,), (1015,), (1016,), (1017,), (1018,), (1019,), (1020,), (1021,), (1022,), (1023,), (1024,), (1025,), (1026,), (1027,), (1028,), (1029,), (1030,), (1031,), (1032,), (1033,), (1034,), (1035,)]

===== Eval Round 66 =====
Database         : pets_1
Prediction SQL   : SELECT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND S.StuID NOT IN (SELECT S.StuID FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat')
Gold SQL         : SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Tracy', 19), ('Tracy', 19)]
Gold Output      : [('Tracy', 19), ('Tracy', 19)]

===== Eval Round 67 =====
Database         : pets_1
Prediction SQL   : SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))
Gold SQL         : SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Tracy',)]
Gold Output      : [('Tracy', 19), ('Tracy', 19)]

===== Eval Round 68 =====
Database         : pets_1
Prediction SQL   : SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1
Gold SQL         : SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('dog', 9.3)]
Gold Output      : [('dog', 9.3)]

===== Eval Round 69 =====
Database         : pets_1
Prediction SQL   : SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1
Gold SQL         : SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('dog', 9.3)]
Gold Output      : [('dog', 9.3)]

===== Eval Round 70 =====
Database         : pets_1
Prediction SQL   : SELECT PetID, weight FROM Pets WHERE pet_age > 1
Gold SQL         : SELECT petid ,  weight FROM pets WHERE pet_age  >  1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(2001, 12.0), (2002, 13.4)]
Gold Output      : [(2001, 12.0), (2002, 13.4)]

===== Eval Round 71 =====
Database         : pets_1
Prediction SQL   : SELECT PetID, weight FROM Pets WHERE pet_age > 1
Gold SQL         : SELECT petid ,  weight FROM pets WHERE pet_age  >  1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(2001, 12.0), (2002, 13.4)]
Gold Output      : [(2001, 12.0), (2002, 13.4)]

===== Eval Round 72 =====
Database         : pets_1
Prediction SQL   : SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType
Gold SQL         : SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('cat', 3.0, 3), ('dog', 1.5, 2)]
Gold Output      : [(3.0, 3, 'cat'), (1.5, 2, 'dog')]

===== Eval Round 73 =====
Database         : pets_1
Prediction SQL   : SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType
Gold SQL         : SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('cat', 3.0, 3), ('dog', 1.5, 2)]
Gold Output      : [(3.0, 3, 'cat'), (1.5, 2, 'dog')]

===== Eval Round 74 =====
Database         : pets_1
Prediction SQL   : SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType
Gold SQL         : SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('cat', 12.0), ('dog', 11.350000000000001)]
Gold Output      : [(12.0, 'cat'), (11.350000000000001, 'dog')]

===== Eval Round 75 =====
Database         : pets_1
Prediction SQL   : SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType
Gold SQL         : SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('cat', 12.0), ('dog', 11.350000000000001)]
Gold Output      : [(12.0, 'cat'), (11.350000000000001, 'dog')]

===== Eval Round 76 =====
Database         : pets_1
Prediction SQL   : SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)
Gold SQL         : SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Linda', 18), ('Tracy', 19)]
Gold Output      : [('Linda', 18), ('Tracy', 19)]

===== Eval Round 77 =====
Database         : pets_1
Prediction SQL   : SELECT DISTINCT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)
Gold SQL         : SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Linda', 18), ('Tracy', 19)]
Gold Output      : [('Linda', 18), ('Tracy', 19)]

===== Eval Round 78 =====
Database         : pets_1
Prediction SQL   : SELECT PetID FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE LName = 'Smith')
Gold SQL         : SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(2001,)]
Gold Output      : [(2001,)]

===== Eval Round 79 =====
Database         : pets_1
Prediction SQL   : SELECT PetID FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE LName = 'Smith')
Gold SQL         : SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(2001,)]
Gold Output      : [(2001,)]

===== Eval Round 80 =====
Database         : pets_1
Prediction SQL   : SELECT StuID, COUNT(PetID) AS NumberOfPets FROM Has_Pet GROUP BY StuID
Gold SQL         : SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1001, 1), (1002, 2)]
Gold Output      : [(1, 1001), (2, 1002)]

===== Eval Round 81 =====
Database         : pets_1
Prediction SQL   : SELECT StuID, COUNT(PetID) AS num_pets FROM Has_Pet GROUP BY StuID
Gold SQL         : select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1001, 1), (1002, 2)]
Gold Output      : [(1, 1001), (2, 1002)]

===== Eval Round 82 =====
Database         : pets_1
Prediction SQL   : SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1)
Gold SQL         : SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Tracy', 'F')]
Gold Output      : [('Tracy', 'F')]

===== Eval Round 83 =====
Database         : pets_1
Prediction SQL   : SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1)
Gold SQL         : SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Tracy', 'F')]
Gold Output      : [('Tracy', 'F')]

===== Eval Round 84 =====
Database         : pets_1
Prediction SQL   : SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' AND T3.pet_age = 3
Gold SQL         : SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Smith',)]
Gold Output      : [('Smith',)]

===== Eval Round 85 =====
Database         : pets_1
Prediction SQL   : SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' AND T3.pet_age = 3
Gold SQL         : SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Smith',)]
Gold Output      : [('Smith',)]

===== Eval Round 86 =====
Database         : pets_1
Prediction SQL   : SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
Gold SQL         : select avg(age) from student where stuid not in (select stuid from has_pet)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(19.625,)]
Gold Output      : [(19.625,)]

===== Eval Round 87 =====
Database         : pets_1
Prediction SQL   : SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
Gold SQL         : select avg(age) from student where stuid not in (select stuid from has_pet)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(19.625,)]
Gold Output      : [(19.625,)]

===== Eval Round 88 =====
Database         : car_1
Prediction SQL   : SELECT COUNT(*) FROM continents
Gold SQL         : SELECT count(*) FROM CONTINENTS;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(5,)]
Gold Output      : [(5,)]

===== Eval Round 89 =====
Database         : car_1
Prediction SQL   : SELECT count(*) FROM continents
Gold SQL         : SELECT count(*) FROM CONTINENTS;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(5,)]
Gold Output      : [(5,)]

===== Eval Round 90 =====
Database         : car_1
Prediction SQL   : SELECT c.ContId, c.Continent, COUNT(cr.CountryId) AS NumberOfCountries FROM continents c JOIN countries cr ON c.ContId = cr.Continent GROUP BY c.ContId, c.Continent
Gold SQL         : SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1, 'america', 3), (2, 'europe', 6), (3, 'asia', 2), (4, 'africa', 2), (5, 'australia', 2)]
Gold Output      : [(1, 'america', 3), (2, 'europe', 6), (3, 'asia', 2), (4, 'africa', 2), (5, 'australia', 2)]

===== Eval Round 91 =====
Database         : car_1
Prediction SQL   : SELECT c.ContId, c.Continent, COUNT(cr.CountryId) AS CountryCount FROM continents c JOIN countries cr ON c.ContId = cr.Continent GROUP BY c.ContId, c.Continent
Gold SQL         : SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1, 'america', 3), (2, 'europe', 6), (3, 'asia', 2), (4, 'africa', 2), (5, 'australia', 2)]
Gold Output      : [(1, 'america', 3), (2, 'europe', 6), (3, 'asia', 2), (4, 'africa', 2), (5, 'australia', 2)]

===== Eval Round 92 =====
Database         : car_1
Prediction SQL   : SELECT count(*) FROM countries
Gold SQL         : SELECT count(*) FROM COUNTRIES;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(15,)]
Gold Output      : [(15,)]

===== Eval Round 93 =====
Database         : car_1
Prediction SQL   : SELECT count(*) FROM countries
Gold SQL         : SELECT count(*) FROM COUNTRIES;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(15,)]
Gold Output      : [(15,)]

===== Eval Round 94 =====
Database         : car_1
Prediction SQL   : SELECT T1.FullName, T1.Id, COUNT(T2.ModelId) AS NumberOfModels FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id
Gold SQL         : SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('American Motor Company', 1, 1), ('Volkswagen', 2, 2), ('BMW', 3, 1), ('General Motors', 4, 5), ('Ford Motor Company', 5, 3), ('Chrysler', 6, 4), ('Citroen', 7, 1), ('Nissan Motors', 8, 2), ('Fiat', 9, 1), ('Honda', 11, 1), ('Mazda', 12, 1), ('Daimler Benz', 13, 2), ('Opel', 14, 1), ('Peugeaut', 15, 1), ('Renault', 16, 1), ('Saab', 17, 1), ('Subaru', 18, 1), ('Toyota', 19, 2), ('Triumph', 20, 1), ('Volvo', 21, 1), ('Kia Motors', 22, 1), ('Hyundai', 23, 1)]
Gold Output      : [('American Motor Company', 1, 1), ('Volkswagen', 2, 2), ('BMW', 3, 1), ('General Motors', 4, 5), ('Ford Motor Company', 5, 3), ('Chrysler', 6, 4), ('Citroen', 7, 1), ('Nissan Motors', 8, 2), ('Fiat', 9, 1), ('Honda', 11, 1), ('Mazda', 12, 1), ('Daimler Benz', 13, 2), ('Opel', 14, 1), ('Peugeaut', 15, 1), ('Renault', 16, 1), ('Saab', 17, 1), ('Subaru', 18, 1), ('Toyota', 19, 2), ('Triumph', 20, 1), ('Volvo', 21, 1), ('Kia Motors', 22, 1), ('Hyundai', 23, 1)]

===== Eval Round 95 =====
Database         : car_1
Prediction SQL   : SELECT Maker, FullName, COUNT(Model) FROM car_makers LEFT JOIN model_list ON car_makers.Maker = model_list.Maker GROUP BY Maker, FullName
Gold SQL         : SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: ambiguous column name: Maker
Gold Output      : [('American Motor Company', 1, 1), ('Volkswagen', 2, 2), ('BMW', 3, 1), ('General Motors', 4, 5), ('Ford Motor Company', 5, 3), ('Chrysler', 6, 4), ('Citroen', 7, 1), ('Nissan Motors', 8, 2), ('Fiat', 9, 1), ('Honda', 11, 1), ('Mazda', 12, 1), ('Daimler Benz', 13, 2), ('Opel', 14, 1), ('Peugeaut', 15, 1), ('Renault', 16, 1), ('Saab', 17, 1), ('Subaru', 18, 1), ('Toyota', 19, 2), ('Triumph', 20, 1), ('Volvo', 21, 1), ('Kia Motors', 22, 1), ('Hyundai', 23, 1)]

===== Eval Round 96 =====
Database         : car_1
Prediction SQL   : SELECT Model FROM car_names ORDER BY Horsepower ASC LIMIT 1
Gold SQL         : SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: Horsepower
Gold Output      : [('amc',)]

===== Eval Round 97 =====
Database         : car_1
Prediction SQL   : SELECT T1.Model FROM model_list AS T1 INNER JOIN car_names AS T2 ON T1.Maker = T2.Make AND T1.Model = T2.Model INNER JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Horsepower ASC LIMIT 1
Gold SQL         : SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('amc',)]

===== Eval Round 98 =====
Database         : car_1
Prediction SQL   : SELECT T1.Model FROM model_list AS T1 JOIN cars_data AS T2 ON T1.Maker = T2.MakeId WHERE T2.Weight < (SELECT AVG(Weight) FROM cars_data)
Gold SQL         : SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: T2.MakeId
Gold Output      : [('toyota',), ('plymouth',), ('amc',), ('ford',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('amc',), ('datsun',), ('chevrolet',), ('toyota',), ('ford',), ('volkswagen',), ('amc',), ('amc',), ('chevrolet',), ('mercury',), ('opel',), ('peugeot',), ('fiat',), ('toyota',), ('datsun',), ('volkswagen',), ('plymouth',), ('toyota',), ('dodge',), ('volkswagen',), ('chevrolet',), ('ford',), ('mazda',), ('volvo',), ('volkswagen',), ('peugeot',), ('renault',), ('ford',), ('datsun',), ('toyota',), ('dodge',), ('toyota',), ('amc',), ('plymouth',), ('volkswagen',), ('amc',), ('toyota',), ('chevrolet',), ('datsun',), ('mazda',), ('ford',), ('mercury',), ('fiat',), ('fiat',), ('opel',), ('audi',), ('volvo',), ('saab',), ('toyota',), ('ford',), ('amc',), ('datsun',), ('ford',), ('toyota',), ('chevrolet',), ('audi',), ('volkswagen',), ('opel',), ('toyota',), ('datsun',), ('dodge',), ('fiat',), ('fiat',), ('honda',), ('subaru',), ('fiat',), ('toyota',), ('ford',), ('amc',), ('pontiac',), ('toyota',), ('volkswagen',), ('datsun',), ('volkswagen',), ('audi',), ('peugeot',), ('volvo',), ('saab',), ('honda',), ('fiat',), ('opel',), ('capri',), ('dodge',), ('renault',), ('chevrolet',), ('chevrolet',), ('volkswagen',), ('honda',), ('volkswagen',), ('datsun',), ('toyota',), ('ford',), ('toyota',), ('honda',), ('buick',), ('renault',), ('plymouth',), ('datsun',), ('volkswagen',), ('pontiac',), ('toyota',), ('ford',), ('chevrolet',), ('dodge',), ('subaru',), ('volkswagen',), ('datsun',), ('bmw',), ('mazda',), ('volkswagen',), ('ford',), ('mazda',), ('datsun',), ('honda',), ('ford',), ('ford',), ('chevrolet',), ('toyota',), ('datsun',), ('dodge',), ('toyota',), ('plymouth',), ('oldsmobile',), ('datsun',), ('audi',), ('saab',), ('volkswagen',), ('honda',), ('ford',), ('volkswagen',), ('mazda',), ('dodge',), ('amc',), ('plymouth',), ('plymouth',), ('datsun',), ('fiat',), ('buick',), ('chevrolet',), ('oldsmobile',), ('pontiac',), ('volkswagen',), ('toyota',), ('chevrolet',), ('datsun',), ('chevrolet',), ('ford',), ('audi',), ('toyota',), ('mazda',), ('datsun',), ('toyota',), ('mazda',), ('dodge',), ('datsun',), ('volkswagen',), ('volkswagen',), ('audi',), ('honda',), ('renault',), ('subaru',), (' volkswagen',), ('datsun',), ('mazda',), ('triumph',), ('ford',), ('honda',), ('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('plymouth',), ('toyota',), ('plymouth',), ('honda',), ('subaru',), ('datsun',), ('toyota',), ('mazda',), ('plymouth',), ('ford',), ('ford',), ('volkswagen',), ('renault',), ('honda',), ('toyota',), ('datsun',), ('mazda',), ('saab',), ('toyota',), ('datsun',), ('chevrolet',), ('chevrolet',), ('chevrolet',), ('pontiac',), ('dodge',), ('pontiac',), ('ford',), ('volkswagen',), ('mazda',), ('mazda',), ('plymouth',), ('mercury',), ('nissan',), ('honda',), ('toyota',), ('honda',), ('honda',), ('datsun',), ('buick',), ('chrysler',), ('ford',), ('toyota',), ('dodge',), ('chevrolet',), ('ford',), ('volkswagen',), ('dodge',), ('ford',), ('chevrolet',)]

===== Eval Round 99 =====
Database         : car_1
Prediction SQL   : SELECT T1.Model FROM model_list AS T1 INNER JOIN car_names AS T2 ON T1.Maker = T2.Make AND T1.Model = T2.Model INNER JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Weight < (SELECT AVG(Weight) FROM cars_data)
Gold SQL         : SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('toyota',), ('plymouth',), ('amc',), ('ford',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('amc',), ('datsun',), ('chevrolet',), ('toyota',), ('ford',), ('volkswagen',), ('amc',), ('amc',), ('chevrolet',), ('mercury',), ('opel',), ('peugeot',), ('fiat',), ('toyota',), ('datsun',), ('volkswagen',), ('plymouth',), ('toyota',), ('dodge',), ('volkswagen',), ('chevrolet',), ('ford',), ('mazda',), ('volvo',), ('volkswagen',), ('peugeot',), ('renault',), ('ford',), ('datsun',), ('toyota',), ('dodge',), ('toyota',), ('amc',), ('plymouth',), ('volkswagen',), ('amc',), ('toyota',), ('chevrolet',), ('datsun',), ('mazda',), ('ford',), ('mercury',), ('fiat',), ('fiat',), ('opel',), ('audi',), ('volvo',), ('saab',), ('toyota',), ('ford',), ('amc',), ('datsun',), ('ford',), ('toyota',), ('chevrolet',), ('audi',), ('volkswagen',), ('opel',), ('toyota',), ('datsun',), ('dodge',), ('fiat',), ('fiat',), ('honda',), ('subaru',), ('fiat',), ('toyota',), ('ford',), ('amc',), ('pontiac',), ('toyota',), ('volkswagen',), ('datsun',), ('volkswagen',), ('audi',), ('peugeot',), ('volvo',), ('saab',), ('honda',), ('fiat',), ('opel',), ('capri',), ('dodge',), ('renault',), ('chevrolet',), ('chevrolet',), ('volkswagen',), ('honda',), ('volkswagen',), ('datsun',), ('toyota',), ('ford',), ('toyota',), ('honda',), ('buick',), ('renault',), ('plymouth',), ('datsun',), ('volkswagen',), ('pontiac',), ('toyota',), ('ford',), ('chevrolet',), ('dodge',), ('subaru',), ('volkswagen',), ('datsun',), ('bmw',), ('mazda',), ('volkswagen',), ('ford',), ('mazda',), ('datsun',), ('honda',), ('ford',), ('ford',), ('chevrolet',), ('toyota',), ('datsun',), ('dodge',), ('toyota',), ('plymouth',), ('oldsmobile',), ('datsun',), ('audi',), ('saab',), ('volkswagen',), ('honda',), ('ford',), ('volkswagen',), ('mazda',), ('dodge',), ('amc',), ('plymouth',), ('plymouth',), ('datsun',), ('fiat',), ('buick',), ('chevrolet',), ('oldsmobile',), ('pontiac',), ('volkswagen',), ('toyota',), ('chevrolet',), ('datsun',), ('chevrolet',), ('ford',), ('audi',), ('toyota',), ('mazda',), ('datsun',), ('toyota',), ('mazda',), ('dodge',), ('datsun',), ('volkswagen',), ('volkswagen',), ('audi',), ('honda',), ('renault',), ('subaru',), (' volkswagen',), ('datsun',), ('mazda',), ('triumph',), ('ford',), ('honda',), ('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('plymouth',), ('toyota',), ('plymouth',), ('honda',), ('subaru',), ('datsun',), ('toyota',), ('mazda',), ('plymouth',), ('ford',), ('ford',), ('volkswagen',), ('renault',), ('honda',), ('toyota',), ('datsun',), ('mazda',), ('saab',), ('toyota',), ('datsun',), ('chevrolet',), ('chevrolet',), ('chevrolet',), ('pontiac',), ('dodge',), ('pontiac',), ('ford',), ('volkswagen',), ('mazda',), ('mazda',), ('plymouth',), ('mercury',), ('nissan',), ('honda',), ('toyota',), ('honda',), ('honda',), ('datsun',), ('buick',), ('chrysler',), ('ford',), ('toyota',), ('dodge',), ('chevrolet',), ('ford',), ('volkswagen',), ('dodge',), ('ford',), ('chevrolet',)]

===== Eval Round 100 =====
Database         : car_1
Prediction SQL   : SELECT DISTINCT T1.Maker FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year = 1970
Gold SQL         : SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: T1.Maker
Gold Output      : [('gm',), ('chrysler',), ('amc',), ('ford',), ('citroen',), ('toyota',), ('nissan',), ('volkswagen',), ('peugeaut',), ('saab',), ('bmw',)]

===== Eval Round 101 =====
Database         : car_1
Prediction SQL   : SELECT DISTINCT T1.Maker FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year = 1970
Gold SQL         : SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: T1.Maker
Gold Output      : [('gm',), ('chrysler',), ('amc',), ('ford',), ('citroen',), ('toyota',), ('nissan',), ('volkswagen',), ('peugeaut',), ('saab',), ('bmw',)]

===== Eval Round 102 =====
Database         : car_1
Prediction SQL   : SELECT T1.Make, T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year = (SELECT MIN(Year) FROM cars_data)
Gold SQL         : SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('chevrolet chevelle malibu', 'chevrolet'), ('buick skylark 320', 'buick'), ('plymouth satellite', 'plymouth'), ('amc rebel sst', 'amc'), ('ford torino', 'ford'), ('ford galaxie 500', 'ford'), ('chevrolet impala', 'chevrolet'), ('plymouth fury iii', 'plymouth'), ('pontiac catalina', 'pontiac'), ('amc ambassador dpl', 'amc'), ('citroen ds-21 pallas', 'citroen'), ('chevrolet chevelle concours (sw)', 'chevrolet'), ('ford torino (sw)', 'ford'), ('plymouth satellite (sw)', 'plymouth'), ('amc rebel sst (sw)', 'amc'), ('dodge challenger se', 'dodge'), ('plymouth cuda 340', 'plymouth'), ('ford mustang boss 302', 'ford'), ('chevrolet monte carlo', 'chevrolet'), ('buick estate wagon (sw)', 'buick'), ('toyota corona mark ii', 'toyota'), ('plymouth duster', 'plymouth'), ('amc hornet', 'amc'), ('ford maverick', 'ford'), ('datsun pl510', 'datsun'), ('volkswagen 1131 deluxe sedan', 'volkswagen'), ('peugeot 504', 'peugeot'), ('audi 100 ls', 'audi'), ('saab 99e', 'saab'), ('bmw 2002', 'bmw'), ('amc gremlin', 'amc'), ('ford f250', 'ford'), ('chevy c20', 'chevrolet'), ('dodge d200', 'dodge'), ('hi 1200d', 'hi')]
Gold Output      : [('chevrolet chevelle malibu', 1970), ('buick skylark 320', 1970), ('plymouth satellite', 1970), ('amc rebel sst', 1970), ('ford torino', 1970), ('ford galaxie 500', 1970), ('chevrolet impala', 1970), ('plymouth fury iii', 1970), ('pontiac catalina', 1970), ('amc ambassador dpl', 1970), ('citroen ds-21 pallas', 1970), ('chevrolet chevelle concours (sw)', 1970), ('ford torino (sw)', 1970), ('plymouth satellite (sw)', 1970), ('amc rebel sst (sw)', 1970), ('dodge challenger se', 1970), ('plymouth cuda 340', 1970), ('ford mustang boss 302', 1970), ('chevrolet monte carlo', 1970), ('buick estate wagon (sw)', 1970), ('toyota corona mark ii', 1970), ('plymouth duster', 1970), ('amc hornet', 1970), ('ford maverick', 1970), ('datsun pl510', 1970), ('volkswagen 1131 deluxe sedan', 1970), ('peugeot 504', 1970), ('audi 100 ls', 1970), ('saab 99e', 1970), ('bmw 2002', 1970), ('amc gremlin', 1970), ('ford f250', 1970), ('chevy c20', 1970), ('dodge d200', 1970), ('hi 1200d', 1970)]

===== Eval Round 103 =====
Database         : car_1
Prediction SQL   : SELECT T1.Maker, T1.YearFROM cars_data AS T1ORDER BY T1.YearASC LIMIT 1
Gold SQL         : SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: near "AS": syntax error
Gold Output      : [('chevrolet chevelle malibu', 1970), ('buick skylark 320', 1970), ('plymouth satellite', 1970), ('amc rebel sst', 1970), ('ford torino', 1970), ('ford galaxie 500', 1970), ('chevrolet impala', 1970), ('plymouth fury iii', 1970), ('pontiac catalina', 1970), ('amc ambassador dpl', 1970), ('citroen ds-21 pallas', 1970), ('chevrolet chevelle concours (sw)', 1970), ('ford torino (sw)', 1970), ('plymouth satellite (sw)', 1970), ('amc rebel sst (sw)', 1970), ('dodge challenger se', 1970), ('plymouth cuda 340', 1970), ('ford mustang boss 302', 1970), ('chevrolet monte carlo', 1970), ('buick estate wagon (sw)', 1970), ('toyota corona mark ii', 1970), ('plymouth duster', 1970), ('amc hornet', 1970), ('ford maverick', 1970), ('datsun pl510', 1970), ('volkswagen 1131 deluxe sedan', 1970), ('peugeot 504', 1970), ('audi 100 ls', 1970), ('saab 99e', 1970), ('bmw 2002', 1970), ('amc gremlin', 1970), ('ford f250', 1970), ('chevy c20', 1970), ('dodge d200', 1970), ('hi 1200d', 1970)]

===== Eval Round 104 =====
Database         : car_1
Prediction SQL   : SELECT DISTINCT Model FROM model_list WHERE Maker IN (SELECT Maker FROM cars_data WHERE Year > 1980)
Gold SQL         : SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('amc',), ('audi',), ('bmw',), ('buick',), ('cadillac',), ('capri',), ('chevrolet',), ('chrysler',), ('citroen',), ('datsun',), ('dodge',), ('fiat',), ('ford',), ('hi',), ('honda',), ('hyundai',), ('jeep',), ('kia',), ('mazda',), ('mercedes',), ('mercedes-benz',), ('mercury',), ('nissan',), ('oldsmobile',), ('opel',), ('peugeot',), ('plymouth',), ('pontiac',), ('renault',), ('saab',), ('scion',), ('subaru',), ('toyota',), ('triumph',), ('volkswagen',), ('volvo',)]
Gold Output      : [('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('toyota',), ('honda',), ('subaru',), ('datsun',), ('mazda',), ('ford',), ('volkswagen',), ('renault',), ('peugeot',), ('saab',), ('volvo',), ('oldsmobile',), ('chrysler',), ('pontiac',), ('amc',), ('mercury',), ('nissan',)]

===== Eval Round 105 =====
Database         : car_1
Prediction SQL   : SELECT DISTINCT T1.Model FROM model_list AS T1 INNER JOIN cars_data AS T2 ON T1.Maker = T2.Id WHERE T2.Year > 1980
Gold SQL         : SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('toyota',), ('honda',), ('subaru',), ('datsun',), ('mazda',), ('ford',), ('volkswagen',), ('renault',), ('peugeot',), ('saab',), ('volvo',), ('oldsmobile',), ('chrysler',), ('pontiac',), ('amc',), ('mercury',), ('nissan',)]

===== Eval Round 106 =====
Database         : car_1
Prediction SQL   : SELECT c.Continent, COUNT(cm.Id) AS MakerCount FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent
Gold SQL         : SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('america', 4), ('asia', 7), ('europe', 11)]
Gold Output      : [('america', 4), ('asia', 7), ('europe', 11)]

===== Eval Round 107 =====
Database         : car_1
Prediction SQL   : SELECT C.Continent, COUNT(CM.Id) AS NumberOfCarMakers FROM continents AS C JOIN car_makers AS CM ON C.ContId = CM.Country GROUP BY C.Continent
Gold SQL         : SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('africa', 5), ('america', 4), ('asia', 3), ('australia', 1), ('europe', 4)]
Gold Output      : [('america', 4), ('asia', 7), ('europe', 11)]

===== Eval Round 108 =====
Database         : car_1
Prediction SQL   : SELECT T1.Country FROM car_makers AS T1 GROUP BY T1.Country ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('4',)]
Gold Output      : [('japan',)]

===== Eval Round 109 =====
Database         : car_1
Prediction SQL   : SELECT T1.Country FROM car_makers AS T1 GROUP BY T1.Country ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('4',)]
Gold Output      : [('japan',)]

===== Eval Round 110 =====
Database         : car_1
Prediction SQL   : SELECT COUNT(Model), car_makers.FullName FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY car_makers.FullName
Gold SQL         : select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1, 'American Motor Company'), (1, 'BMW'), (4, 'Chrysler'), (1, 'Citroen'), (2, 'Daimler Benz'), (1, 'Fiat'), (3, 'Ford Motor Company'), (5, 'General Motors'), (1, 'Honda'), (1, 'Hyundai'), (1, 'Kia Motors'), (1, 'Mazda'), (2, 'Nissan Motors'), (1, 'Opel'), (1, 'Peugeaut'), (1, 'Renault'), (1, 'Saab'), (1, 'Subaru'), (2, 'Toyota'), (1, 'Triumph'), (2, 'Volkswagen'), (1, 'Volvo')]
Gold Output      : [(1, 'American Motor Company'), (2, 'Volkswagen'), (1, 'BMW'), (5, 'General Motors'), (3, 'Ford Motor Company'), (4, 'Chrysler'), (1, 'Citroen'), (2, 'Nissan Motors'), (1, 'Fiat'), (1, 'Honda'), (1, 'Mazda'), (2, 'Daimler Benz'), (1, 'Opel'), (1, 'Peugeaut'), (1, 'Renault'), (1, 'Saab'), (1, 'Subaru'), (2, 'Toyota'), (1, 'Triumph'), (1, 'Volvo'), (1, 'Kia Motors'), (1, 'Hyundai')]

===== Eval Round 111 =====
Database         : car_1
Prediction SQL   : SELECT T1.Maker, COUNT(T2.ModelId) AS NumberOfModels, T3.Id, T3.FullName FROM model_list AS T1 INNER JOIN car_names AS T2 ON T1.Maker = T2.Make INNER JOIN car_makers AS T3 ON T1.Maker = T3.Maker GROUP BY T1.Maker
Gold SQL         : SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: T2.ModelId
Gold Output      : [(1, 'American Motor Company', 1), (2, 'Volkswagen', 2), (1, 'BMW', 3), (5, 'General Motors', 4), (3, 'Ford Motor Company', 5), (4, 'Chrysler', 6), (1, 'Citroen', 7), (2, 'Nissan Motors', 8), (1, 'Fiat', 9), (1, 'Honda', 11), (1, 'Mazda', 12), (2, 'Daimler Benz', 13), (1, 'Opel', 14), (1, 'Peugeaut', 15), (1, 'Renault', 16), (1, 'Saab', 17), (1, 'Subaru', 18), (2, 'Toyota', 19), (1, 'Triumph', 20), (1, 'Volvo', 21), (1, 'Kia Motors', 22), (1, 'Hyundai', 23)]

===== Eval Round 112 =====
Database         : car_1
Prediction SQL   : SELECT Accelerate FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Make = 'amc' AND Model = 'hornet sportabout (sw)')
Gold SQL         : SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [(13.5,)]

===== Eval Round 113 =====
Database         : car_1
Prediction SQL   : SELECT Accelerate FROM cars_data WHERE Make IN (SELECT Make FROM car_names WHERE Model = 'Sportabout' AND Make = 'amc') AND Model = 'Hornet'
Gold SQL         : SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: Make
Gold Output      : [(13.5,)]

===== Eval Round 114 =====
Database         : car_1
Prediction SQL   : SELECT count(*) FROM car_makers WHERE Country = 'France'
Gold SQL         : SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(3,)]

===== Eval Round 115 =====
Database         : car_1
Prediction SQL   : SELECT COUNT(*) FROM car_makers WHERE Country = 'France'
Gold SQL         : SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(3,)]

===== Eval Round 116 =====
Database         : car_1
Prediction SQL   : SELECT COUNT(*) FROM model_list WHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'USA')
Gold SQL         : SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(13,)]

===== Eval Round 117 =====
Database         : car_1
Prediction SQL   : SELECT COUNT(ModelId) FROM model_list WHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'United States')
Gold SQL         : SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(13,)]

===== Eval Round 118 =====
Database         : car_1
Prediction SQL   : SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4
Gold SQL         : SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(28.862318840579714,)]
Gold Output      : [(28.862318840579714,)]

===== Eval Round 119 =====
Database         : car_1
Prediction SQL   : SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4
Gold SQL         : SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(28.862318840579714,)]
Gold Output      : [(28.862318840579714,)]

===== Eval Round 120 =====
Database         : car_1
Prediction SQL   : SELECT min(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
Gold SQL         : select min(weight) from cars_data where cylinders  =  8 and year  =  1974
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(4141,)]
Gold Output      : [(4141,)]

===== Eval Round 121 =====
Database         : car_1
Prediction SQL   : SELECT min(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
Gold SQL         : select min(weight) from cars_data where cylinders  =  8 and year  =  1974
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(4141,)]
Gold Output      : [(4141,)]

===== Eval Round 122 =====
Database         : car_1
Prediction SQL   : SELECT Maker, Model FROM model_list
Gold SQL         : SELECT Maker ,  Model FROM MODEL_LIST;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1, 'amc'), (2, 'audi'), (3, 'bmw'), (4, 'buick'), (4, 'cadillac'), (5, 'capri'), (4, 'chevrolet'), (6, 'chrysler'), (7, 'citroen'), (8, 'datsun'), (6, 'dodge'), (9, 'fiat'), (5, 'ford'), (10, 'hi'), (11, 'honda'), (12, 'mazda'), (13, 'mercedes'), (13, 'mercedes-benz'), (5, 'mercury'), (8, 'nissan'), (4, 'oldsmobile'), (14, 'opel'), (15, 'peugeot'), (6, 'plymouth'), (4, 'pontiac'), (16, 'renault'), (17, 'saab'), (18, 'subaru'), (19, 'toyota'), (20, 'triumph'), (2, 'volkswagen'), (21, 'volvo'), (22, 'kia'), (23, 'hyundai'), (6, 'jeep'), (19, 'scion')]
Gold Output      : [(1, 'amc'), (2, 'audi'), (3, 'bmw'), (4, 'buick'), (4, 'cadillac'), (5, 'capri'), (4, 'chevrolet'), (6, 'chrysler'), (7, 'citroen'), (8, 'datsun'), (6, 'dodge'), (9, 'fiat'), (5, 'ford'), (10, 'hi'), (11, 'honda'), (12, 'mazda'), (13, 'mercedes'), (13, 'mercedes-benz'), (5, 'mercury'), (8, 'nissan'), (4, 'oldsmobile'), (14, 'opel'), (15, 'peugeot'), (6, 'plymouth'), (4, 'pontiac'), (16, 'renault'), (17, 'saab'), (18, 'subaru'), (19, 'toyota'), (20, 'triumph'), (2, 'volkswagen'), (21, 'volvo'), (22, 'kia'), (23, 'hyundai'), (6, 'jeep'), (19, 'scion')]

===== Eval Round 123 =====
Database         : car_1
Prediction SQL   : SELECT Maker, Model FROM model_list
Gold SQL         : SELECT Maker ,  Model FROM MODEL_LIST;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1, 'amc'), (2, 'audi'), (3, 'bmw'), (4, 'buick'), (4, 'cadillac'), (5, 'capri'), (4, 'chevrolet'), (6, 'chrysler'), (7, 'citroen'), (8, 'datsun'), (6, 'dodge'), (9, 'fiat'), (5, 'ford'), (10, 'hi'), (11, 'honda'), (12, 'mazda'), (13, 'mercedes'), (13, 'mercedes-benz'), (5, 'mercury'), (8, 'nissan'), (4, 'oldsmobile'), (14, 'opel'), (15, 'peugeot'), (6, 'plymouth'), (4, 'pontiac'), (16, 'renault'), (17, 'saab'), (18, 'subaru'), (19, 'toyota'), (20, 'triumph'), (2, 'volkswagen'), (21, 'volvo'), (22, 'kia'), (23, 'hyundai'), (6, 'jeep'), (19, 'scion')]
Gold Output      : [(1, 'amc'), (2, 'audi'), (3, 'bmw'), (4, 'buick'), (4, 'cadillac'), (5, 'capri'), (4, 'chevrolet'), (6, 'chrysler'), (7, 'citroen'), (8, 'datsun'), (6, 'dodge'), (9, 'fiat'), (5, 'ford'), (10, 'hi'), (11, 'honda'), (12, 'mazda'), (13, 'mercedes'), (13, 'mercedes-benz'), (5, 'mercury'), (8, 'nissan'), (4, 'oldsmobile'), (14, 'opel'), (15, 'peugeot'), (6, 'plymouth'), (4, 'pontiac'), (16, 'renault'), (17, 'saab'), (18, 'subaru'), (19, 'toyota'), (20, 'triumph'), (2, 'volkswagen'), (21, 'volvo'), (22, 'kia'), (23, 'hyundai'), (6, 'jeep'), (19, 'scion')]

===== Eval Round 124 =====
Database         : car_1
Prediction SQL   : SELECT DISTINCT c.CountryName, c.CountryId FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country
Gold SQL         : SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('usa', 1), ('germany', 2), ('france', 3), ('japan', 4), ('italy', 5), ('sweden', 6), ('uk', 7), ('korea', 8)]
Gold Output      : [('usa', 1), ('germany', 2), ('france', 3), ('japan', 4), ('italy', 5), ('sweden', 6), ('uk', 7), ('korea', 8)]

===== Eval Round 125 =====
Database         : car_1
Prediction SQL   : SELECT DISTINCT c.CountryName, c.CountryId FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country
Gold SQL         : SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('usa', 1), ('germany', 2), ('france', 3), ('japan', 4), ('italy', 5), ('sweden', 6), ('uk', 7), ('korea', 8)]
Gold Output      : [('usa', 1), ('germany', 2), ('france', 3), ('japan', 4), ('italy', 5), ('sweden', 6), ('uk', 7), ('korea', 8)]

===== Eval Round 126 =====
Database         : car_1
Prediction SQL   : SELECT count(*) FROM cars_data WHERE Horsepower > 150
Gold SQL         : SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(281,)]
Gold Output      : [(281,)]

===== Eval Round 127 =====
Database         : car_1
Prediction SQL   : SELECT count(*) FROM cars_data WHERE Horsepower > 150
Gold SQL         : SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(281,)]
Gold Output      : [(281,)]

===== Eval Round 128 =====
Database         : car_1
Prediction SQL   : SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year
Gold SQL         : SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1970, 3441.3142857142857), (1971, 2960.344827586207), (1972, 3237.714285714286), (1973, 3419.025), (1974, 2877.925925925926), (1975, 3176.8), (1976, 3078.735294117647), (1977, 2997.3571428571427), (1978, 2861.8055555555557), (1979, 3055.344827586207), (1980, 2436.655172413793), (1981, 2532.1666666666665), (1982, 2453.548387096774)]
Gold Output      : [(3441.3142857142857, 1970), (2960.344827586207, 1971), (3237.714285714286, 1972), (3419.025, 1973), (2877.925925925926, 1974), (3176.8, 1975), (3078.735294117647, 1976), (2997.3571428571427, 1977), (2861.8055555555557, 1978), (3055.344827586207, 1979), (2436.655172413793, 1980), (2532.1666666666665, 1981), (2453.548387096774, 1982)]

===== Eval Round 129 =====
Database         : car_1
Prediction SQL   : SELECT Year, AVG(Weight), AVG(Year) FROM cars_data GROUP BY Year
Gold SQL         : SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(1970, 3441.3142857142857, 1970.0), (1971, 2960.344827586207, 1971.0), (1972, 3237.714285714286, 1972.0), (1973, 3419.025, 1973.0), (1974, 2877.925925925926, 1974.0), (1975, 3176.8, 1975.0), (1976, 3078.735294117647, 1976.0), (1977, 2997.3571428571427, 1977.0), (1978, 2861.8055555555557, 1978.0), (1979, 3055.344827586207, 1979.0), (1980, 2436.655172413793, 1980.0), (1981, 2532.1666666666665, 1981.0), (1982, 2453.548387096774, 1982.0)]
Gold Output      : [(3441.3142857142857, 1970), (2960.344827586207, 1971), (3237.714285714286, 1972), (3419.025, 1973), (2877.925925925926, 1974), (3176.8, 1975), (3078.735294117647, 1976), (2997.3571428571427, 1977), (2861.8055555555557, 1978), (3055.344827586207, 1979), (2436.655172413793, 1980), (2532.1666666666665, 1981), (2453.548387096774, 1982)]

===== Eval Round 130 =====
Database         : car_1
Prediction SQL   : SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T1.Continent = 'Europe' GROUP BY T1.CountryName HAVING COUNT(T2.Id) >= 3
Gold SQL         : SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('france',), ('germany',)]

===== Eval Round 131 =====
Database         : car_1
Prediction SQL   : SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country AND T1.Continent = 'Europe' GROUP BY T1.CountryName HAVING COUNT(T2.Id) >= 3
Gold SQL         : SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('france',), ('germany',)]

===== Eval Round 132 =====
Database         : car_1
Prediction SQL   : SELECT MAX(Horsepower), Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Cylinders = 3 GROUP BY Make
Gold SQL         : SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('110', 'mazda rx-4'), ('100', 'mazda rx-7 gs'), ('97', 'mazda rx2 coupe'), ('90', 'mazda rx3')]
Gold Output      : [('97', 'mazda rx2 coupe')]

===== Eval Round 133 =====
Database         : car_1
Prediction SQL   : SELECT T1.Horsepower, T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 ORDER BY T1.Horsepower DESC LIMIT 1
Gold SQL         : SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('97', 'mazda rx2 coupe')]
Gold Output      : [('97', 'mazda rx2 coupe')]

===== Eval Round 134 =====
Database         : car_1
Prediction SQL   : SELECT Model FROM cars_data ORDER BY MPG DESC LIMIT 1
Gold SQL         : SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: Model
Gold Output      : [('citroen',)]

===== Eval Round 135 =====
Database         : car_1
Prediction SQL   : SELECT Model FROM car_names ORDER BY MPG DESC LIMIT 1
Gold SQL         : select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: MPG
Gold Output      : [('citroen',)]

===== Eval Round 136 =====
Database         : car_1
Prediction SQL   : SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
Gold SQL         : SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(111.13291139240506,)]
Gold Output      : [(111.13291139240506,)]

===== Eval Round 137 =====
Database         : car_1
Prediction SQL   : SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
Gold SQL         : select avg(horsepower) from cars_data where year  <  1980;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(111.13291139240506,)]
Gold Output      : [(111.13291139240506,)]

===== Eval Round 138 =====
Database         : car_1
Prediction SQL   : SELECT AVG(Edispl) FROM cars_data WHERE Make = 'Volvo'
Gold SQL         : SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: Make
Gold Output      : [(133.5,)]

===== Eval Round 139 =====
Database         : car_1
Prediction SQL   : SELECT AVG(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Make = 'Volvo')
Gold SQL         : SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(None,)]
Gold Output      : [(133.5,)]

===== Eval Round 140 =====
Database         : car_1
Prediction SQL   : SELECT MAX(Accelerate) FROM cars_data GROUP BY Cylinders
Gold SQL         : SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(13.5,), (24.8,), (20.1,), (21.0,), (22.2,)]
Gold Output      : [(13.5, 3), (24.8, 4), (20.1, 5), (21.0, 6), (22.2, 8)]

===== Eval Round 141 =====
Database         : car_1
Prediction SQL   : SELECT MAX(Accelerate) FROM cars_data GROUP BY Cylinders
Gold SQL         : SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(13.5,), (24.8,), (20.1,), (21.0,), (22.2,)]
Gold Output      : [(13.5, 3), (24.8, 4), (20.1, 5), (21.0, 6), (22.2, 8)]

===== Eval Round 142 =====
Database         : car_1
Prediction SQL   : SELECT Model FROM car_names GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('ford',)]
Gold Output      : [('ford',)]

===== Eval Round 143 =====
Database         : car_1
Prediction SQL   : SELECT Model FROM car_names GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('ford',)]
Gold Output      : [('ford',)]

===== Eval Round 144 =====
Database         : car_1
Prediction SQL   : SELECT count(*) FROM cars_data WHERE Cylinders > 4
Gold SQL         : SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(195,)]
Gold Output      : [(195,)]

===== Eval Round 145 =====
Database         : car_1
Prediction SQL   : SELECT count(*) FROM cars_data WHERE Cylinders > 4
Gold SQL         : SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(195,)]
Gold Output      : [(195,)]

===== Eval Round 146 =====
Database         : car_1
Prediction SQL   : SELECT count(*) FROM cars_data WHERE Year = 1980
Gold SQL         : SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(29,)]
Gold Output      : [(29,)]

===== Eval Round 147 =====
Database         : car_1
Prediction SQL   : SELECT COUNT(*) FROM cars_data WHERE Year = 1980
Gold SQL         : SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(29,)]
Gold Output      : [(29,)]

===== Eval Round 148 =====
Database         : car_1
Prediction SQL   : SELECT COUNT(ModelId) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')
Gold SQL         : SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1,)]
Gold Output      : [(1,)]

===== Eval Round 149 =====
Database         : car_1
Prediction SQL   : SELECT COUNT(*) FROM model_list WHERE Maker = 'American Motor Company'
Gold SQL         : SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(1,)]

===== Eval Round 150 =====
Database         : car_1
Prediction SQL   : SELECT Maker, Id FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) > 3)
Gold SQL         : SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('gm', 4), ('chrysler', 6)]
Gold Output      : [('General Motors', 4), ('Chrysler', 6)]

===== Eval Round 151 =====
Database         : car_1
Prediction SQL   : SELECT Maker, Id FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) > 3)
Gold SQL         : SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('gm', 4), ('chrysler', 6)]
Gold Output      : [('General Motors', 4), ('Chrysler', 6)]

===== Eval Round 152 =====
Database         : car_1
Prediction SQL   : SELECT DISTINCT T1.Model FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'General Motors' OR T2.Weight > 3500
Gold SQL         : SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: T2.Weight
Gold Output      : [('chevrolet',), ('buick',), ('ford',), ('plymouth',), ('pontiac',), ('amc',), ('dodge',), ('mercury',), ('oldsmobile',), ('chrysler',), ('mercedes-benz',), ('cadillac',), ('mercedes',)]

===== Eval Round 153 =====
Database         : car_1
Prediction SQL   : SELECT DISTINCT T1.Model FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.Maker = T2.Maker WHERE T2.Maker = 'General Motors' OR T2.FullName > '3500'
Gold SQL         : SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('chevrolet',), ('buick',), ('ford',), ('plymouth',), ('pontiac',), ('amc',), ('dodge',), ('mercury',), ('oldsmobile',), ('chrysler',), ('mercedes-benz',), ('cadillac',), ('mercedes',)]

===== Eval Round 154 =====
Database         : car_1
Prediction SQL   : SELECT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000
Gold SQL         : select distinct year from cars_data where weight between 3000 and 4000;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1970,), (1970,), (1970,), (1970,), (1970,), (1970,), (1970,), (1970,), (1970,), (1970,), (1970,), (1970,), (1970,), (1971,), (1971,), (1971,), (1971,), (1971,), (1971,), (1972,), (1972,), (1973,), (1973,), (1973,), (1973,), (1973,), (1973,), (1973,), (1973,), (1973,), (1974,), (1974,), (1974,), (1974,), (1974,), (1975,), (1975,), (1975,), (1975,), (1975,), (1975,), (1975,), (1975,), (1975,), (1975,), (1975,), (1975,), (1976,), (1976,), (1976,), (1976,), (1976,), (1976,), (1976,), (1976,), (1976,), (1976,), (1976,), (1976,), (1976,), (1976,), (1976,), (1977,), (1977,), (1977,), (1977,), (1977,), (1978,), (1978,), (1978,), (1978,), (1978,), (1978,), (1978,), (1978,), (1978,), (1978,), (1978,), (1978,), (1978,), (1978,), (1978,), (1978,), (1979,), (1979,), (1979,), (1979,), (1979,), (1979,), (1979,), (1979,), (1979,), (1979,), (1979,), (1979,), (1979,), (1980,), (1980,), (1980,), (1981,), (1981,), (1981,), (1981,), (1981,), (1981,), (1982,), (1982,)]
Gold Output      : [(1970,), (1971,), (1972,), (1973,), (1974,), (1975,), (1976,), (1977,), (1978,), (1979,), (1980,), (1981,), (1982,)]

===== Eval Round 155 =====
Database         : car_1
Prediction SQL   : SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000
Gold SQL         : select distinct year from cars_data where weight between 3000 and 4000;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(1970,), (1971,), (1972,), (1973,), (1974,), (1975,), (1976,), (1977,), (1978,), (1979,), (1980,), (1981,), (1982,)]
Gold Output      : [(1970,), (1971,), (1972,), (1973,), (1974,), (1975,), (1976,), (1977,), (1978,), (1979,), (1980,), (1981,), (1982,)]

===== Eval Round 156 =====
Database         : car_1
Prediction SQL   : SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1
Gold SQL         : SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('71',)]
Gold Output      : [('71',)]

===== Eval Round 157 =====
Database         : car_1
Prediction SQL   : SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1
Gold SQL         : SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('71',)]
Gold Output      : [('71',)]

===== Eval Round 158 =====
Database         : car_1
Prediction SQL   : SELECT T1.Cylinders FROM cars_data AS T1 INNER JOIN car_makers AS T2 ON T1.Id = T2.Id INNER JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'volvo' ORDER BY T1.Accelerate ASC LIMIT 1
Gold SQL         : SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(4,)]
Gold Output      : [(6,)]

===== Eval Round 159 =====
Database         : car_1
Prediction SQL   : SELECT T1.Cylinders FROM cars_data AS T1 INNER JOIN car_makers AS T2 ON T1.MakeId = T2.Id WHERE T2.Maker = 'Volvo' ORDER BY T1.Accelerate ASC LIMIT 1
Gold SQL         : SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: T1.MakeId
Gold Output      : [(6,)]

===== Eval Round 160 =====
Database         : car_1
Prediction SQL   : SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
Gold SQL         : SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(39,)]

===== Eval Round 161 =====
Database         : car_1
Prediction SQL   : SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
Gold SQL         : SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(39,)]

===== Eval Round 162 =====
Database         : car_1
Prediction SQL   : SELECT COUNT(DISTINCT Continent) FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 2)
Gold SQL         : select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(3,)]
Gold Output      : [(4,), (4,), (3,), (5,)]

===== Eval Round 163 =====
Database         : car_1
Prediction SQL   : SELECT COUNT(DISTINCT Continent) FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 2)
Gold SQL         : select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(3,)]
Gold Output      : [(4,), (4,), (3,), (5,)]

===== Eval Round 164 =====
Database         : car_1
Prediction SQL   : SELECT count(*) FROM cars_data WHERE Cylinders > 6
Gold SQL         : SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(108,)]
Gold Output      : [(108,)]

===== Eval Round 165 =====
Database         : car_1
Prediction SQL   : SELECT count(*) FROM cars_data WHERE Cylinders > 6
Gold SQL         : SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(108,)]
Gold Output      : [(108,)]

===== Eval Round 166 =====
Database         : car_1
Prediction SQL   : SELECT Model FROM car_names WHERE MakeId IN (SELECT MakeId FROM car_names c JOIN cars_data cd ON c.MakeId = cd.MakeId WHERE Cylinders = 4) ORDER BY Horsepower DESC LIMIT 1
Gold SQL         : SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: cd.MakeId
Gold Output      : [('ford',)]

===== Eval Round 167 =====
Database         : car_1
Prediction SQL   : SELECT Model FROM car_names WHERE MakeId IN (SELECT MakeId FROM car_names WHERE MakeId IN (SELECT MakeId FROM cars_data WHERE Cylinders = 4)) ORDER BY Horsepower DESC LIMIT 1
Gold SQL         : SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: Horsepower
Gold Output      : [('ford',)]

===== Eval Round 168 =====
Database         : car_1
Prediction SQL   : SELECT MakeId, Make FROM car_names WHERE MakeId IN (SELECT MakeId FROM cars_data WHERE Horsepower > (SELECT MIN(Horsepower) FROM cars_data)) AND Cylinders <= 3
Gold SQL         : SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: Cylinders
Gold Output      : [(79, 'mazda rx2 coupe'), (119, 'mazda rx3'), (251, 'mazda rx-4')]

===== Eval Round 169 =====
Database         : car_1
Prediction SQL   : SELECT MakeId, Make FROM car_names WHERE MakeId IN (SELECT MakeId FROM cars_data WHERE Horsepower < (SELECT MIN(Horsepower) FROM cars_data) AND Cylinders < 4)
Gold SQL         : select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [(79, 'mazda rx2 coupe'), (119, 'mazda rx3'), (251, 'mazda rx-4')]

===== Eval Round 170 =====
Database         : car_1
Prediction SQL   : SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
Gold SQL         : select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('null',)]
Gold Output      : [('null',)]

===== Eval Round 171 =====
Database         : car_1
Prediction SQL   : SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
Gold SQL         : select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('null',)]
Gold Output      : [('null',)]

===== Eval Round 172 =====
Database         : car_1
Prediction SQL   : SELECT T1.Model FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.Maker = T2.Maker WHERE T2.FullName != 'Ford Motor Company' AND T1.Model IN (SELECT Model FROM model_list WHERE Model IN (SELECT Model FROM car_names WHERE Make IN (SELECT Maker FROM car_makers WHERE FullName = 'Ford Motor Company'))) AND T1.Model IN (SELECT Model FROM model_list WHERE Model IN (SELECT Model FROM car_names WHERE Make IN (SELECT Maker FROM car_makers WHERE FullName != 'Ford Motor Company'))) AND T1.Model IN (SELECT Model FROM car_names WHERE Make IN (SELECT Maker FROM car_makers WHERE FullName != 'Ford Motor Company'))
Gold SQL         : SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('plymouth',), ('amc',), ('citroen',), ('buick',), ('toyota',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('chevrolet',), ('pontiac',), ('opel',), ('fiat',), ('dodge',), ('mazda',), ('volvo',), ('renault',), ('honda',), ('subaru',), ('oldsmobile',), ('mercedes-benz',), ('triumph',), ('chrysler',), ('nissan',)]

===== Eval Round 173 =====
Database         : car_1
Prediction SQL   : SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Maker WHERE T2.FullName <> 'Ford Motor Company' AND T1.Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Maker FROM car_makers WHERE FullName <> 'Ford Motor Company')) AND EXISTS (SELECT 1 FROM cars_data WHERE cars_data.Weight < 3500 AND cars_data.Id IN (SELECT Id FROM cars_data WHERE cars_data.Id IN (SELECT MakeId FROM car_names WHERE Make IN (SELECT Maker FROM car_makers WHERE FullName <> 'Ford Motor Company'))))
Gold SQL         : SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('plymouth',), ('amc',), ('citroen',), ('buick',), ('toyota',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('chevrolet',), ('pontiac',), ('opel',), ('fiat',), ('dodge',), ('mazda',), ('volvo',), ('renault',), ('honda',), ('subaru',), ('oldsmobile',), ('mercedes-benz',), ('triumph',), ('chrysler',), ('nissan',)]

===== Eval Round 174 =====
Database         : car_1
Prediction SQL   : SELECT Continent FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)
Gold SQL         : SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(2,), (4,), (5,), (5,), (4,), (1,), (1,)]
Gold Output      : [('australia',), ('brazil',), ('egypt',), ('mexico',), ('new zealand',), ('nigeria',), ('russia',)]

===== Eval Round 175 =====
Database         : car_1
Prediction SQL   : SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)
Gold SQL         : SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('russia',), ('nigeria',), ('australia',), ('new zealand',), ('egypt',), ('mexico',), ('brazil',)]
Gold Output      : [('australia',), ('brazil',), ('egypt',), ('mexico',), ('new zealand',), ('nigeria',), ('russia',)]

===== Eval Round 176 =====
Database         : car_1
Prediction SQL   : SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) >= 2) AND Maker IN (SELECT Maker FROM car_makers GROUP BY Maker HAVING COUNT(*) > 3)
Gold SQL         : select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [(2, 'volkswagen'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (8, 'nissan'), (19, 'toyota')]

===== Eval Round 177 =====
Database         : car_1
Prediction SQL   : SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN cars_data AS T3 ON T2.Maker = T3.Id GROUP BY T1.Id HAVING COUNT(T2.ModelId) >= 2 AND COUNT(T3.Id) > 3
Gold SQL         : SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(4, 'gm'), (6, 'chrysler')]
Gold Output      : [(2, 'volkswagen'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (8, 'nissan'), (19, 'toyota')]

===== Eval Round 178 =====
Database         : car_1
Prediction SQL   : SELECT c.CountryId, c.CountryName FROM countries c WHERE c.CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 3) OR c.CountryId IN (SELECT Country FROM car_makers WHERE Maker = 'fiat')
Gold SQL         : SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1, 'usa'), (2, 'germany'), (4, 'japan'), (5, 'italy')]
Gold Output      : [(1, 'usa'), (2, 'germany'), (4, 'japan'), (5, 'italy')]

===== Eval Round 179 =====
Database         : car_1
Prediction SQL   : SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 3) OR Country IN (SELECT Country FROM car_makers WHERE Maker = 'Fiat')
Gold SQL         : select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: Country
Gold Output      : [(1, 'usa'), (2, 'germany'), (4, 'japan'), (5, 'italy')]

===== Eval Round 180 =====
Database         : flight_2
Prediction SQL   : SELECT Country FROM airlines WHERE Airline = "JetBlue Airways"
Gold SQL         : SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('USA',)]
Gold Output      : [('USA',)]

===== Eval Round 181 =====
Database         : flight_2
Prediction SQL   : SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways'
Gold SQL         : SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Exec Accuracy(EX): 0
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : [('USA',)]

===== Eval Round 182 =====
Database         : flight_2
Prediction SQL   : SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways"
Gold SQL         : SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('JetBlue',)]
Gold Output      : [('JetBlue',)]

===== Eval Round 183 =====
Database         : flight_2
Prediction SQL   : SELECT Abbreviation FROM airlines WHERE Airline = "Jetblue Airways"
Gold SQL         : SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Exec Accuracy(EX): 0
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : [('JetBlue',)]

===== Eval Round 184 =====
Database         : flight_2
Prediction SQL   : SELECT Airline, Abbreviation FROM airlines WHERE Country = "USA"
Gold SQL         : SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('United Airlines', 'UAL'), ('US Airways', 'USAir'), ('Delta Airlines', 'Delta'), ('Southwest Airlines', 'Southwest'), ('American Airlines', 'American'), ('Northwest Airlines', 'Northwest'), ('Continental Airlines', 'Continental'), ('JetBlue Airways', 'JetBlue'), ('Frontier Airlines', 'Frontier'), ('AirTran Airways', 'AirTran'), ('Allegiant Air', 'Allegiant'), ('Virgin America', 'Virgin')]
Gold Output      : [('United Airlines', 'UAL'), ('US Airways', 'USAir'), ('Delta Airlines', 'Delta'), ('Southwest Airlines', 'Southwest'), ('American Airlines', 'American'), ('Northwest Airlines', 'Northwest'), ('Continental Airlines', 'Continental'), ('JetBlue Airways', 'JetBlue'), ('Frontier Airlines', 'Frontier'), ('AirTran Airways', 'AirTran'), ('Allegiant Air', 'Allegiant'), ('Virgin America', 'Virgin')]

===== Eval Round 185 =====
Database         : flight_2
Prediction SQL   : SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
Gold SQL         : SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('United Airlines', 'UAL'), ('US Airways', 'USAir'), ('Delta Airlines', 'Delta'), ('Southwest Airlines', 'Southwest'), ('American Airlines', 'American'), ('Northwest Airlines', 'Northwest'), ('Continental Airlines', 'Continental'), ('JetBlue Airways', 'JetBlue'), ('Frontier Airlines', 'Frontier'), ('AirTran Airways', 'AirTran'), ('Allegiant Air', 'Allegiant'), ('Virgin America', 'Virgin')]
Gold Output      : [('United Airlines', 'UAL'), ('US Airways', 'USAir'), ('Delta Airlines', 'Delta'), ('Southwest Airlines', 'Southwest'), ('American Airlines', 'American'), ('Northwest Airlines', 'Northwest'), ('Continental Airlines', 'Continental'), ('JetBlue Airways', 'JetBlue'), ('Frontier Airlines', 'Frontier'), ('AirTran Airways', 'AirTran'), ('Allegiant Air', 'Allegiant'), ('Virgin America', 'Virgin')]

===== Eval Round 186 =====
Database         : flight_2
Prediction SQL   : SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'
Gold SQL         : SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : []

===== Eval Round 187 =====
Database         : flight_2
Prediction SQL   : SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'
Gold SQL         : SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : []

===== Eval Round 188 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM airlines
Gold SQL         : SELECT count(*) FROM AIRLINES
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(12,)]
Gold Output      : [(12,)]

===== Eval Round 189 =====
Database         : flight_2
Prediction SQL   : SELECT COUNT(*) FROM airlines
Gold SQL         : SELECT count(*) FROM AIRLINES
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(12,)]
Gold Output      : [(12,)]

===== Eval Round 190 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM airports
Gold SQL         : SELECT count(*) FROM AIRPORTS
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(100,)]
Gold Output      : [(100,)]

===== Eval Round 191 =====
Database         : flight_2
Prediction SQL   : SELECT COUNT(*) FROM airports
Gold SQL         : SELECT count(*) FROM AIRPORTS
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(100,)]
Gold Output      : [(100,)]

===== Eval Round 192 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM flights
Gold SQL         : SELECT count(*) FROM FLIGHTS
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1200,)]
Gold Output      : [(1200,)]

===== Eval Round 193 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM flights
Gold SQL         : SELECT count(*) FROM FLIGHTS
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1200,)]
Gold Output      : [(1200,)]

===== Eval Round 194 =====
Database         : flight_2
Prediction SQL   : SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
Gold SQL         : SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('United Airlines',)]
Gold Output      : [('United Airlines',)]

===== Eval Round 195 =====
Database         : flight_2
Prediction SQL   : SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
Gold SQL         : SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('United Airlines',)]
Gold Output      : [('United Airlines',)]

===== Eval Round 196 =====
Database         : flight_2
Prediction SQL   : SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
Gold SQL         : SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(12,)]
Gold Output      : [(12,)]

===== Eval Round 197 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM airlines WHERE Country = 'USA'
Gold SQL         : SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(12,)]
Gold Output      : [(12,)]

===== Eval Round 198 =====
Database         : flight_2
Prediction SQL   : SELECT City, Country FROM airports WHERE AirportName = 'Alton'
Gold SQL         : SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : []

===== Eval Round 199 =====
Database         : flight_2
Prediction SQL   : SELECT City, Country FROM airports WHERE AirportName = 'Alton'
Gold SQL         : SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : []

===== Eval Round 200 =====
Database         : flight_2
Prediction SQL   : SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
Gold SQL         : SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Colorado Plains Regional Airport ',)]
Gold Output      : [('Colorado Plains Regional Airport ',)]

===== Eval Round 201 =====
Database         : flight_2
Prediction SQL   : SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
Gold SQL         : SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Colorado Plains Regional Airport ',)]
Gold Output      : [('Colorado Plains Regional Airport ',)]

===== Eval Round 202 =====
Database         : flight_2
Prediction SQL   : SELECT AirportName FROM airports WHERE City = 'Aberdeen'
Gold SQL         : SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : []

===== Eval Round 203 =====
Database         : flight_2
Prediction SQL   : SELECT AirportName FROM airports WHERE City = 'Aberdeen'
Gold SQL         : SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : []

===== Eval Round 204 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM flights WHERE SourceAirport = 'APG'
Gold SQL         : SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 205 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM flights WHERE SourceAirport = 'APG'
Gold SQL         : SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 206 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM flights WHERE DestAirport = 'ATO'
Gold SQL         : SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 207 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM flights WHERE DestAirport = 'ATO'
Gold SQL         : SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 208 =====
Database         : flight_2
Prediction SQL   : SELECT COUNT(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
Gold SQL         : SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 209 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM flights WHERE SourceAirport = 'ABR'
Gold SQL         : SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 210 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
Gold SQL         : SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 211 =====
Database         : flight_2
Prediction SQL   : SELECT COUNT(*) FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
Gold SQL         : SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 212 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Ashley')
Gold SQL         : SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 213 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM flights WHERE SourceAirport = 'ABR' AND DestAirport = 'ASH'
Gold SQL         : SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 214 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM flights WHERE Airline = 'JetBlue Airways'
Gold SQL         : SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(100,)]

===== Eval Round 215 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM flights WHERE Airline = "Jetblue Airways"
Gold SQL         : SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(100,)]

===== Eval Round 216 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'
Gold SQL         : SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 217 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'
Gold SQL         : SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 218 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'
Gold SQL         : SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 219 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'
Gold SQL         : SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 220 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
Gold SQL         : SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 221 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ABR'
Gold SQL         : SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 222 =====
Database         : flight_2
Prediction SQL   : SELECT City FROM flights GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: City
Gold Output      : []

===== Eval Round 223 =====
Database         : flight_2
Prediction SQL   : SELECT City FROM airports WHERE AirportCode IN (SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1)
Gold SQL         : SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 224 =====
Database         : flight_2
Prediction SQL   : SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) DESC LIMIT 1
Gold SQL         : SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(' AXG',)]
Gold Output      : []

===== Eval Round 225 =====
Database         : flight_2
Prediction SQL   : SELECT City FROM flights GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: City
Gold Output      : []

===== Eval Round 226 =====
Database         : flight_2
Prediction SQL   : SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) DESC LIMIT 1
Gold SQL         : SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : False
Pred Output      : [(' AXG',)]
Gold Output      : []

===== Eval Round 227 =====
Database         : flight_2
Prediction SQL   : SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : False
Pred Output      : [(' AXG',)]
Gold Output      : []

===== Eval Round 228 =====
Database         : flight_2
Prediction SQL   : SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) LIMIT 1
Gold SQL         : SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : False
Pred Output      : [(' AID',)]
Gold Output      : []

===== Eval Round 229 =====
Database         : flight_2
Prediction SQL   : SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) LIMIT 1
Gold SQL         : SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : False
Pred Output      : [(' AID',)]
Gold Output      : []

===== Eval Round 230 =====
Database         : flight_2
Prediction SQL   : SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(1,)]
Gold Output      : [('Virgin America',)]

===== Eval Round 231 =====
Database         : flight_2
Prediction SQL   : SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(1,)]
Gold Output      : [('Virgin America',)]

===== Eval Round 232 =====
Database         : flight_2
Prediction SQL   : SELECT Abbreviation, Country FROM airlines WHERE uid = (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) LIMIT 1)
Gold SQL         : SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('UAL', 'USA')]
Gold Output      : [('AirTran', 'USA')]

===== Eval Round 233 =====
Database         : flight_2
Prediction SQL   : SELECT A.Abbreviation, A.Country FROM airlines A JOIN flights F ON A.Airline = F.Airline GROUP BY A.uid ORDER BY COUNT(F.FlightNo) LIMIT 1
Gold SQL         : SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('AirTran', 'USA')]

===== Eval Round 234 =====
Database         : flight_2
Prediction SQL   : SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'AHD'
Gold SQL         : SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 235 =====
Database         : flight_2
Prediction SQL   : SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'AHD'
Gold SQL         : SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 236 =====
Database         : flight_2
Prediction SQL   : SELECT DISTINCT Airline FROM flights WHERE DestAirport = 'AHD'
Gold SQL         : SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 237 =====
Database         : flight_2
Prediction SQL   : SELECT DISTINCT Airline FROM flights WHERE DestAirport = 'AHD'
Gold SQL         : SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 238 =====
Database         : flight_2
Prediction SQL   : SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'APG' INTERSECT SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'CVO'
Gold SQL         : SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 239 =====
Database         : flight_2
Prediction SQL   : SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'APG' INTERSECT SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'CVO'
Gold SQL         : SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 240 =====
Database         : flight_2
Prediction SQL   : SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'CVO' AND Airline NOT IN (SELECT Airline FROM flights WHERE DestAirport = 'APG')
Gold SQL         : SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 241 =====
Database         : flight_2
Prediction SQL   : SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'CVO' AND Airline NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG')
Gold SQL         : SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 242 =====
Database         : flight_2
Prediction SQL   : SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10
Gold SQL         : SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,)]
Gold Output      : [('AirTran Airways',), ('Allegiant Air',), ('American Airlines',), ('Continental Airlines',), ('Delta Airlines',), ('Frontier Airlines',), ('JetBlue Airways',), ('Northwest Airlines',), ('Southwest Airlines',), ('US Airways',), ('United Airlines',), ('Virgin America',)]

===== Eval Round 243 =====
Database         : flight_2
Prediction SQL   : SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10
Gold SQL         : SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,)]
Gold Output      : [('AirTran Airways',), ('Allegiant Air',), ('American Airlines',), ('Continental Airlines',), ('Delta Airlines',), ('Frontier Airlines',), ('JetBlue Airways',), ('Northwest Airlines',), ('Southwest Airlines',), ('US Airways',), ('United Airlines',), ('Virgin America',)]

===== Eval Round 244 =====
Database         : flight_2
Prediction SQL   : SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200
Gold SQL         : SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,)]
Gold Output      : [('AirTran Airways',), ('Allegiant Air',), ('American Airlines',), ('Continental Airlines',), ('Delta Airlines',), ('Frontier Airlines',), ('JetBlue Airways',), ('Northwest Airlines',), ('Southwest Airlines',), ('US Airways',), ('United Airlines',), ('Virgin America',)]

===== Eval Round 245 =====
Database         : flight_2
Prediction SQL   : SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200
Gold SQL         : SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,)]
Gold Output      : [('AirTran Airways',), ('Allegiant Air',), ('American Airlines',), ('Continental Airlines',), ('Delta Airlines',), ('Frontier Airlines',), ('JetBlue Airways',), ('Northwest Airlines',), ('Southwest Airlines',), ('US Airways',), ('United Airlines',), ('Virgin America',)]

===== Eval Round 246 =====
Database         : flight_2
Prediction SQL   : SELECT FlightNo FROM flights WHERE Airline = "United Airlines"
Gold SQL         : SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [(28,), (29,), (44,), (45,), (54,), (55,), (90,), (91,), (108,), (109,), (142,), (143,), (148,), (149,), (198,), (199,), (226,), (227,), (276,), (277,), (308,), (309,), (326,), (327,), (370,), (371,), (414,), (415,), (424,), (425,), (470,), (471,), (520,), (521,), (556,), (557,), (560,), (561,), (604,), (605,), (608,), (609,), (626,), (627,), (658,), (659,), (708,), (709,), (744,), (745,), (754,), (755,), (786,), (787,), (810,), (811,), (828,), (829,), (878,), (879,), (888,), (889,), (900,), (901,), (924,), (925,), (946,), (947,), (996,), (997,), (1000,), (1001,), (1026,), (1027,), (1062,), (1063,), (1068,), (1069,), (1100,), (1101,), (1144,), (1145,), (1166,), (1167,), (1168,), (1169,), (1192,), (1193,), (1208,), (1209,), (1216,), (1217,), (1250,), (1251,), (1274,), (1275,), (1284,), (1285,), (1328,), (1329,)]

===== Eval Round 247 =====
Database         : flight_2
Prediction SQL   : SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'
Gold SQL         : SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [(28,), (29,), (44,), (45,), (54,), (55,), (90,), (91,), (108,), (109,), (142,), (143,), (148,), (149,), (198,), (199,), (226,), (227,), (276,), (277,), (308,), (309,), (326,), (327,), (370,), (371,), (414,), (415,), (424,), (425,), (470,), (471,), (520,), (521,), (556,), (557,), (560,), (561,), (604,), (605,), (608,), (609,), (626,), (627,), (658,), (659,), (708,), (709,), (744,), (745,), (754,), (755,), (786,), (787,), (810,), (811,), (828,), (829,), (878,), (879,), (888,), (889,), (900,), (901,), (924,), (925,), (946,), (947,), (996,), (997,), (1000,), (1001,), (1026,), (1027,), (1062,), (1063,), (1068,), (1069,), (1100,), (1101,), (1144,), (1145,), (1166,), (1167,), (1168,), (1169,), (1192,), (1193,), (1208,), (1209,), (1216,), (1217,), (1250,), (1251,), (1274,), (1275,), (1284,), (1285,), (1328,), (1329,)]

===== Eval Round 248 =====
Database         : flight_2
Prediction SQL   : SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'
Gold SQL         : SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : []

===== Eval Round 249 =====
Database         : flight_2
Prediction SQL   : SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'
Gold SQL         : SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : []

===== Eval Round 250 =====
Database         : flight_2
Prediction SQL   : SELECT FlightNo FROM flights WHERE DestAirport = 'APG'
Gold SQL         : SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : []

===== Eval Round 251 =====
Database         : flight_2
Prediction SQL   : SELECT FlightNo FROM flights WHERE DestAirport = 'APG'
Gold SQL         : SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : []

===== Eval Round 252 =====
Database         : flight_2
Prediction SQL   : SELECT FlightNo FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
Gold SQL         : SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 253 =====
Database         : flight_2
Prediction SQL   : SELECT FlightNo FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
Gold SQL         : SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 254 =====
Database         : flight_2
Prediction SQL   : SELECT FlightNo FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
Gold SQL         : SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 255 =====
Database         : flight_2
Prediction SQL   : SELECT FlightNo FROM flights WHERE DestAirport = 'ABR'
Gold SQL         : SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 256 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City IN ('Aberdeen', 'Abilene'))
Gold SQL         : SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 257 =====
Database         : flight_2
Prediction SQL   : SELECT count(*) FROM flights WHERE DestAirport IN ('ABR', 'ABI')
Gold SQL         : SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 258 =====
Database         : flight_2
Prediction SQL   : SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)
Gold SQL         : SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Phillips AAF ',), ('Municipal ',), ('Dyess AFB ',), ('Municipal ',), ('Virginia Highlands ',), ('Ada ',), ('Adak Island Ns ',), ('Lenawee County ',), ('Municipal ',), ('Municipal ',), ('Ainsworth ',), ('Akhiok SPB ',), ('Spb ',), ('Akiak ',), ('Colorado Plains Regional Airport ',), ('Akron/canton Regional ',), ('Fulton International ',), ('Akutan ',), ('Alakanuk ',), ('NAS ',), ('Holloman AFB ',), ('Municipal ',), ('Municipal ',), ('Albany NAS ',), ('Dougherty County ',), ('Albany International ',), ('Albany ',), ('Albert Lea ',), ('Albuquerque International ',), ('Aleknagik ',), ('Aleneva ',), ('Thomas C Russell Fld ',), ('Alexandria International ',), ('Esler Field ',), ('Alexandria ',), ('Alexandria Bay ',), ('Algona ',), ('International ',), ('George Downer ',), ('Alitak SPB ',), ('Allakaket ',), ('Alliance ',), ('Gratiot Community ',), ('Alpena County Regional ',), ('Alpine ',), ('Alton ',), ('Altus AFB ',), ('Municipal ',), ('Alyeska ',), ('Rick Husband Amarillo International ',), ('Tradewind ',), ('Ambler ',), ('Amchitka ',), ('Municipal ',), ('Ames ',), ('Zahns ',), ('Amook ',), ('Anacortes ',), ('USN Heliport ',), ('Orange County Steel Salvage Heliport ',), ('Anaktuvuk ',), ('Elmendorf Afb ',), ('Ted Stevens Anchorage International Airport ',), ('Merrill Field ',), ('Municipal ',), ('Anderson ',), ('Andrews ',), ('Angel Fire ',), ('Tri-State Steuben Cty ',), ('Angoon ',), ('Rollang Field ',), ('Aniak ',), ('Anita Bay ',), ('Municipal ',), ('Lee ',), ('Annette Island ',), ('Anniston Metropolitan ',), ('Ft Mcclellan Bus Trml ',), ('Reilly AHP ',), ('Anthony ',), ('Antlers ',), ('Anvik ',), ('Municipal ',), ('Apple Valley ',), ('Outagamie County ',), ('Municipal ',), ('Arcata ',), ('Arctic Village ',), ('Downtown ',), ('Ardmore Municipal Arpt ',), ('US Army Heliport ',), ('Artesia ',), ('Asbury Park ',), ('Ashland ',), ('Ashley ',), ('Aspen ',), ('Astoria ',), ('Athens ',), ('Ohio University ',), ('McMinn County ',)]
Gold Output      : [('Phillips AAF ',), ('Municipal ',), ('Dyess AFB ',), ('Municipal ',), ('Virginia Highlands ',), ('Ada ',), ('Adak Island Ns ',), ('Lenawee County ',), ('Municipal ',), ('Municipal ',), ('Ainsworth ',), ('Akhiok SPB ',), ('Spb ',), ('Akiak ',), ('Colorado Plains Regional Airport ',), ('Akron/canton Regional ',), ('Fulton International ',), ('Akutan ',), ('Alakanuk ',), ('NAS ',), ('Holloman AFB ',), ('Municipal ',), ('Municipal ',), ('Albany NAS ',), ('Dougherty County ',), ('Albany International ',), ('Albany ',), ('Albert Lea ',), ('Albuquerque International ',), ('Aleknagik ',), ('Aleneva ',), ('Thomas C Russell Fld ',), ('Alexandria International ',), ('Esler Field ',), ('Alexandria ',), ('Alexandria Bay ',), ('Algona ',), ('International ',), ('George Downer ',), ('Alitak SPB ',), ('Allakaket ',), ('Alliance ',), ('Gratiot Community ',), ('Alpena County Regional ',), ('Alpine ',), ('Alton ',), ('Altus AFB ',), ('Municipal ',), ('Alyeska ',), ('Rick Husband Amarillo International ',), ('Tradewind ',), ('Ambler ',), ('Amchitka ',), ('Municipal ',), ('Ames ',), ('Zahns ',), ('Amook ',), ('Anacortes ',), ('USN Heliport ',), ('Orange County Steel Salvage Heliport ',), ('Anaktuvuk ',), ('Elmendorf Afb ',), ('Ted Stevens Anchorage International Airport ',), ('Merrill Field ',), ('Municipal ',), ('Anderson ',), ('Andrews ',), ('Angel Fire ',), ('Tri-State Steuben Cty ',), ('Angoon ',), ('Rollang Field ',), ('Aniak ',), ('Anita Bay ',), ('Municipal ',), ('Lee ',), ('Annette Island ',), ('Anniston Metropolitan ',), ('Ft Mcclellan Bus Trml ',), ('Reilly AHP ',), ('Anthony ',), ('Antlers ',), ('Anvik ',), ('Municipal ',), ('Apple Valley ',), ('Outagamie County ',), ('Municipal ',), ('Arcata ',), ('Arctic Village ',), ('Downtown ',), ('Ardmore Municipal Arpt ',), ('US Army Heliport ',), ('Artesia ',), ('Asbury Park ',), ('Ashland ',), ('Ashley ',), ('Aspen ',), ('Astoria ',), ('Athens ',), ('Ohio University ',), ('McMinn County ',)]

===== Eval Round 259 =====
Database         : flight_2
Prediction SQL   : SELECT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)
Gold SQL         : SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('AAF',), ('ABI',), ('ABL',), ('ABQ',), ('ABR',), ('ABY',), ('ACV',), ('ADG',), ('ADK',), ('ADM',), ('ADR',), ('ADT',), ('AED',), ('AEL',), ('AET',), ('AEX',), ('AFO',), ('AGN',), ('AHD',), ('AHF',), ('AHH',), ('AHN',), ('AHT',), ('AIA',), ('AIB',), ('AID',), ('AIK',), ('AIV',), ('AKC',), ('AKI',), ('AKK',), ('AKO',), ('AKP',), ('ALB',), ('ALE',), ('ALI',), ('ALM',), ('ALN',), ('ALS',), ('ALX',), ('ALZ',), ('AMA',), ('AMN',), ('AMW',), ('ANA',), ('ANB',), ('ANC',), ('AND',), ('ANI',), ('ANN',), ('ANP',), ('ANQ',), ('ANV',), ('ANW',), ('ANY',), ('AOS',), ('APG',), ('APN',), ('APV',), ('AQY',), ('ARB',), ('ARC',), ('ARX',), ('ASE',), ('AST',), ('ASX',), ('ASY',), ('ATE',), ('ATO',), ('ATS',), ('ATW',), ('AUK',), ('AXB',), ('AXG',), ('AXN',), ('AXS',), ('AXX',), ('AYZ',), ('CAK',), ('CVO',), ('DYS',), ('EDF',), ('ESF',), ('HMN',), ('JLH',), ('KKI',), ('KQA',), ('LTS',), ('MMI',), ('MRI',), ('NAB',), ('NDV',), ('NGZ',), ('OTS',), ('QAW',), ('RFK',), ('RLI',), ('TDW',), ('VJI',), ('WKK',)]
Gold Output      : [('Phillips AAF ',), ('Municipal ',), ('Dyess AFB ',), ('Municipal ',), ('Virginia Highlands ',), ('Ada ',), ('Adak Island Ns ',), ('Lenawee County ',), ('Municipal ',), ('Municipal ',), ('Ainsworth ',), ('Akhiok SPB ',), ('Spb ',), ('Akiak ',), ('Colorado Plains Regional Airport ',), ('Akron/canton Regional ',), ('Fulton International ',), ('Akutan ',), ('Alakanuk ',), ('NAS ',), ('Holloman AFB ',), ('Municipal ',), ('Municipal ',), ('Albany NAS ',), ('Dougherty County ',), ('Albany International ',), ('Albany ',), ('Albert Lea ',), ('Albuquerque International ',), ('Aleknagik ',), ('Aleneva ',), ('Thomas C Russell Fld ',), ('Alexandria International ',), ('Esler Field ',), ('Alexandria ',), ('Alexandria Bay ',), ('Algona ',), ('International ',), ('George Downer ',), ('Alitak SPB ',), ('Allakaket ',), ('Alliance ',), ('Gratiot Community ',), ('Alpena County Regional ',), ('Alpine ',), ('Alton ',), ('Altus AFB ',), ('Municipal ',), ('Alyeska ',), ('Rick Husband Amarillo International ',), ('Tradewind ',), ('Ambler ',), ('Amchitka ',), ('Municipal ',), ('Ames ',), ('Zahns ',), ('Amook ',), ('Anacortes ',), ('USN Heliport ',), ('Orange County Steel Salvage Heliport ',), ('Anaktuvuk ',), ('Elmendorf Afb ',), ('Ted Stevens Anchorage International Airport ',), ('Merrill Field ',), ('Municipal ',), ('Anderson ',), ('Andrews ',), ('Angel Fire ',), ('Tri-State Steuben Cty ',), ('Angoon ',), ('Rollang Field ',), ('Aniak ',), ('Anita Bay ',), ('Municipal ',), ('Lee ',), ('Annette Island ',), ('Anniston Metropolitan ',), ('Ft Mcclellan Bus Trml ',), ('Reilly AHP ',), ('Anthony ',), ('Antlers ',), ('Anvik ',), ('Municipal ',), ('Apple Valley ',), ('Outagamie County ',), ('Municipal ',), ('Arcata ',), ('Arctic Village ',), ('Downtown ',), ('Ardmore Municipal Arpt ',), ('US Army Heliport ',), ('Artesia ',), ('Asbury Park ',), ('Ashland ',), ('Ashley ',), ('Aspen ',), ('Astoria ',), ('Athens ',), ('Ohio University ',), ('McMinn County ',)]

===== Eval Round 260 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT count(*) FROM employee
Gold SQL         : SELECT count(*) FROM employee
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(10,)]
Gold Output      : [(10,)]

===== Eval Round 261 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT count(*) FROM employee
Gold SQL         : SELECT count(*) FROM employee
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(10,)]
Gold Output      : [(10,)]

===== Eval Round 262 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT Name FROM employee ORDER BY Age ASC
Gold SQL         : SELECT name FROM employee ORDER BY age
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('George Chuter',), ('Andrew Sheridan',), ('Lee Mears',), ('Tim Payne',), ('Matt Stevens',), ('Jason Hobson',), ('Steve Borthwick',), ('Louis Deacon',), ('Phil Vickery',), ('Mark Regan',)]
Gold Output      : [('George Chuter',), ('Andrew Sheridan',), ('Lee Mears',), ('Tim Payne',), ('Matt Stevens',), ('Jason Hobson',), ('Steve Borthwick',), ('Louis Deacon',), ('Phil Vickery',), ('Mark Regan',)]

===== Eval Round 263 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT Name FROM employee ORDER BY Age ASC
Gold SQL         : SELECT name FROM employee ORDER BY age
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('George Chuter',), ('Andrew Sheridan',), ('Lee Mears',), ('Tim Payne',), ('Matt Stevens',), ('Jason Hobson',), ('Steve Borthwick',), ('Louis Deacon',), ('Phil Vickery',), ('Mark Regan',)]
Gold Output      : [('George Chuter',), ('Andrew Sheridan',), ('Lee Mears',), ('Tim Payne',), ('Matt Stevens',), ('Jason Hobson',), ('Steve Borthwick',), ('Louis Deacon',), ('Phil Vickery',), ('Mark Regan',)]

===== Eval Round 264 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT City, COUNT(*) FROM employee GROUP BY City
Gold SQL         : SELECT count(*) ,  city FROM employee GROUP BY city
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Bath', 3), ('Bristol', 3), ('Leicester', 1), ('Sale', 1), ('Wasps', 2)]
Gold Output      : [(3, 'Bath'), (3, 'Bristol'), (1, 'Leicester'), (1, 'Sale'), (2, 'Wasps')]

===== Eval Round 265 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT City, COUNT(*) FROM employee GROUP BY City
Gold SQL         : SELECT count(*) ,  city FROM employee GROUP BY city
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Bath', 3), ('Bristol', 3), ('Leicester', 1), ('Sale', 1), ('Wasps', 2)]
Gold Output      : [(3, 'Bath'), (3, 'Bristol'), (1, 'Leicester'), (1, 'Sale'), (2, 'Wasps')]

===== Eval Round 266 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1
Gold SQL         : SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Bath',)]
Gold Output      : [('Bath',)]

===== Eval Round 267 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1
Gold SQL         : SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Bath',)]
Gold Output      : [('Bath',)]

===== Eval Round 268 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT Location, COUNT(*) FROM shop GROUP BY Location
Gold SQL         : SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Espoo', 1), ('Helsinki', 1), ('Jakobstad', 1), ('Kotka', 1), ('Kuopio', 1), ('Lahti', 1), ('Mariehamn', 1), ('Turku', 1), ('Valkeakoski', 1)]
Gold Output      : [(1, 'Espoo'), (1, 'Helsinki'), (1, 'Jakobstad'), (1, 'Kotka'), (1, 'Kuopio'), (1, 'Lahti'), (1, 'Mariehamn'), (1, 'Turku'), (1, 'Valkeakoski')]

===== Eval Round 269 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT Location, COUNT(*) FROM shop GROUP BY Location
Gold SQL         : SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Espoo', 1), ('Helsinki', 1), ('Jakobstad', 1), ('Kotka', 1), ('Kuopio', 1), ('Lahti', 1), ('Mariehamn', 1), ('Turku', 1), ('Valkeakoski', 1)]
Gold Output      : [(1, 'Espoo'), (1, 'Helsinki'), (1, 'Jakobstad'), (1, 'Kotka'), (1, 'Kuopio'), (1, 'Lahti'), (1, 'Mariehamn'), (1, 'Turku'), (1, 'Valkeakoski')]

===== Eval Round 270 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1
Gold SQL         : SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Ilkka Mäkelä', 'Lahden Stadion')]
Gold Output      : [('Ilkka Mäkelä', 'Lahden Stadion')]

===== Eval Round 271 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1
Gold SQL         : SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Ilkka Mäkelä', 'Lahden Stadion')]
Gold Output      : [('Ilkka Mäkelä', 'Lahden Stadion')]

===== Eval Round 272 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT MIN(Number_products), MAX(Number_products) FROM shop
Gold SQL         : SELECT min(Number_products) ,  max(Number_products) FROM shop
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1600, 15000)]
Gold Output      : [(1600, 15000)]

===== Eval Round 273 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT MIN(Number_products), MAX(Number_products) FROM shop
Gold SQL         : SELECT min(Number_products) ,  max(Number_products) FROM shop
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1600, 15000)]
Gold Output      : [(1600, 15000)]

===== Eval Round 274 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT Name, Location, District FROM shop ORDER BY Number_products DESC
Gold SQL         : SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('FC Lahti', 'Lahti', 'Lahden Stadion'), ('HJK', 'Helsinki', 'Finnair Stadium'), ('FC Inter', 'Turku', 'Veritas Stadion'), ('FC Honka', 'Espoo', 'Tapiolan Urheilupuisto'), ('FF Jaro', 'Jakobstad', 'Jakobstads Centralplan'), ('FC KooTeePee', 'Kotka', 'Arto Tolsa Areena'), ('FC Haka', 'Valkeakoski', 'Tehtaan kenttä'), ('KuPS', 'Kuopio', 'Magnum Areena'), ('IFK Mariehamn', 'Mariehamn', 'Wiklöf Holding Arena')]
Gold Output      : [('FC Lahti', 'Lahti', 'Lahden Stadion'), ('HJK', 'Helsinki', 'Finnair Stadium'), ('FC Inter', 'Turku', 'Veritas Stadion'), ('FC Honka', 'Espoo', 'Tapiolan Urheilupuisto'), ('FF Jaro', 'Jakobstad', 'Jakobstads Centralplan'), ('FC KooTeePee', 'Kotka', 'Arto Tolsa Areena'), ('FC Haka', 'Valkeakoski', 'Tehtaan kenttä'), ('KuPS', 'Kuopio', 'Magnum Areena'), ('IFK Mariehamn', 'Mariehamn', 'Wiklöf Holding Arena')]

===== Eval Round 275 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT Name, Location, District FROM shop ORDER BY Number_products DESC
Gold SQL         : SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('FC Lahti', 'Lahti', 'Lahden Stadion'), ('HJK', 'Helsinki', 'Finnair Stadium'), ('FC Inter', 'Turku', 'Veritas Stadion'), ('FC Honka', 'Espoo', 'Tapiolan Urheilupuisto'), ('FF Jaro', 'Jakobstad', 'Jakobstads Centralplan'), ('FC KooTeePee', 'Kotka', 'Arto Tolsa Areena'), ('FC Haka', 'Valkeakoski', 'Tehtaan kenttä'), ('KuPS', 'Kuopio', 'Magnum Areena'), ('IFK Mariehamn', 'Mariehamn', 'Wiklöf Holding Arena')]
Gold Output      : [('FC Lahti', 'Lahti', 'Lahden Stadion'), ('HJK', 'Helsinki', 'Finnair Stadium'), ('FC Inter', 'Turku', 'Veritas Stadion'), ('FC Honka', 'Espoo', 'Tapiolan Urheilupuisto'), ('FF Jaro', 'Jakobstad', 'Jakobstads Centralplan'), ('FC KooTeePee', 'Kotka', 'Arto Tolsa Areena'), ('FC Haka', 'Valkeakoski', 'Tehtaan kenttä'), ('KuPS', 'Kuopio', 'Magnum Areena'), ('IFK Mariehamn', 'Mariehamn', 'Wiklöf Holding Arena')]

===== Eval Round 276 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)
Gold SQL         : SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('HJK',), ('FC Inter',), ('FC Lahti',)]
Gold Output      : [('HJK',), ('FC Inter',), ('FC Lahti',)]

===== Eval Round 277 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)
Gold SQL         : SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('HJK',), ('FC Inter',), ('FC Lahti',)]
Gold Output      : [('HJK',), ('FC Inter',), ('FC Lahti',)]

===== Eval Round 278 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(ev.Employee_ID) DESC LIMIT 1
Gold SQL         : SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('George Chuter',)]
Gold Output      : [('George Chuter',)]

===== Eval Round 279 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT e.Name FROM employee e JOIN evaluation eva ON e.Employee_ID = eva.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(eva.Employee_ID) DESC LIMIT 1
Gold SQL         : SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('George Chuter',)]
Gold Output      : [('George Chuter',)]

===== Eval Round 280 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT E.Name FROM employee AS E JOIN evaluation AS EV ON E.Employee_ID = EV.Employee_ID ORDER BY EV.Bonus DESC LIMIT 1
Gold SQL         : SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Louis Deacon',)]
Gold Output      : [('Louis Deacon',)]

===== Eval Round 281 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1
Gold SQL         : SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Louis Deacon',)]
Gold Output      : [('Louis Deacon',)]

===== Eval Round 282 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
Gold SQL         : SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Mark Regan',), ('Tim Payne',), ('Andrew Sheridan',), ('Phil Vickery',), ('Steve Borthwick',)]
Gold Output      : [('Mark Regan',), ('Tim Payne',), ('Andrew Sheridan',), ('Phil Vickery',), ('Steve Borthwick',)]

===== Eval Round 283 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
Gold SQL         : SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Mark Regan',), ('Tim Payne',), ('Andrew Sheridan',), ('Phil Vickery',), ('Steve Borthwick',)]
Gold Output      : [('Mark Regan',), ('Tim Payne',), ('Andrew Sheridan',), ('Phil Vickery',), ('Steve Borthwick',)]

===== Eval Round 284 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID ORDER BY count(h.Employee_ID) DESC LIMIT 1
Gold SQL         : SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('FC Haka',)]
Gold Output      : [('FC Haka',)]

===== Eval Round 285 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1
Gold SQL         : SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('FC Haka',)]
Gold Output      : [('FC Haka',)]

===== Eval Round 286 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)
Gold SQL         : SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('FC Honka',), ('KuPS',), ('IFK Mariehamn',)]
Gold Output      : [('FC Honka',), ('KuPS',), ('IFK Mariehamn',)]

===== Eval Round 287 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)
Gold SQL         : SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('FC Honka',), ('KuPS',), ('IFK Mariehamn',)]
Gold Output      : [('FC Honka',), ('KuPS',), ('IFK Mariehamn',)]

===== Eval Round 288 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT T1.Name, COUNT(T2.Employee_ID) FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID
Gold SQL         : SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('FC Haka', 2), ('HJK', 1), ('FC Inter', 1), ('FF Jaro', 1), ('FC KooTeePee', 1), ('FC Lahti', 1)]
Gold Output      : [(2, 'FC Haka'), (1, 'FC Inter'), (1, 'FC KooTeePee'), (1, 'FC Lahti'), (1, 'FF Jaro'), (1, 'HJK')]

===== Eval Round 289 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT COUNT(e.Employee_ID), s.Name FROM employee e JOIN hiring h ON e.Employee_ID = h.Employee_ID JOIN shop s ON h.Shop_ID = s.Shop_ID GROUP BY s.Shop_ID
Gold SQL         : SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(2, 'FC Haka'), (1, 'HJK'), (1, 'FC Inter'), (1, 'FF Jaro'), (1, 'FC KooTeePee'), (1, 'FC Lahti')]
Gold Output      : [(2, 'FC Haka'), (1, 'FC Inter'), (1, 'FC KooTeePee'), (1, 'FC Lahti'), (1, 'FF Jaro'), (1, 'HJK')]

===== Eval Round 290 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT sum(Bonus) FROM evaluation
Gold SQL         : SELECT sum(bonus) FROM evaluation
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(19500.0,)]
Gold Output      : [(19500.0,)]

===== Eval Round 291 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT SUM(Bonus) FROM evaluation
Gold SQL         : SELECT sum(bonus) FROM evaluation
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(19500.0,)]
Gold Output      : [(19500.0,)]

===== Eval Round 292 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT * FROM hiring
Gold SQL         : SELECT * FROM hiring
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F'), (4, 4, '2012', 'T'), (5, 5, '2013', 'T'), (2, 6, '2010', 'F'), (6, 7, '2008', 'T')]
Gold Output      : [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F'), (4, 4, '2012', 'T'), (5, 5, '2013', 'T'), (2, 6, '2010', 'F'), (6, 7, '2008', 'T')]

===== Eval Round 293 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT * FROM hiring
Gold SQL         : SELECT * FROM hiring
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F'), (4, 4, '2012', 'T'), (5, 5, '2013', 'T'), (2, 6, '2010', 'F'), (6, 7, '2008', 'T')]
Gold Output      : [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F'), (4, 4, '2012', 'T'), (5, 5, '2013', 'T'), (2, 6, '2010', 'F'), (6, 7, '2008', 'T')]

===== Eval Round 294 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000
Gold SQL         : SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : []

===== Eval Round 295 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT DISTINCT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT DISTINCT District FROM shop WHERE Number_products > 10000
Gold SQL         : SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : []

===== Eval Round 296 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT COUNT(DISTINCT Location) FROM shop
Gold SQL         : SELECT count(DISTINCT LOCATION) FROM shop
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(9,)]
Gold Output      : [(9,)]

===== Eval Round 297 =====
Database         : employee_hire_evaluation
Prediction SQL   : SELECT count(distinct Location) FROM shop
Gold SQL         : SELECT count(DISTINCT LOCATION) FROM shop
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(9,)]
Gold Output      : [(9,)]

===== Eval Round 298 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT COUNT(*) FROM Documents
Gold SQL         : SELECT count(*) FROM Documents
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(15,)]
Gold Output      : [(15,)]

===== Eval Round 299 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT COUNT(*) FROM Documents
Gold SQL         : SELECT count(*) FROM Documents
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(15,)]
Gold Output      : [(15,)]

===== Eval Round 300 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Document_ID, Document_Name, Document_Description FROM Documents
Gold SQL         : SELECT document_id ,  document_name ,  document_description FROM Documents
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(0, 'Introduction of OS', 'n'), (1, 'Understanding DB', 'y'), (3, 'Summer Show', 'u'), (76, 'Robbin CV', 'y'), (80, 'Welcome to NY', 'h'), (82, 'Data base', 'w'), (2394, 'Customer reviews', 'y'), (3830, 'Do not panic', 'k'), (33930, 'How Google people work', 'z'), (50123, 'Learning French', 'r'), (651512, 'How to write a CV', 'f'), (801801, 'How to read a book', 'w'), (3540024, 'Palm reading', 'y'), (16514113, 'A history of Arts', 'h'), (385906526, 'About Korea', 'b')]
Gold Output      : [(0, 'Introduction of OS', 'n'), (1, 'Understanding DB', 'y'), (3, 'Summer Show', 'u'), (76, 'Robbin CV', 'y'), (80, 'Welcome to NY', 'h'), (82, 'Data base', 'w'), (2394, 'Customer reviews', 'y'), (3830, 'Do not panic', 'k'), (33930, 'How Google people work', 'z'), (50123, 'Learning French', 'r'), (651512, 'How to write a CV', 'f'), (801801, 'How to read a book', 'w'), (3540024, 'Palm reading', 'y'), (16514113, 'A history of Arts', 'h'), (385906526, 'About Korea', 'b')]

===== Eval Round 301 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Document_ID, Document_Name, Document_Description FROM Documents
Gold SQL         : SELECT document_id ,  document_name ,  document_description FROM Documents
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(0, 'Introduction of OS', 'n'), (1, 'Understanding DB', 'y'), (3, 'Summer Show', 'u'), (76, 'Robbin CV', 'y'), (80, 'Welcome to NY', 'h'), (82, 'Data base', 'w'), (2394, 'Customer reviews', 'y'), (3830, 'Do not panic', 'k'), (33930, 'How Google people work', 'z'), (50123, 'Learning French', 'r'), (651512, 'How to write a CV', 'f'), (801801, 'How to read a book', 'w'), (3540024, 'Palm reading', 'y'), (16514113, 'A history of Arts', 'h'), (385906526, 'About Korea', 'b')]
Gold Output      : [(0, 'Introduction of OS', 'n'), (1, 'Understanding DB', 'y'), (3, 'Summer Show', 'u'), (76, 'Robbin CV', 'y'), (80, 'Welcome to NY', 'h'), (82, 'Data base', 'w'), (2394, 'Customer reviews', 'y'), (3830, 'Do not panic', 'k'), (33930, 'How Google people work', 'z'), (50123, 'Learning French', 'r'), (651512, 'How to write a CV', 'f'), (801801, 'How to read a book', 'w'), (3540024, 'Palm reading', 'y'), (16514113, 'A history of Arts', 'h'), (385906526, 'About Korea', 'b')]

===== Eval Round 302 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
Gold SQL         : SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Data base', 11), ('How to read a book', 4)]
Gold Output      : [('Data base', 11), ('How to read a book', 4)]

===== Eval Round 303 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT D.Document_Name, D.Template_ID FROM Documents D WHERE D.Document_Description LIKE '%w%'
Gold SQL         : SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Data base', 11), ('How to read a book', 4)]
Gold Output      : [('Data base', 11), ('How to read a book', 4)]

===== Eval Round 304 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT D.Document_ID, D.Template_ID, TT.Template_Type_Description FROM Documents D JOIN Ref_Template_Types TT ON D.Template_ID = TT.Template_Type_Code WHERE D.Document_Name = "Robbin CV"
Gold SQL         : SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [(76, 20, 'y')]

===== Eval Round 305 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Documents.Document_ID, Documents.Template_ID, Templates.Template_Type_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Robbin CV'
Gold SQL         : SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: Templates.Template_Type_Description
Gold Output      : [(76, 20, 'y')]

===== Eval Round 306 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT COUNT(DISTINCT Template_ID) FROM Documents
Gold SQL         : SELECT count(DISTINCT template_id) FROM Documents
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(12,)]
Gold Output      : [(12,)]

===== Eval Round 307 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT COUNT(DISTINCT Template_ID) FROM Documents
Gold SQL         : SELECT count(DISTINCT template_id) FROM Documents
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(12,)]
Gold Output      : [(12,)]

===== Eval Round 308 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT COUNT(D.Document_ID) FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID WHERE T.Template_Type_Code = 'PPT'
Gold SQL         : SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(3,)]
Gold Output      : [(3,)]

===== Eval Round 309 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT COUNT(D.Document_ID) FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID JOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code WHERE RT.Template_Type_Description = 'PPT'
Gold SQL         : SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(3,)]

===== Eval Round 310 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_ID, COUNT(Document_ID) FROM Documents GROUP BY Template_ID
Gold SQL         : SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1, 1), (4, 1), (6, 1), (7, 1), (8, 1), (10, 1), (11, 2), (14, 2), (20, 1), (21, 1), (22, 1), (25, 2)]
Gold Output      : [(1, 1), (4, 1), (6, 1), (7, 1), (8, 1), (10, 1), (11, 2), (14, 2), (20, 1), (21, 1), (22, 1), (25, 2)]

===== Eval Round 311 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_ID, COUNT(*) AS NumberOfDocuments FROM Documents GROUP BY Template_ID
Gold SQL         : SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1, 1), (4, 1), (6, 1), (7, 1), (8, 1), (10, 1), (11, 2), (14, 2), (20, 1), (21, 1), (22, 1), (25, 2)]
Gold Output      : [(1, 1), (4, 1), (6, 1), (7, 1), (8, 1), (10, 1), (11, 2), (14, 2), (20, 1), (21, 1), (22, 1), (25, 2)]

===== Eval Round 312 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID ORDER BY COUNT(T2.Document_ID) DESC LIMIT 1
Gold SQL         : SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(25, 'PP')]
Gold Output      : [(25, 'PP')]

===== Eval Round 313 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_ID, Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID ORDER BY COUNT(*) DESC LIMIT 1)
Gold SQL         : SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(25, 'PP')]
Gold Output      : [(25, 'PP')]

===== Eval Round 314 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1
Gold SQL         : SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(11,), (14,), (25,)]
Gold Output      : [(11,), (14,), (25,)]

===== Eval Round 315 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1
Gold SQL         : SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(11,), (14,), (25,)]
Gold Output      : [(11,), (14,), (25,)]

===== Eval Round 316 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)
Gold SQL         : SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,), (9,), (15,), (16,), (18,), (19,), (23,), (24,)]
Gold Output      : [(0,), (9,), (15,), (16,), (18,), (19,), (23,), (24,)]

===== Eval Round 317 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)
Gold SQL         : SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,), (9,), (15,), (16,), (18,), (19,), (23,), (24,)]
Gold Output      : [(0,), (9,), (15,), (16,), (18,), (19,), (23,), (24,)]

===== Eval Round 318 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT COUNT(*) FROM Templates
Gold SQL         : SELECT count(*) FROM Templates
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(20,)]
Gold Output      : [(20,)]

===== Eval Round 319 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT COUNT(*) FROM Templates
Gold SQL         : SELECT count(*) FROM Templates
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(20,)]
Gold Output      : [(20,)]

===== Eval Round 320 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates
Gold SQL         : SELECT template_id ,  version_number ,  template_type_code FROM Templates
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(0, 5, 'PP'), (1, 9, 'PP'), (4, 4, 'BK'), (6, 2, 'PPT'), (7, 8, 'PPT'), (8, 3, 'BK'), (9, 2, 'BK'), (10, 1, 'PPT'), (11, 6, 'BK'), (14, 7, 'AD'), (15, 9, 'CV'), (16, 5, 'CV'), (18, 5, 'PP'), (19, 7, 'AD'), (20, 6, 'BK'), (21, 9, 'AD'), (22, 0, 'PP'), (23, 2, 'BK'), (24, 8, 'PP'), (25, 5, 'PP')]
Gold Output      : [(0, 5, 'PP'), (1, 9, 'PP'), (4, 4, 'BK'), (6, 2, 'PPT'), (7, 8, 'PPT'), (8, 3, 'BK'), (9, 2, 'BK'), (10, 1, 'PPT'), (11, 6, 'BK'), (14, 7, 'AD'), (15, 9, 'CV'), (16, 5, 'CV'), (18, 5, 'PP'), (19, 7, 'AD'), (20, 6, 'BK'), (21, 9, 'AD'), (22, 0, 'PP'), (23, 2, 'BK'), (24, 8, 'PP'), (25, 5, 'PP')]

===== Eval Round 321 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates
Gold SQL         : SELECT template_id ,  version_number ,  template_type_code FROM Templates
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(0, 5, 'PP'), (1, 9, 'PP'), (4, 4, 'BK'), (6, 2, 'PPT'), (7, 8, 'PPT'), (8, 3, 'BK'), (9, 2, 'BK'), (10, 1, 'PPT'), (11, 6, 'BK'), (14, 7, 'AD'), (15, 9, 'CV'), (16, 5, 'CV'), (18, 5, 'PP'), (19, 7, 'AD'), (20, 6, 'BK'), (21, 9, 'AD'), (22, 0, 'PP'), (23, 2, 'BK'), (24, 8, 'PP'), (25, 5, 'PP')]
Gold Output      : [(0, 5, 'PP'), (1, 9, 'PP'), (4, 4, 'BK'), (6, 2, 'PPT'), (7, 8, 'PPT'), (8, 3, 'BK'), (9, 2, 'BK'), (10, 1, 'PPT'), (11, 6, 'BK'), (14, 7, 'AD'), (15, 9, 'CV'), (16, 5, 'CV'), (18, 5, 'PP'), (19, 7, 'AD'), (20, 6, 'BK'), (21, 9, 'AD'), (22, 0, 'PP'), (23, 2, 'BK'), (24, 8, 'PP'), (25, 5, 'PP')]

===== Eval Round 322 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT DISTINCT Template_Type_Code FROM Templates
Gold SQL         : SELECT DISTINCT template_type_code FROM Templates
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('PP',), ('BK',), ('PPT',), ('AD',), ('CV',)]
Gold Output      : [('PP',), ('BK',), ('PPT',), ('AD',), ('CV',)]

===== Eval Round 323 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types
Gold SQL         : SELECT DISTINCT template_type_code FROM Templates
Exec Accuracy(EX): 0
Exact Match(EM)  : False
Pred Output      : [('AD',), ('BK',), ('CV',), ('PP',), ('PPT',)]
Gold Output      : [('PP',), ('BK',), ('PPT',), ('AD',), ('CV',)]

===== Eval Round 324 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')
Gold SQL         : SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,), (1,), (6,), (7,), (10,), (18,), (22,), (24,), (25,)]
Gold Output      : [(0,), (1,), (6,), (7,), (10,), (18,), (22,), (24,), (25,)]

===== Eval Round 325 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')
Gold SQL         : SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,), (1,), (6,), (7,), (10,), (18,), (22,), (24,), (25,)]
Gold Output      : [(0,), (1,), (6,), (7,), (10,), (18,), (22,), (24,), (25,)]

===== Eval Round 326 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'
Gold SQL         : SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(2,)]
Gold Output      : [(2,)]

===== Eval Round 327 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'
Gold SQL         : SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(2,)]
Gold Output      : [(2,)]

===== Eval Round 328 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5
Gold SQL         : SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(9, 'PP'), (8, 'PPT'), (6, 'BK'), (7, 'AD'), (9, 'CV'), (7, 'AD'), (6, 'BK'), (9, 'AD'), (8, 'PP')]
Gold Output      : [(9, 'PP'), (8, 'PPT'), (6, 'BK'), (7, 'AD'), (9, 'CV'), (7, 'AD'), (6, 'BK'), (9, 'AD'), (8, 'PP')]

===== Eval Round 329 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5
Gold SQL         : SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(9, 'PP'), (8, 'PPT'), (6, 'BK'), (7, 'AD'), (9, 'CV'), (7, 'AD'), (6, 'BK'), (9, 'AD'), (8, 'PP')]
Gold Output      : [(9, 'PP'), (8, 'PPT'), (6, 'BK'), (7, 'AD'), (9, 'CV'), (7, 'AD'), (6, 'BK'), (9, 'AD'), (8, 'PP')]

===== Eval Round 330 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_Type_Code, COUNT(Template_ID) FROM Templates GROUP BY Template_Type_Code
Gold SQL         : SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('AD', 3), ('BK', 6), ('CV', 2), ('PP', 6), ('PPT', 3)]
Gold Output      : [('AD', 3), ('BK', 6), ('CV', 2), ('PP', 6), ('PPT', 3)]

===== Eval Round 331 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT T1.Template_Type_Code, COUNT(T2.Template_ID) AS Template_Count FROM Ref_Template_Types T1 JOIN Templates T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code
Gold SQL         : SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('AD', 3), ('BK', 6), ('CV', 2), ('PP', 6), ('PPT', 3)]
Gold Output      : [('AD', 3), ('BK', 6), ('CV', 2), ('PP', 6), ('PPT', 3)]

===== Eval Round 332 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('PP',)]
Gold Output      : [('PP',)]

===== Eval Round 333 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('PP',)]
Gold Output      : [('PP',)]

===== Eval Round 334 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3
Gold SQL         : SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('CV',)]
Gold Output      : [('CV',)]

===== Eval Round 335 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3)
Gold SQL         : SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('CV',)]
Gold Output      : [('CV',)]

===== Eval Round 336 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code
Gold SQL         : SELECT min(Version_Number) ,  template_type_code FROM Templates
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(7, 'AD'), (2, 'BK'), (5, 'CV'), (0, 'PP'), (1, 'PPT')]
Gold Output      : [(0, 'PP')]

===== Eval Round 337 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_Type_Code, MIN(Version_Number) FROM Templates GROUP BY Template_Type_Code
Gold SQL         : SELECT min(Version_Number) ,  template_type_code FROM Templates
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('AD', 7), ('BK', 2), ('CV', 5), ('PP', 0), ('PPT', 1)]
Gold Output      : [(0, 'PP')]

===== Eval Round 338 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = "Data base"
Gold SQL         : SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('BK',)]
Gold Output      : [('BK',)]

===== Eval Round 339 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT T1.Template_Type_Code FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'
Gold SQL         : SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('BK',)]
Gold Output      : [('BK',)]

===== Eval Round 340 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT D.Document_Name FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID WHERE T.Template_Type_Code = 'BK'
Gold SQL         : SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Robbin CV',), ('Data base',), ('How to read a book',), ('Palm reading',), ('About Korea',)]
Gold Output      : [('Robbin CV',), ('Data base',), ('How to read a book',), ('Palm reading',), ('About Korea',)]

===== Eval Round 341 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT D.Document_Name FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID WHERE T.Template_Type_Code = 'BK'
Gold SQL         : SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Robbin CV',), ('Data base',), ('How to read a book',), ('Palm reading',), ('About Korea',)]
Gold Output      : [('Robbin CV',), ('Data base',), ('How to read a book',), ('Palm reading',), ('About Korea',)]

===== Eval Round 342 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT T1.Template_Type_Code, COUNT(T2.Document_ID) AS NumberOfDocuments FROM Ref_Template_Types T1 JOIN Templates T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code
Gold SQL         : SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: T2.Document_ID
Gold Output      : [('AD', 3), ('BK', 5), ('PP', 4), ('PPT', 3)]

===== Eval Round 343 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT rt.Template_Type_Code, COUNT(d.Document_ID) AS Document_Count FROM Ref_Template_Types rt JOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY rt.Template_Type_Code
Gold SQL         : SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('AD', 3), ('BK', 5), ('PP', 4), ('PPT', 3)]
Gold Output      : [('AD', 3), ('BK', 5), ('PP', 4), ('PPT', 3)]

===== Eval Round 344 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_ID) DESC LIMIT 1
Gold SQL         : SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('PP',)]
Gold Output      : [('BK',)]

===== Eval Round 345 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID ORDER BY COUNT(*) DESC LIMIT 1)
Gold SQL         : SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('PP',)]
Gold Output      : [('BK',)]

===== Eval Round 346 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents))
Gold SQL         : SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('CV',)]
Gold Output      : [('CV',)]

===== Eval Round 347 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents))
Gold SQL         : SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('CV',)]
Gold Output      : [('CV',)]

===== Eval Round 348 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
Gold SQL         : SELECT template_type_code ,  template_type_description FROM Ref_template_types
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement'), ('PP', 'Paper'), ('BK', 'Book')]
Gold Output      : [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement'), ('PP', 'Paper'), ('BK', 'Book')]

===== Eval Round 349 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
Gold SQL         : SELECT template_type_code ,  template_type_description FROM Ref_template_types
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement'), ('PP', 'Paper'), ('BK', 'Book')]
Gold Output      : [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement'), ('PP', 'Paper'), ('BK', 'Book')]

===== Eval Round 350 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
Gold SQL         : SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Advertisement',)]
Gold Output      : [('Advertisement',)]

===== Eval Round 351 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
Gold SQL         : SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Advertisement',)]
Gold Output      : [('Advertisement',)]

===== Eval Round 352 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Book"
Gold SQL         : SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('BK',)]
Gold Output      : [('BK',)]

===== Eval Round 353 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
Gold SQL         : SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('BK',)]
Gold Output      : [('BK',)]

===== Eval Round 354 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code INNER JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID
Gold SQL         : SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Presentation',), ('Paper',), ('Book',), ('Advertisement',)]
Gold Output      : [('Presentation',), ('Paper',), ('Book',), ('Advertisement',)]

===== Eval Round 355 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code INNER JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID
Gold SQL         : SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Presentation',), ('Paper',), ('Book',), ('Advertisement',)]
Gold Output      : [('Presentation',), ('Paper',), ('Book',), ('Advertisement',)]

===== Eval Round 356 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')
Gold SQL         : SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(6,), (7,), (10,)]
Gold Output      : [(6,), (7,), (10,)]

===== Eval Round 357 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation'
Gold SQL         : SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('PPT',)]
Gold Output      : [(6,), (7,), (10,)]

===== Eval Round 358 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT count(*) FROM Paragraphs
Gold SQL         : SELECT count(*) FROM Paragraphs
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(15,)]
Gold Output      : [(15,)]

===== Eval Round 359 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT COUNT(*) FROM Paragraphs
Gold SQL         : SELECT count(*) FROM Paragraphs
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(15,)]
Gold Output      : [(15,)]

===== Eval Round 360 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT COUNT(Paragraph_ID) FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')
Gold SQL         : SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1,)]
Gold Output      : [(1,)]

===== Eval Round 361 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT COUNT(Paragraph_ID) FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')
Gold SQL         : SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1,)]
Gold Output      : [(1,)]

===== Eval Round 362 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea '
Gold SQL         : select other_details from paragraphs where paragraph_text like 'korea'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [(None,), (None,)]

===== Eval Round 363 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT T1.Template_Details FROM Templates T1 JOIN Documents T2 ON T1.Template_ID = T2.Template_ID JOIN Paragraphs T3 ON T2.Document_ID = T3.Document_ID WHERE T3.Paragraph_Text LIKE '%Korea %'
Gold SQL         : select other_details from paragraphs where paragraph_text like 'korea'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [(None,), (None,)]

===== Eval Round 364 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')
Gold SQL         : SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(16615, 'Japan'), (608931827, 'Micronesia')]
Gold Output      : [(16615, 'Japan'), (608931827, 'Micronesia')]

===== Eval Round 365 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT P.Paragraph_ID, P.Paragraph_Text FROM Paragraphs P JOIN Documents D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Welcome to NY'
Gold SQL         : SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(16615, 'Japan'), (608931827, 'Micronesia')]
Gold Output      : [(16615, 'Japan'), (608931827, 'Micronesia')]

===== Eval Round 366 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews')
Gold SQL         : SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Korea',), ('Ukraine',), ('Korea',)]
Gold Output      : [('Korea',), ('Ukraine',), ('Korea',)]

===== Eval Round 367 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT T1.Paragraph_Text FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'
Gold SQL         : SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Korea',), ('Ukraine',), ('Korea',)]
Gold Output      : [('Korea',), ('Ukraine',), ('Korea',)]

===== Eval Round 368 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Document_ID, COUNT(Paragraph_ID) AS Number_Of_Paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID
Gold SQL         : SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(3, 1), (80, 2), (2394, 3), (3830, 1), (33930, 1), (50123, 1), (651512, 2), (3540024, 1), (16514113, 2), (385906526, 1)]
Gold Output      : [(3, 1), (80, 2), (2394, 3), (3830, 1), (33930, 1), (50123, 1), (651512, 2), (3540024, 1), (16514113, 2), (385906526, 1)]

===== Eval Round 369 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Document_ID, COUNT(Paragraph_ID) AS Number_Of_Paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID
Gold SQL         : SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(3, 1), (80, 2), (2394, 3), (3830, 1), (33930, 1), (50123, 1), (651512, 2), (3540024, 1), (16514113, 2), (385906526, 1)]
Gold Output      : [(3, 1), (80, 2), (2394, 3), (3830, 1), (33930, 1), (50123, 1), (651512, 2), (3540024, 1), (16514113, 2), (385906526, 1)]

===== Eval Round 370 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Number_of_Paragraphs FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name
Gold SQL         : SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(3, 'Summer Show', 1), (80, 'Welcome to NY', 2), (2394, 'Customer reviews', 3), (3830, 'Do not panic', 1), (33930, 'How Google people work', 1), (50123, 'Learning French', 1), (651512, 'How to write a CV', 2), (3540024, 'Palm reading', 1), (16514113, 'A history of Arts', 2), (385906526, 'About Korea', 1)]
Gold Output      : [(3, 'Summer Show', 1), (80, 'Welcome to NY', 2), (2394, 'Customer reviews', 3), (3830, 'Do not panic', 1), (33930, 'How Google people work', 1), (50123, 'Learning French', 1), (651512, 'How to write a CV', 2), (3540024, 'Palm reading', 1), (16514113, 'A history of Arts', 2), (385906526, 'About Korea', 1)]

===== Eval Round 371 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Number_of_Paragraphs FROM Documents D LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name
Gold SQL         : SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(0, 'Introduction of OS', 0), (1, 'Understanding DB', 0), (3, 'Summer Show', 1), (76, 'Robbin CV', 0), (80, 'Welcome to NY', 2), (82, 'Data base', 0), (2394, 'Customer reviews', 3), (3830, 'Do not panic', 1), (33930, 'How Google people work', 1), (50123, 'Learning French', 1), (651512, 'How to write a CV', 2), (801801, 'How to read a book', 0), (3540024, 'Palm reading', 1), (16514113, 'A history of Arts', 2), (385906526, 'About Korea', 1)]
Gold Output      : [(3, 'Summer Show', 1), (80, 'Welcome to NY', 2), (2394, 'Customer reviews', 3), (3830, 'Do not panic', 1), (33930, 'How Google people work', 1), (50123, 'Learning French', 1), (651512, 'How to write a CV', 2), (3540024, 'Palm reading', 1), (16514113, 'A history of Arts', 2), (385906526, 'About Korea', 1)]

===== Eval Round 372 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2
Gold SQL         : SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(80,), (2394,), (651512,), (16514113,)]
Gold Output      : [(80,), (2394,), (651512,), (16514113,)]

===== Eval Round 373 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2
Gold SQL         : SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(80,), (2394,), (651512,), (16514113,)]
Gold Output      : [(80,), (2394,), (651512,), (16514113,)]

===== Eval Round 374 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT D.Document_ID, D.Document_Name FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID ORDER BY COUNT(P.Paragraph_ID) DESC LIMIT 1
Gold SQL         : SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(2394, 'Customer reviews')]
Gold Output      : [(2394, 'Customer reviews')]

===== Eval Round 375 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Document_ID, Document_Name FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) DESC LIMIT 1)
Gold SQL         : SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(2394, 'Customer reviews')]
Gold Output      : [(2394, 'Customer reviews')]

===== Eval Round 376 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1
Gold SQL         : SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(3,)]
Gold Output      : [(3,)]

===== Eval Round 377 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1
Gold SQL         : SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(3,)]
Gold Output      : [(3,)]

===== Eval Round 378 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2
Gold SQL         : SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(3,), (80,), (3830,), (33930,), (50123,), (651512,), (3540024,), (16514113,), (385906526,)]
Gold Output      : [(3,), (80,), (3830,), (33930,), (50123,), (651512,), (3540024,), (16514113,), (385906526,)]

===== Eval Round 379 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2
Gold SQL         : SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(3,), (80,), (3830,), (33930,), (50123,), (651512,), (3540024,), (16514113,), (385906526,)]
Gold Output      : [(3,), (80,), (3830,), (33930,), (50123,), (651512,), (3540024,), (16514113,), (385906526,)]

===== Eval Round 380 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT DISTINCT Document_ID FROM Paragraphs WHERE Paragraph_Text IN ('Brazil', 'Ireland')
Gold SQL         : SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(16514113,)]
Gold Output      : [(16514113,)]

===== Eval Round 381 =====
Database         : cre_Doc_Template_Mgt
Prediction SQL   : SELECT DISTINCT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil' INTERSECT SELECT DISTINCT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Ireland'
Gold SQL         : SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(16514113,)]
Gold Output      : [(16514113,)]

===== Eval Round 382 =====
Database         : course_teach
Prediction SQL   : SELECT COUNT(*) FROM teacher
Gold SQL         : SELECT count(*) FROM teacher
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(7,)]
Gold Output      : [(7,)]

===== Eval Round 383 =====
Database         : course_teach
Prediction SQL   : SELECT COUNT(*) FROM teacher
Gold SQL         : SELECT count(*) FROM teacher
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(7,)]
Gold Output      : [(7,)]

===== Eval Round 384 =====
Database         : course_teach
Prediction SQL   : SELECT Name FROM teacher ORDER BY Age ASC
Gold SQL         : SELECT Name FROM teacher ORDER BY Age ASC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Vicente Carretero',), ('Gustaaf Deloor',), ('Joseph Huts',), ('John Deloor',), ('Lucy Wong',), ('Anne Walker',), ('Kearsley Brown',)]
Gold Output      : [('Vicente Carretero',), ('Gustaaf Deloor',), ('Joseph Huts',), ('John Deloor',), ('Lucy Wong',), ('Anne Walker',), ('Kearsley Brown',)]

===== Eval Round 385 =====
Database         : course_teach
Prediction SQL   : SELECT Name FROM teacher ORDER BY Age ASC
Gold SQL         : SELECT Name FROM teacher ORDER BY Age ASC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Vicente Carretero',), ('Gustaaf Deloor',), ('Joseph Huts',), ('John Deloor',), ('Lucy Wong',), ('Anne Walker',), ('Kearsley Brown',)]
Gold Output      : [('Vicente Carretero',), ('Gustaaf Deloor',), ('Joseph Huts',), ('John Deloor',), ('Lucy Wong',), ('Anne Walker',), ('Kearsley Brown',)]

===== Eval Round 386 =====
Database         : course_teach
Prediction SQL   : SELECT Age, Hometown FROM teacher
Gold SQL         : SELECT Age ,  Hometown FROM teacher
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('32', 'Blackrod Urban District'), ('29', 'Bolton County Borough'), ('26', 'Farnworth Municipal Borough'), ('33', 'Horwich Urban District'), ('45', 'Kearsley Urban District'), ('41', 'Little Lever Urban District'), ('39', 'Turton Urban District')]
Gold Output      : [('32', 'Blackrod Urban District'), ('29', 'Bolton County Borough'), ('26', 'Farnworth Municipal Borough'), ('33', 'Horwich Urban District'), ('45', 'Kearsley Urban District'), ('41', 'Little Lever Urban District'), ('39', 'Turton Urban District')]

===== Eval Round 387 =====
Database         : course_teach
Prediction SQL   : SELECT Age, Hometown FROM teacher
Gold SQL         : SELECT Age ,  Hometown FROM teacher
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('32', 'Blackrod Urban District'), ('29', 'Bolton County Borough'), ('26', 'Farnworth Municipal Borough'), ('33', 'Horwich Urban District'), ('45', 'Kearsley Urban District'), ('41', 'Little Lever Urban District'), ('39', 'Turton Urban District')]
Gold Output      : [('32', 'Blackrod Urban District'), ('29', 'Bolton County Borough'), ('26', 'Farnworth Municipal Borough'), ('33', 'Horwich Urban District'), ('45', 'Kearsley Urban District'), ('41', 'Little Lever Urban District'), ('39', 'Turton Urban District')]

===== Eval Round 388 =====
Database         : course_teach
Prediction SQL   : SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'
Gold SQL         : select name from teacher where hometown != "little lever urban district"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Joseph Huts',), ('Gustaaf Deloor',), ('Vicente Carretero',), ('John Deloor',), ('Kearsley Brown',), ('Lucy Wong',)]
Gold Output      : [('Joseph Huts',), ('Gustaaf Deloor',), ('Vicente Carretero',), ('John Deloor',), ('Kearsley Brown',), ('Anne Walker',), ('Lucy Wong',)]

===== Eval Round 389 =====
Database         : course_teach
Prediction SQL   : SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'
Gold SQL         : select name from teacher where hometown != "little lever urban district"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Joseph Huts',), ('Gustaaf Deloor',), ('Vicente Carretero',), ('John Deloor',), ('Kearsley Brown',), ('Lucy Wong',)]
Gold Output      : [('Joseph Huts',), ('Gustaaf Deloor',), ('Vicente Carretero',), ('John Deloor',), ('Kearsley Brown',), ('Anne Walker',), ('Lucy Wong',)]

===== Eval Round 390 =====
Database         : course_teach
Prediction SQL   : SELECT Name FROM teacher WHERE Age IN (32, 33)
Gold SQL         : SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Joseph Huts',), ('John Deloor',)]
Gold Output      : [('Joseph Huts',), ('John Deloor',)]

===== Eval Round 391 =====
Database         : course_teach
Prediction SQL   : SELECT Name FROM teacher WHERE Age = 32 OR Age = 33
Gold SQL         : SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Joseph Huts',), ('John Deloor',)]
Gold Output      : [('Joseph Huts',), ('John Deloor',)]

===== Eval Round 392 =====
Database         : course_teach
Prediction SQL   : SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
Gold SQL         : SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Farnworth Municipal Borough',)]
Gold Output      : [('Farnworth Municipal Borough',)]

===== Eval Round 393 =====
Database         : course_teach
Prediction SQL   : SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
Gold SQL         : SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Farnworth Municipal Borough',)]
Gold Output      : [('Farnworth Municipal Borough',)]

===== Eval Round 394 =====
Database         : course_teach
Prediction SQL   : SELECT Hometown, COUNT(*) AS NumberOfTeachers FROM teacher GROUP BY Hometown
Gold SQL         : SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Blackrod Urban District', 1), ('Bolton County Borough', 1), ('Farnworth Municipal Borough', 1), ('Horwich Urban District', 1), ('Kearsley Urban District', 1), ('Little Lever Urban District', 1), ('Turton Urban District', 1)]
Gold Output      : [('Blackrod Urban District', 1), ('Bolton County Borough', 1), ('Farnworth Municipal Borough', 1), ('Horwich Urban District', 1), ('Kearsley Urban District', 1), ('Little Lever Urban District', 1), ('Turton Urban District', 1)]

===== Eval Round 395 =====
Database         : course_teach
Prediction SQL   : SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown
Gold SQL         : SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Blackrod Urban District', 1), ('Bolton County Borough', 1), ('Farnworth Municipal Borough', 1), ('Horwich Urban District', 1), ('Kearsley Urban District', 1), ('Little Lever Urban District', 1), ('Turton Urban District', 1)]
Gold Output      : [('Blackrod Urban District', 1), ('Bolton County Borough', 1), ('Farnworth Municipal Borough', 1), ('Horwich Urban District', 1), ('Kearsley Urban District', 1), ('Little Lever Urban District', 1), ('Turton Urban District', 1)]

===== Eval Round 396 =====
Database         : course_teach
Prediction SQL   : SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Turton Urban District',)]
Gold Output      : [('Turton Urban District',)]

===== Eval Round 397 =====
Database         : course_teach
Prediction SQL   : SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Turton Urban District',)]
Gold Output      : [('Turton Urban District',)]

===== Eval Round 398 =====
Database         : course_teach
Prediction SQL   : SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2
Gold SQL         : SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : []

===== Eval Round 399 =====
Database         : course_teach
Prediction SQL   : SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2
Gold SQL         : SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : []

===== Eval Round 400 =====
Database         : course_teach
Prediction SQL   : SELECT T.Name, C.Course FROM teacher AS T JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID JOIN course AS C ON CA.Course_ID = C.Course_ID
Gold SQL         : SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Kearsley Brown', 'Math'), ('Vicente Carretero', 'Math'), ('Gustaaf Deloor', 'Science'), ('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Lucy Wong', 'Music')]
Gold Output      : [('Kearsley Brown', 'Math'), ('Vicente Carretero', 'Math'), ('Gustaaf Deloor', 'Science'), ('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Lucy Wong', 'Music')]

===== Eval Round 401 =====
Database         : course_teach
Prediction SQL   : SELECT T.Name, C.Course FROM teacher AS T JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID JOIN course AS C ON CA.Course_ID = C.Course_ID
Gold SQL         : SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Kearsley Brown', 'Math'), ('Vicente Carretero', 'Math'), ('Gustaaf Deloor', 'Science'), ('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Lucy Wong', 'Music')]
Gold Output      : [('Kearsley Brown', 'Math'), ('Vicente Carretero', 'Math'), ('Gustaaf Deloor', 'Science'), ('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Lucy Wong', 'Music')]

===== Eval Round 402 =====
Database         : course_teach
Prediction SQL   : SELECT T.Name, C.Course FROM teacher AS T JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID JOIN course AS C ON CA.Course_ID = C.Course_ID ORDER BY T.Name ASC
Gold SQL         : SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Gustaaf Deloor', 'Science'), ('Kearsley Brown', 'Math'), ('Lucy Wong', 'Music'), ('Vicente Carretero', 'Math')]
Gold Output      : [('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Gustaaf Deloor', 'Science'), ('Kearsley Brown', 'Math'), ('Lucy Wong', 'Music'), ('Vicente Carretero', 'Math')]

===== Eval Round 403 =====
Database         : course_teach
Prediction SQL   : SELECT T.Name, C.Course FROM teacher AS T JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID JOIN course AS C ON CA.Course_ID = C.Course_ID ORDER BY T.Name ASC
Gold SQL         : SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Gustaaf Deloor', 'Science'), ('Kearsley Brown', 'Math'), ('Lucy Wong', 'Music'), ('Vicente Carretero', 'Math')]
Gold Output      : [('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Gustaaf Deloor', 'Science'), ('Kearsley Brown', 'Math'), ('Lucy Wong', 'Music'), ('Vicente Carretero', 'Math')]

===== Eval Round 404 =====
Database         : course_teach
Prediction SQL   : SELECT T.Name FROM teacher T JOIN course_arrange CA ON T.Teacher_ID = CA.Teacher_ID JOIN course C ON CA.Course_ID = C.Course_ID WHERE C.Course = 'Math'
Gold SQL         : SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Kearsley Brown',), ('Vicente Carretero',)]
Gold Output      : [('Kearsley Brown',), ('Vicente Carretero',)]

===== Eval Round 405 =====
Database         : course_teach
Prediction SQL   : SELECT T.Name FROM teacher AS T JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID JOIN course AS C ON CA.Course_ID = C.Course_ID WHERE C.Course LIKE '%Math%'
Gold SQL         : SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Kearsley Brown',), ('Vicente Carretero',)]
Gold Output      : [('Kearsley Brown',), ('Vicente Carretero',)]

===== Eval Round 406 =====
Database         : course_teach
Prediction SQL   : SELECT T.Name, COUNT(CA.Course_ID) FROM teacher AS T JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID GROUP BY T.Teacher_ID
Gold SQL         : SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Gustaaf Deloor', 1), ('Vicente Carretero', 1), ('Kearsley Brown', 1), ('Anne Walker', 2), ('Lucy Wong', 1)]
Gold Output      : [('Anne Walker', 2), ('Gustaaf Deloor', 1), ('Kearsley Brown', 1), ('Lucy Wong', 1), ('Vicente Carretero', 1)]

===== Eval Round 407 =====
Database         : course_teach
Prediction SQL   : SELECT T.Name, COUNT(CA.Course_ID) AS NumberOfCourses FROM teacher AS T JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID GROUP BY T.Teacher_ID
Gold SQL         : SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Gustaaf Deloor', 1), ('Vicente Carretero', 1), ('Kearsley Brown', 1), ('Anne Walker', 2), ('Lucy Wong', 1)]
Gold Output      : [('Anne Walker', 2), ('Gustaaf Deloor', 1), ('Kearsley Brown', 1), ('Lucy Wong', 1), ('Vicente Carretero', 1)]

===== Eval Round 408 =====
Database         : course_teach
Prediction SQL   : SELECT T.Name FROM teacher AS T JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID GROUP BY T.Teacher_ID HAVING COUNT(CA.Course_ID) >= 2
Gold SQL         : SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Anne Walker',)]
Gold Output      : [('Anne Walker',)]

===== Eval Round 409 =====
Database         : course_teach
Prediction SQL   : SELECT T.Name FROM teacher AS T JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID GROUP BY T.Teacher_ID HAVING COUNT(CA.Course_ID) >= 2
Gold SQL         : SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Anne Walker',)]
Gold Output      : [('Anne Walker',)]

===== Eval Round 410 =====
Database         : course_teach
Prediction SQL   : SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
Gold SQL         : SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Joseph Huts',), ('John Deloor',)]
Gold Output      : [('Joseph Huts',), ('John Deloor',)]

===== Eval Round 411 =====
Database         : course_teach
Prediction SQL   : SELECT T.Name FROM teacher T WHERE T.Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
Gold SQL         : SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Joseph Huts',), ('John Deloor',)]
Gold Output      : [('Joseph Huts',), ('John Deloor',)]

===== Eval Round 412 =====
Database         : museum_visit
Prediction SQL   : SELECT COUNT(*) FROM visitor WHERE Age < 30
Gold SQL         : SELECT count(*) FROM visitor WHERE age  <  30
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(3,)]
Gold Output      : [(3,)]

===== Eval Round 413 =====
Database         : museum_visit
Prediction SQL   : SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC
Gold SQL         : SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Gonzalo Higuaín ',), ('Fernando Gago',), ('Guti Midfielder',)]
Gold Output      : [('Gonzalo Higuaín ',), ('Fernando Gago',), ('Guti Midfielder',)]

===== Eval Round 414 =====
Database         : museum_visit
Prediction SQL   : SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4
Gold SQL         : SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(36.0,)]
Gold Output      : [(36.0,)]

===== Eval Round 415 =====
Database         : museum_visit
Prediction SQL   : SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC
Gold SQL         : SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Fernando Gago', 6), ('Gonzalo Higuaín ', 8), ('Guti Midfielder', 5)]
Gold Output      : [('Fernando Gago', 6), ('Gonzalo Higuaín ', 8), ('Guti Midfielder', 5)]

===== Eval Round 416 =====
Database         : museum_visit
Prediction SQL   : SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1
Gold SQL         : SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1, 'Plaza Museum')]
Gold Output      : [(1, 'Plaza Museum')]

===== Eval Round 417 =====
Database         : museum_visit
Prediction SQL   : SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009
Gold SQL         : SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(31.333333333333332,)]
Gold Output      : [(31.333333333333332,)]

===== Eval Round 418 =====
Database         : museum_visit
Prediction SQL   : SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'
Gold SQL         : SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('2000', 62)]
Gold Output      : [(62, '2000')]

===== Eval Round 419 =====
Database         : museum_visit
Prediction SQL   : SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)
Gold SQL         : SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Plaza Museum',), ('Capital Plaza Museum',), ('Jefferson Development Museum',)]
Gold Output      : [('Plaza Museum',), ('Capital Plaza Museum',), ('Jefferson Development Museum',)]

===== Eval Round 420 =====
Database         : museum_visit
Prediction SQL   : SELECT v.ID, v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID GROUP BY vi.visitor_ID HAVING COUNT(vi.Museum_ID) > 1
Gold SQL         : SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(3, 'Arjen Robben', 27), (5, 'Fernando Gago', 36), (6, 'Rafael van der Vaart', 25)]
Gold Output      : [(3, 'Arjen Robben', 27), (5, 'Fernando Gago', 36), (6, 'Rafael van der Vaart', 25)]

===== Eval Round 421 =====
Database         : museum_visit
Prediction SQL   : SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID ORDER BY vi.Total_spent DESC LIMIT 1
Gold SQL         : SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(3, 'Arjen Robben', 1)]
Gold Output      : [('3', 'Arjen Robben', 1)]

===== Eval Round 422 =====
Database         : museum_visit
Prediction SQL   : SELECT T1.Museum_ID, T1.Name FROM museum T1 JOIN visit T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T1.Museum_ID ORDER BY SUM(T2.Num_of_Ticket) DESC LIMIT 1
Gold SQL         : SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(2, 'Capital Plaza Museum')]
Gold Output      : [(2, 'Capital Plaza Museum')]

===== Eval Round 423 =====
Database         : museum_visit
Prediction SQL   : SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)
Gold SQL         : SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Jefferson Development Museum',), ('RiverPark Museum',), ('Place Tower Museum',), ('Central City District Residential Museum',)]
Gold Output      : [('Jefferson Development Museum',), ('RiverPark Museum',), ('Place Tower Museum',), ('Central City District Residential Museum',)]

===== Eval Round 424 =====
Database         : museum_visit
Prediction SQL   : SELECT v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID ORDER BY vi.Num_of_Ticket DESC LIMIT 1
Gold SQL         : SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Arjen Robben', 27)]
Gold Output      : [('Arjen Robben', 27)]

===== Eval Round 425 =====
Database         : museum_visit
Prediction SQL   : SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit
Gold SQL         : SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(10.5, 24)]
Gold Output      : [(10.5, 24)]

===== Eval Round 426 =====
Database         : museum_visit
Prediction SQL   : SELECT sum(Num_of_Ticket * Total_spent) FROM visit WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership = 1)
Gold SQL         : SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(8345.199999999999,)]
Gold Output      : [(570.84,)]

===== Eval Round 427 =====
Database         : museum_visit
Prediction SQL   : SELECT DISTINCT v.Name FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < 2009 AND EXISTS (SELECT 1 FROM visit vi2 JOIN museum m2 ON vi2.Museum_ID = m2.Museum_ID WHERE vi2.visitor_ID = v.ID AND m2.Open_Year > 2011)
Gold SQL         : SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Fernando Gago',)]
Gold Output      : [('Fernando Gago',)]

===== Eval Round 428 =====
Database         : museum_visit
Prediction SQL   : SELECT count(DISTINCT v.ID) FROM visitor v WHERE v.ID NOT IN (SELECT visitor_ID FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year > 2010))
Gold SQL         : SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(3,)]
Gold Output      : [(3,)]

===== Eval Round 429 =====
Database         : museum_visit
Prediction SQL   : SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008
Gold SQL         : SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1,)]
Gold Output      : [(1,)]

===== Eval Round 430 =====
Database         : wta_1
Prediction SQL   : SELECT count(*) FROM players
Gold SQL         : SELECT count(*) FROM players
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(20662,)]
Gold Output      : [(20662,)]

===== Eval Round 431 =====
Database         : wta_1
Prediction SQL   : SELECT count(*) FROM players
Gold SQL         : SELECT count(*) FROM players
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(20662,)]
Gold Output      : [(20662,)]

===== Eval Round 432 =====
Database         : wta_1
Prediction SQL   : SELECT COUNT(*) FROM matches
Gold SQL         : SELECT count(*) FROM matches
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(278,)]
Gold Output      : [(278,)]

===== Eval Round 433 =====
Database         : wta_1
Prediction SQL   : SELECT count(*) FROM matches
Gold SQL         : SELECT count(*) FROM matches
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(278,)]
Gold Output      : [(278,)]

===== Eval Round 434 =====
Database         : wta_1
Prediction SQL   : SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
Gold SQL         : SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Jolene', 19680831), ('Lisa', 19730810), ('Meilen', 19780117), ('Serena', 19810926), ('Chanda', 19760218), ('Amy', 19720919), ('Tara', 19770526), ('Meghann', 19790413), ('Erika', 19721014), ('Lilia', 19780407), ('Jane', 19740621), ('Jennifer', 19760329), ('Alexandra', 19801215), ('Linda', 19710211), ('Brie', 19800121), ('Corina', 19780126), ('Marissa', 19800623), ('Lindsay', 19760608), ('Kathleen', 19461027), ('Geri', ''), ('Rosie', 19480916), ('Joan', ''), ('Mary Ann', 19461125), ('Billie Jean', 19431122), ('Patti', 19491221), ('Sharon', 19520224), ('Mona', 19481128), ('Ann', 19510504), ('Chris', 19541221), ('Janet', 19530806), ('Jill', 19540519), ('Julie', 19451208), ('Ann', 19550822), ('Joy', 19540519), ('Pam', 19510417), ('Peggy', 19490202), ('Martina', 19561018), ('Laura', 19490504), ('Sally', 19550325), ('Cecilia', 19470524), ('Rene', 19570512), ('Beth', 19570613), ('Patricia', 19511125), ('Kim', 19561011), ('Betsy', 19561023), ('Barbara', 19570402), ('Dianne', 19580811), ('Felicia', 19570720), ('Lindsay', 19550124), ('Lele', 19560910), ('Diane', 19550615), ('Rosalyn', 19601102), ('Marcie', 19530910), ('Pam', 19620704), ('Barbara', 19570501), ('Candy', 19550324), ('Bonnie', 19630911), ('Barbara', 19611022), ('Anne', 19590701), ('Paula', 19570110), ('Nancy', 19550522), ('Andrea', 19650604), ('Anne', 19610928), ('Leslie', 19570312), ('Kathy', 19591203), ('Mary Lou', 19610806), ('Sherry', 19590606), ('Lea', 19590120), ('Kim', 19571222), ('Tracy', 19621212), ('Kate', 19521025), ('Wendy', 19600929), ('Andrea', 19640118), ('Zina', 19631116), ('Susan', 19640628), ('Camille', 19660602), ('Alycia', 19610218), ('Jane', 19531206), ('Vicki', 19620925), ('Heather', 19610611), ('Robin', 19631210), ('Gigi', 19640222), ('Kathy', 19670324), ('Anna Maria', 19601022), ('Beth', 19640528), ('Lori', 19631218), ('Laura', 19630317), ('Kim', 19570928), ('Shelley', 19630619), ('Barbara', 19640703), ('Michaela', 19660227), ('Shawn', 19671221), ('Elise', 19620305), ('Sandy', 19581013), ('Linda', 19691224), ('Lisa', 19620714), ('Terry', 19551128), ('Ann', 19591031), ('Lisa', 19651016), ('Molly', 19650312), ('Hu', 19630416), ('Dee Ann', 19620611), ('Jamie', 19620121), ('Beverly', 19650909), ('Louise', 19620107), ('Cammy', 19681011), ('Susan', 19590415), ('Caryn', 19610314), ('Tina', 19521124), ('Terry', 19661218), ('Marianne', 19671017), ('Gretchen', 19640207), ('Kathrin', 19621128), ('Pamela', 19630703), ('Lindsay', 19620731), ('Jennifer', 19670702), ('Jennifer', 19620426), ('Carol', 19621009), ('Jill', 19640904), ('Elizabeth', 19680826), ('Pam', 19631220), ('Melissa', 19680411), ('Cynthia', 19640326), ('Amy', 19690902), ('Sherri', 19640202), ('Stephanie', 19650206), ('Patty', 19650331), ('Penny', 19640411), ('Wendy', 19640420), ('Katrina', 19680805), ('Leigh Anne', 19641214), ('Donna', 19710705), ('Jennifer', 19690226), ('Andrea', 19710930), ('Anna', 19660117), ('Kimberly', 19730327), ('Laxmi', 19721109), ('Kathy', 19650825), ('Halle', 19690805), ('Ronni', 19660510), ('Ann', 19701013), ('Mary Joe', 19710819), ('Jeri', 19701211), ('Carrie', 19720428), ('Shaun', 19681213), ('Audra', 19711117), ('Stacey', 19701113), ('Tami', 19681113), ('Stacey', 19680319), ('Ginger', 19680914), ('Monica', 19731202), ('Patty', 19680118), ('Nicole', 19690826), ('Jessica', 19700913), ('Kimberly', 19711020), ('Stephanie', 19691105), ('Debbie', 19700825), ('Susan', 19701205), ('Caroline', 19660825), ('Elly', 19690825), ('Meredith', 19710428), ('Sandra', 19740910), ('Anne', 19770119), ('Lindsay', 19770628), ('Venus', 19800617), ('Samantha', 19790117), ('Karin', 19771210), ('Jill', 19740704), ('Bunny', 19570905), ('Rayni', 19560524), ('Jennifer', 19810210), ('Holly', 19790210), ('Nancy', 19420823), ('Dorothy', 19250703), ('Kristy', 19500815), ('Valerie', 19490629), ('Linda', 19501021), ('Peaches', 19490416), ('Tory Ann', 19420808), ('Pamela', 19500312), ('Denise', 19500731), ('Wendy', 19470331), ('Becky', ''), ('Nancy', 19520731), ('Barbara', 19540304), ('Kristien', 19520725), ('Janet', 19530628), ('Daryl', 19540507), ('Ching Ling', 19481008), ('Robin', 19580513), ('Patricia', 19410811), ('Laurie', 19551104), ('Donna', 19541109), ('Linda', 19521114), ('Julie', 19480113), ('Jeanne', 19571005), ('Laurie', 19550614), ('Kathy', 19560618), ('Janice', 19520710), ('Kathy', 19561123), ('Jane', 19530810), ('Marita', 19560219), ('Susie', 19570916), ('Mary', 19500721), ('Mary', 19540907), ('Mary', 19570312), ('Carrie', 19550822), ('Ruta', 19551118), ('Mareen', 19600815), ('Robin', 19560413), ('Caroline', 19601104), ('Emilse', 19571219), ('Kay', 19570925), ('Zenda', 19591212), ('Betty Ann', 19500226), ('Jeanne', 19591207), ('Linda', 19610605), ('Julie', 19620205), ('Stacy', 19590405), ('Dana', 19591126), ('Roberta', 19581103), ('Joyce', 19580503), ('Andrea', 19550406), ('Trey', 19591127), ('Jenny', 19650419), ('Leigh Anne', 19640108), ('Joanne', 19541030), ('Michelle', 19670627), ('Nancy', 19580418), ('Felicia', 19611231), ('Jean', 19581025), ('Barbi', 19640914), ('Amy', 19650405), ('Jill', 19600623), ('Ginny', 19661115), ('Grace', 19680416), ('Melissa', 19690624), ('Debbie', 19670809), ('Eileen', 19661201), ('Maeve', 19641116), ('Kathleen', 19610905), ('Niurka', 19690419), ('Cecilia', 19630628), ('Kristin', 19590827), ('Kate', 19630111), ('Liezel', 19760821), ('Mashona', 19760531), ('Stephanie', 19460308), ('Marilyn', 19480308), ('Mimi', ''), ('Alice', 19421122), ('Pixie', ''), ('Betty', 19250415), ('Nadine', 19441026), ('Victoria', ''), ('Stephanie', 19500703), ('Carole', 19430624), ('Gail', 19510421), ('Patricia', 19400101), ('Eliza', 19530102), ('Patricia', 19450828), ('Sandy', 19560501), ('Tam', 19520127), ('Wendy', 19520430), ('Kathy', 19461218), ('Lisa', ''), ('Judy', 19490816), ('Roberta', 19560702), ('Mary', 19450925), ('Aleida', 19550616), ('Erin', 19550720), ('Stephanie', 19560325), ('Karen', 19421211), ('Sheila', 19580222), ('Susie', 19620329), ('Micki', 19601129), ('Heather', 19610712), ('Jane', 19620121), ('Diane', 19611105), ('Shawna', ''), ('Tammy', 19651012), ('Tracy', 19791006), ('Allison', 19801114), ('Ansley', 19820105), ('Dawn', 19760529), ('Kristen', 19840628), ('Vija', ''), ('Farel', ''), ('Connie', 19510521), ('Marjorie', 19510503), ('Peggy', ''), ('Tish', ''), ('Jade', ''), ('Carole', ''), ('Emilie', ''), ('Diane', ''), ('Mary', ''), ('Ann', ''), ('Tina', ''), ('Maricaye', ''), ('Roylee', 19490526), ('Nancy', 19330421), ('Louise', 19470321), ('Mimi', 19390818), ('Raymonde', ''), ('Carol', ''), ('Joyce', 19420223), ('Pat', 19340819), ('Jane', 19510220), ('Darlene', 19360106), ('Pam', 19501025), ('Carol', ''), ('Emilie', ''), ('Margaret', 19500413), ('Pam', ''), ('Susan', 19531113), ('Shari', ''), ('Sue', 19540603), ('Jeanne', 19350721), ('Kathy', 19521219), ('Gertrude', 19230908), ('Judy', 19430402), ('Brenda', 19540211), ('Patricia', 19580516), ('Marcy', ''), ('Sally', ''), ('Lynne', 19580328), ('Margaret', 19530105), ('Renee', 19340819), ('Carol', 19501022), ('Chris', 19561026), ('Kelly', 19620418), ('Lisa', 19590305), ('Lucy', ''), ('Jody', 19560704), ('Phyllis', 19570326), ('Linda', 19631106), ('Karen', 19640323), ('Eleni', 19671023), ('Lisa', 19680718), ('Sandra', 19690903), ('Shannan', 19700519), ('Julie', 19760424), ('Nicole', 19760203), ('Angela', 19720404), ('Keri', 19740501), ('Jacqueline', 19801126), ('Laura', 19810512), ('Jean', 19740607), ('Melissa', 19820606), ('Amber', 19840706), ('Sarah', 19811106), ('Ashley', 19850502), ('Bethanie', 19850323), ('Allison', 19860410), ('Bea', 19801128), ('Alexandra', 19850902), ('Carly', 19861126), ('Theresa', 19850310), ('Gabriela', 19800607), ('Shenay', 19840706), ('Angela', 19840927), ('Kelly', 19830318), ('Teryn', 19781212), ('Abigail', 19810712), ('Jessica', 19871110), ('Jamea', 19860907), ('Mary', 19881218), ('Tiffany', 19800314), ('Alexa', 19890910), ('Vania', 19890303), ('Ahsha', 19850321), ('Lauren', 19891001), ('Varvara', 19860521), ('Madison', 19900403), ('Audra', 19860421), ('Ashley', 19890620), ('Julie', 19790104), ('Melanie', 19910923), ('Kristie', 19920615), ('Gail', 19910605), ('Asia', 19910404), ('Coco', 19911206), ('Christina', 19920511), ('Mallory', 19900718), ('Lauren', 19910110), ('Hilary', 19881117), ('Sloane', 19930320), ('Alison', 19900703), ('Jamie', 19900108), ('Chelsey', 19900829), ('Beatrice', 19920406), ('Shelby', 19921013), ('Irina', 19900504), ('Lauren', 19931009), ('Madison', 19950217), ('Nicole', 19740801), ('Michelle', 19731228), ('Akiko', 19720214), ('Joy', 19621006), ('Caryn', 19711005), ('Luanne', 19721228), ('Julie', 19720510), ('Rachel Ann', 19721119), ('Judy', 19620511), ('Noelle', 19701218), ('Alysia', 19710131), ('Laura', 19670517), ('Amanda', 19780620), ('Julie', 19721007), ('Ann', 19670822), ('Melissa', 19720621), ('Jan', 19531223), ('Mary', 19620121), ('Sylvia', 19640127), ('Gail', 19470116), ('Diedre', 19711011), ('Caroline', 19651129), ('Kerry', 19501002), ('Kathy', 19670904), ('Stella', 19690309), ('Karen', 19680705), ('Cynthia', 19580614), ('Marlie', 19501120), ('Rona', 19690708), ('Kylie', 19610519), ('Helena', 19610201), ('Cheryl', 19640503), ('Jennifer', 19690715), ('Elizabeth', 19660406), ('Anne', 19660205), ('Alix', 19721022), ('Erica', 19690716), ('Stephanie', 19700424), ('Jill', 19671011), ('Jane', 19630123), ('Kathy', ''), ('Jean', 19700510), ('Ann', 19651028), ('Kirsten', 19690327), ('Wendy', 19600327), ('Nicole', 19610906), ('Vicki', 19570325), ('Mary Ann', 19560424), ('Christine', 19680118), ('Jennifer', 19600326), ('Julie', 19570621), ('Penny', 19550826), ('Cathy', 19580310), ('June', 19630619), ('Pam', 19750701), ('Stephanie', 19791023), ('Jane', ''), ('Gretchen', 19650626), ('Jane', 19660324), ('Holyn', 19731012), ('Kristi', 19690910), ('Linley', 19620501), ('Shelby', 19500626), ('Andrea', 19700128), ('Kathy', 19591224), ('Danielle', 19700322), ('Carol', 19610705), ('Jean', 19550606), ('Lori', 19650330), ('Edie', ''), ('Robin', ''), ('Kerri', 19681001), ('Lisa', 19700324), ('Mary', 19660508), ('Carol', 19591113), ('Katie', 19750429), ('Michele', 19660606), ('Shannon', 19670527), ('Gina', 19490515), ('Clare', ''), ('Cathleen', 19570316), ('Janice', 19510522), ('Betsy', 19540503), ('Lucia', 19601022), ('Wendy', 19680715), ('Allyson', 19631007), ('Debbie', 19620722), ('Marsha', ''), ('Linda', 19690503), ('Page', 19740622), ('Heather', 19711011), ('Gigi', 19701007), ('Marilda', 19650222), ('Christine', 19720714), ('Cynthia Ann', 19521114), ('Jenny', 19710226), ('Shelley', 19650421), ('Jackie', 19640104), ('Stephanie', ''), ('Michelle', 19610116), ('Genevieve', 19630819), ('Glynis', ''), ('Ann', 19520526), ('Allegra', ''), ('Cricket', 19610507), ('Bunny', 19460729), ('Holly Ann', 19701218), ('Amy', 19721112), ('Kathy', 19631005), ('Monique', 19841006), ('Erica', 19721128), ('Susan', 19651125), ('Rita', 19601018), ('Nina', 19610207), ('Donna', 19591005), ('Cissie', 19600108), ('Nancy', 19640804), ('Erika', 19631007), ('Cristina', 19770210), ('Terri', 19680118), ('Patty', 19730928), ('Katrina', 19681104), ('Katrina', 19800530), ('Anne', 19810420), ('Cory Ann', 19850122), ('Nicole', 19861103), ('Diana', 19790704), ('Tanner', 19840803), ('Shadisha', 19850712), ('Leslie', 19870525), ('Neha', 19860206), ('Megan', 19850719), ('Elizabeth', 19880603), ('Jewel', 19810910), ('Lindsey', 19851118), ('Raquel', 19821208), ('Brittany', 19910919), ('Kirsten', 19880814), ('Chieh Yu', 19920114), ('Alexis', 19830331), ('Amanda', 19861204), ('Catherine', 19940409), ('Tetiana', 19840904), ('Julia', 19910909), ('Alexandra', 19880214), ('Zoe Gwen', 19930921), ('Julia', 19890323), ('Jessica', 19940224), ('Grace', 19940506), ('Chi Chi', 19920705), ('Nicole', 19930303), ('Mallory', 19910128), ('Jennifer', 19860922), ('Samantha', 19950218), ('Victoria', 19951130), ('Maria', 19891126), ('Anne', 19850828), ('Megan', 19850311), ('Lena', 19881115), ('Katie', 19830503), ('Courtney B', 19920325), ('Kimberly', 19890509), ('Jacqueline', 19910830), ('Ester', 19930704), ('Eleanor', 19880626), ('Yasmin', 19880504), ('Anne Liz', 19960526), ('Alessondra', 19900906), ('Ryann', 19960723), ('Lucie', 19720406), ('Kelly S', 19730905), ('Kristina', 19790811), ('Wendy', 19750131), ('Julie', 19751016), ('Aurandrea', 19791121), ('Brandis', 19800213), ('Megan', 19781224), ('Alyssa', 19821119), ('Jennifer', 19780807), ('Jennifer', 19840217), ('Candice', 19820331), ('Michelle', 19780119), ('Kristy', 19790517), ('Andrea', 19881006), ('Lauren', 19800829), ('Iris', 19850613), ('Jennifer', 19810718), ('Ali', 19870923), ('Nicole', 19851124), ('Kaysie', 19800411), ('Krystina', 19880510), ('Riza', 19860210), ('Sarah', 19810627), ('Megan', 19830326), ('Story', 19830502), ('Christina', 19801127), ('Stacia', 19850921), ('Kaitlyn', 19920113), ('Chloe', 19900201), ('Amanda', 19870902), ('Kelcy', 19890411), ('June', 19950619), ('Krista', 19940914), ('Adria', 19791221), ('Susie', 19721210), ('Kori', 19731101), ('Elizabeth', 19770823), ('Agnes', 19800801), ('Courtenay', 19770227), ('Dee Dee', 19790211), ('Aurora', 19741107), ('Keirsten', 19730917), ('Ingrid', 19730602), ('Stephanie', 19761207), ('Sara', 19770113), ('Lori', 19810731), ('Milangela', 19811209), ('Brooke', 19790101), ('Lauren', 19820521), ('Amanda', 19780119), ('Kelley', 19850922), ('Meredith', 19720604), ('Jackie', 19840111), ('Megan', 19780427), ('Amanda', 19811126), ('Cammy', 19701225), ('Ditta', 19751226), ('Jennifer', 19731228), ('Krissy', 19791211), ('Annica', 19780902), ('Tory', 19850618), ('Whitney', 19860123), ('Sarah', 19801121), ('Jessyca', 19800826), ('Beau', 19800626), ('Katrina', 19880707), ('Stephanie', 19790129), ('Jennifer', 19881123), ('Jessica', 19871124), ('Sarah', 19880209), ('Kim Anh', 19831004), ('Ellah', 19881122), ('Lauren', 19820914), ('Link', 19861125), ('Aleke', 19820427), ('Kendra', 19831118), ('Arpi', 19830612), ('Erin', 19900328), ('Tiffany', 19820909), ('Robin', 19830621), ('Kristi', 19851222), ('Jennifer Lee', 19870227), ('Veronica Ruo Qi', 19891110), ('Danielle', 19910328), ('Shilpa', 19840412), ('Elizabeth', 19880526), ('Megan', 19870701), ('Melissa', 19880408), ('Lauren', 19890522), ('Alana', 19851031), ('Riley', 19901114), ('Kristen', 19880323), ('Mami', 19790715), ('Kit', 19810726), ('Stacey', 19910718), ('Elizabeth', 19810315), ('Nina', 19890707), ('Nadja', 19900607), ('Erica', 19901127), ('Jenna', 19851126), ('Tiya', 19860611), ('Natalie', 19850322), ('Courtney', 19820929), ('Kristy', 19900108), ('Susanna', 19831103), ('Alexa', 19901117), ('Aeriel', 19900928), ('Maureen', 19820528), ('Allie', 19910420), ('Sanaz', 19880621), ('Lauren', 19760912), ('Alexis', 19840927), ('Libby', 19940124), ('Lauren', 19930723), ('Michaela', 19880722), ('Tori', 19871124), ('Gabrielle', 19930227), ('Danielle Rose', 19931213), ('Tarakaa', 19860811), ('Danielle', 19910528), ('Ellen', 19931008), ('Brooke', 19920408), ('Mccall', 19900315), ('Macall', 19860205), ('Megan', 19880705), ('Nicole', 19930729), ('Alexandra', 19911130), ('Elizabeth', 19860524), ('Jade', 19921028), ('Brie', 19890507), ('Jan', 19950301), ('Simone', 19891230), ('Elizabeth', 19860731), ('Gabrielle Faith', 19961223), ('Sachia', 19950511), ('Taylor', 19960416), ('Lindsey', 19900104), ('Alexandra', 19950630), ('Alexandra', 19910213), ('Robin', 19930412), ('Brianna', 19940219), ('Olivia', 19960122), ('Whitney', 19860811), ('Emily J', 19910615), ('Caroline B', 19941031), ('Chalena', 19950818), ('Elizabeth Anita Alexandria', 19960806), ('Breanna Alexa Bachini', 19930521), ('Mary', 19950817), ('Betsy', 19600427), ('Eve', 19621028), ('Janet', 19670405), ('Jaime', 19611001), ('Angel', 19610830), ('Donna', 19550626), ('Valerie', 19540813), ('Lucinda', 19520717), ('J', ''), ('J', ''), ('D', ''), ('K', ''), ('B', ''), ('J', ''), ('R', ''), ('N', ''), ('E', ''), ('F', ''), ('Caroline', 19560622), ('D', ''), ('Wendy', ''), ('Nancy', 19530830), ('Susan', 19570107), ('Gretchen', 19560201), ('Anne', ''), ('Holly', 19690811), ('Margaret', 19601012), ('Clare', 19671008), ('Kathy', 19641104), ('Rita', 19660512), ('Marlene', 19810731), ('Linda', 19570701), ('Beverly', 19530124), ('Ann', 19551013), ('Robin', 19540923), ('A', ''), ('Maria', ''), ('Karen', ''), ('Karen', ''), ('Jenny', ''), ('Lisa', ''), ('Kathy', ''), ('Maria', 19600424), ('Judith', ''), ('Becky', ''), ('Connie', ''), ('Lori', ''), ('Joni', 19651125), ('Lisa', ''), ('Suzanne', ''), ('Shandra', 19680519), ('Merrilee', ''), ('Jennifer', 19660615), ('Chris', ''), ('Trisha', 19690203), ('Stephanie', 19690818), ('Sonya', 19670825), ('Susan', 19710412), ('Tanya', 19690302), ('Tonya', 19690821), ('Kara', 19730105), ('Melissa', 19740402), ('Victoria', 19761230), ('Trina', 19821230), ('Kristine', 19720623), ('Martha', 19691215), ('Candice', 19800207), ('Cindy', 19790422), ('Elizabeth', 19740824), ('Valerie', 19731228), ('Tracey', 19710129), ('Diana', 19680410), ('Alice', 19770830), ('Allison', 19660804), ('Vickie', 19710827), ('Stacey', 19750105), ('Marissa', 19780613), ('Susanna', 19720303), ('Rebecca', 19721119), ('Ashley', 19720408), ('Varalee', 19760502), ('Stephanie', 19770408), ('Elizabeth', 19631112), ('Bridget', 19740207), ('Leslie', 19720209), ('Traci', 19780805), ('Alison', 19741125), ('Amy', 19681007), ('Vanessa', 19760513), ('Laura', 19720426), ('Anna', 19761021), ('Betsy', 19751127), ('Kristen', 19781002), ('Mugette', 19810424), ('Tu', 19780208), ('Irene', 19790612), ('Jennifer', 19720416), ('Diana', 19751029), ('Jody', 19711122), ('Samantha', 19890509), ('Tristen Z', 19940501), ('Rachel', 19920719), ('Ashley', 19871106), ('Alexandra', 19920223), ('Natalie', 19910801), ('Lindsay', 19880226), ('Amelia', 19920802), ('Caroline', 19930313), ('Camila', 19950929), ('Josie', 19951105), ('Skylar Alexandra', 19940424), ('Brooke', 19960212), ('Alexandra', 19910413), ('Daniella', 19971105), ('Hayley', 19950517), ('Jody', 19780930), ('Ella', 19760917), ('Emily Ann', 19820328), ('Jacquelyn', 19801117), ('Lesley', 19781011), ('Kristen', 19770518), ('Cara', 19720421), ('Zuzanna', 19800403), ('Katie', 19800911), ('Marilyn', 19740114), ('Lena', 19830510), ('Brandi', 19770612), ('Andrea', 19780204), ('Sara', 19801022), ('Hillary', 19820417), ('Mariel', 19800220), ('Whitney', 19800508), ('Darian', 19790615), ('Alexandra', 19820310), ('Prim', 19810115), ('Janet', 19800628), ('Rachel', 19690211), ('Lindsay', 19821207), ('Kirsty', 19780517), ('Raluca Daniela', 19830717), ('Mindy', 19720322), ('Erin', 19830419), ('Mary Carlisle', 19780716), ('Erin', 19800116), ('Keiko', 19800429), ('Maiko', 19820623), ('Paige', 19740714), ('Janet', 19790529), ('Briana', 19781221), ('Stacey', 19721219), ('Kristin', 19720204), ('Julia', 19810518), ('Rochelle', 19800430), ('Selin', 19780706), ('Jennifer', 19730117), ('Luana', 19821205), ('Whitney', 19850811), ('Paloma', 19720823), ('Tumeka', 19761226), ('Maria', 19830319), ('Hyacinth', 19610809), ('Eva', 19840706), ('Kara', 19790920), ('Katie', 19841110), ('Melissa', 19840613), ('Emmy', 19870722), ('Alexandria', 19860310), ('Shari', 19641103), ('Michelle', 19791212), ('Alexandra', 19841228), ('Nicole', 19860203), ('Monica', 19851212), ('Caitlin', 19850517), ('Lia', 19800922), ('Michelle', 19870304), ('Sybil', 19770106), ('Jodi', 19810822), ('Liberty', 19870409), ('Mimi', 19841030), ('Melissa', 19861211), ('Jessi', 19870221), ('Courtney', 19880501), ('Chrissie', 19870902), ('Yvette', 19880612), ('Audra', 19830331), ('Leila', 19860206), ('Tamara', 19790924), ('Rebekah', 19791012), ('Sabita', 19840927), ('Shannon', 19870109), ('Courtney', 19851011), ('Polina', 19860408), ('Anamika', 19890413), ('Jie', 19871101), ('Georgette', 19840709), ('Christy', 19871212), ('Suzanne', 19880117), ('Courtney', 19900327), ('Cammie', 19871122), ('Nelly', 19901113), ('Veronica', 19870514), ('Keilly', 19900505), ('Kate', 19831111), ('Reka', 19890708), ('Bianca', 19890514), ('Thien Trang', 19910918), ('Pamela', 19910101), ('Morgan', 19920220), ('Julianna', 19850107), ('Subbadharmi', 19890708), ('Stephanie', 19930216), ('Kelsey', 19910408), ('Alexandra', 19870719), ('Amanda', 19880314), ('Chelsea', 19891211), ('Anna', 19840821), ('Jill M', 19910313), ('Kady', 19860317), ('Phoebe', 19880520), ('Emily', 19921201), ('Christian', 19840913), ('Keri', 19891225), ('Sabrina', 19860112), ('Nataly', 19900913), ('Maria', 19920619), ('Noel', 19930203), ('April', 19920508), ('Ellie', 19930808), ('Stephanie', 19901027), ('Nicole', 19911031), ('Anna', 19940308), ('Veronika', 19900920), ('Annie', 19930330), ('Kyle', 19940405), ('Chanelle', 19940119), ('Yawna', 19860801), ('Hilary', 19910513), ('Ivana', 19861108), ('Gira', 19860829), ('Claire', 19891129), ('Erin', 19880609), ('Caitlin', 19880219), ('Alexandra', 19850703), ('Jennifer', 19950412), ('Kimberly', 19961015), ('Natalie', 19891102), ('Elizaveta Anna', 19930831), ('Veronica M', 19911207), ('Karina', 19950706), ('Sylvia', 19860904), ('Sherry', 19950208), ('Katrine Isabel', 19960315), ('Denise', 19950417), ('Courtney', 19940325), ('Christina', 19960529), ('Noelle', 19881205), ('Lauren', 19950517), ('Breaunna', 19941222), ('Nicole', 19941230), ('Meredith', 19970521), ('Nadia', 19950114), ('Jackie', 19710922), ('Antoinette', 19850107), ('Kathleen', 19740511), ('Kylene', 19790725), ('Dana', 19730725), ('Audra', 19720605), ('Tracee', 19731009), ('Amie', 19800517), ('Jennifer', 19811128), ('Lashawnn', 19740602), ('Jacqueline', 19820209), ('Jennifer', 19770119), ('Kristy', 19741230), ('Susan', 19741201), ('Bridget', 19761018), ('Amy', 19690628), ('Sandra', 19750116), ('Khristen', 19750803), ('Stefanie', 19810322), ('Barrie', 19730724), ('Kate', 19820415), ('Amy', 19731107), ('Anne', 19780520), ('Lauren', 19740830), ('Dewonder', 19590127), ('Kendra', 19790828), ('Jamie', 19801106), ('Jennifer', 19750823), ('Audrey', 19850430), ('Marjorie', 19750503), ('Katie', 19770527), ('Aimee', 19820110), ('Megan', 19810519), ('April', 19781129), ('Maren', 19791106), ('Sarah', 19780514), ('Marie Ange', 19780114), ('Dina', 19680406), ('Margaret', 19760707), ('Mary Beth', 19760329), ('Patricia', 19841020), ('Ashley', 19821229), ('Kathryn', 19790225), ('Leslie', 19810718), ('Becky', 19640801), ('Julie', 19811223), ('Danielle', 19781110), ('Terri', 19650402), ('Amy', 19681215), ('Douglas', 19840522), ('Sara', 19850621), ('Karla', 19770318), ('Kristin', 19841130), ('Kristin', 19810705), ('Bonnie', 19850503), ('Natalie', 19830401), ('Jennifer', 19830702), ('Claire', 19700527), ('Lauren', 19780316), ('Alison', 19791129), ('Laura', 19710624), ('Katia', 19810816), ('Kara', 19771202), ('Violette', 19790927), ('Lisa', 19740221), ('Evonne', 19740923), ('Mandy', 19790312), ('Jessica', 19800415), ('Emily', 19811119), ('Callie', 19770711), ('Maggie', 19750529), ('Elina', 19820521), ('Terry Ann', 19740428), ('Kimberly', 19790725), ('Bettina', 19820718), ('Lindsay', 19800519), ('Johanna', 19750518), ('Amy', 19790124), ('Meiling', 19791112), ('Jennifer', 19781020), ('Vania', 19810428), ('Megan', 19831014), ('Lindsey', 19800201), ('Megan', 19820411), ('Angela', 19840329), ('Megan', 19840920), ('Nicolette', 19831108), ('Anita', 19860219), ('Alessandra', 19870112), ('Aradhana', 19820709), ('Tiffany', 19831228), ('Macey', 19830224), ('Kelcy', 19861225), ('Caylan', 19820701), ('Stephanie', 19820923), ('Jan', 19580317), ('Kate', 19830530), ('Karen', 19671205), ('Sarah Jane', 19820802), ('Catrina', 19840913), ('Bethany', 19821129), ('Lindsay', 19820811), ('Kathleen', 19820917), ('Amy', 19810415), ('Emilia', 19820204), ('Colleen', 19790212), ('Ashlee', 19850522), ('Saras', 19830726), ('Brittany', 19850420), ('Laila', 19810805), ('Natalie', 19851103), ('Celena', 19790130), ('Marine', 19780929), ('Cara', 19730424), ('Loni', 19810928), ('Christyn', 19850210), ('Cassy', 19850802), ('Manisha', 19770513), ('Jennifer', 19811121), ('Michelle', 19801002), ('Brook', 19851231), ('Samantha', 19840807), ('Stephanie', 19870411), ('Courtney', 19820502), ('Melissa', 19840112), ('Kristin', 19790227), ('Adriana', 19780902), ('Christine', 19831216), ('Julie', 19840521), ('Cristina', 19860826), ('Nadia', 19850209), ('Amanda', 19821020), ('Camelia', 19860406), ('Emily', 19850201), ('Danielle', 19840717), ('Rochelle', 19800627), ('Brianna', 19851215), ('Zena', 19880717), ('Adina', 19870619), ('Lauren', 19880204), ('Lauren', 19870928), ('Meg', 19870811), ('Ristine', 19850116), ('Jennifer', 19841115), ('Lindsey', 19860101), ('Lindsay', 19880524), ('Gloriann', 19840228), ('Patricia', 19740119), ('Kelly', 19820223), ('Amanda', 19870813), ('Elizabeth', 19860128), ('Whitney', 19851225), ('Laura', 19850506), ('Masha', 19840211), ('Karina', 19880811), ('Erin', 19850113), ('Randi', 19870211), ('Kewa', 19860701), ('Hala', 19850809), ('Dasha', 19870606), ('Suzanna', 19861013), ('Colleen', 19880209), ('Blair', 19830904), ('Simone', 19881010), ('Jessica', 19870304), ('Austin', 19860601), ('Preethi', 19850629), ('Christala', 19890709), ('Krista', 19900423), ('Marie', 19830721), ('Ashley', 19861113), ('Latrell', 19891212), ('Sheryl', 19850920), ('Amanda', 19850319), ('Blakeley', 19841114), ('Ashley', 19870917), ('Whitney', 19890109), ('Marlene', 19880329), ('Melissa', 19860801), ('Alex', 19870117), ('Jessica', 19811223), ('Megan', 19890204), ('Jacqueline', 19830608), ('Melody', 19830708), ('Sarah', 19910314), ('Marie', 19910614), ('Daron', 19851128), ('Amy', 19790324), ('Dina', 19871014), ('Mia', 19910312), ('Valerie', 19851231), ('Amanda', 19880523), ('Connor', 19870922), ('Elizabeth', 19920114), ('Brittany', 19870208), ('Kristen A', 19880325), ('Julie', 19880331), ('Sarah', 19880129), ('Emily', 19890724), ('Christine', 19871225), ('Amanda', 19850511), ('Nicole', 19880620), ('Laurianne', 19881018), ('Pamela', 19901124), ('Miya', 19871114), ('Rachel', 19830708), ('Joanna', 19891009), ('Lynn', 19791216), ('Claire', 19871108), ('Paola', 19920827), ('Lauren', 19890512), ('Erin Carol', 19930506), ('Cameron', 19881224), ('Julie', 19870627), ('Stefanie', 19890130), ('Hannah', 19910812), ('Katherine', 19860305), ('Olivia', 19880423), ('Christina', 19880426), ('Christina', 19881212), ('Cierra', 19910927), ('Milena', 19850506), ('Christin J', 19870731), ('Stephanie', 19900327), ('Kaysara', 19910623), ('Nina', 19900115), ('Deirdre', 19901205), ('Kristin', 19841024), ('Jacqueline', 19900913), ('Stephany', 19900609), ('Erica', 19900702), ('Julia', 19910916), ('Grace', 19891211), ('C C', 19911009), ('Sarah', 19910422), ('Marianne', 19850906), ('Monica', 19920622), ('Kate', 19920109), ('Amanda Marie', 19860106), ('Alexa', 19900824), ('Denise', 19890731), ('Molly', 19890525), ('Nelo', 19920705), ('Farwa', 19891101), ('Millie', 19641005), ('Brooke Lindsey', 19940622), ('Lilly F', 19911101), ('Brynn', 19910801), ('Karina', 19831112), ('Tracy', 19740827), ('Desiree', 19931110), ('Rachael', 19910427), ('Alrissa', 19920724), ('Amanda', 19870317), ('Olivia', 19910711), ('Caryssa L', 19920413), ('Monica', 19930108), ('Joelle', 19910606), ('Malika', 19910709), ('Theresa', 19930607), ('Mary Anne', 19920215), ('Morocco', 19921107), ('Mara', 19920222), ('Alejandra Maria', 19950228), ('Catherine', 19880430), ('Kate', 19901106), ('Abigail', 19900209), ('Sabrina', 19930224), ('Heatherm', 19890925), ('Stephanie', 19940511), ('Leighann', 19931204), ('Lauren', 19880816), ('Kayla', 19920921), ('Kir', 19891031), ('Skylar', 19930914), ('Julia', 19931207), ('Meghan', 19930621), ('Nida', 19911029), ('Lauren', 19880905), ('Kelly K', 19910531), ('Alyssa Grace', 19950215), ('Mary', 19911122), ('Madeleine', 19920319), ('Rachel', 19840302), ('Alex', 19911229), ('Kyra', 19960510), ('Suzy', 19940830), ('Remeice', 19891112), ('Kate', 19940201), ('Courtney', 19891015), ('Molly', 19930810), ('Stephanie', 19940131), ('Alexandra M', 19870719), ('Aleksandra', 19960409), ('Erin', 19880709), ('Jessica', 19930428), ('Spencer', 19950125), ('Anik', 19910405), ('Simone', 19920717), ('Emma', 19930623), ('Melissa', 19921004), ('Tina', 19950427), ('Julia', 19940613), ('Rachael', 19931209), ('Shelby', 19930114), ('Epiphany B', 19921217), ('Kaitlin', 19921215), ('Mariana', 19950927), ('Hannah', 19951103), ('Casey', 19910613), ('Deborah', 19940514), ('Jessica', 19931117), ('Kelsey', 19940821), ('Samantha', 19930126), ('Blair', 19940814), ('Martha V', 19900628), ('Amanda', 19930322), ('Sarah', 19920729), ('Emily', 19931112), ('Jamie', 19950308), ('Kelly', 19770505), ('Quinn', 19941110), ('Sophia', 19930330), ('Sierra A', 19900816), ('Mckenzie', 19940107), ('Stacey', 19900117), ('Courtney', 19910226), ('Rosalia', 19900208), ('Sydney', 19950207), ('Mia', 19950406), ('Erin Kane', 19960512), ('Laura', 19841119), ('Eva', 19921222), ('Elizabeth', 19940706), ('Sarah', 19930713), ('Elyse', 19870910), ('Sabrina', 19920912), ('Julia', 19890114), ('Gabriella', 19951208), ('Tanya', 19930914), ('Nyla', 19960730), ('Louisa', 19960516), ('Zina', 19980402), ('Tornado Alicia', 19980512), ('Madison', 19970919), ('Rima', 19951116), ('Kourtney J', 19940907), ('Natasha', 19940823), ('Erin', 19901230), ('Rachel May', 19941113), ('Jillian', 19941210), ('Caroline', 19960315), ('Dominique', 19870203), ('Trelsie', 19890707), ('Angela', 19950604), ('Nicole', 19980429), ('Kim', 19951027), ('Emina', 19930330), ('Lynda', 19921123), ('Joanna Mary', 19930201), ('Caroline', 19960103), ('Julia', 19940403), ('Callie', 19910904), ('Maxine', 19910710), ('Katie', 19921211), ('Emma Christine', 19980201), ('Johnnise', 19960510), ('Katerina', 19970717), ('Jessica', 19970105), ('Marjorie', 19880420), ('Maci', 19931007), ('Kaitlyn', 19971204), ('Jacqueline', 19941203), ('Charity', 19870711), ('Parris', 19980708), ('Jamie', 19930819), ('Miriam Ruth', 19940724), ('Elizabeth', 19910118), ('Amanda', 19860130), ('Lindsay', 19780708), ('Erica', 19860327), ('Dina', 19711211), ('Robyn', 19850111), ('Anita', 19810402), ('Casey', 19840501), ('Emily', 19850224), ('Jamie', 19880415), ('Brittany', 19880627), ('Elizabeth', 19550921), ('Carolyn', 19900415), ('Cassandra', 19891211), ('Prissy', 19910807), ('Kristin', 19830420), ('Diamond', 19901226), ('Celia', 19860527), ('Tiffany', 19891126), ('Jennifer', 19890531), ('Komal', 19930108), ('Roxanne', 19890826), ('Mandy', 19810914), ('Amanda', 19800324), ('Alissa', 19671209), ('Kay', 19570927), ('Jane', 19661222), ('Tracie', 19610116), ('Elizabeth', 19630811), ('Cinda', 19710410), ('Tracy', 19611021), ('Dena', 19650928), ('Hemel', 19660108), ('Karen', 19630803), ('Reka', 19670612), ('Vincenza', 19660820), ('Lisa', 19640803), ('Lynn', 19661018), ('Jill', 19731226), ('Julie', 19710609), ('Kilmeny', 19660218), ('Kay', 19690131), ('Debbie', 19651129), ('Anne Marie', 19660720), ('Leslie', 19660908), ('Lisa', 19630604), ('Lisa', 19611106), ('Tory', 19660712), ('Kylie', 19700509), ('Anya', 19690220), ('Jennifer', 19670106), ('Diana', 19721007), ('Betsy', 19671127), ('Katrina', 19671129), ('Karen', 19701102), ('Susan', 19710206), ('Sherri', 19730118), ('Tonya', 19691110), ('Julie', 19680817), ('Susan', 19710206), ('Jamie', 19691029), ('Alita', 19630112), ('Tara', 19681223), ('Erika', 19720516), ('Kellie', 19670601), ('Happy', 19680605), ('Angie', 19710323), ('Bonnie', 19770412), ('Farley', 19741212), ('Tunecia', 19701023), ('Roseann', 19710227), ('Allison', 19710927), ('Hillery', 19610619), ('La Shawnn', 19740206), ('Sylvia', 19610419), ('Kathy', 19741105), ('Zuzanna', 19790726), ('Cassi', 19850902), ('Lejla', 19870206), ('Danielle', 19820120), ('Geneva', 19871225), ('Katie', 19891023), ('Katie', 19881216), ('Brittany', 19940406), ('Allie', 19950630), ('Sofia', 19981114), ('Mia', 19970723), ('Ty Ana', 19970313), ('Karina Kristina', 19981021), ('Jessica', 19890916), ('Trisha', 19981027), ('Ashley', 19881017), ('Tina', 19920831), ('Tatijana', 19971116), ('Taylor L', 19950117), ('Alexa', 19980707), ('Emerald', 19970905), ('Marie', 19970611), ('Alexandra', 19950224), ('Aleah', 19910923), ('Sarah', 19941219), ('Usue Maitane', 19981028), ('Ellie', 19970710), ('Maia A', 19960921), ('Raquel', 19980128), ('Peggy', 19951110), ('Rebecca', 19971004), ('Camila', 19961125), ('Karyn', 19940912), ('Ayla', 19960715), ('Rasheeda', 19950630), ('Amy', 19941028), ('Ariana', 19960126), ('Luisa', 19951005), ('Mary', 19910802), ('Kristi', 19900427), ('Ronit', 19931203), ('Julia Christine', 19921027), ('Kristina N', 19910125), ('Macie', 19941023), ('Jessica', 19950102), ('Rhiann', 19940622), ('Frances', 19940222), ('Kelly', 19960221), ('Hanna', 19980225), ('Natalie', 19960508), ('Dasha', 19961011), ('Elizabeth', 19910218), ('Brianna', 19951012), ('Kristin', 19951122), ('Kristina', 19951204), ('Maddie', 19971117), ('Raveena', 19980723), ('Daniella', 19971027), ('Laura', 19970305), ('Idia', 19930922), ('Chloe Michele', 19970905), ('Morgan', 19941219), ('Nikki', 19960418), ('Sianna', 19900804), ('Nicole', 19990508), ('Mercedes', 19970525), ('Lourdes', 19990531), ('Adi', 19951213), ('Anna', 19971103), ('Alexandra', 19980719), ('Katarina', 19960704), ('Michaela', 19990726), ('Ena', 19980212), ('Catherine Cartan', 19990408), ('Hadley', 19960311), ('Madison', 19960402), ('Jaeda', 19990728), ('Jeannez', 19960707), ('Erica', 19980316), ('Jessie', 19980419), ('Andie K', 19970107), ('Alexandria', 19960511), ('Gabriella', 19960709), ('Kelly', 19990509), ('Terri', 19960723), ('Angel', 19850125), ('Maria', 19970506), ('Alexis', 19980809), ('Rianna', 19960903), ('Megen', 19960709), ('Caroline', 19980905), ('Sophie', 19970528), ('Nicole', 19960504), ('Jacqueline', 19970531), ('Jessica', 19970709), ('Adriana', 19890308), ('Kylie', 19970606), ('Yuki Kristina', 19950819), ('Lexi', 19950525), ('Caroline', 19970726), ('Ingrid', 19980616), ('Alexandra', 19970301), ('Nada', 20000308), ('Alexis', 19950606), ('Felicity', 19970313), ('Tory', 19930105), ('Aimee', 19940907), ('Alli', 19961203), ('Claudia', 19961206), ('Brooke', 19951010), ('Marina', 19981123), ('Zoe Adeline', 19941217), ('Jessica', 19970605), ('Ashley', 19920829), ('Valerie', 19971122), ('Ashley', 19990208), ('Brittany', 19920303), ('Olivia', 19940623), ('Taylor', 19950731), ('Alexis', 19950724), ('Sara', 19971217), ('Lindsay', 19930107), ('Liza', 19950317), ('Jayci', 20000517), ('Marina', 19920314), ('Sydney', 19990430), ('Alyza', 19951122), ('Sophia', 19920113), ('Riley', 19990615), ('Delaney', 19981028), ('Jane', 19961112), ('Valerie Ann', 19980801), ('Carolyn', 19970524), ('Maegan', 19950416), ('Tamara', 19971129), ('Mary', 19981025), ('Victoria', 19990401), ('Kennedy', 19970521), ('Amy', 19970120), ('Makenna', 19980226), ('Stephanie', 19980415), ('Nicole Taylor', 19990426), ('Claire', 20000525), ('Jada', 19990129), ('Sara', 19970723), ('Hannah', 19960923), ('Sophia', 19971005), ('Akiko', 19930913), ('Karina', 19970808), ('Haley', 19910403), ('Paige', 19970222), ('Kayla', 19990928), ('Carson', 20000909), ('Amanda', 19940813), ('Maria', 19990721), ('Kylie', 19990321), ('Luciana', 19981001), ('Zoe', 20010308), ('Sachi', 19981129), ('Audrey', 19951029), ('Anna', 19970319), ('Abigail', 20010122), ('Cameron', 19990920), ('Katelyn', 19921211), ('Katharine', 19961019), ('Elyse', 19981014), ('Mimi', 19930430), ('Bess', 19971029), ('Ines Karmen', 19970615), ('Taylor', 19990615), ('Kristen', 19970407), ('Sabrina', 19971003), ('Desirae', 19940111), ('Sarah', 19960418), ('Rachel', 19961108), ('Victoria', 19990807), ('Nini', 19950909), ('Francesca', 19970722), ('Makenzie', 19990610), ('Chiara', 19980826), ('Melissa', 19930602), ('Morgan', 19990416), ('Jerricka', 19950116), ('Eva', 19961102), ('Miranda', 19990307), ('Teresia', 19990529), ('Julia', 19971217), ('Malkia', 20000808), ('Lorraine M', 19930615), ('Carol', 19960218), ('Jocelyn', 19900526), ('Roosh', 19920321), ('Alexa', 19980703), ('Alyvia', 20000503), ('Katie', 19990929), ('Meible', 19990519), ('Elizabeth', 20010712), ('Emma', 20010518), ('Arianna', 19950206), ('Kiah', 19950117), ('Alyssa', 20000210), ('Stephanie', 19880402), ('Sofia', 19990722), ('Sarah', 19930814), ('Melan', 19970406), ('Alexandra', 19990105), ('Dilara', 19990911), ('Hurricane Tyra', 20010302), ('Taylor', 19980222), ('Nami', 19980827), ('Marcella', 20001012), ('Sophia', 20010630), ('Delisha', ''), ('Haley', ''), ('Jenna', ''), ('Nikita', 19931021), ('Hoda', ''), ('Meredith', 19990310), ('Morgan', 19950317), ('Kirsten', 19940508), ('Maya', 19940527), ('Kat', 19930215), ('Alexandra', 19930215), ('Meghan', 19971028), ('Salma', 20000828), ('Madeline', 19990307), ('Lindsay', 19981217), ('Alexa', 20010908), ('Mary Catherine', 19971104), ('Cheyenne', 19960326), ('Neri', 19990902), ('Jesse', 20011004), ('Ann', 20000626), ('Natalia', 19930929), ('Whitney', 20020417), ('Christina', 19970725), ('Sofia', 19980703), ('Nicole', 20000805), ('Kenadi', 19970313), ('Paiton', 19980808), ('Shannon', 19950915), ('Elysia', 20000324), ('Ashley', 19991026), ('Alexis', 19970314), ('Caty', 20011120), ('Isabella', 20010706), ('Elizabeth', 20010519), ('Anna', 20020306), ('Dakota', 20020508), ('Janice', 19990105), ('Amanda', 20010831), ('Jada', 19980319), ('Hind', 19990228), ('Mikaela', 19890801), ('Micheline', 19970428), ('Kendal', 19940106), ('Anna', 19991008), ('Mia', 19981021), ('Chloe', 20010830), ('Abigail', 20010310), ('Ryan', 19990510), ('Maia', ''), ('Jana', 19941110), ('Shale', 20011015), ('Helen Abigail', 19980520), ('Kariann', 19990116), ('Kennedy', 19980903), ('Caroline', 19980929), ('Allison', 19981031), ('Melissa', 19970624), ('Ellyse', 19961109), ('Charleen', 19410918), ('Doris', 19250620), ('Patricia', 19370601), ('Pauline', 19190806), ('Helen', 19290507), ('Mary', ''), ('Althea', 19270825), ('Carrie', 19571026), ('Cathy', 19510822), ('Karen', 19570408), ('', ''), ('Barbara', ''), ('Susan', 19611219), ('Jan', 19630609), ('Diane', 19650626), ('Carol', 19620605), ('Leanne', ''), ('Shelley', 19631120), ('Maureen', ''), ('Lorrie', 19601015), ('Tiffany', 19600417), ('Sarah', 19741010), ('Meg', ''), ('Wendy', ''), ('Lynn', 19660819), ('Heidi', 19640507), ('Jacqueline', 19620329), ('Sheri', 19690629), ('Diane', 19710121), ('Angela', 19641211), ('Nancy', ''), ('Liz', 19640423), ('Jamie', 19630530), ('', ''), ('Laura', 19681210), ('Jill', ''), ('Courtney', 19560622), ('Tiffany', 19810121), ('Kristen', 19810501), ('Wendy', 19681001), ('Sheila', ''), ('Heidi', 19601007), ('Julie', 19610523), ('Deborah', 19701129), ('Jennifer', ''), ('Cindy', 19591207), ('Lynn', ''), ('I', ''), ('Lisa', 19600808), ('Jill', 19540907), ('Aschara', ''), ('Heidi', 19720713), ('Julie', 19710609), ('', ''), ('G', ''), ('Stephanie', 19661010), ('Lucy', 19540402), ('Cathy', ''), ('', ''), ('Emmy', ''), ('', ''), ('Claudette', ''), ('Lisa', ''), ('Lynn', 19631114), ('Lindsay', ''), ('Lisa', 19630218), ('Virginia', ''), ('Lloyd', 19451208), ('Suzanne', 19750612), ('Caren', 19611110), ('Allegra', 19720113), ('Molly', 19630215), ('Lori', 19600112), ('Lindsay', 19780417), ('Adrienne', 19680903), ('Quynh', 19710627), ('Kari', 19810120), ('Lisa', 19590212), ('Christa', 19790115), ('Kelly', 19770505), ('Massoumeh', 19770803), ('Louise', 19500119), ('Jayne', 19741006), ('Christine', ''), ('Kim', 19780329), ('Lani', 19600808), ('Julie', 19690425), ('Ruth Ann', 19700506), ('Lauren', 19830423), ('Tasha', 19760223), ('Kealy', 19801030), ('Courtney', 19721230), ('Julie Ann', 19750618), ('Nicole', 19741001), ('Ashlee', 19801005), ('Kelly', 19751106), ('Alexandra', 19790210), ('Mary', 19730912), ('Lisa', 19660204), ('Monty', 19650506), ('Julie Anne', 19800911), ('Lorrie', 19651203), ('Kendra', 19760621), ('Chris', 19610706), ('Christine', 19850303), ('Rankin', 19840126), ('Julia', 19850721), ('Sabaea', 19811125), ('Nicole', 19750602), ('Joyce', 19800628), ('Sarah', 19820410), ('Jean Marie', 19651109), ('Stacey', 19720110), ('Varita', 19820702), ('Shera', 19780910), ('Trisha', 19710617), ('Suzanne', 19680921), ('Lisa', 19801119), ('Martha', 19551005), ('Kandiss', 19770221), ('Brooke', 19780413), ('Cristina', 19750825), ('Jasmine', 19810102), ('Kathleen', 19830125), ('Melissa', 19770524), ('Michelle', 19731114), ('April', 19831011), ('Olivia', 19810310), ('Melissa', 19650221), ('Cami', 19720314), ('Marissa', 19780318), ('Kristin', 19720204), ('Christi', 19610509), ('Cindy', ''), ('Ashley', 19830506), ('Leigh', 19831014), ('Natalia', 19831110), ('Nikhila', 19850208), ('Rachel', 19820916), ('Alison', 19850118), ('Cameron', 19830328), ('Gretchen', 19820304), ('Cackie', 19661107), ('Stephanie', 19650104), ('Miriam', 19850925), ('Nicole', 19880219), ('Lilivette', 19800225), ('Jonni', 19791203), ('Amanda', 19850102), ('Weyli', 19800722), ('Helene', 19841215), ('Amanda', 19841101), ('Nicole', 19870615), ('Stefani', 19841215), ('Laura', 19860217), ('Tifanie', 19880920), ('Mary', 19651124), ('Katherine', 19730414), ('Monica', 19800204), ('Nicole', 19850105), ('Shanna', 19750428), ('Jane', 19890926), ('Estelle', 19890503), ('Maria', 19820204), ('Jessica', 19860812), ('Renata', 19650224), ('Laura', 19830408), ('Lindsey', 19840313), ('Christy', 19850925), ('Timberly', 19831209), ('Brooke', 19850423), ('Kelli Elizabeth', 19940409), ('Melanie', ''), ('Whitney P', 19930625), ('Sydni', 19880612), ('Jasmine Nicole', 19930826), ('Alexandra', 19920812), ('Amber', 19870605), ('Kelsey', 19920610), ('Alex', 19920225), ('Ashley M', 19940304), ('Lauren', 19940828), ('Stacia', 19930914), ('Alexandria', 19900111), ('Rozel Asuncion', 19950616), ('Bolan', 19890908), ('Annie', 19920829), ('Eva', 19941007), ('Whitney', 19900909), ('Hanna', 19911107), ('Mandy', 19910501), ('Gia', 19900614), ('Brooke', 19951105), ('Lisa', 19680519), ('Alexandra M', 19930120), ('Sonya Sheeran', 19940816), ('Shinann', 19900608), ('Nicolette', 19950824), ('Rebecca', 19921125), ('Ashley', 19960430), ('Savannah', 19950115), ('Margaret', 19570423), ('Carlee', 19950724), ('Sarah', 19850718), ('Caroline', 19840926), ('Alexia', 19940421), ('Micaela', 19890311), ('Tina', 19810116), ('Manon Cristina', 19941224), ('Hailey M', 19930127), ('Tiffany', 19911216), ('Devan', 19940528), ('Courtenay', 19770227), ('Christine', 19931110), ('Emily', 19900517), ('Leyla', 19930423), ('Alexis', 19880722), ('Di Andrea', 19950730), ('Jandayia', 19960303), ('Margarita', 19950317), ('Olivia', 19941211), ('Caitlin', 19910905), ('Kara', 19910629), ('Paloma', 19890313), ('Susie', 19491114), ('Emily', 19861118), ('Abbie', 19951121), ('Alanna', 19950107), ('Siobhan', 19871110), ('Kayla Symone', 19960110), ('Margie', 19901106), ('Jamie', 19820521), ('Adria', 19791221), ('Lynn', 19941106), ('Nadege', 19960527), ('Lauren', 19941203), ('Tiffany', 19881204), ('Sarah', 19880907), ('Victoria', 19941214), ('Natalia', 19950325), ('Alexandra', 19931013), ('Montana', 19970219), ('Samantha Rose', 19940410), ('Angela', 19980331), ('Samantha', 19950527), ('Elizabeth', 19890419), ('Sarah', 19941121), ('Gabriela', 19950418), ('Tina', 19911222), ('Mia', 19920116), ('Stephanie', 19920831), ('Kennan', 19960317), ('Madison', 19930602), ('Whitney', 19910815), ('Sarah', 19960925), ('Brooke', 19980614), ('Jessie Lynn', 19951228), ('Brittany', 19941212), ('Kylie', 19870826), ('Erin', 19861102), ('Lindsay', 19821118), ('Jessica', 19801107), ('Yuliya', 19860609), ('Kathryn', 19831129), ('Lyndsey', 19820509), ('Tiana', 19841014), ('Keri', 19870310), ('Sarah', 19871201), ('Alyssa', 19841006), ('Rachel', 19870205), ('Angelina', 19521229), ('Amy', 19540720), ('Bernadette', 19821015), ('Tarrin', 19820423), ('Christine', 19670817), ('Christian', 19870108), ('Emily', 19820728), ('Kelly', 19700330), ('Courtney', 19900729), ('Taylor', 19900818), ('Carissa', 19900507), ('Heather', 19810210), ('Georgiana', 19880624), ('Michelle', 19910127), ('Brintney', 19871008), ('Chisako', 19870720), ('Kristen', 19890819), ('Jessica', 19910223), ('Susie', 19700212), ('Ashley', 19830410), ('Megan', 19890818), ('Larraine', 19910713), ('Courtney', 19920503), ('Tiffany', 19860519), ('Olga', 19880819), ('Shauna', 19900424), ('Canna', 19860515), ('Jennifer', 19890525), ('Keri', ''), ('Lauren', 19890922), ('Whitney', 19880108), ('Caitlyn', 19891220), ('Stephanie', 19890627), ('Jacqueline', 19910905), ('Natalia Maria', 19880414), ('Katie', 19921222), ('Stephanie', 19880527), ('Kirsten', 19810703), ('Taylor', 19881121), ('Rebecca', 19880627), ('Maggie', 19881230), ('Arianna', 19910421), ('Katrina', 19860415), ('Jennifer', 19851029), ('Amber', 19920313), ('Kali A', 19880211), ('Merritt', 19890702), ('Whitney', 19860409), ('Jovana', 19900831), ('Daisy', 19841010), ('Danice', 19801001), ('Dana', 19870713), ('Kellie', 19871004), ('Magdalena', 19880701), ('Alison', 19900425), ('Myke', 19610608), ('Isadora', 19920421), ('Kelly', 19900622), ('Kristina', 19890516), ('Lindsey', 19930106), ('Emily Theresa', 19901123), ('Lauren', 19900423), ('Jenna', 19931127), ('Elizabeth', 19831216), ('Kelly', 19891215), ('Chelsea', 19880701), ('Sabrina', 19930104), ('Jamila', 19920114), ('Tracy', 19860926), ('Whitney', 19870831), ('Margaret', 19910927), ('Alexandra', 19920422), ('Mikayla', 19880525), ('Hailee', 19880530), ('Maureen', 19900314), ('Catherine R', 19910609), ('Erin', 19900530), ('Maryam', 19930203), ('Shabnam', 19910726), ('Caitlyn', 19931013), ('Chelsea', 19850919), ('Ashley', 19820703), ('Christina', 19890331), ('Chanel', 19930618), ('Amanda', 19890125), ('Alexandra', 19891129), ('Monica', 19901123), ('Lauren', 19890811), ('Jacquelyn', 19870304), ('Jacquelynn', 19890111), ('Courtney M', 19880916), ('Courtney', 19820114), ('Kristen', 19820114), ('Cameron', 19881217), ('Caroline', 19900110), ('Susanne', 19750213), ('Sarah', 19920801), ('Niltooli', 19900411), ('Victoria', 19891231), ('Hiromi', 19900510), ('Rachel', 19900209), ('Sena', 19970605), ('Christi', 19960204), ('Tatum', 19970428), ('Madeline', 19940911), ('Julia', 19890628), ('Kelly', 19941021), ('Jasmine Janelle', 19920519), ('Maria', 19950924), ('Monet', 19960106), ('Cordelia Currey', 19930607), ('Millie', 19911004), ('Madison', 19941227), ('Zaina', 19970519), ('Katelyn', 19870608), ('Amanda', 19961028), ('Anna Kate', 19941011), ('Tamijean', 19980616), ('Victoria', 19961202), ('Christiana', 19951116), ('Angie', 19750716), ('Kerry', 19680528), ('Anna', 19960128), ('Sabrina', 19920113), ('Brienne', 19971125), ('Sarah', 19960513), ('Stephanie J', 19960305), ('Alexus', 19970206), ('Alexandra', 19990630), ('Chloe', 19900921), ('Megan', 19960122), ('Erin', 19941226), ('Sydney', 19950909), ('Katherine', ''), ('Lauren', 19990905), ('Teresa', 19941010), ('Alix', 19950718), ('Alaina', 19980809), ('Cassie', 19950201), ('Morgan', 19940208), ('Kenna', 19930918), ('Kelli', 19931202), ('Lauren', 19940618), ('Katrina', 19920314), ('Taylor', 19921208), ('Sara Catherine', 19970130), ('Tamara', 19850418), ('Mckenna Alexandra', 19970303), ('Caroline', 19990809), ('Hada', 19980710), ('Lauren', 19970108), ('Jacara', 19980704), ('Ndindi Inziani', 19971224), ('Susanne', 19980505), ('Bianca', 19960804), ('Caitlin', 19960406), ('Iesha', 19911109), ('Chelsie Marie', 19920321), ('Aurora', 19921204), ('Alexandra', 19950811), ('Karolina', 19990305), ('Skylar', 19950616), ('Jillian', 20010513), ('Gabrielle', 19960114), ('Gabriella', 19971216), ('Allison', 19980324), ('Madeline', 19970403), ('Darya', 19981019), ('Seriana', 19980227), ('Erin', 19960312), ('Katherine', 20001206), ('Vivian', 20000111), ('Stephanie M', 19931110), ('Sabrina', 19971216), ('Kate', 19971013), ('Emma', 20000212), ('Lauren', 20010728), ('Kayla', 19930220), ('Khume', 19961023), ('Christiana', 19970614), ('Candace Olivia', 19800101), ('Alycia', 20001231), ('Mikayla', 19990722), ('Tiffany', 19971009), ('Sanyukta', 20010928), ('Karly', 19850115), ('Emma', 19940624), ('Arielle', 20000910), ('Marjorie', 19980202), ('Anastasiya', 19990324), ('Natasha', ''), ('Addison', ''), ('Mbalia', 19980107), ('Safiya', ''), ('Taylor', 20010406), ('Natasha', 19920609), ('Katherine', 20010213), ('Madison', 19961215), ('Omolola', 19840818), ('Reagan', 19980505), ('Katelyn', 19960909), ('Sophie', 20021031), ('Gabrielle', 19920202), ('Taylor', 19981203), ('Andrea', 19940728), ('Annie', 19870905), ('Olivia', 19990308), ('Imani', 20011220), ('Lauren', 20020523), ('Taylor', 20000807), ('Nicole', 20000304), ('Jane', 19881118), ('Chelsea', 20000819), ('Peyton', 19990915), ('Ellie', 20000523), ('Jane', 19931227), ('Anna', 20010815), ('Rosalyn', 19930622), ('Madison', 19990419), ('Sophia', 20010718), ('Jasmine', 19990813), ('Theresa', 19701102), ('Spirit', 19941027), ('Najah', 20010909), ('Sharmada', 19990810), ('Nicole', 20000812), ('Nina', 20020117), ('Alexa', 20020906), ('Naomi', 20020516), ('Sabina', 20010406), ('Katie', 20011231), ('Nikki', 20011019), ('Mccartney', 19990708), ('Tricia', 19920706), ('Peyton', 20011008), ('Anika', 20010807), ('Dalayna', 20001216), ('Kolie', 20000317), ('Cassie', 19960225), ('Anna', 20020102), ('Monica', 19950419), ('Taysia', 20000708), ('Kathleen', 19940728), ('Amanda', 19990718), ('Jimena', 20000707), ('Cassidy', 19950510), ('Brittany', 19950405)]
Gold Output      : [('Jolene', 19680831), ('Lisa', 19730810), ('Meilen', 19780117), ('Serena', 19810926), ('Chanda', 19760218), ('Amy', 19720919), ('Tara', 19770526), ('Meghann', 19790413), ('Erika', 19721014), ('Lilia', 19780407), ('Jane', 19740621), ('Jennifer', 19760329), ('Alexandra', 19801215), ('Linda', 19710211), ('Brie', 19800121), ('Corina', 19780126), ('Marissa', 19800623), ('Lindsay', 19760608), ('Kathleen', 19461027), ('Geri', ''), ('Rosie', 19480916), ('Joan', ''), ('Mary Ann', 19461125), ('Billie Jean', 19431122), ('Patti', 19491221), ('Sharon', 19520224), ('Mona', 19481128), ('Ann', 19510504), ('Chris', 19541221), ('Janet', 19530806), ('Jill', 19540519), ('Julie', 19451208), ('Ann', 19550822), ('Joy', 19540519), ('Pam', 19510417), ('Peggy', 19490202), ('Martina', 19561018), ('Laura', 19490504), ('Sally', 19550325), ('Cecilia', 19470524), ('Rene', 19570512), ('Beth', 19570613), ('Patricia', 19511125), ('Kim', 19561011), ('Betsy', 19561023), ('Barbara', 19570402), ('Dianne', 19580811), ('Felicia', 19570720), ('Lindsay', 19550124), ('Lele', 19560910), ('Diane', 19550615), ('Rosalyn', 19601102), ('Marcie', 19530910), ('Pam', 19620704), ('Barbara', 19570501), ('Candy', 19550324), ('Bonnie', 19630911), ('Barbara', 19611022), ('Anne', 19590701), ('Paula', 19570110), ('Nancy', 19550522), ('Andrea', 19650604), ('Anne', 19610928), ('Leslie', 19570312), ('Kathy', 19591203), ('Mary Lou', 19610806), ('Sherry', 19590606), ('Lea', 19590120), ('Kim', 19571222), ('Tracy', 19621212), ('Kate', 19521025), ('Wendy', 19600929), ('Andrea', 19640118), ('Zina', 19631116), ('Susan', 19640628), ('Camille', 19660602), ('Alycia', 19610218), ('Jane', 19531206), ('Vicki', 19620925), ('Heather', 19610611), ('Robin', 19631210), ('Gigi', 19640222), ('Kathy', 19670324), ('Anna Maria', 19601022), ('Beth', 19640528), ('Lori', 19631218), ('Laura', 19630317), ('Kim', 19570928), ('Shelley', 19630619), ('Barbara', 19640703), ('Michaela', 19660227), ('Shawn', 19671221), ('Elise', 19620305), ('Sandy', 19581013), ('Linda', 19691224), ('Lisa', 19620714), ('Terry', 19551128), ('Ann', 19591031), ('Lisa', 19651016), ('Molly', 19650312), ('Hu', 19630416), ('Dee Ann', 19620611), ('Jamie', 19620121), ('Beverly', 19650909), ('Louise', 19620107), ('Cammy', 19681011), ('Susan', 19590415), ('Caryn', 19610314), ('Tina', 19521124), ('Terry', 19661218), ('Marianne', 19671017), ('Gretchen', 19640207), ('Kathrin', 19621128), ('Pamela', 19630703), ('Lindsay', 19620731), ('Jennifer', 19670702), ('Jennifer', 19620426), ('Carol', 19621009), ('Jill', 19640904), ('Elizabeth', 19680826), ('Pam', 19631220), ('Melissa', 19680411), ('Cynthia', 19640326), ('Amy', 19690902), ('Sherri', 19640202), ('Stephanie', 19650206), ('Patty', 19650331), ('Penny', 19640411), ('Wendy', 19640420), ('Katrina', 19680805), ('Leigh Anne', 19641214), ('Donna', 19710705), ('Jennifer', 19690226), ('Andrea', 19710930), ('Anna', 19660117), ('Kimberly', 19730327), ('Laxmi', 19721109), ('Kathy', 19650825), ('Halle', 19690805), ('Ronni', 19660510), ('Ann', 19701013), ('Mary Joe', 19710819), ('Jeri', 19701211), ('Carrie', 19720428), ('Shaun', 19681213), ('Audra', 19711117), ('Stacey', 19701113), ('Tami', 19681113), ('Stacey', 19680319), ('Ginger', 19680914), ('Monica', 19731202), ('Patty', 19680118), ('Nicole', 19690826), ('Jessica', 19700913), ('Kimberly', 19711020), ('Stephanie', 19691105), ('Debbie', 19700825), ('Susan', 19701205), ('Caroline', 19660825), ('Elly', 19690825), ('Meredith', 19710428), ('Sandra', 19740910), ('Anne', 19770119), ('Lindsay', 19770628), ('Venus', 19800617), ('Samantha', 19790117), ('Karin', 19771210), ('Jill', 19740704), ('Bunny', 19570905), ('Rayni', 19560524), ('Jennifer', 19810210), ('Holly', 19790210), ('Nancy', 19420823), ('Dorothy', 19250703), ('Kristy', 19500815), ('Valerie', 19490629), ('Linda', 19501021), ('Peaches', 19490416), ('Tory Ann', 19420808), ('Pamela', 19500312), ('Denise', 19500731), ('Wendy', 19470331), ('Becky', ''), ('Nancy', 19520731), ('Barbara', 19540304), ('Kristien', 19520725), ('Janet', 19530628), ('Daryl', 19540507), ('Ching Ling', 19481008), ('Robin', 19580513), ('Patricia', 19410811), ('Laurie', 19551104), ('Donna', 19541109), ('Linda', 19521114), ('Julie', 19480113), ('Jeanne', 19571005), ('Laurie', 19550614), ('Kathy', 19560618), ('Janice', 19520710), ('Kathy', 19561123), ('Jane', 19530810), ('Marita', 19560219), ('Susie', 19570916), ('Mary', 19500721), ('Mary', 19540907), ('Mary', 19570312), ('Carrie', 19550822), ('Ruta', 19551118), ('Mareen', 19600815), ('Robin', 19560413), ('Caroline', 19601104), ('Emilse', 19571219), ('Kay', 19570925), ('Zenda', 19591212), ('Betty Ann', 19500226), ('Jeanne', 19591207), ('Linda', 19610605), ('Julie', 19620205), ('Stacy', 19590405), ('Dana', 19591126), ('Roberta', 19581103), ('Joyce', 19580503), ('Andrea', 19550406), ('Trey', 19591127), ('Jenny', 19650419), ('Leigh Anne', 19640108), ('Joanne', 19541030), ('Michelle', 19670627), ('Nancy', 19580418), ('Felicia', 19611231), ('Jean', 19581025), ('Barbi', 19640914), ('Amy', 19650405), ('Jill', 19600623), ('Ginny', 19661115), ('Grace', 19680416), ('Melissa', 19690624), ('Debbie', 19670809), ('Eileen', 19661201), ('Maeve', 19641116), ('Kathleen', 19610905), ('Niurka', 19690419), ('Cecilia', 19630628), ('Kristin', 19590827), ('Kate', 19630111), ('Liezel', 19760821), ('Mashona', 19760531), ('Stephanie', 19460308), ('Marilyn', 19480308), ('Mimi', ''), ('Alice', 19421122), ('Pixie', ''), ('Betty', 19250415), ('Nadine', 19441026), ('Victoria', ''), ('Stephanie', 19500703), ('Carole', 19430624), ('Gail', 19510421), ('Patricia', 19400101), ('Eliza', 19530102), ('Patricia', 19450828), ('Sandy', 19560501), ('Tam', 19520127), ('Wendy', 19520430), ('Kathy', 19461218), ('Lisa', ''), ('Judy', 19490816), ('Roberta', 19560702), ('Mary', 19450925), ('Aleida', 19550616), ('Erin', 19550720), ('Stephanie', 19560325), ('Karen', 19421211), ('Sheila', 19580222), ('Susie', 19620329), ('Micki', 19601129), ('Heather', 19610712), ('Jane', 19620121), ('Diane', 19611105), ('Shawna', ''), ('Tammy', 19651012), ('Tracy', 19791006), ('Allison', 19801114), ('Ansley', 19820105), ('Dawn', 19760529), ('Kristen', 19840628), ('Vija', ''), ('Farel', ''), ('Connie', 19510521), ('Marjorie', 19510503), ('Peggy', ''), ('Tish', ''), ('Jade', ''), ('Carole', ''), ('Emilie', ''), ('Diane', ''), ('Mary', ''), ('Ann', ''), ('Tina', ''), ('Maricaye', ''), ('Roylee', 19490526), ('Nancy', 19330421), ('Louise', 19470321), ('Mimi', 19390818), ('Raymonde', ''), ('Carol', ''), ('Joyce', 19420223), ('Pat', 19340819), ('Jane', 19510220), ('Darlene', 19360106), ('Pam', 19501025), ('Carol', ''), ('Emilie', ''), ('Margaret', 19500413), ('Pam', ''), ('Susan', 19531113), ('Shari', ''), ('Sue', 19540603), ('Jeanne', 19350721), ('Kathy', 19521219), ('Gertrude', 19230908), ('Judy', 19430402), ('Brenda', 19540211), ('Patricia', 19580516), ('Marcy', ''), ('Sally', ''), ('Lynne', 19580328), ('Margaret', 19530105), ('Renee', 19340819), ('Carol', 19501022), ('Chris', 19561026), ('Kelly', 19620418), ('Lisa', 19590305), ('Lucy', ''), ('Jody', 19560704), ('Phyllis', 19570326), ('Linda', 19631106), ('Karen', 19640323), ('Eleni', 19671023), ('Lisa', 19680718), ('Sandra', 19690903), ('Shannan', 19700519), ('Julie', 19760424), ('Nicole', 19760203), ('Angela', 19720404), ('Keri', 19740501), ('Jacqueline', 19801126), ('Laura', 19810512), ('Jean', 19740607), ('Melissa', 19820606), ('Amber', 19840706), ('Sarah', 19811106), ('Ashley', 19850502), ('Bethanie', 19850323), ('Allison', 19860410), ('Bea', 19801128), ('Alexandra', 19850902), ('Carly', 19861126), ('Theresa', 19850310), ('Gabriela', 19800607), ('Shenay', 19840706), ('Angela', 19840927), ('Kelly', 19830318), ('Teryn', 19781212), ('Abigail', 19810712), ('Jessica', 19871110), ('Jamea', 19860907), ('Mary', 19881218), ('Tiffany', 19800314), ('Alexa', 19890910), ('Vania', 19890303), ('Ahsha', 19850321), ('Lauren', 19891001), ('Varvara', 19860521), ('Madison', 19900403), ('Audra', 19860421), ('Ashley', 19890620), ('Julie', 19790104), ('Melanie', 19910923), ('Kristie', 19920615), ('Gail', 19910605), ('Asia', 19910404), ('Coco', 19911206), ('Christina', 19920511), ('Mallory', 19900718), ('Lauren', 19910110), ('Hilary', 19881117), ('Sloane', 19930320), ('Alison', 19900703), ('Jamie', 19900108), ('Chelsey', 19900829), ('Beatrice', 19920406), ('Shelby', 19921013), ('Irina', 19900504), ('Lauren', 19931009), ('Madison', 19950217), ('Nicole', 19740801), ('Michelle', 19731228), ('Akiko', 19720214), ('Joy', 19621006), ('Caryn', 19711005), ('Luanne', 19721228), ('Julie', 19720510), ('Rachel Ann', 19721119), ('Judy', 19620511), ('Noelle', 19701218), ('Alysia', 19710131), ('Laura', 19670517), ('Amanda', 19780620), ('Julie', 19721007), ('Ann', 19670822), ('Melissa', 19720621), ('Jan', 19531223), ('Mary', 19620121), ('Sylvia', 19640127), ('Gail', 19470116), ('Diedre', 19711011), ('Caroline', 19651129), ('Kerry', 19501002), ('Kathy', 19670904), ('Stella', 19690309), ('Karen', 19680705), ('Cynthia', 19580614), ('Marlie', 19501120), ('Rona', 19690708), ('Kylie', 19610519), ('Helena', 19610201), ('Cheryl', 19640503), ('Jennifer', 19690715), ('Elizabeth', 19660406), ('Anne', 19660205), ('Alix', 19721022), ('Erica', 19690716), ('Stephanie', 19700424), ('Jill', 19671011), ('Jane', 19630123), ('Kathy', ''), ('Jean', 19700510), ('Ann', 19651028), ('Kirsten', 19690327), ('Wendy', 19600327), ('Nicole', 19610906), ('Vicki', 19570325), ('Mary Ann', 19560424), ('Christine', 19680118), ('Jennifer', 19600326), ('Julie', 19570621), ('Penny', 19550826), ('Cathy', 19580310), ('June', 19630619), ('Pam', 19750701), ('Stephanie', 19791023), ('Jane', ''), ('Gretchen', 19650626), ('Jane', 19660324), ('Holyn', 19731012), ('Kristi', 19690910), ('Linley', 19620501), ('Shelby', 19500626), ('Andrea', 19700128), ('Kathy', 19591224), ('Danielle', 19700322), ('Carol', 19610705), ('Jean', 19550606), ('Lori', 19650330), ('Edie', ''), ('Robin', ''), ('Kerri', 19681001), ('Lisa', 19700324), ('Mary', 19660508), ('Carol', 19591113), ('Katie', 19750429), ('Michele', 19660606), ('Shannon', 19670527), ('Gina', 19490515), ('Clare', ''), ('Cathleen', 19570316), ('Janice', 19510522), ('Betsy', 19540503), ('Lucia', 19601022), ('Wendy', 19680715), ('Allyson', 19631007), ('Debbie', 19620722), ('Marsha', ''), ('Linda', 19690503), ('Page', 19740622), ('Heather', 19711011), ('Gigi', 19701007), ('Marilda', 19650222), ('Christine', 19720714), ('Cynthia Ann', 19521114), ('Jenny', 19710226), ('Shelley', 19650421), ('Jackie', 19640104), ('Stephanie', ''), ('Michelle', 19610116), ('Genevieve', 19630819), ('Glynis', ''), ('Ann', 19520526), ('Allegra', ''), ('Cricket', 19610507), ('Bunny', 19460729), ('Holly Ann', 19701218), ('Amy', 19721112), ('Kathy', 19631005), ('Monique', 19841006), ('Erica', 19721128), ('Susan', 19651125), ('Rita', 19601018), ('Nina', 19610207), ('Donna', 19591005), ('Cissie', 19600108), ('Nancy', 19640804), ('Erika', 19631007), ('Cristina', 19770210), ('Terri', 19680118), ('Patty', 19730928), ('Katrina', 19681104), ('Katrina', 19800530), ('Anne', 19810420), ('Cory Ann', 19850122), ('Nicole', 19861103), ('Diana', 19790704), ('Tanner', 19840803), ('Shadisha', 19850712), ('Leslie', 19870525), ('Neha', 19860206), ('Megan', 19850719), ('Elizabeth', 19880603), ('Jewel', 19810910), ('Lindsey', 19851118), ('Raquel', 19821208), ('Brittany', 19910919), ('Kirsten', 19880814), ('Chieh Yu', 19920114), ('Alexis', 19830331), ('Amanda', 19861204), ('Catherine', 19940409), ('Tetiana', 19840904), ('Julia', 19910909), ('Alexandra', 19880214), ('Zoe Gwen', 19930921), ('Julia', 19890323), ('Jessica', 19940224), ('Grace', 19940506), ('Chi Chi', 19920705), ('Nicole', 19930303), ('Mallory', 19910128), ('Jennifer', 19860922), ('Samantha', 19950218), ('Victoria', 19951130), ('Maria', 19891126), ('Anne', 19850828), ('Megan', 19850311), ('Lena', 19881115), ('Katie', 19830503), ('Courtney B', 19920325), ('Kimberly', 19890509), ('Jacqueline', 19910830), ('Ester', 19930704), ('Eleanor', 19880626), ('Yasmin', 19880504), ('Anne Liz', 19960526), ('Alessondra', 19900906), ('Ryann', 19960723), ('Lucie', 19720406), ('Kelly S', 19730905), ('Kristina', 19790811), ('Wendy', 19750131), ('Julie', 19751016), ('Aurandrea', 19791121), ('Brandis', 19800213), ('Megan', 19781224), ('Alyssa', 19821119), ('Jennifer', 19780807), ('Jennifer', 19840217), ('Candice', 19820331), ('Michelle', 19780119), ('Kristy', 19790517), ('Andrea', 19881006), ('Lauren', 19800829), ('Iris', 19850613), ('Jennifer', 19810718), ('Ali', 19870923), ('Nicole', 19851124), ('Kaysie', 19800411), ('Krystina', 19880510), ('Riza', 19860210), ('Sarah', 19810627), ('Megan', 19830326), ('Story', 19830502), ('Christina', 19801127), ('Stacia', 19850921), ('Kaitlyn', 19920113), ('Chloe', 19900201), ('Amanda', 19870902), ('Kelcy', 19890411), ('June', 19950619), ('Krista', 19940914), ('Adria', 19791221), ('Susie', 19721210), ('Kori', 19731101), ('Elizabeth', 19770823), ('Agnes', 19800801), ('Courtenay', 19770227), ('Dee Dee', 19790211), ('Aurora', 19741107), ('Keirsten', 19730917), ('Ingrid', 19730602), ('Stephanie', 19761207), ('Sara', 19770113), ('Lori', 19810731), ('Milangela', 19811209), ('Brooke', 19790101), ('Lauren', 19820521), ('Amanda', 19780119), ('Kelley', 19850922), ('Meredith', 19720604), ('Jackie', 19840111), ('Megan', 19780427), ('Amanda', 19811126), ('Cammy', 19701225), ('Ditta', 19751226), ('Jennifer', 19731228), ('Krissy', 19791211), ('Annica', 19780902), ('Tory', 19850618), ('Whitney', 19860123), ('Sarah', 19801121), ('Jessyca', 19800826), ('Beau', 19800626), ('Katrina', 19880707), ('Stephanie', 19790129), ('Jennifer', 19881123), ('Jessica', 19871124), ('Sarah', 19880209), ('Kim Anh', 19831004), ('Ellah', 19881122), ('Lauren', 19820914), ('Link', 19861125), ('Aleke', 19820427), ('Kendra', 19831118), ('Arpi', 19830612), ('Erin', 19900328), ('Tiffany', 19820909), ('Robin', 19830621), ('Kristi', 19851222), ('Jennifer Lee', 19870227), ('Veronica Ruo Qi', 19891110), ('Danielle', 19910328), ('Shilpa', 19840412), ('Elizabeth', 19880526), ('Megan', 19870701), ('Melissa', 19880408), ('Lauren', 19890522), ('Alana', 19851031), ('Riley', 19901114), ('Kristen', 19880323), ('Mami', 19790715), ('Kit', 19810726), ('Stacey', 19910718), ('Elizabeth', 19810315), ('Nina', 19890707), ('Nadja', 19900607), ('Erica', 19901127), ('Jenna', 19851126), ('Tiya', 19860611), ('Natalie', 19850322), ('Courtney', 19820929), ('Kristy', 19900108), ('Susanna', 19831103), ('Alexa', 19901117), ('Aeriel', 19900928), ('Maureen', 19820528), ('Allie', 19910420), ('Sanaz', 19880621), ('Lauren', 19760912), ('Alexis', 19840927), ('Libby', 19940124), ('Lauren', 19930723), ('Michaela', 19880722), ('Tori', 19871124), ('Gabrielle', 19930227), ('Danielle Rose', 19931213), ('Tarakaa', 19860811), ('Danielle', 19910528), ('Ellen', 19931008), ('Brooke', 19920408), ('Mccall', 19900315), ('Macall', 19860205), ('Megan', 19880705), ('Nicole', 19930729), ('Alexandra', 19911130), ('Elizabeth', 19860524), ('Jade', 19921028), ('Brie', 19890507), ('Jan', 19950301), ('Simone', 19891230), ('Elizabeth', 19860731), ('Gabrielle Faith', 19961223), ('Sachia', 19950511), ('Taylor', 19960416), ('Lindsey', 19900104), ('Alexandra', 19950630), ('Alexandra', 19910213), ('Robin', 19930412), ('Brianna', 19940219), ('Olivia', 19960122), ('Whitney', 19860811), ('Emily J', 19910615), ('Caroline B', 19941031), ('Chalena', 19950818), ('Elizabeth Anita Alexandria', 19960806), ('Breanna Alexa Bachini', 19930521), ('Mary', 19950817), ('Betsy', 19600427), ('Eve', 19621028), ('Janet', 19670405), ('Jaime', 19611001), ('Angel', 19610830), ('Donna', 19550626), ('Valerie', 19540813), ('Lucinda', 19520717), ('J', ''), ('J', ''), ('D', ''), ('K', ''), ('B', ''), ('J', ''), ('R', ''), ('N', ''), ('E', ''), ('F', ''), ('Caroline', 19560622), ('D', ''), ('Wendy', ''), ('Nancy', 19530830), ('Susan', 19570107), ('Gretchen', 19560201), ('Anne', ''), ('Holly', 19690811), ('Margaret', 19601012), ('Clare', 19671008), ('Kathy', 19641104), ('Rita', 19660512), ('Marlene', 19810731), ('Linda', 19570701), ('Beverly', 19530124), ('Ann', 19551013), ('Robin', 19540923), ('A', ''), ('Maria', ''), ('Karen', ''), ('Karen', ''), ('Jenny', ''), ('Lisa', ''), ('Kathy', ''), ('Maria', 19600424), ('Judith', ''), ('Becky', ''), ('Connie', ''), ('Lori', ''), ('Joni', 19651125), ('Lisa', ''), ('Suzanne', ''), ('Shandra', 19680519), ('Merrilee', ''), ('Jennifer', 19660615), ('Chris', ''), ('Trisha', 19690203), ('Stephanie', 19690818), ('Sonya', 19670825), ('Susan', 19710412), ('Tanya', 19690302), ('Tonya', 19690821), ('Kara', 19730105), ('Melissa', 19740402), ('Victoria', 19761230), ('Trina', 19821230), ('Kristine', 19720623), ('Martha', 19691215), ('Candice', 19800207), ('Cindy', 19790422), ('Elizabeth', 19740824), ('Valerie', 19731228), ('Tracey', 19710129), ('Diana', 19680410), ('Alice', 19770830), ('Allison', 19660804), ('Vickie', 19710827), ('Stacey', 19750105), ('Marissa', 19780613), ('Susanna', 19720303), ('Rebecca', 19721119), ('Ashley', 19720408), ('Varalee', 19760502), ('Stephanie', 19770408), ('Elizabeth', 19631112), ('Bridget', 19740207), ('Leslie', 19720209), ('Traci', 19780805), ('Alison', 19741125), ('Amy', 19681007), ('Vanessa', 19760513), ('Laura', 19720426), ('Anna', 19761021), ('Betsy', 19751127), ('Kristen', 19781002), ('Mugette', 19810424), ('Tu', 19780208), ('Irene', 19790612), ('Jennifer', 19720416), ('Diana', 19751029), ('Jody', 19711122), ('Samantha', 19890509), ('Tristen Z', 19940501), ('Rachel', 19920719), ('Ashley', 19871106), ('Alexandra', 19920223), ('Natalie', 19910801), ('Lindsay', 19880226), ('Amelia', 19920802), ('Caroline', 19930313), ('Camila', 19950929), ('Josie', 19951105), ('Skylar Alexandra', 19940424), ('Brooke', 19960212), ('Alexandra', 19910413), ('Daniella', 19971105), ('Hayley', 19950517), ('Jody', 19780930), ('Ella', 19760917), ('Emily Ann', 19820328), ('Jacquelyn', 19801117), ('Lesley', 19781011), ('Kristen', 19770518), ('Cara', 19720421), ('Zuzanna', 19800403), ('Katie', 19800911), ('Marilyn', 19740114), ('Lena', 19830510), ('Brandi', 19770612), ('Andrea', 19780204), ('Sara', 19801022), ('Hillary', 19820417), ('Mariel', 19800220), ('Whitney', 19800508), ('Darian', 19790615), ('Alexandra', 19820310), ('Prim', 19810115), ('Janet', 19800628), ('Rachel', 19690211), ('Lindsay', 19821207), ('Kirsty', 19780517), ('Raluca Daniela', 19830717), ('Mindy', 19720322), ('Erin', 19830419), ('Mary Carlisle', 19780716), ('Erin', 19800116), ('Keiko', 19800429), ('Maiko', 19820623), ('Paige', 19740714), ('Janet', 19790529), ('Briana', 19781221), ('Stacey', 19721219), ('Kristin', 19720204), ('Julia', 19810518), ('Rochelle', 19800430), ('Selin', 19780706), ('Jennifer', 19730117), ('Luana', 19821205), ('Whitney', 19850811), ('Paloma', 19720823), ('Tumeka', 19761226), ('Maria', 19830319), ('Hyacinth', 19610809), ('Eva', 19840706), ('Kara', 19790920), ('Katie', 19841110), ('Melissa', 19840613), ('Emmy', 19870722), ('Alexandria', 19860310), ('Shari', 19641103), ('Michelle', 19791212), ('Alexandra', 19841228), ('Nicole', 19860203), ('Monica', 19851212), ('Caitlin', 19850517), ('Lia', 19800922), ('Michelle', 19870304), ('Sybil', 19770106), ('Jodi', 19810822), ('Liberty', 19870409), ('Mimi', 19841030), ('Melissa', 19861211), ('Jessi', 19870221), ('Courtney', 19880501), ('Chrissie', 19870902), ('Yvette', 19880612), ('Audra', 19830331), ('Leila', 19860206), ('Tamara', 19790924), ('Rebekah', 19791012), ('Sabita', 19840927), ('Shannon', 19870109), ('Courtney', 19851011), ('Polina', 19860408), ('Anamika', 19890413), ('Jie', 19871101), ('Georgette', 19840709), ('Christy', 19871212), ('Suzanne', 19880117), ('Courtney', 19900327), ('Cammie', 19871122), ('Nelly', 19901113), ('Veronica', 19870514), ('Keilly', 19900505), ('Kate', 19831111), ('Reka', 19890708), ('Bianca', 19890514), ('Thien Trang', 19910918), ('Pamela', 19910101), ('Morgan', 19920220), ('Julianna', 19850107), ('Subbadharmi', 19890708), ('Stephanie', 19930216), ('Kelsey', 19910408), ('Alexandra', 19870719), ('Amanda', 19880314), ('Chelsea', 19891211), ('Anna', 19840821), ('Jill M', 19910313), ('Kady', 19860317), ('Phoebe', 19880520), ('Emily', 19921201), ('Christian', 19840913), ('Keri', 19891225), ('Sabrina', 19860112), ('Nataly', 19900913), ('Maria', 19920619), ('Noel', 19930203), ('April', 19920508), ('Ellie', 19930808), ('Stephanie', 19901027), ('Nicole', 19911031), ('Anna', 19940308), ('Veronika', 19900920), ('Annie', 19930330), ('Kyle', 19940405), ('Chanelle', 19940119), ('Yawna', 19860801), ('Hilary', 19910513), ('Ivana', 19861108), ('Gira', 19860829), ('Claire', 19891129), ('Erin', 19880609), ('Caitlin', 19880219), ('Alexandra', 19850703), ('Jennifer', 19950412), ('Kimberly', 19961015), ('Natalie', 19891102), ('Elizaveta Anna', 19930831), ('Veronica M', 19911207), ('Karina', 19950706), ('Sylvia', 19860904), ('Sherry', 19950208), ('Katrine Isabel', 19960315), ('Denise', 19950417), ('Courtney', 19940325), ('Christina', 19960529), ('Noelle', 19881205), ('Lauren', 19950517), ('Breaunna', 19941222), ('Nicole', 19941230), ('Meredith', 19970521), ('Nadia', 19950114), ('Jackie', 19710922), ('Antoinette', 19850107), ('Kathleen', 19740511), ('Kylene', 19790725), ('Dana', 19730725), ('Audra', 19720605), ('Tracee', 19731009), ('Amie', 19800517), ('Jennifer', 19811128), ('Lashawnn', 19740602), ('Jacqueline', 19820209), ('Jennifer', 19770119), ('Kristy', 19741230), ('Susan', 19741201), ('Bridget', 19761018), ('Amy', 19690628), ('Sandra', 19750116), ('Khristen', 19750803), ('Stefanie', 19810322), ('Barrie', 19730724), ('Kate', 19820415), ('Amy', 19731107), ('Anne', 19780520), ('Lauren', 19740830), ('Dewonder', 19590127), ('Kendra', 19790828), ('Jamie', 19801106), ('Jennifer', 19750823), ('Audrey', 19850430), ('Marjorie', 19750503), ('Katie', 19770527), ('Aimee', 19820110), ('Megan', 19810519), ('April', 19781129), ('Maren', 19791106), ('Sarah', 19780514), ('Marie Ange', 19780114), ('Dina', 19680406), ('Margaret', 19760707), ('Mary Beth', 19760329), ('Patricia', 19841020), ('Ashley', 19821229), ('Kathryn', 19790225), ('Leslie', 19810718), ('Becky', 19640801), ('Julie', 19811223), ('Danielle', 19781110), ('Terri', 19650402), ('Amy', 19681215), ('Douglas', 19840522), ('Sara', 19850621), ('Karla', 19770318), ('Kristin', 19841130), ('Kristin', 19810705), ('Bonnie', 19850503), ('Natalie', 19830401), ('Jennifer', 19830702), ('Claire', 19700527), ('Lauren', 19780316), ('Alison', 19791129), ('Laura', 19710624), ('Katia', 19810816), ('Kara', 19771202), ('Violette', 19790927), ('Lisa', 19740221), ('Evonne', 19740923), ('Mandy', 19790312), ('Jessica', 19800415), ('Emily', 19811119), ('Callie', 19770711), ('Maggie', 19750529), ('Elina', 19820521), ('Terry Ann', 19740428), ('Kimberly', 19790725), ('Bettina', 19820718), ('Lindsay', 19800519), ('Johanna', 19750518), ('Amy', 19790124), ('Meiling', 19791112), ('Jennifer', 19781020), ('Vania', 19810428), ('Megan', 19831014), ('Lindsey', 19800201), ('Megan', 19820411), ('Angela', 19840329), ('Megan', 19840920), ('Nicolette', 19831108), ('Anita', 19860219), ('Alessandra', 19870112), ('Aradhana', 19820709), ('Tiffany', 19831228), ('Macey', 19830224), ('Kelcy', 19861225), ('Caylan', 19820701), ('Stephanie', 19820923), ('Jan', 19580317), ('Kate', 19830530), ('Karen', 19671205), ('Sarah Jane', 19820802), ('Catrina', 19840913), ('Bethany', 19821129), ('Lindsay', 19820811), ('Kathleen', 19820917), ('Amy', 19810415), ('Emilia', 19820204), ('Colleen', 19790212), ('Ashlee', 19850522), ('Saras', 19830726), ('Brittany', 19850420), ('Laila', 19810805), ('Natalie', 19851103), ('Celena', 19790130), ('Marine', 19780929), ('Cara', 19730424), ('Loni', 19810928), ('Christyn', 19850210), ('Cassy', 19850802), ('Manisha', 19770513), ('Jennifer', 19811121), ('Michelle', 19801002), ('Brook', 19851231), ('Samantha', 19840807), ('Stephanie', 19870411), ('Courtney', 19820502), ('Melissa', 19840112), ('Kristin', 19790227), ('Adriana', 19780902), ('Christine', 19831216), ('Julie', 19840521), ('Cristina', 19860826), ('Nadia', 19850209), ('Amanda', 19821020), ('Camelia', 19860406), ('Emily', 19850201), ('Danielle', 19840717), ('Rochelle', 19800627), ('Brianna', 19851215), ('Zena', 19880717), ('Adina', 19870619), ('Lauren', 19880204), ('Lauren', 19870928), ('Meg', 19870811), ('Ristine', 19850116), ('Jennifer', 19841115), ('Lindsey', 19860101), ('Lindsay', 19880524), ('Gloriann', 19840228), ('Patricia', 19740119), ('Kelly', 19820223), ('Amanda', 19870813), ('Elizabeth', 19860128), ('Whitney', 19851225), ('Laura', 19850506), ('Masha', 19840211), ('Karina', 19880811), ('Erin', 19850113), ('Randi', 19870211), ('Kewa', 19860701), ('Hala', 19850809), ('Dasha', 19870606), ('Suzanna', 19861013), ('Colleen', 19880209), ('Blair', 19830904), ('Simone', 19881010), ('Jessica', 19870304), ('Austin', 19860601), ('Preethi', 19850629), ('Christala', 19890709), ('Krista', 19900423), ('Marie', 19830721), ('Ashley', 19861113), ('Latrell', 19891212), ('Sheryl', 19850920), ('Amanda', 19850319), ('Blakeley', 19841114), ('Ashley', 19870917), ('Whitney', 19890109), ('Marlene', 19880329), ('Melissa', 19860801), ('Alex', 19870117), ('Jessica', 19811223), ('Megan', 19890204), ('Jacqueline', 19830608), ('Melody', 19830708), ('Sarah', 19910314), ('Marie', 19910614), ('Daron', 19851128), ('Amy', 19790324), ('Dina', 19871014), ('Mia', 19910312), ('Valerie', 19851231), ('Amanda', 19880523), ('Connor', 19870922), ('Elizabeth', 19920114), ('Brittany', 19870208), ('Kristen A', 19880325), ('Julie', 19880331), ('Sarah', 19880129), ('Emily', 19890724), ('Christine', 19871225), ('Amanda', 19850511), ('Nicole', 19880620), ('Laurianne', 19881018), ('Pamela', 19901124), ('Miya', 19871114), ('Rachel', 19830708), ('Joanna', 19891009), ('Lynn', 19791216), ('Claire', 19871108), ('Paola', 19920827), ('Lauren', 19890512), ('Erin Carol', 19930506), ('Cameron', 19881224), ('Julie', 19870627), ('Stefanie', 19890130), ('Hannah', 19910812), ('Katherine', 19860305), ('Olivia', 19880423), ('Christina', 19880426), ('Christina', 19881212), ('Cierra', 19910927), ('Milena', 19850506), ('Christin J', 19870731), ('Stephanie', 19900327), ('Kaysara', 19910623), ('Nina', 19900115), ('Deirdre', 19901205), ('Kristin', 19841024), ('Jacqueline', 19900913), ('Stephany', 19900609), ('Erica', 19900702), ('Julia', 19910916), ('Grace', 19891211), ('C C', 19911009), ('Sarah', 19910422), ('Marianne', 19850906), ('Monica', 19920622), ('Kate', 19920109), ('Amanda Marie', 19860106), ('Alexa', 19900824), ('Denise', 19890731), ('Molly', 19890525), ('Nelo', 19920705), ('Farwa', 19891101), ('Millie', 19641005), ('Brooke Lindsey', 19940622), ('Lilly F', 19911101), ('Brynn', 19910801), ('Karina', 19831112), ('Tracy', 19740827), ('Desiree', 19931110), ('Rachael', 19910427), ('Alrissa', 19920724), ('Amanda', 19870317), ('Olivia', 19910711), ('Caryssa L', 19920413), ('Monica', 19930108), ('Joelle', 19910606), ('Malika', 19910709), ('Theresa', 19930607), ('Mary Anne', 19920215), ('Morocco', 19921107), ('Mara', 19920222), ('Alejandra Maria', 19950228), ('Catherine', 19880430), ('Kate', 19901106), ('Abigail', 19900209), ('Sabrina', 19930224), ('Heatherm', 19890925), ('Stephanie', 19940511), ('Leighann', 19931204), ('Lauren', 19880816), ('Kayla', 19920921), ('Kir', 19891031), ('Skylar', 19930914), ('Julia', 19931207), ('Meghan', 19930621), ('Nida', 19911029), ('Lauren', 19880905), ('Kelly K', 19910531), ('Alyssa Grace', 19950215), ('Mary', 19911122), ('Madeleine', 19920319), ('Rachel', 19840302), ('Alex', 19911229), ('Kyra', 19960510), ('Suzy', 19940830), ('Remeice', 19891112), ('Kate', 19940201), ('Courtney', 19891015), ('Molly', 19930810), ('Stephanie', 19940131), ('Alexandra M', 19870719), ('Aleksandra', 19960409), ('Erin', 19880709), ('Jessica', 19930428), ('Spencer', 19950125), ('Anik', 19910405), ('Simone', 19920717), ('Emma', 19930623), ('Melissa', 19921004), ('Tina', 19950427), ('Julia', 19940613), ('Rachael', 19931209), ('Shelby', 19930114), ('Epiphany B', 19921217), ('Kaitlin', 19921215), ('Mariana', 19950927), ('Hannah', 19951103), ('Casey', 19910613), ('Deborah', 19940514), ('Jessica', 19931117), ('Kelsey', 19940821), ('Samantha', 19930126), ('Blair', 19940814), ('Martha V', 19900628), ('Amanda', 19930322), ('Sarah', 19920729), ('Emily', 19931112), ('Jamie', 19950308), ('Kelly', 19770505), ('Quinn', 19941110), ('Sophia', 19930330), ('Sierra A', 19900816), ('Mckenzie', 19940107), ('Stacey', 19900117), ('Courtney', 19910226), ('Rosalia', 19900208), ('Sydney', 19950207), ('Mia', 19950406), ('Erin Kane', 19960512), ('Laura', 19841119), ('Eva', 19921222), ('Elizabeth', 19940706), ('Sarah', 19930713), ('Elyse', 19870910), ('Sabrina', 19920912), ('Julia', 19890114), ('Gabriella', 19951208), ('Tanya', 19930914), ('Nyla', 19960730), ('Louisa', 19960516), ('Zina', 19980402), ('Tornado Alicia', 19980512), ('Madison', 19970919), ('Rima', 19951116), ('Kourtney J', 19940907), ('Natasha', 19940823), ('Erin', 19901230), ('Rachel May', 19941113), ('Jillian', 19941210), ('Caroline', 19960315), ('Dominique', 19870203), ('Trelsie', 19890707), ('Angela', 19950604), ('Nicole', 19980429), ('Kim', 19951027), ('Emina', 19930330), ('Lynda', 19921123), ('Joanna Mary', 19930201), ('Caroline', 19960103), ('Julia', 19940403), ('Callie', 19910904), ('Maxine', 19910710), ('Katie', 19921211), ('Emma Christine', 19980201), ('Johnnise', 19960510), ('Katerina', 19970717), ('Jessica', 19970105), ('Marjorie', 19880420), ('Maci', 19931007), ('Kaitlyn', 19971204), ('Jacqueline', 19941203), ('Charity', 19870711), ('Parris', 19980708), ('Jamie', 19930819), ('Miriam Ruth', 19940724), ('Elizabeth', 19910118), ('Amanda', 19860130), ('Lindsay', 19780708), ('Erica', 19860327), ('Dina', 19711211), ('Robyn', 19850111), ('Anita', 19810402), ('Casey', 19840501), ('Emily', 19850224), ('Jamie', 19880415), ('Brittany', 19880627), ('Elizabeth', 19550921), ('Carolyn', 19900415), ('Cassandra', 19891211), ('Prissy', 19910807), ('Kristin', 19830420), ('Diamond', 19901226), ('Celia', 19860527), ('Tiffany', 19891126), ('Jennifer', 19890531), ('Komal', 19930108), ('Roxanne', 19890826), ('Mandy', 19810914), ('Amanda', 19800324), ('Alissa', 19671209), ('Kay', 19570927), ('Jane', 19661222), ('Tracie', 19610116), ('Elizabeth', 19630811), ('Cinda', 19710410), ('Tracy', 19611021), ('Dena', 19650928), ('Hemel', 19660108), ('Karen', 19630803), ('Reka', 19670612), ('Vincenza', 19660820), ('Lisa', 19640803), ('Lynn', 19661018), ('Jill', 19731226), ('Julie', 19710609), ('Kilmeny', 19660218), ('Kay', 19690131), ('Debbie', 19651129), ('Anne Marie', 19660720), ('Leslie', 19660908), ('Lisa', 19630604), ('Lisa', 19611106), ('Tory', 19660712), ('Kylie', 19700509), ('Anya', 19690220), ('Jennifer', 19670106), ('Diana', 19721007), ('Betsy', 19671127), ('Katrina', 19671129), ('Karen', 19701102), ('Susan', 19710206), ('Sherri', 19730118), ('Tonya', 19691110), ('Julie', 19680817), ('Susan', 19710206), ('Jamie', 19691029), ('Alita', 19630112), ('Tara', 19681223), ('Erika', 19720516), ('Kellie', 19670601), ('Happy', 19680605), ('Angie', 19710323), ('Bonnie', 19770412), ('Farley', 19741212), ('Tunecia', 19701023), ('Roseann', 19710227), ('Allison', 19710927), ('Hillery', 19610619), ('La Shawnn', 19740206), ('Sylvia', 19610419), ('Kathy', 19741105), ('Zuzanna', 19790726), ('Cassi', 19850902), ('Lejla', 19870206), ('Danielle', 19820120), ('Geneva', 19871225), ('Katie', 19891023), ('Katie', 19881216), ('Brittany', 19940406), ('Allie', 19950630), ('Sofia', 19981114), ('Mia', 19970723), ('Ty Ana', 19970313), ('Karina Kristina', 19981021), ('Jessica', 19890916), ('Trisha', 19981027), ('Ashley', 19881017), ('Tina', 19920831), ('Tatijana', 19971116), ('Taylor L', 19950117), ('Alexa', 19980707), ('Emerald', 19970905), ('Marie', 19970611), ('Alexandra', 19950224), ('Aleah', 19910923), ('Sarah', 19941219), ('Usue Maitane', 19981028), ('Ellie', 19970710), ('Maia A', 19960921), ('Raquel', 19980128), ('Peggy', 19951110), ('Rebecca', 19971004), ('Camila', 19961125), ('Karyn', 19940912), ('Ayla', 19960715), ('Rasheeda', 19950630), ('Amy', 19941028), ('Ariana', 19960126), ('Luisa', 19951005), ('Mary', 19910802), ('Kristi', 19900427), ('Ronit', 19931203), ('Julia Christine', 19921027), ('Kristina N', 19910125), ('Macie', 19941023), ('Jessica', 19950102), ('Rhiann', 19940622), ('Frances', 19940222), ('Kelly', 19960221), ('Hanna', 19980225), ('Natalie', 19960508), ('Dasha', 19961011), ('Elizabeth', 19910218), ('Brianna', 19951012), ('Kristin', 19951122), ('Kristina', 19951204), ('Maddie', 19971117), ('Raveena', 19980723), ('Daniella', 19971027), ('Laura', 19970305), ('Idia', 19930922), ('Chloe Michele', 19970905), ('Morgan', 19941219), ('Nikki', 19960418), ('Sianna', 19900804), ('Nicole', 19990508), ('Mercedes', 19970525), ('Lourdes', 19990531), ('Adi', 19951213), ('Anna', 19971103), ('Alexandra', 19980719), ('Katarina', 19960704), ('Michaela', 19990726), ('Ena', 19980212), ('Catherine Cartan', 19990408), ('Hadley', 19960311), ('Madison', 19960402), ('Jaeda', 19990728), ('Jeannez', 19960707), ('Erica', 19980316), ('Jessie', 19980419), ('Andie K', 19970107), ('Alexandria', 19960511), ('Gabriella', 19960709), ('Kelly', 19990509), ('Terri', 19960723), ('Angel', 19850125), ('Maria', 19970506), ('Alexis', 19980809), ('Rianna', 19960903), ('Megen', 19960709), ('Caroline', 19980905), ('Sophie', 19970528), ('Nicole', 19960504), ('Jacqueline', 19970531), ('Jessica', 19970709), ('Adriana', 19890308), ('Kylie', 19970606), ('Yuki Kristina', 19950819), ('Lexi', 19950525), ('Caroline', 19970726), ('Ingrid', 19980616), ('Alexandra', 19970301), ('Nada', 20000308), ('Alexis', 19950606), ('Felicity', 19970313), ('Tory', 19930105), ('Aimee', 19940907), ('Alli', 19961203), ('Claudia', 19961206), ('Brooke', 19951010), ('Marina', 19981123), ('Zoe Adeline', 19941217), ('Jessica', 19970605), ('Ashley', 19920829), ('Valerie', 19971122), ('Ashley', 19990208), ('Brittany', 19920303), ('Olivia', 19940623), ('Taylor', 19950731), ('Alexis', 19950724), ('Sara', 19971217), ('Lindsay', 19930107), ('Liza', 19950317), ('Jayci', 20000517), ('Marina', 19920314), ('Sydney', 19990430), ('Alyza', 19951122), ('Sophia', 19920113), ('Riley', 19990615), ('Delaney', 19981028), ('Jane', 19961112), ('Valerie Ann', 19980801), ('Carolyn', 19970524), ('Maegan', 19950416), ('Tamara', 19971129), ('Mary', 19981025), ('Victoria', 19990401), ('Kennedy', 19970521), ('Amy', 19970120), ('Makenna', 19980226), ('Stephanie', 19980415), ('Nicole Taylor', 19990426), ('Claire', 20000525), ('Jada', 19990129), ('Sara', 19970723), ('Hannah', 19960923), ('Sophia', 19971005), ('Akiko', 19930913), ('Karina', 19970808), ('Haley', 19910403), ('Paige', 19970222), ('Kayla', 19990928), ('Carson', 20000909), ('Amanda', 19940813), ('Maria', 19990721), ('Kylie', 19990321), ('Luciana', 19981001), ('Zoe', 20010308), ('Sachi', 19981129), ('Audrey', 19951029), ('Anna', 19970319), ('Abigail', 20010122), ('Cameron', 19990920), ('Katelyn', 19921211), ('Katharine', 19961019), ('Elyse', 19981014), ('Mimi', 19930430), ('Bess', 19971029), ('Ines Karmen', 19970615), ('Taylor', 19990615), ('Kristen', 19970407), ('Sabrina', 19971003), ('Desirae', 19940111), ('Sarah', 19960418), ('Rachel', 19961108), ('Victoria', 19990807), ('Nini', 19950909), ('Francesca', 19970722), ('Makenzie', 19990610), ('Chiara', 19980826), ('Melissa', 19930602), ('Morgan', 19990416), ('Jerricka', 19950116), ('Eva', 19961102), ('Miranda', 19990307), ('Teresia', 19990529), ('Julia', 19971217), ('Malkia', 20000808), ('Lorraine M', 19930615), ('Carol', 19960218), ('Jocelyn', 19900526), ('Roosh', 19920321), ('Alexa', 19980703), ('Alyvia', 20000503), ('Katie', 19990929), ('Meible', 19990519), ('Elizabeth', 20010712), ('Emma', 20010518), ('Arianna', 19950206), ('Kiah', 19950117), ('Alyssa', 20000210), ('Stephanie', 19880402), ('Sofia', 19990722), ('Sarah', 19930814), ('Melan', 19970406), ('Alexandra', 19990105), ('Dilara', 19990911), ('Hurricane Tyra', 20010302), ('Taylor', 19980222), ('Nami', 19980827), ('Marcella', 20001012), ('Sophia', 20010630), ('Delisha', ''), ('Haley', ''), ('Jenna', ''), ('Nikita', 19931021), ('Hoda', ''), ('Meredith', 19990310), ('Morgan', 19950317), ('Kirsten', 19940508), ('Maya', 19940527), ('Kat', 19930215), ('Alexandra', 19930215), ('Meghan', 19971028), ('Salma', 20000828), ('Madeline', 19990307), ('Lindsay', 19981217), ('Alexa', 20010908), ('Mary Catherine', 19971104), ('Cheyenne', 19960326), ('Neri', 19990902), ('Jesse', 20011004), ('Ann', 20000626), ('Natalia', 19930929), ('Whitney', 20020417), ('Christina', 19970725), ('Sofia', 19980703), ('Nicole', 20000805), ('Kenadi', 19970313), ('Paiton', 19980808), ('Shannon', 19950915), ('Elysia', 20000324), ('Ashley', 19991026), ('Alexis', 19970314), ('Caty', 20011120), ('Isabella', 20010706), ('Elizabeth', 20010519), ('Anna', 20020306), ('Dakota', 20020508), ('Janice', 19990105), ('Amanda', 20010831), ('Jada', 19980319), ('Hind', 19990228), ('Mikaela', 19890801), ('Micheline', 19970428), ('Kendal', 19940106), ('Anna', 19991008), ('Mia', 19981021), ('Chloe', 20010830), ('Abigail', 20010310), ('Ryan', 19990510), ('Maia', ''), ('Jana', 19941110), ('Shale', 20011015), ('Helen Abigail', 19980520), ('Kariann', 19990116), ('Kennedy', 19980903), ('Caroline', 19980929), ('Allison', 19981031), ('Melissa', 19970624), ('Ellyse', 19961109), ('Charleen', 19410918), ('Doris', 19250620), ('Patricia', 19370601), ('Pauline', 19190806), ('Helen', 19290507), ('Mary', ''), ('Althea', 19270825), ('Carrie', 19571026), ('Cathy', 19510822), ('Karen', 19570408), ('', ''), ('Barbara', ''), ('Susan', 19611219), ('Jan', 19630609), ('Diane', 19650626), ('Carol', 19620605), ('Leanne', ''), ('Shelley', 19631120), ('Maureen', ''), ('Lorrie', 19601015), ('Tiffany', 19600417), ('Sarah', 19741010), ('Meg', ''), ('Wendy', ''), ('Lynn', 19660819), ('Heidi', 19640507), ('Jacqueline', 19620329), ('Sheri', 19690629), ('Diane', 19710121), ('Angela', 19641211), ('Nancy', ''), ('Liz', 19640423), ('Jamie', 19630530), ('', ''), ('Laura', 19681210), ('Jill', ''), ('Courtney', 19560622), ('Tiffany', 19810121), ('Kristen', 19810501), ('Wendy', 19681001), ('Sheila', ''), ('Heidi', 19601007), ('Julie', 19610523), ('Deborah', 19701129), ('Jennifer', ''), ('Cindy', 19591207), ('Lynn', ''), ('I', ''), ('Lisa', 19600808), ('Jill', 19540907), ('Aschara', ''), ('Heidi', 19720713), ('Julie', 19710609), ('', ''), ('G', ''), ('Stephanie', 19661010), ('Lucy', 19540402), ('Cathy', ''), ('', ''), ('Emmy', ''), ('', ''), ('Claudette', ''), ('Lisa', ''), ('Lynn', 19631114), ('Lindsay', ''), ('Lisa', 19630218), ('Virginia', ''), ('Lloyd', 19451208), ('Suzanne', 19750612), ('Caren', 19611110), ('Allegra', 19720113), ('Molly', 19630215), ('Lori', 19600112), ('Lindsay', 19780417), ('Adrienne', 19680903), ('Quynh', 19710627), ('Kari', 19810120), ('Lisa', 19590212), ('Christa', 19790115), ('Kelly', 19770505), ('Massoumeh', 19770803), ('Louise', 19500119), ('Jayne', 19741006), ('Christine', ''), ('Kim', 19780329), ('Lani', 19600808), ('Julie', 19690425), ('Ruth Ann', 19700506), ('Lauren', 19830423), ('Tasha', 19760223), ('Kealy', 19801030), ('Courtney', 19721230), ('Julie Ann', 19750618), ('Nicole', 19741001), ('Ashlee', 19801005), ('Kelly', 19751106), ('Alexandra', 19790210), ('Mary', 19730912), ('Lisa', 19660204), ('Monty', 19650506), ('Julie Anne', 19800911), ('Lorrie', 19651203), ('Kendra', 19760621), ('Chris', 19610706), ('Christine', 19850303), ('Rankin', 19840126), ('Julia', 19850721), ('Sabaea', 19811125), ('Nicole', 19750602), ('Joyce', 19800628), ('Sarah', 19820410), ('Jean Marie', 19651109), ('Stacey', 19720110), ('Varita', 19820702), ('Shera', 19780910), ('Trisha', 19710617), ('Suzanne', 19680921), ('Lisa', 19801119), ('Martha', 19551005), ('Kandiss', 19770221), ('Brooke', 19780413), ('Cristina', 19750825), ('Jasmine', 19810102), ('Kathleen', 19830125), ('Melissa', 19770524), ('Michelle', 19731114), ('April', 19831011), ('Olivia', 19810310), ('Melissa', 19650221), ('Cami', 19720314), ('Marissa', 19780318), ('Kristin', 19720204), ('Christi', 19610509), ('Cindy', ''), ('Ashley', 19830506), ('Leigh', 19831014), ('Natalia', 19831110), ('Nikhila', 19850208), ('Rachel', 19820916), ('Alison', 19850118), ('Cameron', 19830328), ('Gretchen', 19820304), ('Cackie', 19661107), ('Stephanie', 19650104), ('Miriam', 19850925), ('Nicole', 19880219), ('Lilivette', 19800225), ('Jonni', 19791203), ('Amanda', 19850102), ('Weyli', 19800722), ('Helene', 19841215), ('Amanda', 19841101), ('Nicole', 19870615), ('Stefani', 19841215), ('Laura', 19860217), ('Tifanie', 19880920), ('Mary', 19651124), ('Katherine', 19730414), ('Monica', 19800204), ('Nicole', 19850105), ('Shanna', 19750428), ('Jane', 19890926), ('Estelle', 19890503), ('Maria', 19820204), ('Jessica', 19860812), ('Renata', 19650224), ('Laura', 19830408), ('Lindsey', 19840313), ('Christy', 19850925), ('Timberly', 19831209), ('Brooke', 19850423), ('Kelli Elizabeth', 19940409), ('Melanie', ''), ('Whitney P', 19930625), ('Sydni', 19880612), ('Jasmine Nicole', 19930826), ('Alexandra', 19920812), ('Amber', 19870605), ('Kelsey', 19920610), ('Alex', 19920225), ('Ashley M', 19940304), ('Lauren', 19940828), ('Stacia', 19930914), ('Alexandria', 19900111), ('Rozel Asuncion', 19950616), ('Bolan', 19890908), ('Annie', 19920829), ('Eva', 19941007), ('Whitney', 19900909), ('Hanna', 19911107), ('Mandy', 19910501), ('Gia', 19900614), ('Brooke', 19951105), ('Lisa', 19680519), ('Alexandra M', 19930120), ('Sonya Sheeran', 19940816), ('Shinann', 19900608), ('Nicolette', 19950824), ('Rebecca', 19921125), ('Ashley', 19960430), ('Savannah', 19950115), ('Margaret', 19570423), ('Carlee', 19950724), ('Sarah', 19850718), ('Caroline', 19840926), ('Alexia', 19940421), ('Micaela', 19890311), ('Tina', 19810116), ('Manon Cristina', 19941224), ('Hailey M', 19930127), ('Tiffany', 19911216), ('Devan', 19940528), ('Courtenay', 19770227), ('Christine', 19931110), ('Emily', 19900517), ('Leyla', 19930423), ('Alexis', 19880722), ('Di Andrea', 19950730), ('Jandayia', 19960303), ('Margarita', 19950317), ('Olivia', 19941211), ('Caitlin', 19910905), ('Kara', 19910629), ('Paloma', 19890313), ('Susie', 19491114), ('Emily', 19861118), ('Abbie', 19951121), ('Alanna', 19950107), ('Siobhan', 19871110), ('Kayla Symone', 19960110), ('Margie', 19901106), ('Jamie', 19820521), ('Adria', 19791221), ('Lynn', 19941106), ('Nadege', 19960527), ('Lauren', 19941203), ('Tiffany', 19881204), ('Sarah', 19880907), ('Victoria', 19941214), ('Natalia', 19950325), ('Alexandra', 19931013), ('Montana', 19970219), ('Samantha Rose', 19940410), ('Angela', 19980331), ('Samantha', 19950527), ('Elizabeth', 19890419), ('Sarah', 19941121), ('Gabriela', 19950418), ('Tina', 19911222), ('Mia', 19920116), ('Stephanie', 19920831), ('Kennan', 19960317), ('Madison', 19930602), ('Whitney', 19910815), ('Sarah', 19960925), ('Brooke', 19980614), ('Jessie Lynn', 19951228), ('Brittany', 19941212), ('Kylie', 19870826), ('Erin', 19861102), ('Lindsay', 19821118), ('Jessica', 19801107), ('Yuliya', 19860609), ('Kathryn', 19831129), ('Lyndsey', 19820509), ('Tiana', 19841014), ('Keri', 19870310), ('Sarah', 19871201), ('Alyssa', 19841006), ('Rachel', 19870205), ('Angelina', 19521229), ('Amy', 19540720), ('Bernadette', 19821015), ('Tarrin', 19820423), ('Christine', 19670817), ('Christian', 19870108), ('Emily', 19820728), ('Kelly', 19700330), ('Courtney', 19900729), ('Taylor', 19900818), ('Carissa', 19900507), ('Heather', 19810210), ('Georgiana', 19880624), ('Michelle', 19910127), ('Brintney', 19871008), ('Chisako', 19870720), ('Kristen', 19890819), ('Jessica', 19910223), ('Susie', 19700212), ('Ashley', 19830410), ('Megan', 19890818), ('Larraine', 19910713), ('Courtney', 19920503), ('Tiffany', 19860519), ('Olga', 19880819), ('Shauna', 19900424), ('Canna', 19860515), ('Jennifer', 19890525), ('Keri', ''), ('Lauren', 19890922), ('Whitney', 19880108), ('Caitlyn', 19891220), ('Stephanie', 19890627), ('Jacqueline', 19910905), ('Natalia Maria', 19880414), ('Katie', 19921222), ('Stephanie', 19880527), ('Kirsten', 19810703), ('Taylor', 19881121), ('Rebecca', 19880627), ('Maggie', 19881230), ('Arianna', 19910421), ('Katrina', 19860415), ('Jennifer', 19851029), ('Amber', 19920313), ('Kali A', 19880211), ('Merritt', 19890702), ('Whitney', 19860409), ('Jovana', 19900831), ('Daisy', 19841010), ('Danice', 19801001), ('Dana', 19870713), ('Kellie', 19871004), ('Magdalena', 19880701), ('Alison', 19900425), ('Myke', 19610608), ('Isadora', 19920421), ('Kelly', 19900622), ('Kristina', 19890516), ('Lindsey', 19930106), ('Emily Theresa', 19901123), ('Lauren', 19900423), ('Jenna', 19931127), ('Elizabeth', 19831216), ('Kelly', 19891215), ('Chelsea', 19880701), ('Sabrina', 19930104), ('Jamila', 19920114), ('Tracy', 19860926), ('Whitney', 19870831), ('Margaret', 19910927), ('Alexandra', 19920422), ('Mikayla', 19880525), ('Hailee', 19880530), ('Maureen', 19900314), ('Catherine R', 19910609), ('Erin', 19900530), ('Maryam', 19930203), ('Shabnam', 19910726), ('Caitlyn', 19931013), ('Chelsea', 19850919), ('Ashley', 19820703), ('Christina', 19890331), ('Chanel', 19930618), ('Amanda', 19890125), ('Alexandra', 19891129), ('Monica', 19901123), ('Lauren', 19890811), ('Jacquelyn', 19870304), ('Jacquelynn', 19890111), ('Courtney M', 19880916), ('Courtney', 19820114), ('Kristen', 19820114), ('Cameron', 19881217), ('Caroline', 19900110), ('Susanne', 19750213), ('Sarah', 19920801), ('Niltooli', 19900411), ('Victoria', 19891231), ('Hiromi', 19900510), ('Rachel', 19900209), ('Sena', 19970605), ('Christi', 19960204), ('Tatum', 19970428), ('Madeline', 19940911), ('Julia', 19890628), ('Kelly', 19941021), ('Jasmine Janelle', 19920519), ('Maria', 19950924), ('Monet', 19960106), ('Cordelia Currey', 19930607), ('Millie', 19911004), ('Madison', 19941227), ('Zaina', 19970519), ('Katelyn', 19870608), ('Amanda', 19961028), ('Anna Kate', 19941011), ('Tamijean', 19980616), ('Victoria', 19961202), ('Christiana', 19951116), ('Angie', 19750716), ('Kerry', 19680528), ('Anna', 19960128), ('Sabrina', 19920113), ('Brienne', 19971125), ('Sarah', 19960513), ('Stephanie J', 19960305), ('Alexus', 19970206), ('Alexandra', 19990630), ('Chloe', 19900921), ('Megan', 19960122), ('Erin', 19941226), ('Sydney', 19950909), ('Katherine', ''), ('Lauren', 19990905), ('Teresa', 19941010), ('Alix', 19950718), ('Alaina', 19980809), ('Cassie', 19950201), ('Morgan', 19940208), ('Kenna', 19930918), ('Kelli', 19931202), ('Lauren', 19940618), ('Katrina', 19920314), ('Taylor', 19921208), ('Sara Catherine', 19970130), ('Tamara', 19850418), ('Mckenna Alexandra', 19970303), ('Caroline', 19990809), ('Hada', 19980710), ('Lauren', 19970108), ('Jacara', 19980704), ('Ndindi Inziani', 19971224), ('Susanne', 19980505), ('Bianca', 19960804), ('Caitlin', 19960406), ('Iesha', 19911109), ('Chelsie Marie', 19920321), ('Aurora', 19921204), ('Alexandra', 19950811), ('Karolina', 19990305), ('Skylar', 19950616), ('Jillian', 20010513), ('Gabrielle', 19960114), ('Gabriella', 19971216), ('Allison', 19980324), ('Madeline', 19970403), ('Darya', 19981019), ('Seriana', 19980227), ('Erin', 19960312), ('Katherine', 20001206), ('Vivian', 20000111), ('Stephanie M', 19931110), ('Sabrina', 19971216), ('Kate', 19971013), ('Emma', 20000212), ('Lauren', 20010728), ('Kayla', 19930220), ('Khume', 19961023), ('Christiana', 19970614), ('Candace Olivia', 19800101), ('Alycia', 20001231), ('Mikayla', 19990722), ('Tiffany', 19971009), ('Sanyukta', 20010928), ('Karly', 19850115), ('Emma', 19940624), ('Arielle', 20000910), ('Marjorie', 19980202), ('Anastasiya', 19990324), ('Natasha', ''), ('Addison', ''), ('Mbalia', 19980107), ('Safiya', ''), ('Taylor', 20010406), ('Natasha', 19920609), ('Katherine', 20010213), ('Madison', 19961215), ('Omolola', 19840818), ('Reagan', 19980505), ('Katelyn', 19960909), ('Sophie', 20021031), ('Gabrielle', 19920202), ('Taylor', 19981203), ('Andrea', 19940728), ('Annie', 19870905), ('Olivia', 19990308), ('Imani', 20011220), ('Lauren', 20020523), ('Taylor', 20000807), ('Nicole', 20000304), ('Jane', 19881118), ('Chelsea', 20000819), ('Peyton', 19990915), ('Ellie', 20000523), ('Jane', 19931227), ('Anna', 20010815), ('Rosalyn', 19930622), ('Madison', 19990419), ('Sophia', 20010718), ('Jasmine', 19990813), ('Theresa', 19701102), ('Spirit', 19941027), ('Najah', 20010909), ('Sharmada', 19990810), ('Nicole', 20000812), ('Nina', 20020117), ('Alexa', 20020906), ('Naomi', 20020516), ('Sabina', 20010406), ('Katie', 20011231), ('Nikki', 20011019), ('Mccartney', 19990708), ('Tricia', 19920706), ('Peyton', 20011008), ('Anika', 20010807), ('Dalayna', 20001216), ('Kolie', 20000317), ('Cassie', 19960225), ('Anna', 20020102), ('Monica', 19950419), ('Taysia', 20000708), ('Kathleen', 19940728), ('Amanda', 19990718), ('Jimena', 20000707), ('Cassidy', 19950510), ('Brittany', 19950405)]

===== Eval Round 435 =====
Database         : wta_1
Prediction SQL   : SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
Gold SQL         : SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Jolene', 19680831), ('Lisa', 19730810), ('Meilen', 19780117), ('Serena', 19810926), ('Chanda', 19760218), ('Amy', 19720919), ('Tara', 19770526), ('Meghann', 19790413), ('Erika', 19721014), ('Lilia', 19780407), ('Jane', 19740621), ('Jennifer', 19760329), ('Alexandra', 19801215), ('Linda', 19710211), ('Brie', 19800121), ('Corina', 19780126), ('Marissa', 19800623), ('Lindsay', 19760608), ('Kathleen', 19461027), ('Geri', ''), ('Rosie', 19480916), ('Joan', ''), ('Mary Ann', 19461125), ('Billie Jean', 19431122), ('Patti', 19491221), ('Sharon', 19520224), ('Mona', 19481128), ('Ann', 19510504), ('Chris', 19541221), ('Janet', 19530806), ('Jill', 19540519), ('Julie', 19451208), ('Ann', 19550822), ('Joy', 19540519), ('Pam', 19510417), ('Peggy', 19490202), ('Martina', 19561018), ('Laura', 19490504), ('Sally', 19550325), ('Cecilia', 19470524), ('Rene', 19570512), ('Beth', 19570613), ('Patricia', 19511125), ('Kim', 19561011), ('Betsy', 19561023), ('Barbara', 19570402), ('Dianne', 19580811), ('Felicia', 19570720), ('Lindsay', 19550124), ('Lele', 19560910), ('Diane', 19550615), ('Rosalyn', 19601102), ('Marcie', 19530910), ('Pam', 19620704), ('Barbara', 19570501), ('Candy', 19550324), ('Bonnie', 19630911), ('Barbara', 19611022), ('Anne', 19590701), ('Paula', 19570110), ('Nancy', 19550522), ('Andrea', 19650604), ('Anne', 19610928), ('Leslie', 19570312), ('Kathy', 19591203), ('Mary Lou', 19610806), ('Sherry', 19590606), ('Lea', 19590120), ('Kim', 19571222), ('Tracy', 19621212), ('Kate', 19521025), ('Wendy', 19600929), ('Andrea', 19640118), ('Zina', 19631116), ('Susan', 19640628), ('Camille', 19660602), ('Alycia', 19610218), ('Jane', 19531206), ('Vicki', 19620925), ('Heather', 19610611), ('Robin', 19631210), ('Gigi', 19640222), ('Kathy', 19670324), ('Anna Maria', 19601022), ('Beth', 19640528), ('Lori', 19631218), ('Laura', 19630317), ('Kim', 19570928), ('Shelley', 19630619), ('Barbara', 19640703), ('Michaela', 19660227), ('Shawn', 19671221), ('Elise', 19620305), ('Sandy', 19581013), ('Linda', 19691224), ('Lisa', 19620714), ('Terry', 19551128), ('Ann', 19591031), ('Lisa', 19651016), ('Molly', 19650312), ('Hu', 19630416), ('Dee Ann', 19620611), ('Jamie', 19620121), ('Beverly', 19650909), ('Louise', 19620107), ('Cammy', 19681011), ('Susan', 19590415), ('Caryn', 19610314), ('Tina', 19521124), ('Terry', 19661218), ('Marianne', 19671017), ('Gretchen', 19640207), ('Kathrin', 19621128), ('Pamela', 19630703), ('Lindsay', 19620731), ('Jennifer', 19670702), ('Jennifer', 19620426), ('Carol', 19621009), ('Jill', 19640904), ('Elizabeth', 19680826), ('Pam', 19631220), ('Melissa', 19680411), ('Cynthia', 19640326), ('Amy', 19690902), ('Sherri', 19640202), ('Stephanie', 19650206), ('Patty', 19650331), ('Penny', 19640411), ('Wendy', 19640420), ('Katrina', 19680805), ('Leigh Anne', 19641214), ('Donna', 19710705), ('Jennifer', 19690226), ('Andrea', 19710930), ('Anna', 19660117), ('Kimberly', 19730327), ('Laxmi', 19721109), ('Kathy', 19650825), ('Halle', 19690805), ('Ronni', 19660510), ('Ann', 19701013), ('Mary Joe', 19710819), ('Jeri', 19701211), ('Carrie', 19720428), ('Shaun', 19681213), ('Audra', 19711117), ('Stacey', 19701113), ('Tami', 19681113), ('Stacey', 19680319), ('Ginger', 19680914), ('Monica', 19731202), ('Patty', 19680118), ('Nicole', 19690826), ('Jessica', 19700913), ('Kimberly', 19711020), ('Stephanie', 19691105), ('Debbie', 19700825), ('Susan', 19701205), ('Caroline', 19660825), ('Elly', 19690825), ('Meredith', 19710428), ('Sandra', 19740910), ('Anne', 19770119), ('Lindsay', 19770628), ('Venus', 19800617), ('Samantha', 19790117), ('Karin', 19771210), ('Jill', 19740704), ('Bunny', 19570905), ('Rayni', 19560524), ('Jennifer', 19810210), ('Holly', 19790210), ('Nancy', 19420823), ('Dorothy', 19250703), ('Kristy', 19500815), ('Valerie', 19490629), ('Linda', 19501021), ('Peaches', 19490416), ('Tory Ann', 19420808), ('Pamela', 19500312), ('Denise', 19500731), ('Wendy', 19470331), ('Becky', ''), ('Nancy', 19520731), ('Barbara', 19540304), ('Kristien', 19520725), ('Janet', 19530628), ('Daryl', 19540507), ('Ching Ling', 19481008), ('Robin', 19580513), ('Patricia', 19410811), ('Laurie', 19551104), ('Donna', 19541109), ('Linda', 19521114), ('Julie', 19480113), ('Jeanne', 19571005), ('Laurie', 19550614), ('Kathy', 19560618), ('Janice', 19520710), ('Kathy', 19561123), ('Jane', 19530810), ('Marita', 19560219), ('Susie', 19570916), ('Mary', 19500721), ('Mary', 19540907), ('Mary', 19570312), ('Carrie', 19550822), ('Ruta', 19551118), ('Mareen', 19600815), ('Robin', 19560413), ('Caroline', 19601104), ('Emilse', 19571219), ('Kay', 19570925), ('Zenda', 19591212), ('Betty Ann', 19500226), ('Jeanne', 19591207), ('Linda', 19610605), ('Julie', 19620205), ('Stacy', 19590405), ('Dana', 19591126), ('Roberta', 19581103), ('Joyce', 19580503), ('Andrea', 19550406), ('Trey', 19591127), ('Jenny', 19650419), ('Leigh Anne', 19640108), ('Joanne', 19541030), ('Michelle', 19670627), ('Nancy', 19580418), ('Felicia', 19611231), ('Jean', 19581025), ('Barbi', 19640914), ('Amy', 19650405), ('Jill', 19600623), ('Ginny', 19661115), ('Grace', 19680416), ('Melissa', 19690624), ('Debbie', 19670809), ('Eileen', 19661201), ('Maeve', 19641116), ('Kathleen', 19610905), ('Niurka', 19690419), ('Cecilia', 19630628), ('Kristin', 19590827), ('Kate', 19630111), ('Liezel', 19760821), ('Mashona', 19760531), ('Stephanie', 19460308), ('Marilyn', 19480308), ('Mimi', ''), ('Alice', 19421122), ('Pixie', ''), ('Betty', 19250415), ('Nadine', 19441026), ('Victoria', ''), ('Stephanie', 19500703), ('Carole', 19430624), ('Gail', 19510421), ('Patricia', 19400101), ('Eliza', 19530102), ('Patricia', 19450828), ('Sandy', 19560501), ('Tam', 19520127), ('Wendy', 19520430), ('Kathy', 19461218), ('Lisa', ''), ('Judy', 19490816), ('Roberta', 19560702), ('Mary', 19450925), ('Aleida', 19550616), ('Erin', 19550720), ('Stephanie', 19560325), ('Karen', 19421211), ('Sheila', 19580222), ('Susie', 19620329), ('Micki', 19601129), ('Heather', 19610712), ('Jane', 19620121), ('Diane', 19611105), ('Shawna', ''), ('Tammy', 19651012), ('Tracy', 19791006), ('Allison', 19801114), ('Ansley', 19820105), ('Dawn', 19760529), ('Kristen', 19840628), ('Vija', ''), ('Farel', ''), ('Connie', 19510521), ('Marjorie', 19510503), ('Peggy', ''), ('Tish', ''), ('Jade', ''), ('Carole', ''), ('Emilie', ''), ('Diane', ''), ('Mary', ''), ('Ann', ''), ('Tina', ''), ('Maricaye', ''), ('Roylee', 19490526), ('Nancy', 19330421), ('Louise', 19470321), ('Mimi', 19390818), ('Raymonde', ''), ('Carol', ''), ('Joyce', 19420223), ('Pat', 19340819), ('Jane', 19510220), ('Darlene', 19360106), ('Pam', 19501025), ('Carol', ''), ('Emilie', ''), ('Margaret', 19500413), ('Pam', ''), ('Susan', 19531113), ('Shari', ''), ('Sue', 19540603), ('Jeanne', 19350721), ('Kathy', 19521219), ('Gertrude', 19230908), ('Judy', 19430402), ('Brenda', 19540211), ('Patricia', 19580516), ('Marcy', ''), ('Sally', ''), ('Lynne', 19580328), ('Margaret', 19530105), ('Renee', 19340819), ('Carol', 19501022), ('Chris', 19561026), ('Kelly', 19620418), ('Lisa', 19590305), ('Lucy', ''), ('Jody', 19560704), ('Phyllis', 19570326), ('Linda', 19631106), ('Karen', 19640323), ('Eleni', 19671023), ('Lisa', 19680718), ('Sandra', 19690903), ('Shannan', 19700519), ('Julie', 19760424), ('Nicole', 19760203), ('Angela', 19720404), ('Keri', 19740501), ('Jacqueline', 19801126), ('Laura', 19810512), ('Jean', 19740607), ('Melissa', 19820606), ('Amber', 19840706), ('Sarah', 19811106), ('Ashley', 19850502), ('Bethanie', 19850323), ('Allison', 19860410), ('Bea', 19801128), ('Alexandra', 19850902), ('Carly', 19861126), ('Theresa', 19850310), ('Gabriela', 19800607), ('Shenay', 19840706), ('Angela', 19840927), ('Kelly', 19830318), ('Teryn', 19781212), ('Abigail', 19810712), ('Jessica', 19871110), ('Jamea', 19860907), ('Mary', 19881218), ('Tiffany', 19800314), ('Alexa', 19890910), ('Vania', 19890303), ('Ahsha', 19850321), ('Lauren', 19891001), ('Varvara', 19860521), ('Madison', 19900403), ('Audra', 19860421), ('Ashley', 19890620), ('Julie', 19790104), ('Melanie', 19910923), ('Kristie', 19920615), ('Gail', 19910605), ('Asia', 19910404), ('Coco', 19911206), ('Christina', 19920511), ('Mallory', 19900718), ('Lauren', 19910110), ('Hilary', 19881117), ('Sloane', 19930320), ('Alison', 19900703), ('Jamie', 19900108), ('Chelsey', 19900829), ('Beatrice', 19920406), ('Shelby', 19921013), ('Irina', 19900504), ('Lauren', 19931009), ('Madison', 19950217), ('Nicole', 19740801), ('Michelle', 19731228), ('Akiko', 19720214), ('Joy', 19621006), ('Caryn', 19711005), ('Luanne', 19721228), ('Julie', 19720510), ('Rachel Ann', 19721119), ('Judy', 19620511), ('Noelle', 19701218), ('Alysia', 19710131), ('Laura', 19670517), ('Amanda', 19780620), ('Julie', 19721007), ('Ann', 19670822), ('Melissa', 19720621), ('Jan', 19531223), ('Mary', 19620121), ('Sylvia', 19640127), ('Gail', 19470116), ('Diedre', 19711011), ('Caroline', 19651129), ('Kerry', 19501002), ('Kathy', 19670904), ('Stella', 19690309), ('Karen', 19680705), ('Cynthia', 19580614), ('Marlie', 19501120), ('Rona', 19690708), ('Kylie', 19610519), ('Helena', 19610201), ('Cheryl', 19640503), ('Jennifer', 19690715), ('Elizabeth', 19660406), ('Anne', 19660205), ('Alix', 19721022), ('Erica', 19690716), ('Stephanie', 19700424), ('Jill', 19671011), ('Jane', 19630123), ('Kathy', ''), ('Jean', 19700510), ('Ann', 19651028), ('Kirsten', 19690327), ('Wendy', 19600327), ('Nicole', 19610906), ('Vicki', 19570325), ('Mary Ann', 19560424), ('Christine', 19680118), ('Jennifer', 19600326), ('Julie', 19570621), ('Penny', 19550826), ('Cathy', 19580310), ('June', 19630619), ('Pam', 19750701), ('Stephanie', 19791023), ('Jane', ''), ('Gretchen', 19650626), ('Jane', 19660324), ('Holyn', 19731012), ('Kristi', 19690910), ('Linley', 19620501), ('Shelby', 19500626), ('Andrea', 19700128), ('Kathy', 19591224), ('Danielle', 19700322), ('Carol', 19610705), ('Jean', 19550606), ('Lori', 19650330), ('Edie', ''), ('Robin', ''), ('Kerri', 19681001), ('Lisa', 19700324), ('Mary', 19660508), ('Carol', 19591113), ('Katie', 19750429), ('Michele', 19660606), ('Shannon', 19670527), ('Gina', 19490515), ('Clare', ''), ('Cathleen', 19570316), ('Janice', 19510522), ('Betsy', 19540503), ('Lucia', 19601022), ('Wendy', 19680715), ('Allyson', 19631007), ('Debbie', 19620722), ('Marsha', ''), ('Linda', 19690503), ('Page', 19740622), ('Heather', 19711011), ('Gigi', 19701007), ('Marilda', 19650222), ('Christine', 19720714), ('Cynthia Ann', 19521114), ('Jenny', 19710226), ('Shelley', 19650421), ('Jackie', 19640104), ('Stephanie', ''), ('Michelle', 19610116), ('Genevieve', 19630819), ('Glynis', ''), ('Ann', 19520526), ('Allegra', ''), ('Cricket', 19610507), ('Bunny', 19460729), ('Holly Ann', 19701218), ('Amy', 19721112), ('Kathy', 19631005), ('Monique', 19841006), ('Erica', 19721128), ('Susan', 19651125), ('Rita', 19601018), ('Nina', 19610207), ('Donna', 19591005), ('Cissie', 19600108), ('Nancy', 19640804), ('Erika', 19631007), ('Cristina', 19770210), ('Terri', 19680118), ('Patty', 19730928), ('Katrina', 19681104), ('Katrina', 19800530), ('Anne', 19810420), ('Cory Ann', 19850122), ('Nicole', 19861103), ('Diana', 19790704), ('Tanner', 19840803), ('Shadisha', 19850712), ('Leslie', 19870525), ('Neha', 19860206), ('Megan', 19850719), ('Elizabeth', 19880603), ('Jewel', 19810910), ('Lindsey', 19851118), ('Raquel', 19821208), ('Brittany', 19910919), ('Kirsten', 19880814), ('Chieh Yu', 19920114), ('Alexis', 19830331), ('Amanda', 19861204), ('Catherine', 19940409), ('Tetiana', 19840904), ('Julia', 19910909), ('Alexandra', 19880214), ('Zoe Gwen', 19930921), ('Julia', 19890323), ('Jessica', 19940224), ('Grace', 19940506), ('Chi Chi', 19920705), ('Nicole', 19930303), ('Mallory', 19910128), ('Jennifer', 19860922), ('Samantha', 19950218), ('Victoria', 19951130), ('Maria', 19891126), ('Anne', 19850828), ('Megan', 19850311), ('Lena', 19881115), ('Katie', 19830503), ('Courtney B', 19920325), ('Kimberly', 19890509), ('Jacqueline', 19910830), ('Ester', 19930704), ('Eleanor', 19880626), ('Yasmin', 19880504), ('Anne Liz', 19960526), ('Alessondra', 19900906), ('Ryann', 19960723), ('Lucie', 19720406), ('Kelly S', 19730905), ('Kristina', 19790811), ('Wendy', 19750131), ('Julie', 19751016), ('Aurandrea', 19791121), ('Brandis', 19800213), ('Megan', 19781224), ('Alyssa', 19821119), ('Jennifer', 19780807), ('Jennifer', 19840217), ('Candice', 19820331), ('Michelle', 19780119), ('Kristy', 19790517), ('Andrea', 19881006), ('Lauren', 19800829), ('Iris', 19850613), ('Jennifer', 19810718), ('Ali', 19870923), ('Nicole', 19851124), ('Kaysie', 19800411), ('Krystina', 19880510), ('Riza', 19860210), ('Sarah', 19810627), ('Megan', 19830326), ('Story', 19830502), ('Christina', 19801127), ('Stacia', 19850921), ('Kaitlyn', 19920113), ('Chloe', 19900201), ('Amanda', 19870902), ('Kelcy', 19890411), ('June', 19950619), ('Krista', 19940914), ('Adria', 19791221), ('Susie', 19721210), ('Kori', 19731101), ('Elizabeth', 19770823), ('Agnes', 19800801), ('Courtenay', 19770227), ('Dee Dee', 19790211), ('Aurora', 19741107), ('Keirsten', 19730917), ('Ingrid', 19730602), ('Stephanie', 19761207), ('Sara', 19770113), ('Lori', 19810731), ('Milangela', 19811209), ('Brooke', 19790101), ('Lauren', 19820521), ('Amanda', 19780119), ('Kelley', 19850922), ('Meredith', 19720604), ('Jackie', 19840111), ('Megan', 19780427), ('Amanda', 19811126), ('Cammy', 19701225), ('Ditta', 19751226), ('Jennifer', 19731228), ('Krissy', 19791211), ('Annica', 19780902), ('Tory', 19850618), ('Whitney', 19860123), ('Sarah', 19801121), ('Jessyca', 19800826), ('Beau', 19800626), ('Katrina', 19880707), ('Stephanie', 19790129), ('Jennifer', 19881123), ('Jessica', 19871124), ('Sarah', 19880209), ('Kim Anh', 19831004), ('Ellah', 19881122), ('Lauren', 19820914), ('Link', 19861125), ('Aleke', 19820427), ('Kendra', 19831118), ('Arpi', 19830612), ('Erin', 19900328), ('Tiffany', 19820909), ('Robin', 19830621), ('Kristi', 19851222), ('Jennifer Lee', 19870227), ('Veronica Ruo Qi', 19891110), ('Danielle', 19910328), ('Shilpa', 19840412), ('Elizabeth', 19880526), ('Megan', 19870701), ('Melissa', 19880408), ('Lauren', 19890522), ('Alana', 19851031), ('Riley', 19901114), ('Kristen', 19880323), ('Mami', 19790715), ('Kit', 19810726), ('Stacey', 19910718), ('Elizabeth', 19810315), ('Nina', 19890707), ('Nadja', 19900607), ('Erica', 19901127), ('Jenna', 19851126), ('Tiya', 19860611), ('Natalie', 19850322), ('Courtney', 19820929), ('Kristy', 19900108), ('Susanna', 19831103), ('Alexa', 19901117), ('Aeriel', 19900928), ('Maureen', 19820528), ('Allie', 19910420), ('Sanaz', 19880621), ('Lauren', 19760912), ('Alexis', 19840927), ('Libby', 19940124), ('Lauren', 19930723), ('Michaela', 19880722), ('Tori', 19871124), ('Gabrielle', 19930227), ('Danielle Rose', 19931213), ('Tarakaa', 19860811), ('Danielle', 19910528), ('Ellen', 19931008), ('Brooke', 19920408), ('Mccall', 19900315), ('Macall', 19860205), ('Megan', 19880705), ('Nicole', 19930729), ('Alexandra', 19911130), ('Elizabeth', 19860524), ('Jade', 19921028), ('Brie', 19890507), ('Jan', 19950301), ('Simone', 19891230), ('Elizabeth', 19860731), ('Gabrielle Faith', 19961223), ('Sachia', 19950511), ('Taylor', 19960416), ('Lindsey', 19900104), ('Alexandra', 19950630), ('Alexandra', 19910213), ('Robin', 19930412), ('Brianna', 19940219), ('Olivia', 19960122), ('Whitney', 19860811), ('Emily J', 19910615), ('Caroline B', 19941031), ('Chalena', 19950818), ('Elizabeth Anita Alexandria', 19960806), ('Breanna Alexa Bachini', 19930521), ('Mary', 19950817), ('Betsy', 19600427), ('Eve', 19621028), ('Janet', 19670405), ('Jaime', 19611001), ('Angel', 19610830), ('Donna', 19550626), ('Valerie', 19540813), ('Lucinda', 19520717), ('J', ''), ('J', ''), ('D', ''), ('K', ''), ('B', ''), ('J', ''), ('R', ''), ('N', ''), ('E', ''), ('F', ''), ('Caroline', 19560622), ('D', ''), ('Wendy', ''), ('Nancy', 19530830), ('Susan', 19570107), ('Gretchen', 19560201), ('Anne', ''), ('Holly', 19690811), ('Margaret', 19601012), ('Clare', 19671008), ('Kathy', 19641104), ('Rita', 19660512), ('Marlene', 19810731), ('Linda', 19570701), ('Beverly', 19530124), ('Ann', 19551013), ('Robin', 19540923), ('A', ''), ('Maria', ''), ('Karen', ''), ('Karen', ''), ('Jenny', ''), ('Lisa', ''), ('Kathy', ''), ('Maria', 19600424), ('Judith', ''), ('Becky', ''), ('Connie', ''), ('Lori', ''), ('Joni', 19651125), ('Lisa', ''), ('Suzanne', ''), ('Shandra', 19680519), ('Merrilee', ''), ('Jennifer', 19660615), ('Chris', ''), ('Trisha', 19690203), ('Stephanie', 19690818), ('Sonya', 19670825), ('Susan', 19710412), ('Tanya', 19690302), ('Tonya', 19690821), ('Kara', 19730105), ('Melissa', 19740402), ('Victoria', 19761230), ('Trina', 19821230), ('Kristine', 19720623), ('Martha', 19691215), ('Candice', 19800207), ('Cindy', 19790422), ('Elizabeth', 19740824), ('Valerie', 19731228), ('Tracey', 19710129), ('Diana', 19680410), ('Alice', 19770830), ('Allison', 19660804), ('Vickie', 19710827), ('Stacey', 19750105), ('Marissa', 19780613), ('Susanna', 19720303), ('Rebecca', 19721119), ('Ashley', 19720408), ('Varalee', 19760502), ('Stephanie', 19770408), ('Elizabeth', 19631112), ('Bridget', 19740207), ('Leslie', 19720209), ('Traci', 19780805), ('Alison', 19741125), ('Amy', 19681007), ('Vanessa', 19760513), ('Laura', 19720426), ('Anna', 19761021), ('Betsy', 19751127), ('Kristen', 19781002), ('Mugette', 19810424), ('Tu', 19780208), ('Irene', 19790612), ('Jennifer', 19720416), ('Diana', 19751029), ('Jody', 19711122), ('Samantha', 19890509), ('Tristen Z', 19940501), ('Rachel', 19920719), ('Ashley', 19871106), ('Alexandra', 19920223), ('Natalie', 19910801), ('Lindsay', 19880226), ('Amelia', 19920802), ('Caroline', 19930313), ('Camila', 19950929), ('Josie', 19951105), ('Skylar Alexandra', 19940424), ('Brooke', 19960212), ('Alexandra', 19910413), ('Daniella', 19971105), ('Hayley', 19950517), ('Jody', 19780930), ('Ella', 19760917), ('Emily Ann', 19820328), ('Jacquelyn', 19801117), ('Lesley', 19781011), ('Kristen', 19770518), ('Cara', 19720421), ('Zuzanna', 19800403), ('Katie', 19800911), ('Marilyn', 19740114), ('Lena', 19830510), ('Brandi', 19770612), ('Andrea', 19780204), ('Sara', 19801022), ('Hillary', 19820417), ('Mariel', 19800220), ('Whitney', 19800508), ('Darian', 19790615), ('Alexandra', 19820310), ('Prim', 19810115), ('Janet', 19800628), ('Rachel', 19690211), ('Lindsay', 19821207), ('Kirsty', 19780517), ('Raluca Daniela', 19830717), ('Mindy', 19720322), ('Erin', 19830419), ('Mary Carlisle', 19780716), ('Erin', 19800116), ('Keiko', 19800429), ('Maiko', 19820623), ('Paige', 19740714), ('Janet', 19790529), ('Briana', 19781221), ('Stacey', 19721219), ('Kristin', 19720204), ('Julia', 19810518), ('Rochelle', 19800430), ('Selin', 19780706), ('Jennifer', 19730117), ('Luana', 19821205), ('Whitney', 19850811), ('Paloma', 19720823), ('Tumeka', 19761226), ('Maria', 19830319), ('Hyacinth', 19610809), ('Eva', 19840706), ('Kara', 19790920), ('Katie', 19841110), ('Melissa', 19840613), ('Emmy', 19870722), ('Alexandria', 19860310), ('Shari', 19641103), ('Michelle', 19791212), ('Alexandra', 19841228), ('Nicole', 19860203), ('Monica', 19851212), ('Caitlin', 19850517), ('Lia', 19800922), ('Michelle', 19870304), ('Sybil', 19770106), ('Jodi', 19810822), ('Liberty', 19870409), ('Mimi', 19841030), ('Melissa', 19861211), ('Jessi', 19870221), ('Courtney', 19880501), ('Chrissie', 19870902), ('Yvette', 19880612), ('Audra', 19830331), ('Leila', 19860206), ('Tamara', 19790924), ('Rebekah', 19791012), ('Sabita', 19840927), ('Shannon', 19870109), ('Courtney', 19851011), ('Polina', 19860408), ('Anamika', 19890413), ('Jie', 19871101), ('Georgette', 19840709), ('Christy', 19871212), ('Suzanne', 19880117), ('Courtney', 19900327), ('Cammie', 19871122), ('Nelly', 19901113), ('Veronica', 19870514), ('Keilly', 19900505), ('Kate', 19831111), ('Reka', 19890708), ('Bianca', 19890514), ('Thien Trang', 19910918), ('Pamela', 19910101), ('Morgan', 19920220), ('Julianna', 19850107), ('Subbadharmi', 19890708), ('Stephanie', 19930216), ('Kelsey', 19910408), ('Alexandra', 19870719), ('Amanda', 19880314), ('Chelsea', 19891211), ('Anna', 19840821), ('Jill M', 19910313), ('Kady', 19860317), ('Phoebe', 19880520), ('Emily', 19921201), ('Christian', 19840913), ('Keri', 19891225), ('Sabrina', 19860112), ('Nataly', 19900913), ('Maria', 19920619), ('Noel', 19930203), ('April', 19920508), ('Ellie', 19930808), ('Stephanie', 19901027), ('Nicole', 19911031), ('Anna', 19940308), ('Veronika', 19900920), ('Annie', 19930330), ('Kyle', 19940405), ('Chanelle', 19940119), ('Yawna', 19860801), ('Hilary', 19910513), ('Ivana', 19861108), ('Gira', 19860829), ('Claire', 19891129), ('Erin', 19880609), ('Caitlin', 19880219), ('Alexandra', 19850703), ('Jennifer', 19950412), ('Kimberly', 19961015), ('Natalie', 19891102), ('Elizaveta Anna', 19930831), ('Veronica M', 19911207), ('Karina', 19950706), ('Sylvia', 19860904), ('Sherry', 19950208), ('Katrine Isabel', 19960315), ('Denise', 19950417), ('Courtney', 19940325), ('Christina', 19960529), ('Noelle', 19881205), ('Lauren', 19950517), ('Breaunna', 19941222), ('Nicole', 19941230), ('Meredith', 19970521), ('Nadia', 19950114), ('Jackie', 19710922), ('Antoinette', 19850107), ('Kathleen', 19740511), ('Kylene', 19790725), ('Dana', 19730725), ('Audra', 19720605), ('Tracee', 19731009), ('Amie', 19800517), ('Jennifer', 19811128), ('Lashawnn', 19740602), ('Jacqueline', 19820209), ('Jennifer', 19770119), ('Kristy', 19741230), ('Susan', 19741201), ('Bridget', 19761018), ('Amy', 19690628), ('Sandra', 19750116), ('Khristen', 19750803), ('Stefanie', 19810322), ('Barrie', 19730724), ('Kate', 19820415), ('Amy', 19731107), ('Anne', 19780520), ('Lauren', 19740830), ('Dewonder', 19590127), ('Kendra', 19790828), ('Jamie', 19801106), ('Jennifer', 19750823), ('Audrey', 19850430), ('Marjorie', 19750503), ('Katie', 19770527), ('Aimee', 19820110), ('Megan', 19810519), ('April', 19781129), ('Maren', 19791106), ('Sarah', 19780514), ('Marie Ange', 19780114), ('Dina', 19680406), ('Margaret', 19760707), ('Mary Beth', 19760329), ('Patricia', 19841020), ('Ashley', 19821229), ('Kathryn', 19790225), ('Leslie', 19810718), ('Becky', 19640801), ('Julie', 19811223), ('Danielle', 19781110), ('Terri', 19650402), ('Amy', 19681215), ('Douglas', 19840522), ('Sara', 19850621), ('Karla', 19770318), ('Kristin', 19841130), ('Kristin', 19810705), ('Bonnie', 19850503), ('Natalie', 19830401), ('Jennifer', 19830702), ('Claire', 19700527), ('Lauren', 19780316), ('Alison', 19791129), ('Laura', 19710624), ('Katia', 19810816), ('Kara', 19771202), ('Violette', 19790927), ('Lisa', 19740221), ('Evonne', 19740923), ('Mandy', 19790312), ('Jessica', 19800415), ('Emily', 19811119), ('Callie', 19770711), ('Maggie', 19750529), ('Elina', 19820521), ('Terry Ann', 19740428), ('Kimberly', 19790725), ('Bettina', 19820718), ('Lindsay', 19800519), ('Johanna', 19750518), ('Amy', 19790124), ('Meiling', 19791112), ('Jennifer', 19781020), ('Vania', 19810428), ('Megan', 19831014), ('Lindsey', 19800201), ('Megan', 19820411), ('Angela', 19840329), ('Megan', 19840920), ('Nicolette', 19831108), ('Anita', 19860219), ('Alessandra', 19870112), ('Aradhana', 19820709), ('Tiffany', 19831228), ('Macey', 19830224), ('Kelcy', 19861225), ('Caylan', 19820701), ('Stephanie', 19820923), ('Jan', 19580317), ('Kate', 19830530), ('Karen', 19671205), ('Sarah Jane', 19820802), ('Catrina', 19840913), ('Bethany', 19821129), ('Lindsay', 19820811), ('Kathleen', 19820917), ('Amy', 19810415), ('Emilia', 19820204), ('Colleen', 19790212), ('Ashlee', 19850522), ('Saras', 19830726), ('Brittany', 19850420), ('Laila', 19810805), ('Natalie', 19851103), ('Celena', 19790130), ('Marine', 19780929), ('Cara', 19730424), ('Loni', 19810928), ('Christyn', 19850210), ('Cassy', 19850802), ('Manisha', 19770513), ('Jennifer', 19811121), ('Michelle', 19801002), ('Brook', 19851231), ('Samantha', 19840807), ('Stephanie', 19870411), ('Courtney', 19820502), ('Melissa', 19840112), ('Kristin', 19790227), ('Adriana', 19780902), ('Christine', 19831216), ('Julie', 19840521), ('Cristina', 19860826), ('Nadia', 19850209), ('Amanda', 19821020), ('Camelia', 19860406), ('Emily', 19850201), ('Danielle', 19840717), ('Rochelle', 19800627), ('Brianna', 19851215), ('Zena', 19880717), ('Adina', 19870619), ('Lauren', 19880204), ('Lauren', 19870928), ('Meg', 19870811), ('Ristine', 19850116), ('Jennifer', 19841115), ('Lindsey', 19860101), ('Lindsay', 19880524), ('Gloriann', 19840228), ('Patricia', 19740119), ('Kelly', 19820223), ('Amanda', 19870813), ('Elizabeth', 19860128), ('Whitney', 19851225), ('Laura', 19850506), ('Masha', 19840211), ('Karina', 19880811), ('Erin', 19850113), ('Randi', 19870211), ('Kewa', 19860701), ('Hala', 19850809), ('Dasha', 19870606), ('Suzanna', 19861013), ('Colleen', 19880209), ('Blair', 19830904), ('Simone', 19881010), ('Jessica', 19870304), ('Austin', 19860601), ('Preethi', 19850629), ('Christala', 19890709), ('Krista', 19900423), ('Marie', 19830721), ('Ashley', 19861113), ('Latrell', 19891212), ('Sheryl', 19850920), ('Amanda', 19850319), ('Blakeley', 19841114), ('Ashley', 19870917), ('Whitney', 19890109), ('Marlene', 19880329), ('Melissa', 19860801), ('Alex', 19870117), ('Jessica', 19811223), ('Megan', 19890204), ('Jacqueline', 19830608), ('Melody', 19830708), ('Sarah', 19910314), ('Marie', 19910614), ('Daron', 19851128), ('Amy', 19790324), ('Dina', 19871014), ('Mia', 19910312), ('Valerie', 19851231), ('Amanda', 19880523), ('Connor', 19870922), ('Elizabeth', 19920114), ('Brittany', 19870208), ('Kristen A', 19880325), ('Julie', 19880331), ('Sarah', 19880129), ('Emily', 19890724), ('Christine', 19871225), ('Amanda', 19850511), ('Nicole', 19880620), ('Laurianne', 19881018), ('Pamela', 19901124), ('Miya', 19871114), ('Rachel', 19830708), ('Joanna', 19891009), ('Lynn', 19791216), ('Claire', 19871108), ('Paola', 19920827), ('Lauren', 19890512), ('Erin Carol', 19930506), ('Cameron', 19881224), ('Julie', 19870627), ('Stefanie', 19890130), ('Hannah', 19910812), ('Katherine', 19860305), ('Olivia', 19880423), ('Christina', 19880426), ('Christina', 19881212), ('Cierra', 19910927), ('Milena', 19850506), ('Christin J', 19870731), ('Stephanie', 19900327), ('Kaysara', 19910623), ('Nina', 19900115), ('Deirdre', 19901205), ('Kristin', 19841024), ('Jacqueline', 19900913), ('Stephany', 19900609), ('Erica', 19900702), ('Julia', 19910916), ('Grace', 19891211), ('C C', 19911009), ('Sarah', 19910422), ('Marianne', 19850906), ('Monica', 19920622), ('Kate', 19920109), ('Amanda Marie', 19860106), ('Alexa', 19900824), ('Denise', 19890731), ('Molly', 19890525), ('Nelo', 19920705), ('Farwa', 19891101), ('Millie', 19641005), ('Brooke Lindsey', 19940622), ('Lilly F', 19911101), ('Brynn', 19910801), ('Karina', 19831112), ('Tracy', 19740827), ('Desiree', 19931110), ('Rachael', 19910427), ('Alrissa', 19920724), ('Amanda', 19870317), ('Olivia', 19910711), ('Caryssa L', 19920413), ('Monica', 19930108), ('Joelle', 19910606), ('Malika', 19910709), ('Theresa', 19930607), ('Mary Anne', 19920215), ('Morocco', 19921107), ('Mara', 19920222), ('Alejandra Maria', 19950228), ('Catherine', 19880430), ('Kate', 19901106), ('Abigail', 19900209), ('Sabrina', 19930224), ('Heatherm', 19890925), ('Stephanie', 19940511), ('Leighann', 19931204), ('Lauren', 19880816), ('Kayla', 19920921), ('Kir', 19891031), ('Skylar', 19930914), ('Julia', 19931207), ('Meghan', 19930621), ('Nida', 19911029), ('Lauren', 19880905), ('Kelly K', 19910531), ('Alyssa Grace', 19950215), ('Mary', 19911122), ('Madeleine', 19920319), ('Rachel', 19840302), ('Alex', 19911229), ('Kyra', 19960510), ('Suzy', 19940830), ('Remeice', 19891112), ('Kate', 19940201), ('Courtney', 19891015), ('Molly', 19930810), ('Stephanie', 19940131), ('Alexandra M', 19870719), ('Aleksandra', 19960409), ('Erin', 19880709), ('Jessica', 19930428), ('Spencer', 19950125), ('Anik', 19910405), ('Simone', 19920717), ('Emma', 19930623), ('Melissa', 19921004), ('Tina', 19950427), ('Julia', 19940613), ('Rachael', 19931209), ('Shelby', 19930114), ('Epiphany B', 19921217), ('Kaitlin', 19921215), ('Mariana', 19950927), ('Hannah', 19951103), ('Casey', 19910613), ('Deborah', 19940514), ('Jessica', 19931117), ('Kelsey', 19940821), ('Samantha', 19930126), ('Blair', 19940814), ('Martha V', 19900628), ('Amanda', 19930322), ('Sarah', 19920729), ('Emily', 19931112), ('Jamie', 19950308), ('Kelly', 19770505), ('Quinn', 19941110), ('Sophia', 19930330), ('Sierra A', 19900816), ('Mckenzie', 19940107), ('Stacey', 19900117), ('Courtney', 19910226), ('Rosalia', 19900208), ('Sydney', 19950207), ('Mia', 19950406), ('Erin Kane', 19960512), ('Laura', 19841119), ('Eva', 19921222), ('Elizabeth', 19940706), ('Sarah', 19930713), ('Elyse', 19870910), ('Sabrina', 19920912), ('Julia', 19890114), ('Gabriella', 19951208), ('Tanya', 19930914), ('Nyla', 19960730), ('Louisa', 19960516), ('Zina', 19980402), ('Tornado Alicia', 19980512), ('Madison', 19970919), ('Rima', 19951116), ('Kourtney J', 19940907), ('Natasha', 19940823), ('Erin', 19901230), ('Rachel May', 19941113), ('Jillian', 19941210), ('Caroline', 19960315), ('Dominique', 19870203), ('Trelsie', 19890707), ('Angela', 19950604), ('Nicole', 19980429), ('Kim', 19951027), ('Emina', 19930330), ('Lynda', 19921123), ('Joanna Mary', 19930201), ('Caroline', 19960103), ('Julia', 19940403), ('Callie', 19910904), ('Maxine', 19910710), ('Katie', 19921211), ('Emma Christine', 19980201), ('Johnnise', 19960510), ('Katerina', 19970717), ('Jessica', 19970105), ('Marjorie', 19880420), ('Maci', 19931007), ('Kaitlyn', 19971204), ('Jacqueline', 19941203), ('Charity', 19870711), ('Parris', 19980708), ('Jamie', 19930819), ('Miriam Ruth', 19940724), ('Elizabeth', 19910118), ('Amanda', 19860130), ('Lindsay', 19780708), ('Erica', 19860327), ('Dina', 19711211), ('Robyn', 19850111), ('Anita', 19810402), ('Casey', 19840501), ('Emily', 19850224), ('Jamie', 19880415), ('Brittany', 19880627), ('Elizabeth', 19550921), ('Carolyn', 19900415), ('Cassandra', 19891211), ('Prissy', 19910807), ('Kristin', 19830420), ('Diamond', 19901226), ('Celia', 19860527), ('Tiffany', 19891126), ('Jennifer', 19890531), ('Komal', 19930108), ('Roxanne', 19890826), ('Mandy', 19810914), ('Amanda', 19800324), ('Alissa', 19671209), ('Kay', 19570927), ('Jane', 19661222), ('Tracie', 19610116), ('Elizabeth', 19630811), ('Cinda', 19710410), ('Tracy', 19611021), ('Dena', 19650928), ('Hemel', 19660108), ('Karen', 19630803), ('Reka', 19670612), ('Vincenza', 19660820), ('Lisa', 19640803), ('Lynn', 19661018), ('Jill', 19731226), ('Julie', 19710609), ('Kilmeny', 19660218), ('Kay', 19690131), ('Debbie', 19651129), ('Anne Marie', 19660720), ('Leslie', 19660908), ('Lisa', 19630604), ('Lisa', 19611106), ('Tory', 19660712), ('Kylie', 19700509), ('Anya', 19690220), ('Jennifer', 19670106), ('Diana', 19721007), ('Betsy', 19671127), ('Katrina', 19671129), ('Karen', 19701102), ('Susan', 19710206), ('Sherri', 19730118), ('Tonya', 19691110), ('Julie', 19680817), ('Susan', 19710206), ('Jamie', 19691029), ('Alita', 19630112), ('Tara', 19681223), ('Erika', 19720516), ('Kellie', 19670601), ('Happy', 19680605), ('Angie', 19710323), ('Bonnie', 19770412), ('Farley', 19741212), ('Tunecia', 19701023), ('Roseann', 19710227), ('Allison', 19710927), ('Hillery', 19610619), ('La Shawnn', 19740206), ('Sylvia', 19610419), ('Kathy', 19741105), ('Zuzanna', 19790726), ('Cassi', 19850902), ('Lejla', 19870206), ('Danielle', 19820120), ('Geneva', 19871225), ('Katie', 19891023), ('Katie', 19881216), ('Brittany', 19940406), ('Allie', 19950630), ('Sofia', 19981114), ('Mia', 19970723), ('Ty Ana', 19970313), ('Karina Kristina', 19981021), ('Jessica', 19890916), ('Trisha', 19981027), ('Ashley', 19881017), ('Tina', 19920831), ('Tatijana', 19971116), ('Taylor L', 19950117), ('Alexa', 19980707), ('Emerald', 19970905), ('Marie', 19970611), ('Alexandra', 19950224), ('Aleah', 19910923), ('Sarah', 19941219), ('Usue Maitane', 19981028), ('Ellie', 19970710), ('Maia A', 19960921), ('Raquel', 19980128), ('Peggy', 19951110), ('Rebecca', 19971004), ('Camila', 19961125), ('Karyn', 19940912), ('Ayla', 19960715), ('Rasheeda', 19950630), ('Amy', 19941028), ('Ariana', 19960126), ('Luisa', 19951005), ('Mary', 19910802), ('Kristi', 19900427), ('Ronit', 19931203), ('Julia Christine', 19921027), ('Kristina N', 19910125), ('Macie', 19941023), ('Jessica', 19950102), ('Rhiann', 19940622), ('Frances', 19940222), ('Kelly', 19960221), ('Hanna', 19980225), ('Natalie', 19960508), ('Dasha', 19961011), ('Elizabeth', 19910218), ('Brianna', 19951012), ('Kristin', 19951122), ('Kristina', 19951204), ('Maddie', 19971117), ('Raveena', 19980723), ('Daniella', 19971027), ('Laura', 19970305), ('Idia', 19930922), ('Chloe Michele', 19970905), ('Morgan', 19941219), ('Nikki', 19960418), ('Sianna', 19900804), ('Nicole', 19990508), ('Mercedes', 19970525), ('Lourdes', 19990531), ('Adi', 19951213), ('Anna', 19971103), ('Alexandra', 19980719), ('Katarina', 19960704), ('Michaela', 19990726), ('Ena', 19980212), ('Catherine Cartan', 19990408), ('Hadley', 19960311), ('Madison', 19960402), ('Jaeda', 19990728), ('Jeannez', 19960707), ('Erica', 19980316), ('Jessie', 19980419), ('Andie K', 19970107), ('Alexandria', 19960511), ('Gabriella', 19960709), ('Kelly', 19990509), ('Terri', 19960723), ('Angel', 19850125), ('Maria', 19970506), ('Alexis', 19980809), ('Rianna', 19960903), ('Megen', 19960709), ('Caroline', 19980905), ('Sophie', 19970528), ('Nicole', 19960504), ('Jacqueline', 19970531), ('Jessica', 19970709), ('Adriana', 19890308), ('Kylie', 19970606), ('Yuki Kristina', 19950819), ('Lexi', 19950525), ('Caroline', 19970726), ('Ingrid', 19980616), ('Alexandra', 19970301), ('Nada', 20000308), ('Alexis', 19950606), ('Felicity', 19970313), ('Tory', 19930105), ('Aimee', 19940907), ('Alli', 19961203), ('Claudia', 19961206), ('Brooke', 19951010), ('Marina', 19981123), ('Zoe Adeline', 19941217), ('Jessica', 19970605), ('Ashley', 19920829), ('Valerie', 19971122), ('Ashley', 19990208), ('Brittany', 19920303), ('Olivia', 19940623), ('Taylor', 19950731), ('Alexis', 19950724), ('Sara', 19971217), ('Lindsay', 19930107), ('Liza', 19950317), ('Jayci', 20000517), ('Marina', 19920314), ('Sydney', 19990430), ('Alyza', 19951122), ('Sophia', 19920113), ('Riley', 19990615), ('Delaney', 19981028), ('Jane', 19961112), ('Valerie Ann', 19980801), ('Carolyn', 19970524), ('Maegan', 19950416), ('Tamara', 19971129), ('Mary', 19981025), ('Victoria', 19990401), ('Kennedy', 19970521), ('Amy', 19970120), ('Makenna', 19980226), ('Stephanie', 19980415), ('Nicole Taylor', 19990426), ('Claire', 20000525), ('Jada', 19990129), ('Sara', 19970723), ('Hannah', 19960923), ('Sophia', 19971005), ('Akiko', 19930913), ('Karina', 19970808), ('Haley', 19910403), ('Paige', 19970222), ('Kayla', 19990928), ('Carson', 20000909), ('Amanda', 19940813), ('Maria', 19990721), ('Kylie', 19990321), ('Luciana', 19981001), ('Zoe', 20010308), ('Sachi', 19981129), ('Audrey', 19951029), ('Anna', 19970319), ('Abigail', 20010122), ('Cameron', 19990920), ('Katelyn', 19921211), ('Katharine', 19961019), ('Elyse', 19981014), ('Mimi', 19930430), ('Bess', 19971029), ('Ines Karmen', 19970615), ('Taylor', 19990615), ('Kristen', 19970407), ('Sabrina', 19971003), ('Desirae', 19940111), ('Sarah', 19960418), ('Rachel', 19961108), ('Victoria', 19990807), ('Nini', 19950909), ('Francesca', 19970722), ('Makenzie', 19990610), ('Chiara', 19980826), ('Melissa', 19930602), ('Morgan', 19990416), ('Jerricka', 19950116), ('Eva', 19961102), ('Miranda', 19990307), ('Teresia', 19990529), ('Julia', 19971217), ('Malkia', 20000808), ('Lorraine M', 19930615), ('Carol', 19960218), ('Jocelyn', 19900526), ('Roosh', 19920321), ('Alexa', 19980703), ('Alyvia', 20000503), ('Katie', 19990929), ('Meible', 19990519), ('Elizabeth', 20010712), ('Emma', 20010518), ('Arianna', 19950206), ('Kiah', 19950117), ('Alyssa', 20000210), ('Stephanie', 19880402), ('Sofia', 19990722), ('Sarah', 19930814), ('Melan', 19970406), ('Alexandra', 19990105), ('Dilara', 19990911), ('Hurricane Tyra', 20010302), ('Taylor', 19980222), ('Nami', 19980827), ('Marcella', 20001012), ('Sophia', 20010630), ('Delisha', ''), ('Haley', ''), ('Jenna', ''), ('Nikita', 19931021), ('Hoda', ''), ('Meredith', 19990310), ('Morgan', 19950317), ('Kirsten', 19940508), ('Maya', 19940527), ('Kat', 19930215), ('Alexandra', 19930215), ('Meghan', 19971028), ('Salma', 20000828), ('Madeline', 19990307), ('Lindsay', 19981217), ('Alexa', 20010908), ('Mary Catherine', 19971104), ('Cheyenne', 19960326), ('Neri', 19990902), ('Jesse', 20011004), ('Ann', 20000626), ('Natalia', 19930929), ('Whitney', 20020417), ('Christina', 19970725), ('Sofia', 19980703), ('Nicole', 20000805), ('Kenadi', 19970313), ('Paiton', 19980808), ('Shannon', 19950915), ('Elysia', 20000324), ('Ashley', 19991026), ('Alexis', 19970314), ('Caty', 20011120), ('Isabella', 20010706), ('Elizabeth', 20010519), ('Anna', 20020306), ('Dakota', 20020508), ('Janice', 19990105), ('Amanda', 20010831), ('Jada', 19980319), ('Hind', 19990228), ('Mikaela', 19890801), ('Micheline', 19970428), ('Kendal', 19940106), ('Anna', 19991008), ('Mia', 19981021), ('Chloe', 20010830), ('Abigail', 20010310), ('Ryan', 19990510), ('Maia', ''), ('Jana', 19941110), ('Shale', 20011015), ('Helen Abigail', 19980520), ('Kariann', 19990116), ('Kennedy', 19980903), ('Caroline', 19980929), ('Allison', 19981031), ('Melissa', 19970624), ('Ellyse', 19961109), ('Charleen', 19410918), ('Doris', 19250620), ('Patricia', 19370601), ('Pauline', 19190806), ('Helen', 19290507), ('Mary', ''), ('Althea', 19270825), ('Carrie', 19571026), ('Cathy', 19510822), ('Karen', 19570408), ('', ''), ('Barbara', ''), ('Susan', 19611219), ('Jan', 19630609), ('Diane', 19650626), ('Carol', 19620605), ('Leanne', ''), ('Shelley', 19631120), ('Maureen', ''), ('Lorrie', 19601015), ('Tiffany', 19600417), ('Sarah', 19741010), ('Meg', ''), ('Wendy', ''), ('Lynn', 19660819), ('Heidi', 19640507), ('Jacqueline', 19620329), ('Sheri', 19690629), ('Diane', 19710121), ('Angela', 19641211), ('Nancy', ''), ('Liz', 19640423), ('Jamie', 19630530), ('', ''), ('Laura', 19681210), ('Jill', ''), ('Courtney', 19560622), ('Tiffany', 19810121), ('Kristen', 19810501), ('Wendy', 19681001), ('Sheila', ''), ('Heidi', 19601007), ('Julie', 19610523), ('Deborah', 19701129), ('Jennifer', ''), ('Cindy', 19591207), ('Lynn', ''), ('I', ''), ('Lisa', 19600808), ('Jill', 19540907), ('Aschara', ''), ('Heidi', 19720713), ('Julie', 19710609), ('', ''), ('G', ''), ('Stephanie', 19661010), ('Lucy', 19540402), ('Cathy', ''), ('', ''), ('Emmy', ''), ('', ''), ('Claudette', ''), ('Lisa', ''), ('Lynn', 19631114), ('Lindsay', ''), ('Lisa', 19630218), ('Virginia', ''), ('Lloyd', 19451208), ('Suzanne', 19750612), ('Caren', 19611110), ('Allegra', 19720113), ('Molly', 19630215), ('Lori', 19600112), ('Lindsay', 19780417), ('Adrienne', 19680903), ('Quynh', 19710627), ('Kari', 19810120), ('Lisa', 19590212), ('Christa', 19790115), ('Kelly', 19770505), ('Massoumeh', 19770803), ('Louise', 19500119), ('Jayne', 19741006), ('Christine', ''), ('Kim', 19780329), ('Lani', 19600808), ('Julie', 19690425), ('Ruth Ann', 19700506), ('Lauren', 19830423), ('Tasha', 19760223), ('Kealy', 19801030), ('Courtney', 19721230), ('Julie Ann', 19750618), ('Nicole', 19741001), ('Ashlee', 19801005), ('Kelly', 19751106), ('Alexandra', 19790210), ('Mary', 19730912), ('Lisa', 19660204), ('Monty', 19650506), ('Julie Anne', 19800911), ('Lorrie', 19651203), ('Kendra', 19760621), ('Chris', 19610706), ('Christine', 19850303), ('Rankin', 19840126), ('Julia', 19850721), ('Sabaea', 19811125), ('Nicole', 19750602), ('Joyce', 19800628), ('Sarah', 19820410), ('Jean Marie', 19651109), ('Stacey', 19720110), ('Varita', 19820702), ('Shera', 19780910), ('Trisha', 19710617), ('Suzanne', 19680921), ('Lisa', 19801119), ('Martha', 19551005), ('Kandiss', 19770221), ('Brooke', 19780413), ('Cristina', 19750825), ('Jasmine', 19810102), ('Kathleen', 19830125), ('Melissa', 19770524), ('Michelle', 19731114), ('April', 19831011), ('Olivia', 19810310), ('Melissa', 19650221), ('Cami', 19720314), ('Marissa', 19780318), ('Kristin', 19720204), ('Christi', 19610509), ('Cindy', ''), ('Ashley', 19830506), ('Leigh', 19831014), ('Natalia', 19831110), ('Nikhila', 19850208), ('Rachel', 19820916), ('Alison', 19850118), ('Cameron', 19830328), ('Gretchen', 19820304), ('Cackie', 19661107), ('Stephanie', 19650104), ('Miriam', 19850925), ('Nicole', 19880219), ('Lilivette', 19800225), ('Jonni', 19791203), ('Amanda', 19850102), ('Weyli', 19800722), ('Helene', 19841215), ('Amanda', 19841101), ('Nicole', 19870615), ('Stefani', 19841215), ('Laura', 19860217), ('Tifanie', 19880920), ('Mary', 19651124), ('Katherine', 19730414), ('Monica', 19800204), ('Nicole', 19850105), ('Shanna', 19750428), ('Jane', 19890926), ('Estelle', 19890503), ('Maria', 19820204), ('Jessica', 19860812), ('Renata', 19650224), ('Laura', 19830408), ('Lindsey', 19840313), ('Christy', 19850925), ('Timberly', 19831209), ('Brooke', 19850423), ('Kelli Elizabeth', 19940409), ('Melanie', ''), ('Whitney P', 19930625), ('Sydni', 19880612), ('Jasmine Nicole', 19930826), ('Alexandra', 19920812), ('Amber', 19870605), ('Kelsey', 19920610), ('Alex', 19920225), ('Ashley M', 19940304), ('Lauren', 19940828), ('Stacia', 19930914), ('Alexandria', 19900111), ('Rozel Asuncion', 19950616), ('Bolan', 19890908), ('Annie', 19920829), ('Eva', 19941007), ('Whitney', 19900909), ('Hanna', 19911107), ('Mandy', 19910501), ('Gia', 19900614), ('Brooke', 19951105), ('Lisa', 19680519), ('Alexandra M', 19930120), ('Sonya Sheeran', 19940816), ('Shinann', 19900608), ('Nicolette', 19950824), ('Rebecca', 19921125), ('Ashley', 19960430), ('Savannah', 19950115), ('Margaret', 19570423), ('Carlee', 19950724), ('Sarah', 19850718), ('Caroline', 19840926), ('Alexia', 19940421), ('Micaela', 19890311), ('Tina', 19810116), ('Manon Cristina', 19941224), ('Hailey M', 19930127), ('Tiffany', 19911216), ('Devan', 19940528), ('Courtenay', 19770227), ('Christine', 19931110), ('Emily', 19900517), ('Leyla', 19930423), ('Alexis', 19880722), ('Di Andrea', 19950730), ('Jandayia', 19960303), ('Margarita', 19950317), ('Olivia', 19941211), ('Caitlin', 19910905), ('Kara', 19910629), ('Paloma', 19890313), ('Susie', 19491114), ('Emily', 19861118), ('Abbie', 19951121), ('Alanna', 19950107), ('Siobhan', 19871110), ('Kayla Symone', 19960110), ('Margie', 19901106), ('Jamie', 19820521), ('Adria', 19791221), ('Lynn', 19941106), ('Nadege', 19960527), ('Lauren', 19941203), ('Tiffany', 19881204), ('Sarah', 19880907), ('Victoria', 19941214), ('Natalia', 19950325), ('Alexandra', 19931013), ('Montana', 19970219), ('Samantha Rose', 19940410), ('Angela', 19980331), ('Samantha', 19950527), ('Elizabeth', 19890419), ('Sarah', 19941121), ('Gabriela', 19950418), ('Tina', 19911222), ('Mia', 19920116), ('Stephanie', 19920831), ('Kennan', 19960317), ('Madison', 19930602), ('Whitney', 19910815), ('Sarah', 19960925), ('Brooke', 19980614), ('Jessie Lynn', 19951228), ('Brittany', 19941212), ('Kylie', 19870826), ('Erin', 19861102), ('Lindsay', 19821118), ('Jessica', 19801107), ('Yuliya', 19860609), ('Kathryn', 19831129), ('Lyndsey', 19820509), ('Tiana', 19841014), ('Keri', 19870310), ('Sarah', 19871201), ('Alyssa', 19841006), ('Rachel', 19870205), ('Angelina', 19521229), ('Amy', 19540720), ('Bernadette', 19821015), ('Tarrin', 19820423), ('Christine', 19670817), ('Christian', 19870108), ('Emily', 19820728), ('Kelly', 19700330), ('Courtney', 19900729), ('Taylor', 19900818), ('Carissa', 19900507), ('Heather', 19810210), ('Georgiana', 19880624), ('Michelle', 19910127), ('Brintney', 19871008), ('Chisako', 19870720), ('Kristen', 19890819), ('Jessica', 19910223), ('Susie', 19700212), ('Ashley', 19830410), ('Megan', 19890818), ('Larraine', 19910713), ('Courtney', 19920503), ('Tiffany', 19860519), ('Olga', 19880819), ('Shauna', 19900424), ('Canna', 19860515), ('Jennifer', 19890525), ('Keri', ''), ('Lauren', 19890922), ('Whitney', 19880108), ('Caitlyn', 19891220), ('Stephanie', 19890627), ('Jacqueline', 19910905), ('Natalia Maria', 19880414), ('Katie', 19921222), ('Stephanie', 19880527), ('Kirsten', 19810703), ('Taylor', 19881121), ('Rebecca', 19880627), ('Maggie', 19881230), ('Arianna', 19910421), ('Katrina', 19860415), ('Jennifer', 19851029), ('Amber', 19920313), ('Kali A', 19880211), ('Merritt', 19890702), ('Whitney', 19860409), ('Jovana', 19900831), ('Daisy', 19841010), ('Danice', 19801001), ('Dana', 19870713), ('Kellie', 19871004), ('Magdalena', 19880701), ('Alison', 19900425), ('Myke', 19610608), ('Isadora', 19920421), ('Kelly', 19900622), ('Kristina', 19890516), ('Lindsey', 19930106), ('Emily Theresa', 19901123), ('Lauren', 19900423), ('Jenna', 19931127), ('Elizabeth', 19831216), ('Kelly', 19891215), ('Chelsea', 19880701), ('Sabrina', 19930104), ('Jamila', 19920114), ('Tracy', 19860926), ('Whitney', 19870831), ('Margaret', 19910927), ('Alexandra', 19920422), ('Mikayla', 19880525), ('Hailee', 19880530), ('Maureen', 19900314), ('Catherine R', 19910609), ('Erin', 19900530), ('Maryam', 19930203), ('Shabnam', 19910726), ('Caitlyn', 19931013), ('Chelsea', 19850919), ('Ashley', 19820703), ('Christina', 19890331), ('Chanel', 19930618), ('Amanda', 19890125), ('Alexandra', 19891129), ('Monica', 19901123), ('Lauren', 19890811), ('Jacquelyn', 19870304), ('Jacquelynn', 19890111), ('Courtney M', 19880916), ('Courtney', 19820114), ('Kristen', 19820114), ('Cameron', 19881217), ('Caroline', 19900110), ('Susanne', 19750213), ('Sarah', 19920801), ('Niltooli', 19900411), ('Victoria', 19891231), ('Hiromi', 19900510), ('Rachel', 19900209), ('Sena', 19970605), ('Christi', 19960204), ('Tatum', 19970428), ('Madeline', 19940911), ('Julia', 19890628), ('Kelly', 19941021), ('Jasmine Janelle', 19920519), ('Maria', 19950924), ('Monet', 19960106), ('Cordelia Currey', 19930607), ('Millie', 19911004), ('Madison', 19941227), ('Zaina', 19970519), ('Katelyn', 19870608), ('Amanda', 19961028), ('Anna Kate', 19941011), ('Tamijean', 19980616), ('Victoria', 19961202), ('Christiana', 19951116), ('Angie', 19750716), ('Kerry', 19680528), ('Anna', 19960128), ('Sabrina', 19920113), ('Brienne', 19971125), ('Sarah', 19960513), ('Stephanie J', 19960305), ('Alexus', 19970206), ('Alexandra', 19990630), ('Chloe', 19900921), ('Megan', 19960122), ('Erin', 19941226), ('Sydney', 19950909), ('Katherine', ''), ('Lauren', 19990905), ('Teresa', 19941010), ('Alix', 19950718), ('Alaina', 19980809), ('Cassie', 19950201), ('Morgan', 19940208), ('Kenna', 19930918), ('Kelli', 19931202), ('Lauren', 19940618), ('Katrina', 19920314), ('Taylor', 19921208), ('Sara Catherine', 19970130), ('Tamara', 19850418), ('Mckenna Alexandra', 19970303), ('Caroline', 19990809), ('Hada', 19980710), ('Lauren', 19970108), ('Jacara', 19980704), ('Ndindi Inziani', 19971224), ('Susanne', 19980505), ('Bianca', 19960804), ('Caitlin', 19960406), ('Iesha', 19911109), ('Chelsie Marie', 19920321), ('Aurora', 19921204), ('Alexandra', 19950811), ('Karolina', 19990305), ('Skylar', 19950616), ('Jillian', 20010513), ('Gabrielle', 19960114), ('Gabriella', 19971216), ('Allison', 19980324), ('Madeline', 19970403), ('Darya', 19981019), ('Seriana', 19980227), ('Erin', 19960312), ('Katherine', 20001206), ('Vivian', 20000111), ('Stephanie M', 19931110), ('Sabrina', 19971216), ('Kate', 19971013), ('Emma', 20000212), ('Lauren', 20010728), ('Kayla', 19930220), ('Khume', 19961023), ('Christiana', 19970614), ('Candace Olivia', 19800101), ('Alycia', 20001231), ('Mikayla', 19990722), ('Tiffany', 19971009), ('Sanyukta', 20010928), ('Karly', 19850115), ('Emma', 19940624), ('Arielle', 20000910), ('Marjorie', 19980202), ('Anastasiya', 19990324), ('Natasha', ''), ('Addison', ''), ('Mbalia', 19980107), ('Safiya', ''), ('Taylor', 20010406), ('Natasha', 19920609), ('Katherine', 20010213), ('Madison', 19961215), ('Omolola', 19840818), ('Reagan', 19980505), ('Katelyn', 19960909), ('Sophie', 20021031), ('Gabrielle', 19920202), ('Taylor', 19981203), ('Andrea', 19940728), ('Annie', 19870905), ('Olivia', 19990308), ('Imani', 20011220), ('Lauren', 20020523), ('Taylor', 20000807), ('Nicole', 20000304), ('Jane', 19881118), ('Chelsea', 20000819), ('Peyton', 19990915), ('Ellie', 20000523), ('Jane', 19931227), ('Anna', 20010815), ('Rosalyn', 19930622), ('Madison', 19990419), ('Sophia', 20010718), ('Jasmine', 19990813), ('Theresa', 19701102), ('Spirit', 19941027), ('Najah', 20010909), ('Sharmada', 19990810), ('Nicole', 20000812), ('Nina', 20020117), ('Alexa', 20020906), ('Naomi', 20020516), ('Sabina', 20010406), ('Katie', 20011231), ('Nikki', 20011019), ('Mccartney', 19990708), ('Tricia', 19920706), ('Peyton', 20011008), ('Anika', 20010807), ('Dalayna', 20001216), ('Kolie', 20000317), ('Cassie', 19960225), ('Anna', 20020102), ('Monica', 19950419), ('Taysia', 20000708), ('Kathleen', 19940728), ('Amanda', 19990718), ('Jimena', 20000707), ('Cassidy', 19950510), ('Brittany', 19950405)]
Gold Output      : [('Jolene', 19680831), ('Lisa', 19730810), ('Meilen', 19780117), ('Serena', 19810926), ('Chanda', 19760218), ('Amy', 19720919), ('Tara', 19770526), ('Meghann', 19790413), ('Erika', 19721014), ('Lilia', 19780407), ('Jane', 19740621), ('Jennifer', 19760329), ('Alexandra', 19801215), ('Linda', 19710211), ('Brie', 19800121), ('Corina', 19780126), ('Marissa', 19800623), ('Lindsay', 19760608), ('Kathleen', 19461027), ('Geri', ''), ('Rosie', 19480916), ('Joan', ''), ('Mary Ann', 19461125), ('Billie Jean', 19431122), ('Patti', 19491221), ('Sharon', 19520224), ('Mona', 19481128), ('Ann', 19510504), ('Chris', 19541221), ('Janet', 19530806), ('Jill', 19540519), ('Julie', 19451208), ('Ann', 19550822), ('Joy', 19540519), ('Pam', 19510417), ('Peggy', 19490202), ('Martina', 19561018), ('Laura', 19490504), ('Sally', 19550325), ('Cecilia', 19470524), ('Rene', 19570512), ('Beth', 19570613), ('Patricia', 19511125), ('Kim', 19561011), ('Betsy', 19561023), ('Barbara', 19570402), ('Dianne', 19580811), ('Felicia', 19570720), ('Lindsay', 19550124), ('Lele', 19560910), ('Diane', 19550615), ('Rosalyn', 19601102), ('Marcie', 19530910), ('Pam', 19620704), ('Barbara', 19570501), ('Candy', 19550324), ('Bonnie', 19630911), ('Barbara', 19611022), ('Anne', 19590701), ('Paula', 19570110), ('Nancy', 19550522), ('Andrea', 19650604), ('Anne', 19610928), ('Leslie', 19570312), ('Kathy', 19591203), ('Mary Lou', 19610806), ('Sherry', 19590606), ('Lea', 19590120), ('Kim', 19571222), ('Tracy', 19621212), ('Kate', 19521025), ('Wendy', 19600929), ('Andrea', 19640118), ('Zina', 19631116), ('Susan', 19640628), ('Camille', 19660602), ('Alycia', 19610218), ('Jane', 19531206), ('Vicki', 19620925), ('Heather', 19610611), ('Robin', 19631210), ('Gigi', 19640222), ('Kathy', 19670324), ('Anna Maria', 19601022), ('Beth', 19640528), ('Lori', 19631218), ('Laura', 19630317), ('Kim', 19570928), ('Shelley', 19630619), ('Barbara', 19640703), ('Michaela', 19660227), ('Shawn', 19671221), ('Elise', 19620305), ('Sandy', 19581013), ('Linda', 19691224), ('Lisa', 19620714), ('Terry', 19551128), ('Ann', 19591031), ('Lisa', 19651016), ('Molly', 19650312), ('Hu', 19630416), ('Dee Ann', 19620611), ('Jamie', 19620121), ('Beverly', 19650909), ('Louise', 19620107), ('Cammy', 19681011), ('Susan', 19590415), ('Caryn', 19610314), ('Tina', 19521124), ('Terry', 19661218), ('Marianne', 19671017), ('Gretchen', 19640207), ('Kathrin', 19621128), ('Pamela', 19630703), ('Lindsay', 19620731), ('Jennifer', 19670702), ('Jennifer', 19620426), ('Carol', 19621009), ('Jill', 19640904), ('Elizabeth', 19680826), ('Pam', 19631220), ('Melissa', 19680411), ('Cynthia', 19640326), ('Amy', 19690902), ('Sherri', 19640202), ('Stephanie', 19650206), ('Patty', 19650331), ('Penny', 19640411), ('Wendy', 19640420), ('Katrina', 19680805), ('Leigh Anne', 19641214), ('Donna', 19710705), ('Jennifer', 19690226), ('Andrea', 19710930), ('Anna', 19660117), ('Kimberly', 19730327), ('Laxmi', 19721109), ('Kathy', 19650825), ('Halle', 19690805), ('Ronni', 19660510), ('Ann', 19701013), ('Mary Joe', 19710819), ('Jeri', 19701211), ('Carrie', 19720428), ('Shaun', 19681213), ('Audra', 19711117), ('Stacey', 19701113), ('Tami', 19681113), ('Stacey', 19680319), ('Ginger', 19680914), ('Monica', 19731202), ('Patty', 19680118), ('Nicole', 19690826), ('Jessica', 19700913), ('Kimberly', 19711020), ('Stephanie', 19691105), ('Debbie', 19700825), ('Susan', 19701205), ('Caroline', 19660825), ('Elly', 19690825), ('Meredith', 19710428), ('Sandra', 19740910), ('Anne', 19770119), ('Lindsay', 19770628), ('Venus', 19800617), ('Samantha', 19790117), ('Karin', 19771210), ('Jill', 19740704), ('Bunny', 19570905), ('Rayni', 19560524), ('Jennifer', 19810210), ('Holly', 19790210), ('Nancy', 19420823), ('Dorothy', 19250703), ('Kristy', 19500815), ('Valerie', 19490629), ('Linda', 19501021), ('Peaches', 19490416), ('Tory Ann', 19420808), ('Pamela', 19500312), ('Denise', 19500731), ('Wendy', 19470331), ('Becky', ''), ('Nancy', 19520731), ('Barbara', 19540304), ('Kristien', 19520725), ('Janet', 19530628), ('Daryl', 19540507), ('Ching Ling', 19481008), ('Robin', 19580513), ('Patricia', 19410811), ('Laurie', 19551104), ('Donna', 19541109), ('Linda', 19521114), ('Julie', 19480113), ('Jeanne', 19571005), ('Laurie', 19550614), ('Kathy', 19560618), ('Janice', 19520710), ('Kathy', 19561123), ('Jane', 19530810), ('Marita', 19560219), ('Susie', 19570916), ('Mary', 19500721), ('Mary', 19540907), ('Mary', 19570312), ('Carrie', 19550822), ('Ruta', 19551118), ('Mareen', 19600815), ('Robin', 19560413), ('Caroline', 19601104), ('Emilse', 19571219), ('Kay', 19570925), ('Zenda', 19591212), ('Betty Ann', 19500226), ('Jeanne', 19591207), ('Linda', 19610605), ('Julie', 19620205), ('Stacy', 19590405), ('Dana', 19591126), ('Roberta', 19581103), ('Joyce', 19580503), ('Andrea', 19550406), ('Trey', 19591127), ('Jenny', 19650419), ('Leigh Anne', 19640108), ('Joanne', 19541030), ('Michelle', 19670627), ('Nancy', 19580418), ('Felicia', 19611231), ('Jean', 19581025), ('Barbi', 19640914), ('Amy', 19650405), ('Jill', 19600623), ('Ginny', 19661115), ('Grace', 19680416), ('Melissa', 19690624), ('Debbie', 19670809), ('Eileen', 19661201), ('Maeve', 19641116), ('Kathleen', 19610905), ('Niurka', 19690419), ('Cecilia', 19630628), ('Kristin', 19590827), ('Kate', 19630111), ('Liezel', 19760821), ('Mashona', 19760531), ('Stephanie', 19460308), ('Marilyn', 19480308), ('Mimi', ''), ('Alice', 19421122), ('Pixie', ''), ('Betty', 19250415), ('Nadine', 19441026), ('Victoria', ''), ('Stephanie', 19500703), ('Carole', 19430624), ('Gail', 19510421), ('Patricia', 19400101), ('Eliza', 19530102), ('Patricia', 19450828), ('Sandy', 19560501), ('Tam', 19520127), ('Wendy', 19520430), ('Kathy', 19461218), ('Lisa', ''), ('Judy', 19490816), ('Roberta', 19560702), ('Mary', 19450925), ('Aleida', 19550616), ('Erin', 19550720), ('Stephanie', 19560325), ('Karen', 19421211), ('Sheila', 19580222), ('Susie', 19620329), ('Micki', 19601129), ('Heather', 19610712), ('Jane', 19620121), ('Diane', 19611105), ('Shawna', ''), ('Tammy', 19651012), ('Tracy', 19791006), ('Allison', 19801114), ('Ansley', 19820105), ('Dawn', 19760529), ('Kristen', 19840628), ('Vija', ''), ('Farel', ''), ('Connie', 19510521), ('Marjorie', 19510503), ('Peggy', ''), ('Tish', ''), ('Jade', ''), ('Carole', ''), ('Emilie', ''), ('Diane', ''), ('Mary', ''), ('Ann', ''), ('Tina', ''), ('Maricaye', ''), ('Roylee', 19490526), ('Nancy', 19330421), ('Louise', 19470321), ('Mimi', 19390818), ('Raymonde', ''), ('Carol', ''), ('Joyce', 19420223), ('Pat', 19340819), ('Jane', 19510220), ('Darlene', 19360106), ('Pam', 19501025), ('Carol', ''), ('Emilie', ''), ('Margaret', 19500413), ('Pam', ''), ('Susan', 19531113), ('Shari', ''), ('Sue', 19540603), ('Jeanne', 19350721), ('Kathy', 19521219), ('Gertrude', 19230908), ('Judy', 19430402), ('Brenda', 19540211), ('Patricia', 19580516), ('Marcy', ''), ('Sally', ''), ('Lynne', 19580328), ('Margaret', 19530105), ('Renee', 19340819), ('Carol', 19501022), ('Chris', 19561026), ('Kelly', 19620418), ('Lisa', 19590305), ('Lucy', ''), ('Jody', 19560704), ('Phyllis', 19570326), ('Linda', 19631106), ('Karen', 19640323), ('Eleni', 19671023), ('Lisa', 19680718), ('Sandra', 19690903), ('Shannan', 19700519), ('Julie', 19760424), ('Nicole', 19760203), ('Angela', 19720404), ('Keri', 19740501), ('Jacqueline', 19801126), ('Laura', 19810512), ('Jean', 19740607), ('Melissa', 19820606), ('Amber', 19840706), ('Sarah', 19811106), ('Ashley', 19850502), ('Bethanie', 19850323), ('Allison', 19860410), ('Bea', 19801128), ('Alexandra', 19850902), ('Carly', 19861126), ('Theresa', 19850310), ('Gabriela', 19800607), ('Shenay', 19840706), ('Angela', 19840927), ('Kelly', 19830318), ('Teryn', 19781212), ('Abigail', 19810712), ('Jessica', 19871110), ('Jamea', 19860907), ('Mary', 19881218), ('Tiffany', 19800314), ('Alexa', 19890910), ('Vania', 19890303), ('Ahsha', 19850321), ('Lauren', 19891001), ('Varvara', 19860521), ('Madison', 19900403), ('Audra', 19860421), ('Ashley', 19890620), ('Julie', 19790104), ('Melanie', 19910923), ('Kristie', 19920615), ('Gail', 19910605), ('Asia', 19910404), ('Coco', 19911206), ('Christina', 19920511), ('Mallory', 19900718), ('Lauren', 19910110), ('Hilary', 19881117), ('Sloane', 19930320), ('Alison', 19900703), ('Jamie', 19900108), ('Chelsey', 19900829), ('Beatrice', 19920406), ('Shelby', 19921013), ('Irina', 19900504), ('Lauren', 19931009), ('Madison', 19950217), ('Nicole', 19740801), ('Michelle', 19731228), ('Akiko', 19720214), ('Joy', 19621006), ('Caryn', 19711005), ('Luanne', 19721228), ('Julie', 19720510), ('Rachel Ann', 19721119), ('Judy', 19620511), ('Noelle', 19701218), ('Alysia', 19710131), ('Laura', 19670517), ('Amanda', 19780620), ('Julie', 19721007), ('Ann', 19670822), ('Melissa', 19720621), ('Jan', 19531223), ('Mary', 19620121), ('Sylvia', 19640127), ('Gail', 19470116), ('Diedre', 19711011), ('Caroline', 19651129), ('Kerry', 19501002), ('Kathy', 19670904), ('Stella', 19690309), ('Karen', 19680705), ('Cynthia', 19580614), ('Marlie', 19501120), ('Rona', 19690708), ('Kylie', 19610519), ('Helena', 19610201), ('Cheryl', 19640503), ('Jennifer', 19690715), ('Elizabeth', 19660406), ('Anne', 19660205), ('Alix', 19721022), ('Erica', 19690716), ('Stephanie', 19700424), ('Jill', 19671011), ('Jane', 19630123), ('Kathy', ''), ('Jean', 19700510), ('Ann', 19651028), ('Kirsten', 19690327), ('Wendy', 19600327), ('Nicole', 19610906), ('Vicki', 19570325), ('Mary Ann', 19560424), ('Christine', 19680118), ('Jennifer', 19600326), ('Julie', 19570621), ('Penny', 19550826), ('Cathy', 19580310), ('June', 19630619), ('Pam', 19750701), ('Stephanie', 19791023), ('Jane', ''), ('Gretchen', 19650626), ('Jane', 19660324), ('Holyn', 19731012), ('Kristi', 19690910), ('Linley', 19620501), ('Shelby', 19500626), ('Andrea', 19700128), ('Kathy', 19591224), ('Danielle', 19700322), ('Carol', 19610705), ('Jean', 19550606), ('Lori', 19650330), ('Edie', ''), ('Robin', ''), ('Kerri', 19681001), ('Lisa', 19700324), ('Mary', 19660508), ('Carol', 19591113), ('Katie', 19750429), ('Michele', 19660606), ('Shannon', 19670527), ('Gina', 19490515), ('Clare', ''), ('Cathleen', 19570316), ('Janice', 19510522), ('Betsy', 19540503), ('Lucia', 19601022), ('Wendy', 19680715), ('Allyson', 19631007), ('Debbie', 19620722), ('Marsha', ''), ('Linda', 19690503), ('Page', 19740622), ('Heather', 19711011), ('Gigi', 19701007), ('Marilda', 19650222), ('Christine', 19720714), ('Cynthia Ann', 19521114), ('Jenny', 19710226), ('Shelley', 19650421), ('Jackie', 19640104), ('Stephanie', ''), ('Michelle', 19610116), ('Genevieve', 19630819), ('Glynis', ''), ('Ann', 19520526), ('Allegra', ''), ('Cricket', 19610507), ('Bunny', 19460729), ('Holly Ann', 19701218), ('Amy', 19721112), ('Kathy', 19631005), ('Monique', 19841006), ('Erica', 19721128), ('Susan', 19651125), ('Rita', 19601018), ('Nina', 19610207), ('Donna', 19591005), ('Cissie', 19600108), ('Nancy', 19640804), ('Erika', 19631007), ('Cristina', 19770210), ('Terri', 19680118), ('Patty', 19730928), ('Katrina', 19681104), ('Katrina', 19800530), ('Anne', 19810420), ('Cory Ann', 19850122), ('Nicole', 19861103), ('Diana', 19790704), ('Tanner', 19840803), ('Shadisha', 19850712), ('Leslie', 19870525), ('Neha', 19860206), ('Megan', 19850719), ('Elizabeth', 19880603), ('Jewel', 19810910), ('Lindsey', 19851118), ('Raquel', 19821208), ('Brittany', 19910919), ('Kirsten', 19880814), ('Chieh Yu', 19920114), ('Alexis', 19830331), ('Amanda', 19861204), ('Catherine', 19940409), ('Tetiana', 19840904), ('Julia', 19910909), ('Alexandra', 19880214), ('Zoe Gwen', 19930921), ('Julia', 19890323), ('Jessica', 19940224), ('Grace', 19940506), ('Chi Chi', 19920705), ('Nicole', 19930303), ('Mallory', 19910128), ('Jennifer', 19860922), ('Samantha', 19950218), ('Victoria', 19951130), ('Maria', 19891126), ('Anne', 19850828), ('Megan', 19850311), ('Lena', 19881115), ('Katie', 19830503), ('Courtney B', 19920325), ('Kimberly', 19890509), ('Jacqueline', 19910830), ('Ester', 19930704), ('Eleanor', 19880626), ('Yasmin', 19880504), ('Anne Liz', 19960526), ('Alessondra', 19900906), ('Ryann', 19960723), ('Lucie', 19720406), ('Kelly S', 19730905), ('Kristina', 19790811), ('Wendy', 19750131), ('Julie', 19751016), ('Aurandrea', 19791121), ('Brandis', 19800213), ('Megan', 19781224), ('Alyssa', 19821119), ('Jennifer', 19780807), ('Jennifer', 19840217), ('Candice', 19820331), ('Michelle', 19780119), ('Kristy', 19790517), ('Andrea', 19881006), ('Lauren', 19800829), ('Iris', 19850613), ('Jennifer', 19810718), ('Ali', 19870923), ('Nicole', 19851124), ('Kaysie', 19800411), ('Krystina', 19880510), ('Riza', 19860210), ('Sarah', 19810627), ('Megan', 19830326), ('Story', 19830502), ('Christina', 19801127), ('Stacia', 19850921), ('Kaitlyn', 19920113), ('Chloe', 19900201), ('Amanda', 19870902), ('Kelcy', 19890411), ('June', 19950619), ('Krista', 19940914), ('Adria', 19791221), ('Susie', 19721210), ('Kori', 19731101), ('Elizabeth', 19770823), ('Agnes', 19800801), ('Courtenay', 19770227), ('Dee Dee', 19790211), ('Aurora', 19741107), ('Keirsten', 19730917), ('Ingrid', 19730602), ('Stephanie', 19761207), ('Sara', 19770113), ('Lori', 19810731), ('Milangela', 19811209), ('Brooke', 19790101), ('Lauren', 19820521), ('Amanda', 19780119), ('Kelley', 19850922), ('Meredith', 19720604), ('Jackie', 19840111), ('Megan', 19780427), ('Amanda', 19811126), ('Cammy', 19701225), ('Ditta', 19751226), ('Jennifer', 19731228), ('Krissy', 19791211), ('Annica', 19780902), ('Tory', 19850618), ('Whitney', 19860123), ('Sarah', 19801121), ('Jessyca', 19800826), ('Beau', 19800626), ('Katrina', 19880707), ('Stephanie', 19790129), ('Jennifer', 19881123), ('Jessica', 19871124), ('Sarah', 19880209), ('Kim Anh', 19831004), ('Ellah', 19881122), ('Lauren', 19820914), ('Link', 19861125), ('Aleke', 19820427), ('Kendra', 19831118), ('Arpi', 19830612), ('Erin', 19900328), ('Tiffany', 19820909), ('Robin', 19830621), ('Kristi', 19851222), ('Jennifer Lee', 19870227), ('Veronica Ruo Qi', 19891110), ('Danielle', 19910328), ('Shilpa', 19840412), ('Elizabeth', 19880526), ('Megan', 19870701), ('Melissa', 19880408), ('Lauren', 19890522), ('Alana', 19851031), ('Riley', 19901114), ('Kristen', 19880323), ('Mami', 19790715), ('Kit', 19810726), ('Stacey', 19910718), ('Elizabeth', 19810315), ('Nina', 19890707), ('Nadja', 19900607), ('Erica', 19901127), ('Jenna', 19851126), ('Tiya', 19860611), ('Natalie', 19850322), ('Courtney', 19820929), ('Kristy', 19900108), ('Susanna', 19831103), ('Alexa', 19901117), ('Aeriel', 19900928), ('Maureen', 19820528), ('Allie', 19910420), ('Sanaz', 19880621), ('Lauren', 19760912), ('Alexis', 19840927), ('Libby', 19940124), ('Lauren', 19930723), ('Michaela', 19880722), ('Tori', 19871124), ('Gabrielle', 19930227), ('Danielle Rose', 19931213), ('Tarakaa', 19860811), ('Danielle', 19910528), ('Ellen', 19931008), ('Brooke', 19920408), ('Mccall', 19900315), ('Macall', 19860205), ('Megan', 19880705), ('Nicole', 19930729), ('Alexandra', 19911130), ('Elizabeth', 19860524), ('Jade', 19921028), ('Brie', 19890507), ('Jan', 19950301), ('Simone', 19891230), ('Elizabeth', 19860731), ('Gabrielle Faith', 19961223), ('Sachia', 19950511), ('Taylor', 19960416), ('Lindsey', 19900104), ('Alexandra', 19950630), ('Alexandra', 19910213), ('Robin', 19930412), ('Brianna', 19940219), ('Olivia', 19960122), ('Whitney', 19860811), ('Emily J', 19910615), ('Caroline B', 19941031), ('Chalena', 19950818), ('Elizabeth Anita Alexandria', 19960806), ('Breanna Alexa Bachini', 19930521), ('Mary', 19950817), ('Betsy', 19600427), ('Eve', 19621028), ('Janet', 19670405), ('Jaime', 19611001), ('Angel', 19610830), ('Donna', 19550626), ('Valerie', 19540813), ('Lucinda', 19520717), ('J', ''), ('J', ''), ('D', ''), ('K', ''), ('B', ''), ('J', ''), ('R', ''), ('N', ''), ('E', ''), ('F', ''), ('Caroline', 19560622), ('D', ''), ('Wendy', ''), ('Nancy', 19530830), ('Susan', 19570107), ('Gretchen', 19560201), ('Anne', ''), ('Holly', 19690811), ('Margaret', 19601012), ('Clare', 19671008), ('Kathy', 19641104), ('Rita', 19660512), ('Marlene', 19810731), ('Linda', 19570701), ('Beverly', 19530124), ('Ann', 19551013), ('Robin', 19540923), ('A', ''), ('Maria', ''), ('Karen', ''), ('Karen', ''), ('Jenny', ''), ('Lisa', ''), ('Kathy', ''), ('Maria', 19600424), ('Judith', ''), ('Becky', ''), ('Connie', ''), ('Lori', ''), ('Joni', 19651125), ('Lisa', ''), ('Suzanne', ''), ('Shandra', 19680519), ('Merrilee', ''), ('Jennifer', 19660615), ('Chris', ''), ('Trisha', 19690203), ('Stephanie', 19690818), ('Sonya', 19670825), ('Susan', 19710412), ('Tanya', 19690302), ('Tonya', 19690821), ('Kara', 19730105), ('Melissa', 19740402), ('Victoria', 19761230), ('Trina', 19821230), ('Kristine', 19720623), ('Martha', 19691215), ('Candice', 19800207), ('Cindy', 19790422), ('Elizabeth', 19740824), ('Valerie', 19731228), ('Tracey', 19710129), ('Diana', 19680410), ('Alice', 19770830), ('Allison', 19660804), ('Vickie', 19710827), ('Stacey', 19750105), ('Marissa', 19780613), ('Susanna', 19720303), ('Rebecca', 19721119), ('Ashley', 19720408), ('Varalee', 19760502), ('Stephanie', 19770408), ('Elizabeth', 19631112), ('Bridget', 19740207), ('Leslie', 19720209), ('Traci', 19780805), ('Alison', 19741125), ('Amy', 19681007), ('Vanessa', 19760513), ('Laura', 19720426), ('Anna', 19761021), ('Betsy', 19751127), ('Kristen', 19781002), ('Mugette', 19810424), ('Tu', 19780208), ('Irene', 19790612), ('Jennifer', 19720416), ('Diana', 19751029), ('Jody', 19711122), ('Samantha', 19890509), ('Tristen Z', 19940501), ('Rachel', 19920719), ('Ashley', 19871106), ('Alexandra', 19920223), ('Natalie', 19910801), ('Lindsay', 19880226), ('Amelia', 19920802), ('Caroline', 19930313), ('Camila', 19950929), ('Josie', 19951105), ('Skylar Alexandra', 19940424), ('Brooke', 19960212), ('Alexandra', 19910413), ('Daniella', 19971105), ('Hayley', 19950517), ('Jody', 19780930), ('Ella', 19760917), ('Emily Ann', 19820328), ('Jacquelyn', 19801117), ('Lesley', 19781011), ('Kristen', 19770518), ('Cara', 19720421), ('Zuzanna', 19800403), ('Katie', 19800911), ('Marilyn', 19740114), ('Lena', 19830510), ('Brandi', 19770612), ('Andrea', 19780204), ('Sara', 19801022), ('Hillary', 19820417), ('Mariel', 19800220), ('Whitney', 19800508), ('Darian', 19790615), ('Alexandra', 19820310), ('Prim', 19810115), ('Janet', 19800628), ('Rachel', 19690211), ('Lindsay', 19821207), ('Kirsty', 19780517), ('Raluca Daniela', 19830717), ('Mindy', 19720322), ('Erin', 19830419), ('Mary Carlisle', 19780716), ('Erin', 19800116), ('Keiko', 19800429), ('Maiko', 19820623), ('Paige', 19740714), ('Janet', 19790529), ('Briana', 19781221), ('Stacey', 19721219), ('Kristin', 19720204), ('Julia', 19810518), ('Rochelle', 19800430), ('Selin', 19780706), ('Jennifer', 19730117), ('Luana', 19821205), ('Whitney', 19850811), ('Paloma', 19720823), ('Tumeka', 19761226), ('Maria', 19830319), ('Hyacinth', 19610809), ('Eva', 19840706), ('Kara', 19790920), ('Katie', 19841110), ('Melissa', 19840613), ('Emmy', 19870722), ('Alexandria', 19860310), ('Shari', 19641103), ('Michelle', 19791212), ('Alexandra', 19841228), ('Nicole', 19860203), ('Monica', 19851212), ('Caitlin', 19850517), ('Lia', 19800922), ('Michelle', 19870304), ('Sybil', 19770106), ('Jodi', 19810822), ('Liberty', 19870409), ('Mimi', 19841030), ('Melissa', 19861211), ('Jessi', 19870221), ('Courtney', 19880501), ('Chrissie', 19870902), ('Yvette', 19880612), ('Audra', 19830331), ('Leila', 19860206), ('Tamara', 19790924), ('Rebekah', 19791012), ('Sabita', 19840927), ('Shannon', 19870109), ('Courtney', 19851011), ('Polina', 19860408), ('Anamika', 19890413), ('Jie', 19871101), ('Georgette', 19840709), ('Christy', 19871212), ('Suzanne', 19880117), ('Courtney', 19900327), ('Cammie', 19871122), ('Nelly', 19901113), ('Veronica', 19870514), ('Keilly', 19900505), ('Kate', 19831111), ('Reka', 19890708), ('Bianca', 19890514), ('Thien Trang', 19910918), ('Pamela', 19910101), ('Morgan', 19920220), ('Julianna', 19850107), ('Subbadharmi', 19890708), ('Stephanie', 19930216), ('Kelsey', 19910408), ('Alexandra', 19870719), ('Amanda', 19880314), ('Chelsea', 19891211), ('Anna', 19840821), ('Jill M', 19910313), ('Kady', 19860317), ('Phoebe', 19880520), ('Emily', 19921201), ('Christian', 19840913), ('Keri', 19891225), ('Sabrina', 19860112), ('Nataly', 19900913), ('Maria', 19920619), ('Noel', 19930203), ('April', 19920508), ('Ellie', 19930808), ('Stephanie', 19901027), ('Nicole', 19911031), ('Anna', 19940308), ('Veronika', 19900920), ('Annie', 19930330), ('Kyle', 19940405), ('Chanelle', 19940119), ('Yawna', 19860801), ('Hilary', 19910513), ('Ivana', 19861108), ('Gira', 19860829), ('Claire', 19891129), ('Erin', 19880609), ('Caitlin', 19880219), ('Alexandra', 19850703), ('Jennifer', 19950412), ('Kimberly', 19961015), ('Natalie', 19891102), ('Elizaveta Anna', 19930831), ('Veronica M', 19911207), ('Karina', 19950706), ('Sylvia', 19860904), ('Sherry', 19950208), ('Katrine Isabel', 19960315), ('Denise', 19950417), ('Courtney', 19940325), ('Christina', 19960529), ('Noelle', 19881205), ('Lauren', 19950517), ('Breaunna', 19941222), ('Nicole', 19941230), ('Meredith', 19970521), ('Nadia', 19950114), ('Jackie', 19710922), ('Antoinette', 19850107), ('Kathleen', 19740511), ('Kylene', 19790725), ('Dana', 19730725), ('Audra', 19720605), ('Tracee', 19731009), ('Amie', 19800517), ('Jennifer', 19811128), ('Lashawnn', 19740602), ('Jacqueline', 19820209), ('Jennifer', 19770119), ('Kristy', 19741230), ('Susan', 19741201), ('Bridget', 19761018), ('Amy', 19690628), ('Sandra', 19750116), ('Khristen', 19750803), ('Stefanie', 19810322), ('Barrie', 19730724), ('Kate', 19820415), ('Amy', 19731107), ('Anne', 19780520), ('Lauren', 19740830), ('Dewonder', 19590127), ('Kendra', 19790828), ('Jamie', 19801106), ('Jennifer', 19750823), ('Audrey', 19850430), ('Marjorie', 19750503), ('Katie', 19770527), ('Aimee', 19820110), ('Megan', 19810519), ('April', 19781129), ('Maren', 19791106), ('Sarah', 19780514), ('Marie Ange', 19780114), ('Dina', 19680406), ('Margaret', 19760707), ('Mary Beth', 19760329), ('Patricia', 19841020), ('Ashley', 19821229), ('Kathryn', 19790225), ('Leslie', 19810718), ('Becky', 19640801), ('Julie', 19811223), ('Danielle', 19781110), ('Terri', 19650402), ('Amy', 19681215), ('Douglas', 19840522), ('Sara', 19850621), ('Karla', 19770318), ('Kristin', 19841130), ('Kristin', 19810705), ('Bonnie', 19850503), ('Natalie', 19830401), ('Jennifer', 19830702), ('Claire', 19700527), ('Lauren', 19780316), ('Alison', 19791129), ('Laura', 19710624), ('Katia', 19810816), ('Kara', 19771202), ('Violette', 19790927), ('Lisa', 19740221), ('Evonne', 19740923), ('Mandy', 19790312), ('Jessica', 19800415), ('Emily', 19811119), ('Callie', 19770711), ('Maggie', 19750529), ('Elina', 19820521), ('Terry Ann', 19740428), ('Kimberly', 19790725), ('Bettina', 19820718), ('Lindsay', 19800519), ('Johanna', 19750518), ('Amy', 19790124), ('Meiling', 19791112), ('Jennifer', 19781020), ('Vania', 19810428), ('Megan', 19831014), ('Lindsey', 19800201), ('Megan', 19820411), ('Angela', 19840329), ('Megan', 19840920), ('Nicolette', 19831108), ('Anita', 19860219), ('Alessandra', 19870112), ('Aradhana', 19820709), ('Tiffany', 19831228), ('Macey', 19830224), ('Kelcy', 19861225), ('Caylan', 19820701), ('Stephanie', 19820923), ('Jan', 19580317), ('Kate', 19830530), ('Karen', 19671205), ('Sarah Jane', 19820802), ('Catrina', 19840913), ('Bethany', 19821129), ('Lindsay', 19820811), ('Kathleen', 19820917), ('Amy', 19810415), ('Emilia', 19820204), ('Colleen', 19790212), ('Ashlee', 19850522), ('Saras', 19830726), ('Brittany', 19850420), ('Laila', 19810805), ('Natalie', 19851103), ('Celena', 19790130), ('Marine', 19780929), ('Cara', 19730424), ('Loni', 19810928), ('Christyn', 19850210), ('Cassy', 19850802), ('Manisha', 19770513), ('Jennifer', 19811121), ('Michelle', 19801002), ('Brook', 19851231), ('Samantha', 19840807), ('Stephanie', 19870411), ('Courtney', 19820502), ('Melissa', 19840112), ('Kristin', 19790227), ('Adriana', 19780902), ('Christine', 19831216), ('Julie', 19840521), ('Cristina', 19860826), ('Nadia', 19850209), ('Amanda', 19821020), ('Camelia', 19860406), ('Emily', 19850201), ('Danielle', 19840717), ('Rochelle', 19800627), ('Brianna', 19851215), ('Zena', 19880717), ('Adina', 19870619), ('Lauren', 19880204), ('Lauren', 19870928), ('Meg', 19870811), ('Ristine', 19850116), ('Jennifer', 19841115), ('Lindsey', 19860101), ('Lindsay', 19880524), ('Gloriann', 19840228), ('Patricia', 19740119), ('Kelly', 19820223), ('Amanda', 19870813), ('Elizabeth', 19860128), ('Whitney', 19851225), ('Laura', 19850506), ('Masha', 19840211), ('Karina', 19880811), ('Erin', 19850113), ('Randi', 19870211), ('Kewa', 19860701), ('Hala', 19850809), ('Dasha', 19870606), ('Suzanna', 19861013), ('Colleen', 19880209), ('Blair', 19830904), ('Simone', 19881010), ('Jessica', 19870304), ('Austin', 19860601), ('Preethi', 19850629), ('Christala', 19890709), ('Krista', 19900423), ('Marie', 19830721), ('Ashley', 19861113), ('Latrell', 19891212), ('Sheryl', 19850920), ('Amanda', 19850319), ('Blakeley', 19841114), ('Ashley', 19870917), ('Whitney', 19890109), ('Marlene', 19880329), ('Melissa', 19860801), ('Alex', 19870117), ('Jessica', 19811223), ('Megan', 19890204), ('Jacqueline', 19830608), ('Melody', 19830708), ('Sarah', 19910314), ('Marie', 19910614), ('Daron', 19851128), ('Amy', 19790324), ('Dina', 19871014), ('Mia', 19910312), ('Valerie', 19851231), ('Amanda', 19880523), ('Connor', 19870922), ('Elizabeth', 19920114), ('Brittany', 19870208), ('Kristen A', 19880325), ('Julie', 19880331), ('Sarah', 19880129), ('Emily', 19890724), ('Christine', 19871225), ('Amanda', 19850511), ('Nicole', 19880620), ('Laurianne', 19881018), ('Pamela', 19901124), ('Miya', 19871114), ('Rachel', 19830708), ('Joanna', 19891009), ('Lynn', 19791216), ('Claire', 19871108), ('Paola', 19920827), ('Lauren', 19890512), ('Erin Carol', 19930506), ('Cameron', 19881224), ('Julie', 19870627), ('Stefanie', 19890130), ('Hannah', 19910812), ('Katherine', 19860305), ('Olivia', 19880423), ('Christina', 19880426), ('Christina', 19881212), ('Cierra', 19910927), ('Milena', 19850506), ('Christin J', 19870731), ('Stephanie', 19900327), ('Kaysara', 19910623), ('Nina', 19900115), ('Deirdre', 19901205), ('Kristin', 19841024), ('Jacqueline', 19900913), ('Stephany', 19900609), ('Erica', 19900702), ('Julia', 19910916), ('Grace', 19891211), ('C C', 19911009), ('Sarah', 19910422), ('Marianne', 19850906), ('Monica', 19920622), ('Kate', 19920109), ('Amanda Marie', 19860106), ('Alexa', 19900824), ('Denise', 19890731), ('Molly', 19890525), ('Nelo', 19920705), ('Farwa', 19891101), ('Millie', 19641005), ('Brooke Lindsey', 19940622), ('Lilly F', 19911101), ('Brynn', 19910801), ('Karina', 19831112), ('Tracy', 19740827), ('Desiree', 19931110), ('Rachael', 19910427), ('Alrissa', 19920724), ('Amanda', 19870317), ('Olivia', 19910711), ('Caryssa L', 19920413), ('Monica', 19930108), ('Joelle', 19910606), ('Malika', 19910709), ('Theresa', 19930607), ('Mary Anne', 19920215), ('Morocco', 19921107), ('Mara', 19920222), ('Alejandra Maria', 19950228), ('Catherine', 19880430), ('Kate', 19901106), ('Abigail', 19900209), ('Sabrina', 19930224), ('Heatherm', 19890925), ('Stephanie', 19940511), ('Leighann', 19931204), ('Lauren', 19880816), ('Kayla', 19920921), ('Kir', 19891031), ('Skylar', 19930914), ('Julia', 19931207), ('Meghan', 19930621), ('Nida', 19911029), ('Lauren', 19880905), ('Kelly K', 19910531), ('Alyssa Grace', 19950215), ('Mary', 19911122), ('Madeleine', 19920319), ('Rachel', 19840302), ('Alex', 19911229), ('Kyra', 19960510), ('Suzy', 19940830), ('Remeice', 19891112), ('Kate', 19940201), ('Courtney', 19891015), ('Molly', 19930810), ('Stephanie', 19940131), ('Alexandra M', 19870719), ('Aleksandra', 19960409), ('Erin', 19880709), ('Jessica', 19930428), ('Spencer', 19950125), ('Anik', 19910405), ('Simone', 19920717), ('Emma', 19930623), ('Melissa', 19921004), ('Tina', 19950427), ('Julia', 19940613), ('Rachael', 19931209), ('Shelby', 19930114), ('Epiphany B', 19921217), ('Kaitlin', 19921215), ('Mariana', 19950927), ('Hannah', 19951103), ('Casey', 19910613), ('Deborah', 19940514), ('Jessica', 19931117), ('Kelsey', 19940821), ('Samantha', 19930126), ('Blair', 19940814), ('Martha V', 19900628), ('Amanda', 19930322), ('Sarah', 19920729), ('Emily', 19931112), ('Jamie', 19950308), ('Kelly', 19770505), ('Quinn', 19941110), ('Sophia', 19930330), ('Sierra A', 19900816), ('Mckenzie', 19940107), ('Stacey', 19900117), ('Courtney', 19910226), ('Rosalia', 19900208), ('Sydney', 19950207), ('Mia', 19950406), ('Erin Kane', 19960512), ('Laura', 19841119), ('Eva', 19921222), ('Elizabeth', 19940706), ('Sarah', 19930713), ('Elyse', 19870910), ('Sabrina', 19920912), ('Julia', 19890114), ('Gabriella', 19951208), ('Tanya', 19930914), ('Nyla', 19960730), ('Louisa', 19960516), ('Zina', 19980402), ('Tornado Alicia', 19980512), ('Madison', 19970919), ('Rima', 19951116), ('Kourtney J', 19940907), ('Natasha', 19940823), ('Erin', 19901230), ('Rachel May', 19941113), ('Jillian', 19941210), ('Caroline', 19960315), ('Dominique', 19870203), ('Trelsie', 19890707), ('Angela', 19950604), ('Nicole', 19980429), ('Kim', 19951027), ('Emina', 19930330), ('Lynda', 19921123), ('Joanna Mary', 19930201), ('Caroline', 19960103), ('Julia', 19940403), ('Callie', 19910904), ('Maxine', 19910710), ('Katie', 19921211), ('Emma Christine', 19980201), ('Johnnise', 19960510), ('Katerina', 19970717), ('Jessica', 19970105), ('Marjorie', 19880420), ('Maci', 19931007), ('Kaitlyn', 19971204), ('Jacqueline', 19941203), ('Charity', 19870711), ('Parris', 19980708), ('Jamie', 19930819), ('Miriam Ruth', 19940724), ('Elizabeth', 19910118), ('Amanda', 19860130), ('Lindsay', 19780708), ('Erica', 19860327), ('Dina', 19711211), ('Robyn', 19850111), ('Anita', 19810402), ('Casey', 19840501), ('Emily', 19850224), ('Jamie', 19880415), ('Brittany', 19880627), ('Elizabeth', 19550921), ('Carolyn', 19900415), ('Cassandra', 19891211), ('Prissy', 19910807), ('Kristin', 19830420), ('Diamond', 19901226), ('Celia', 19860527), ('Tiffany', 19891126), ('Jennifer', 19890531), ('Komal', 19930108), ('Roxanne', 19890826), ('Mandy', 19810914), ('Amanda', 19800324), ('Alissa', 19671209), ('Kay', 19570927), ('Jane', 19661222), ('Tracie', 19610116), ('Elizabeth', 19630811), ('Cinda', 19710410), ('Tracy', 19611021), ('Dena', 19650928), ('Hemel', 19660108), ('Karen', 19630803), ('Reka', 19670612), ('Vincenza', 19660820), ('Lisa', 19640803), ('Lynn', 19661018), ('Jill', 19731226), ('Julie', 19710609), ('Kilmeny', 19660218), ('Kay', 19690131), ('Debbie', 19651129), ('Anne Marie', 19660720), ('Leslie', 19660908), ('Lisa', 19630604), ('Lisa', 19611106), ('Tory', 19660712), ('Kylie', 19700509), ('Anya', 19690220), ('Jennifer', 19670106), ('Diana', 19721007), ('Betsy', 19671127), ('Katrina', 19671129), ('Karen', 19701102), ('Susan', 19710206), ('Sherri', 19730118), ('Tonya', 19691110), ('Julie', 19680817), ('Susan', 19710206), ('Jamie', 19691029), ('Alita', 19630112), ('Tara', 19681223), ('Erika', 19720516), ('Kellie', 19670601), ('Happy', 19680605), ('Angie', 19710323), ('Bonnie', 19770412), ('Farley', 19741212), ('Tunecia', 19701023), ('Roseann', 19710227), ('Allison', 19710927), ('Hillery', 19610619), ('La Shawnn', 19740206), ('Sylvia', 19610419), ('Kathy', 19741105), ('Zuzanna', 19790726), ('Cassi', 19850902), ('Lejla', 19870206), ('Danielle', 19820120), ('Geneva', 19871225), ('Katie', 19891023), ('Katie', 19881216), ('Brittany', 19940406), ('Allie', 19950630), ('Sofia', 19981114), ('Mia', 19970723), ('Ty Ana', 19970313), ('Karina Kristina', 19981021), ('Jessica', 19890916), ('Trisha', 19981027), ('Ashley', 19881017), ('Tina', 19920831), ('Tatijana', 19971116), ('Taylor L', 19950117), ('Alexa', 19980707), ('Emerald', 19970905), ('Marie', 19970611), ('Alexandra', 19950224), ('Aleah', 19910923), ('Sarah', 19941219), ('Usue Maitane', 19981028), ('Ellie', 19970710), ('Maia A', 19960921), ('Raquel', 19980128), ('Peggy', 19951110), ('Rebecca', 19971004), ('Camila', 19961125), ('Karyn', 19940912), ('Ayla', 19960715), ('Rasheeda', 19950630), ('Amy', 19941028), ('Ariana', 19960126), ('Luisa', 19951005), ('Mary', 19910802), ('Kristi', 19900427), ('Ronit', 19931203), ('Julia Christine', 19921027), ('Kristina N', 19910125), ('Macie', 19941023), ('Jessica', 19950102), ('Rhiann', 19940622), ('Frances', 19940222), ('Kelly', 19960221), ('Hanna', 19980225), ('Natalie', 19960508), ('Dasha', 19961011), ('Elizabeth', 19910218), ('Brianna', 19951012), ('Kristin', 19951122), ('Kristina', 19951204), ('Maddie', 19971117), ('Raveena', 19980723), ('Daniella', 19971027), ('Laura', 19970305), ('Idia', 19930922), ('Chloe Michele', 19970905), ('Morgan', 19941219), ('Nikki', 19960418), ('Sianna', 19900804), ('Nicole', 19990508), ('Mercedes', 19970525), ('Lourdes', 19990531), ('Adi', 19951213), ('Anna', 19971103), ('Alexandra', 19980719), ('Katarina', 19960704), ('Michaela', 19990726), ('Ena', 19980212), ('Catherine Cartan', 19990408), ('Hadley', 19960311), ('Madison', 19960402), ('Jaeda', 19990728), ('Jeannez', 19960707), ('Erica', 19980316), ('Jessie', 19980419), ('Andie K', 19970107), ('Alexandria', 19960511), ('Gabriella', 19960709), ('Kelly', 19990509), ('Terri', 19960723), ('Angel', 19850125), ('Maria', 19970506), ('Alexis', 19980809), ('Rianna', 19960903), ('Megen', 19960709), ('Caroline', 19980905), ('Sophie', 19970528), ('Nicole', 19960504), ('Jacqueline', 19970531), ('Jessica', 19970709), ('Adriana', 19890308), ('Kylie', 19970606), ('Yuki Kristina', 19950819), ('Lexi', 19950525), ('Caroline', 19970726), ('Ingrid', 19980616), ('Alexandra', 19970301), ('Nada', 20000308), ('Alexis', 19950606), ('Felicity', 19970313), ('Tory', 19930105), ('Aimee', 19940907), ('Alli', 19961203), ('Claudia', 19961206), ('Brooke', 19951010), ('Marina', 19981123), ('Zoe Adeline', 19941217), ('Jessica', 19970605), ('Ashley', 19920829), ('Valerie', 19971122), ('Ashley', 19990208), ('Brittany', 19920303), ('Olivia', 19940623), ('Taylor', 19950731), ('Alexis', 19950724), ('Sara', 19971217), ('Lindsay', 19930107), ('Liza', 19950317), ('Jayci', 20000517), ('Marina', 19920314), ('Sydney', 19990430), ('Alyza', 19951122), ('Sophia', 19920113), ('Riley', 19990615), ('Delaney', 19981028), ('Jane', 19961112), ('Valerie Ann', 19980801), ('Carolyn', 19970524), ('Maegan', 19950416), ('Tamara', 19971129), ('Mary', 19981025), ('Victoria', 19990401), ('Kennedy', 19970521), ('Amy', 19970120), ('Makenna', 19980226), ('Stephanie', 19980415), ('Nicole Taylor', 19990426), ('Claire', 20000525), ('Jada', 19990129), ('Sara', 19970723), ('Hannah', 19960923), ('Sophia', 19971005), ('Akiko', 19930913), ('Karina', 19970808), ('Haley', 19910403), ('Paige', 19970222), ('Kayla', 19990928), ('Carson', 20000909), ('Amanda', 19940813), ('Maria', 19990721), ('Kylie', 19990321), ('Luciana', 19981001), ('Zoe', 20010308), ('Sachi', 19981129), ('Audrey', 19951029), ('Anna', 19970319), ('Abigail', 20010122), ('Cameron', 19990920), ('Katelyn', 19921211), ('Katharine', 19961019), ('Elyse', 19981014), ('Mimi', 19930430), ('Bess', 19971029), ('Ines Karmen', 19970615), ('Taylor', 19990615), ('Kristen', 19970407), ('Sabrina', 19971003), ('Desirae', 19940111), ('Sarah', 19960418), ('Rachel', 19961108), ('Victoria', 19990807), ('Nini', 19950909), ('Francesca', 19970722), ('Makenzie', 19990610), ('Chiara', 19980826), ('Melissa', 19930602), ('Morgan', 19990416), ('Jerricka', 19950116), ('Eva', 19961102), ('Miranda', 19990307), ('Teresia', 19990529), ('Julia', 19971217), ('Malkia', 20000808), ('Lorraine M', 19930615), ('Carol', 19960218), ('Jocelyn', 19900526), ('Roosh', 19920321), ('Alexa', 19980703), ('Alyvia', 20000503), ('Katie', 19990929), ('Meible', 19990519), ('Elizabeth', 20010712), ('Emma', 20010518), ('Arianna', 19950206), ('Kiah', 19950117), ('Alyssa', 20000210), ('Stephanie', 19880402), ('Sofia', 19990722), ('Sarah', 19930814), ('Melan', 19970406), ('Alexandra', 19990105), ('Dilara', 19990911), ('Hurricane Tyra', 20010302), ('Taylor', 19980222), ('Nami', 19980827), ('Marcella', 20001012), ('Sophia', 20010630), ('Delisha', ''), ('Haley', ''), ('Jenna', ''), ('Nikita', 19931021), ('Hoda', ''), ('Meredith', 19990310), ('Morgan', 19950317), ('Kirsten', 19940508), ('Maya', 19940527), ('Kat', 19930215), ('Alexandra', 19930215), ('Meghan', 19971028), ('Salma', 20000828), ('Madeline', 19990307), ('Lindsay', 19981217), ('Alexa', 20010908), ('Mary Catherine', 19971104), ('Cheyenne', 19960326), ('Neri', 19990902), ('Jesse', 20011004), ('Ann', 20000626), ('Natalia', 19930929), ('Whitney', 20020417), ('Christina', 19970725), ('Sofia', 19980703), ('Nicole', 20000805), ('Kenadi', 19970313), ('Paiton', 19980808), ('Shannon', 19950915), ('Elysia', 20000324), ('Ashley', 19991026), ('Alexis', 19970314), ('Caty', 20011120), ('Isabella', 20010706), ('Elizabeth', 20010519), ('Anna', 20020306), ('Dakota', 20020508), ('Janice', 19990105), ('Amanda', 20010831), ('Jada', 19980319), ('Hind', 19990228), ('Mikaela', 19890801), ('Micheline', 19970428), ('Kendal', 19940106), ('Anna', 19991008), ('Mia', 19981021), ('Chloe', 20010830), ('Abigail', 20010310), ('Ryan', 19990510), ('Maia', ''), ('Jana', 19941110), ('Shale', 20011015), ('Helen Abigail', 19980520), ('Kariann', 19990116), ('Kennedy', 19980903), ('Caroline', 19980929), ('Allison', 19981031), ('Melissa', 19970624), ('Ellyse', 19961109), ('Charleen', 19410918), ('Doris', 19250620), ('Patricia', 19370601), ('Pauline', 19190806), ('Helen', 19290507), ('Mary', ''), ('Althea', 19270825), ('Carrie', 19571026), ('Cathy', 19510822), ('Karen', 19570408), ('', ''), ('Barbara', ''), ('Susan', 19611219), ('Jan', 19630609), ('Diane', 19650626), ('Carol', 19620605), ('Leanne', ''), ('Shelley', 19631120), ('Maureen', ''), ('Lorrie', 19601015), ('Tiffany', 19600417), ('Sarah', 19741010), ('Meg', ''), ('Wendy', ''), ('Lynn', 19660819), ('Heidi', 19640507), ('Jacqueline', 19620329), ('Sheri', 19690629), ('Diane', 19710121), ('Angela', 19641211), ('Nancy', ''), ('Liz', 19640423), ('Jamie', 19630530), ('', ''), ('Laura', 19681210), ('Jill', ''), ('Courtney', 19560622), ('Tiffany', 19810121), ('Kristen', 19810501), ('Wendy', 19681001), ('Sheila', ''), ('Heidi', 19601007), ('Julie', 19610523), ('Deborah', 19701129), ('Jennifer', ''), ('Cindy', 19591207), ('Lynn', ''), ('I', ''), ('Lisa', 19600808), ('Jill', 19540907), ('Aschara', ''), ('Heidi', 19720713), ('Julie', 19710609), ('', ''), ('G', ''), ('Stephanie', 19661010), ('Lucy', 19540402), ('Cathy', ''), ('', ''), ('Emmy', ''), ('', ''), ('Claudette', ''), ('Lisa', ''), ('Lynn', 19631114), ('Lindsay', ''), ('Lisa', 19630218), ('Virginia', ''), ('Lloyd', 19451208), ('Suzanne', 19750612), ('Caren', 19611110), ('Allegra', 19720113), ('Molly', 19630215), ('Lori', 19600112), ('Lindsay', 19780417), ('Adrienne', 19680903), ('Quynh', 19710627), ('Kari', 19810120), ('Lisa', 19590212), ('Christa', 19790115), ('Kelly', 19770505), ('Massoumeh', 19770803), ('Louise', 19500119), ('Jayne', 19741006), ('Christine', ''), ('Kim', 19780329), ('Lani', 19600808), ('Julie', 19690425), ('Ruth Ann', 19700506), ('Lauren', 19830423), ('Tasha', 19760223), ('Kealy', 19801030), ('Courtney', 19721230), ('Julie Ann', 19750618), ('Nicole', 19741001), ('Ashlee', 19801005), ('Kelly', 19751106), ('Alexandra', 19790210), ('Mary', 19730912), ('Lisa', 19660204), ('Monty', 19650506), ('Julie Anne', 19800911), ('Lorrie', 19651203), ('Kendra', 19760621), ('Chris', 19610706), ('Christine', 19850303), ('Rankin', 19840126), ('Julia', 19850721), ('Sabaea', 19811125), ('Nicole', 19750602), ('Joyce', 19800628), ('Sarah', 19820410), ('Jean Marie', 19651109), ('Stacey', 19720110), ('Varita', 19820702), ('Shera', 19780910), ('Trisha', 19710617), ('Suzanne', 19680921), ('Lisa', 19801119), ('Martha', 19551005), ('Kandiss', 19770221), ('Brooke', 19780413), ('Cristina', 19750825), ('Jasmine', 19810102), ('Kathleen', 19830125), ('Melissa', 19770524), ('Michelle', 19731114), ('April', 19831011), ('Olivia', 19810310), ('Melissa', 19650221), ('Cami', 19720314), ('Marissa', 19780318), ('Kristin', 19720204), ('Christi', 19610509), ('Cindy', ''), ('Ashley', 19830506), ('Leigh', 19831014), ('Natalia', 19831110), ('Nikhila', 19850208), ('Rachel', 19820916), ('Alison', 19850118), ('Cameron', 19830328), ('Gretchen', 19820304), ('Cackie', 19661107), ('Stephanie', 19650104), ('Miriam', 19850925), ('Nicole', 19880219), ('Lilivette', 19800225), ('Jonni', 19791203), ('Amanda', 19850102), ('Weyli', 19800722), ('Helene', 19841215), ('Amanda', 19841101), ('Nicole', 19870615), ('Stefani', 19841215), ('Laura', 19860217), ('Tifanie', 19880920), ('Mary', 19651124), ('Katherine', 19730414), ('Monica', 19800204), ('Nicole', 19850105), ('Shanna', 19750428), ('Jane', 19890926), ('Estelle', 19890503), ('Maria', 19820204), ('Jessica', 19860812), ('Renata', 19650224), ('Laura', 19830408), ('Lindsey', 19840313), ('Christy', 19850925), ('Timberly', 19831209), ('Brooke', 19850423), ('Kelli Elizabeth', 19940409), ('Melanie', ''), ('Whitney P', 19930625), ('Sydni', 19880612), ('Jasmine Nicole', 19930826), ('Alexandra', 19920812), ('Amber', 19870605), ('Kelsey', 19920610), ('Alex', 19920225), ('Ashley M', 19940304), ('Lauren', 19940828), ('Stacia', 19930914), ('Alexandria', 19900111), ('Rozel Asuncion', 19950616), ('Bolan', 19890908), ('Annie', 19920829), ('Eva', 19941007), ('Whitney', 19900909), ('Hanna', 19911107), ('Mandy', 19910501), ('Gia', 19900614), ('Brooke', 19951105), ('Lisa', 19680519), ('Alexandra M', 19930120), ('Sonya Sheeran', 19940816), ('Shinann', 19900608), ('Nicolette', 19950824), ('Rebecca', 19921125), ('Ashley', 19960430), ('Savannah', 19950115), ('Margaret', 19570423), ('Carlee', 19950724), ('Sarah', 19850718), ('Caroline', 19840926), ('Alexia', 19940421), ('Micaela', 19890311), ('Tina', 19810116), ('Manon Cristina', 19941224), ('Hailey M', 19930127), ('Tiffany', 19911216), ('Devan', 19940528), ('Courtenay', 19770227), ('Christine', 19931110), ('Emily', 19900517), ('Leyla', 19930423), ('Alexis', 19880722), ('Di Andrea', 19950730), ('Jandayia', 19960303), ('Margarita', 19950317), ('Olivia', 19941211), ('Caitlin', 19910905), ('Kara', 19910629), ('Paloma', 19890313), ('Susie', 19491114), ('Emily', 19861118), ('Abbie', 19951121), ('Alanna', 19950107), ('Siobhan', 19871110), ('Kayla Symone', 19960110), ('Margie', 19901106), ('Jamie', 19820521), ('Adria', 19791221), ('Lynn', 19941106), ('Nadege', 19960527), ('Lauren', 19941203), ('Tiffany', 19881204), ('Sarah', 19880907), ('Victoria', 19941214), ('Natalia', 19950325), ('Alexandra', 19931013), ('Montana', 19970219), ('Samantha Rose', 19940410), ('Angela', 19980331), ('Samantha', 19950527), ('Elizabeth', 19890419), ('Sarah', 19941121), ('Gabriela', 19950418), ('Tina', 19911222), ('Mia', 19920116), ('Stephanie', 19920831), ('Kennan', 19960317), ('Madison', 19930602), ('Whitney', 19910815), ('Sarah', 19960925), ('Brooke', 19980614), ('Jessie Lynn', 19951228), ('Brittany', 19941212), ('Kylie', 19870826), ('Erin', 19861102), ('Lindsay', 19821118), ('Jessica', 19801107), ('Yuliya', 19860609), ('Kathryn', 19831129), ('Lyndsey', 19820509), ('Tiana', 19841014), ('Keri', 19870310), ('Sarah', 19871201), ('Alyssa', 19841006), ('Rachel', 19870205), ('Angelina', 19521229), ('Amy', 19540720), ('Bernadette', 19821015), ('Tarrin', 19820423), ('Christine', 19670817), ('Christian', 19870108), ('Emily', 19820728), ('Kelly', 19700330), ('Courtney', 19900729), ('Taylor', 19900818), ('Carissa', 19900507), ('Heather', 19810210), ('Georgiana', 19880624), ('Michelle', 19910127), ('Brintney', 19871008), ('Chisako', 19870720), ('Kristen', 19890819), ('Jessica', 19910223), ('Susie', 19700212), ('Ashley', 19830410), ('Megan', 19890818), ('Larraine', 19910713), ('Courtney', 19920503), ('Tiffany', 19860519), ('Olga', 19880819), ('Shauna', 19900424), ('Canna', 19860515), ('Jennifer', 19890525), ('Keri', ''), ('Lauren', 19890922), ('Whitney', 19880108), ('Caitlyn', 19891220), ('Stephanie', 19890627), ('Jacqueline', 19910905), ('Natalia Maria', 19880414), ('Katie', 19921222), ('Stephanie', 19880527), ('Kirsten', 19810703), ('Taylor', 19881121), ('Rebecca', 19880627), ('Maggie', 19881230), ('Arianna', 19910421), ('Katrina', 19860415), ('Jennifer', 19851029), ('Amber', 19920313), ('Kali A', 19880211), ('Merritt', 19890702), ('Whitney', 19860409), ('Jovana', 19900831), ('Daisy', 19841010), ('Danice', 19801001), ('Dana', 19870713), ('Kellie', 19871004), ('Magdalena', 19880701), ('Alison', 19900425), ('Myke', 19610608), ('Isadora', 19920421), ('Kelly', 19900622), ('Kristina', 19890516), ('Lindsey', 19930106), ('Emily Theresa', 19901123), ('Lauren', 19900423), ('Jenna', 19931127), ('Elizabeth', 19831216), ('Kelly', 19891215), ('Chelsea', 19880701), ('Sabrina', 19930104), ('Jamila', 19920114), ('Tracy', 19860926), ('Whitney', 19870831), ('Margaret', 19910927), ('Alexandra', 19920422), ('Mikayla', 19880525), ('Hailee', 19880530), ('Maureen', 19900314), ('Catherine R', 19910609), ('Erin', 19900530), ('Maryam', 19930203), ('Shabnam', 19910726), ('Caitlyn', 19931013), ('Chelsea', 19850919), ('Ashley', 19820703), ('Christina', 19890331), ('Chanel', 19930618), ('Amanda', 19890125), ('Alexandra', 19891129), ('Monica', 19901123), ('Lauren', 19890811), ('Jacquelyn', 19870304), ('Jacquelynn', 19890111), ('Courtney M', 19880916), ('Courtney', 19820114), ('Kristen', 19820114), ('Cameron', 19881217), ('Caroline', 19900110), ('Susanne', 19750213), ('Sarah', 19920801), ('Niltooli', 19900411), ('Victoria', 19891231), ('Hiromi', 19900510), ('Rachel', 19900209), ('Sena', 19970605), ('Christi', 19960204), ('Tatum', 19970428), ('Madeline', 19940911), ('Julia', 19890628), ('Kelly', 19941021), ('Jasmine Janelle', 19920519), ('Maria', 19950924), ('Monet', 19960106), ('Cordelia Currey', 19930607), ('Millie', 19911004), ('Madison', 19941227), ('Zaina', 19970519), ('Katelyn', 19870608), ('Amanda', 19961028), ('Anna Kate', 19941011), ('Tamijean', 19980616), ('Victoria', 19961202), ('Christiana', 19951116), ('Angie', 19750716), ('Kerry', 19680528), ('Anna', 19960128), ('Sabrina', 19920113), ('Brienne', 19971125), ('Sarah', 19960513), ('Stephanie J', 19960305), ('Alexus', 19970206), ('Alexandra', 19990630), ('Chloe', 19900921), ('Megan', 19960122), ('Erin', 19941226), ('Sydney', 19950909), ('Katherine', ''), ('Lauren', 19990905), ('Teresa', 19941010), ('Alix', 19950718), ('Alaina', 19980809), ('Cassie', 19950201), ('Morgan', 19940208), ('Kenna', 19930918), ('Kelli', 19931202), ('Lauren', 19940618), ('Katrina', 19920314), ('Taylor', 19921208), ('Sara Catherine', 19970130), ('Tamara', 19850418), ('Mckenna Alexandra', 19970303), ('Caroline', 19990809), ('Hada', 19980710), ('Lauren', 19970108), ('Jacara', 19980704), ('Ndindi Inziani', 19971224), ('Susanne', 19980505), ('Bianca', 19960804), ('Caitlin', 19960406), ('Iesha', 19911109), ('Chelsie Marie', 19920321), ('Aurora', 19921204), ('Alexandra', 19950811), ('Karolina', 19990305), ('Skylar', 19950616), ('Jillian', 20010513), ('Gabrielle', 19960114), ('Gabriella', 19971216), ('Allison', 19980324), ('Madeline', 19970403), ('Darya', 19981019), ('Seriana', 19980227), ('Erin', 19960312), ('Katherine', 20001206), ('Vivian', 20000111), ('Stephanie M', 19931110), ('Sabrina', 19971216), ('Kate', 19971013), ('Emma', 20000212), ('Lauren', 20010728), ('Kayla', 19930220), ('Khume', 19961023), ('Christiana', 19970614), ('Candace Olivia', 19800101), ('Alycia', 20001231), ('Mikayla', 19990722), ('Tiffany', 19971009), ('Sanyukta', 20010928), ('Karly', 19850115), ('Emma', 19940624), ('Arielle', 20000910), ('Marjorie', 19980202), ('Anastasiya', 19990324), ('Natasha', ''), ('Addison', ''), ('Mbalia', 19980107), ('Safiya', ''), ('Taylor', 20010406), ('Natasha', 19920609), ('Katherine', 20010213), ('Madison', 19961215), ('Omolola', 19840818), ('Reagan', 19980505), ('Katelyn', 19960909), ('Sophie', 20021031), ('Gabrielle', 19920202), ('Taylor', 19981203), ('Andrea', 19940728), ('Annie', 19870905), ('Olivia', 19990308), ('Imani', 20011220), ('Lauren', 20020523), ('Taylor', 20000807), ('Nicole', 20000304), ('Jane', 19881118), ('Chelsea', 20000819), ('Peyton', 19990915), ('Ellie', 20000523), ('Jane', 19931227), ('Anna', 20010815), ('Rosalyn', 19930622), ('Madison', 19990419), ('Sophia', 20010718), ('Jasmine', 19990813), ('Theresa', 19701102), ('Spirit', 19941027), ('Najah', 20010909), ('Sharmada', 19990810), ('Nicole', 20000812), ('Nina', 20020117), ('Alexa', 20020906), ('Naomi', 20020516), ('Sabina', 20010406), ('Katie', 20011231), ('Nikki', 20011019), ('Mccartney', 19990708), ('Tricia', 19920706), ('Peyton', 20011008), ('Anika', 20010807), ('Dalayna', 20001216), ('Kolie', 20000317), ('Cassie', 19960225), ('Anna', 20020102), ('Monica', 19950419), ('Taysia', 20000708), ('Kathleen', 19940728), ('Amanda', 19990718), ('Jimena', 20000707), ('Cassidy', 19950510), ('Brittany', 19950405)]

===== Eval Round 436 =====
Database         : wta_1
Prediction SQL   : SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches
Gold SQL         : SELECT avg(loser_age) ,  avg(winner_age) FROM matches
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(27.31121386258453, 27.062177773183823)]
Gold Output      : [(27.31121386258453, 27.062177773183823)]

===== Eval Round 437 =====
Database         : wta_1
Prediction SQL   : SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches
Gold SQL         : SELECT avg(loser_age) ,  avg(winner_age) FROM matches
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(27.31121386258453, 27.062177773183823)]
Gold Output      : [(27.31121386258453, 27.062177773183823)]

===== Eval Round 438 =====
Database         : wta_1
Prediction SQL   : SELECT AVG(winner_rank) FROM matches
Gold SQL         : SELECT avg(winner_rank) FROM matches
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(13.715827338129497,)]
Gold Output      : [(13.715827338129497,)]

===== Eval Round 439 =====
Database         : wta_1
Prediction SQL   : SELECT AVG(winner_rank) FROM matches
Gold SQL         : SELECT avg(winner_rank) FROM matches
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(13.715827338129497,)]
Gold Output      : [(13.715827338129497,)]

===== Eval Round 440 =====
Database         : wta_1
Prediction SQL   : SELECT MAX(loser_rank) FROM matches
Gold SQL         : SELECT min(loser_rank) FROM matches
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(112,)]
Gold Output      : [(1,)]

===== Eval Round 441 =====
Database         : wta_1
Prediction SQL   : SELECT MIN(loser_rank) FROM matches
Gold SQL         : SELECT min(loser_rank) FROM matches
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1,)]
Gold Output      : [(1,)]

===== Eval Round 442 =====
Database         : wta_1
Prediction SQL   : SELECT count(DISTINCT country_code) FROM players
Gold SQL         : SELECT count(DISTINCT country_code) FROM players
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(153,)]
Gold Output      : [(153,)]

===== Eval Round 443 =====
Database         : wta_1
Prediction SQL   : SELECT count(DISTINCT country_code) FROM players
Gold SQL         : SELECT count(DISTINCT country_code) FROM players
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(153,)]
Gold Output      : [(153,)]

===== Eval Round 444 =====
Database         : wta_1
Prediction SQL   : SELECT count(DISTINCT loser_name) FROM matches
Gold SQL         : SELECT count(DISTINCT loser_name) FROM matches
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(49,)]
Gold Output      : [(49,)]

===== Eval Round 445 =====
Database         : wta_1
Prediction SQL   : SELECT count(DISTINCT loser_name) FROM matches
Gold SQL         : SELECT count(DISTINCT loser_name) FROM matches
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(49,)]
Gold Output      : [(49,)]

===== Eval Round 446 =====
Database         : wta_1
Prediction SQL   : SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
Gold SQL         : SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Australian Open',), ('Cincinnati',), ('French Open',), ('Indian Wells',), ('Miami',), ('Singapore',), ('Us Open',), ('WTA Championships',), ('Wimbledon',)]
Gold Output      : [('Australian Open',), ('Cincinnati',), ('French Open',), ('Indian Wells',), ('Miami',), ('Singapore',), ('Us Open',), ('WTA Championships',), ('Wimbledon',)]

===== Eval Round 447 =====
Database         : wta_1
Prediction SQL   : SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
Gold SQL         : SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Australian Open',), ('Cincinnati',), ('French Open',), ('Indian Wells',), ('Miami',), ('Singapore',), ('Us Open',), ('WTA Championships',), ('Wimbledon',)]
Gold Output      : [('Australian Open',), ('Cincinnati',), ('French Open',), ('Indian Wells',), ('Miami',), ('Singapore',), ('Us Open',), ('WTA Championships',), ('Wimbledon',)]

===== Eval Round 448 =====
Database         : wta_1
Prediction SQL   : SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_name IN (SELECT winner_name FROM matches WHERE year = 2016)
Gold SQL         : SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Serena Williams',), ('Petra Kvitova',), ('Angelique Kerber',), ('Victoria Azarenka',), ('Sara Errani',)]
Gold Output      : [('Angelique Kerber',), ('Petra Kvitova',), ('Sara Errani',), ('Serena Williams',), ('Victoria Azarenka',)]

===== Eval Round 449 =====
Database         : wta_1
Prediction SQL   : SELECT DISTINCT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT DISTINCT winner_name FROM matches WHERE year = 2016
Gold SQL         : SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Angelique Kerber',), ('Petra Kvitova',), ('Sara Errani',), ('Serena Williams',), ('Victoria Azarenka',)]
Gold Output      : [('Angelique Kerber',), ('Petra Kvitova',), ('Sara Errani',), ('Serena Williams',), ('Victoria Azarenka',)]

===== Eval Round 450 =====
Database         : wta_1
Prediction SQL   : SELECT count(*) FROM matches WHERE year IN (2013, 2016)
Gold SQL         : SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(170,)]
Gold Output      : [(170,)]

===== Eval Round 451 =====
Database         : wta_1
Prediction SQL   : SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016
Gold SQL         : SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(170,)]
Gold Output      : [(170,)]

===== Eval Round 452 =====
Database         : wta_1
Prediction SQL   : SELECT DISTINCT p.country_code, p.first_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'WTA Championships' INTERSECT SELECT DISTINCT p.country_code, p.first_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open'
Gold SQL         : SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('GER', 'Angelique'), ('USA', 'Serena')]
Gold Output      : [('GER', 'Angelique'), ('USA', 'Serena')]

===== Eval Round 453 =====
Database         : wta_1
Prediction SQL   : SELECT DISTINCT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' OR T2.tourney_name = 'Australian Open'
Gold SQL         : SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Serena', 'USA'), ('Petra', 'CZE'), ('Angelique', 'GER'), ('Na', 'CHN'), ('Victoria', 'BLR'), ('Jelena', 'SRB'), ('Sara', 'ITA'), ('Ekaterina', 'RUS'), ('Madison', 'USA'), ('Agnieszka', 'POL'), ('Anastasia', 'RUS'), ('Venus', 'USA')]
Gold Output      : [('GER', 'Angelique'), ('USA', 'Serena')]

===== Eval Round 454 =====
Database         : wta_1
Prediction SQL   : SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1
Gold SQL         : SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Thelma', 'AUS')]
Gold Output      : [('Thelma', 'AUS')]

===== Eval Round 455 =====
Database         : wta_1
Prediction SQL   : SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1
Gold SQL         : SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Thelma', 'AUS')]
Gold Output      : [('Thelma', 'AUS')]

===== Eval Round 456 =====
Database         : wta_1
Prediction SQL   : SELECT first_name, last_name FROM players ORDER BY birth_date
Gold SQL         : SELECT first_name ,  last_name FROM players ORDER BY birth_date
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : ERROR: Could not decode to UTF-8 column 'last_name' with text 'Treyes Albarrac��N'
Gold Output      : ERROR: Could not decode to UTF-8 column 'last_name' with text 'Treyes Albarrac��N'

===== Eval Round 457 =====
Database         : wta_1
Prediction SQL   : SELECT first_name, last_name FROM players ORDER BY birth_date ASC
Gold SQL         : SELECT first_name ,  last_name FROM players ORDER BY birth_date
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : ERROR: Could not decode to UTF-8 column 'last_name' with text 'Treyes Albarrac��N'
Gold Output      : ERROR: Could not decode to UTF-8 column 'last_name' with text 'Treyes Albarrac��N'

===== Eval Round 458 =====
Database         : wta_1
Prediction SQL   : SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date
Gold SQL         : SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Ann', 'Jones'), ('Wendy', 'Gilchrist'), ('Martina', 'Navratilova'), ('Mary', 'Carillo'), ('Katerina', 'Bohmova'), ('Petra', 'Delhees Jauch'), ('Nancy', 'Loeffler Caro'), ('Lise', 'Gregory'), ('Rene', 'Collins'), ('Nicole', 'Arendt'), ('Florencia', 'Labat'), ('Sabine', 'Appelmans'), ('Andreea', 'Ehritt Vanc'), ('Monica', 'Seles'), ('Gala', 'Leon Garcia'), ('Karen', 'Cross'), ('Julie', 'Pullin'), ('Vanessa', 'Webb'), ('Elena', 'Tatarkova'), ('Anca', 'Barna'), ('Francesca', 'Lubiani'), ('Gaelle', 'Widmer'), ('Amanda', 'Keen'), ('Amanda', 'Augustus'), ('Rita', 'Kuti Kis'), ('Amelie', 'Cocheteux'), ('Amelie', 'Castera'), ('Saori', 'Obata'), ('Marine', 'Nizri Spiegel'), ('Patty', 'Schnyder'), ('Julie', 'Ditty'), ('Joana', 'Cortez'), ('Barbara', 'Schwartz'), ('Ludmilla', 'Varmuza'), ('Magui', 'Serna'), ('Amanda', 'Grahame'), ('Kim', 'Kilsdonk'), ('Emilie', 'Loit'), ('Erika', 'Pineider'), ('Anne Gaelle', 'Sidot'), ('Erica', 'Biro'), ('Stephanie', 'Kovacic'), ('Sybille', 'Bammer'), ('Lisa', 'Fritz'), ('Maja', 'Matevzic'), ('Leanne', 'Baker'), ('Aurelie', 'Vedy'), ('Carla', 'Tiene'), ('Erika', 'Venere'), ('Jelena', 'Kostanic Tosic'), ('Clarisa', 'Fernandez'), ('Ansley', 'Cargill'), ('Dimana', 'Krastevitch'), ('Maria Jose', 'Martinez Sanchez'), ('Zerene', 'Reyes'), ('Melinda', 'Czink'), ('Sandra', 'Klemenschits'), ('Maria Elizabeth', 'Lopez'), ('Salome', 'Llaguno'), ('Lindsay', 'Cox'), ('Iveta', 'Benesova'), ('Eugenia', 'Chialvo'), ('Chun Yan', 'He'), ('Maria Fernanda', 'Alves'), ('Emily', 'Quin'), ('Fernanda', 'Oliveira Da Silva'), ('Annabel', 'Blow'), ('Julia', 'Smith'), ('Ana Lucia', 'Migliarini De Leon'), ('Elizabeth', 'Bondi'), ('Galina', 'Fokina'), ('Elise', 'Tamaela'), ('Bit Na', 'Lee'), ('Sonia', 'Iacovacci'), ('Mariana Pires', 'Junqueira'), ('Natalia', 'Bogdanova'), ('Irina', 'Smirnova'), ('Meghha', 'Vakaria'), ('Angela', 'Haynes'), ('Karly', 'Olson'), ('Casey', 'Dellacqua'), ('Kathrin', 'Hegel'), ('Beatrix', 'Csordas'), ('Zsuzsanna', 'Babos'), ('Emily', 'Applegate'), ('Olga', 'Pasichnichenko'), ('Theresa', 'Logar'), ('Jin A', 'Lee'), ('Hannah', 'Kuervers'), ('Andreea', 'Novaceanu'), ('Valentina', 'Tizzano'), ('Helen', 'Fritche'), ('Sandra', 'Sasidharan'), ('Isha', 'Lakhani'), ('Krushmi', 'Chheda'), ('Ljubica', 'Avramovic'), ('Avel Romaly', 'Coronado'), ('Shadisha', 'Robinson'), ('Carla', 'Zabaleta'), ('Diana', 'Arutyunova'), ('Cecile', 'Baijot'), ('Laura', 'Rocchi'), ('Rie', 'Imai'), ('Danielle', 'Harmsen'), ('Alejandra', 'Obregon'), ('Ariela', 'Perez'), ('Vasilisa', 'Davydova'), ('Emilia', 'Yorio'), ('Lizaan', 'Du Plessis'), ('Claire', 'Feuerstein'), ('Alexandria', 'Liles'), ('Katharine', 'Baker'), ('Emma', 'Laine'), ('Geraldine', 'Roma'), ('Aya', 'El Akkad'), ('Alexandra', 'Kazanova'), ('Allison', 'Baker'), ('Lucy', 'Fletcher'), ('Monika', 'Musilova'), ('Jitka', 'Gavdunova'), ('Elena', 'Petrucciano'), ('Varvara', 'Lepchenko'), ('Claire', 'De Gubernatis'), ('Seheno', 'Razafindramaso'), ('Karolina', 'Soor'), ('Melisa', 'Cabrera Handt'), ('Shraddha', 'Lodha'), ('Sylvia', 'Krywacz'), ('Amina', 'El Sahn'), ('Hendrike Lea', 'Heitmann'), ('Dunja', 'Antunovic'), ('Micaela', 'Acosta'), ('Katerina', 'Bohmova'), ('Catherine', 'Grotz'), ('Yurika', 'Sema'), ('Sheng Nan', 'Sun'), ('Lucie', 'Safarova'), ('Jitka', 'Kleisnerova'), ('Carolina', 'Escamilla'), ('Tapiwa', 'Marobela'), ('Punam', 'Reddy'), ('Katia', 'Sabate Orera'), ('Shana', 'Claes'), ('Chrissie', 'Seredni'), ('Yui', 'Nagasawa'), ('Marcela', 'Vojtiskova'), ('Seul Ki', 'Chin'), ('Nina', 'Munch Soegaard'), ('Hannah', 'Grady'), ('Karen', 'Castiblanco'), ('Angelique', 'Kerber'), ('Lauren', 'Lui'), ('Rana', 'Tharwat Hafez'), ('Nicole', 'Grunwald'), ('Ana', 'Veselinovic'), ('Sanaa', 'Bhambri'), ('Diana Andreea', 'Gae'), ('Ana', 'Beltran Trigueros'), ('Barbora', 'Bozkova'), ('Camila', 'Belassi'), ('Violette', 'Huck'), ('Megumi', 'Fukui'), ('Rita', 'Gouveia'), ('Mihaela', 'Buzarnescu'), ('Liset', 'Brito Herrera'), ('Paulina', 'Jorquera'), ('Ekaterina', 'Makarova'), ('Dessislava', 'Mladenova'), ('Sanaz', 'Marand'), ('Cristina', 'Greco Naccarato'), ('Cagla', 'Urcu'), ('Liege', 'Vieira'), ('Chang', 'Xu'), ('Jessica', 'Sweeting'), ('Yi Fan', 'Xu'), ('Eloisa Maria', 'Compostizo De Andres'), ('Karina', 'Porushkevich'), ('Ornella', 'Gentile'), ('Valeria', 'Casillo'), ('Bianca Ioana', 'Bonifate'), ('Michelle', 'Russ'), ('Monika', 'Lalewicz'), ('Amandine', 'Cazeaux'), ('Fatima', 'El Allami'), ('Simonetta', 'Miori'), ('Gabriela', 'Roux'), ('Sherazad', 'Benamar'), ('Sherazad', 'Reix'), ('Zora', 'Vlckova'), ('Naomi', 'Cavaday'), ('Nathalia', 'Rossi'), ('Maria Eugenia', 'Roca Recarey'), ('Lauren', 'Jones'), ('Roxane', 'Vaisemberg'), ('Ivana', 'Belejova'), ('Petra', 'Vogel'), ('Majdouline', 'Akrate'), ('Laura', 'Sadria'), ('Ia', 'Jikia'), ('Alessandra', 'Caprara'), ('Guadalupe', 'Moreno'), ('Lucie', 'Sipkova'), ('Xenia', 'Samoilova'), ('Kotomi', 'Takahata'), ('Stephanie', 'Theiler'), ('Maria', 'Prishlyak'), ('Grace', 'Leake'), ('Ioana Alexandra', 'Oprea'), ('Sanne', 'Bakker'), ('Katerina', 'Vankova'), ('Kristy', 'Frilling'), ('Tatiana', 'Bua'), ('Anastasia', 'Kontratevidi'), ('Chane', 'Hines'), ('Julia', 'Gavenko'), ('Yuuki', 'Tanaka'), ('Petra', 'Kvitova'), ('Leticia', 'Costas'), ('Sandra', 'Roma'), ('Nina', 'Mujezinovic'), ('Stella', 'Papaspyrou'), ('Chinami', 'Ogi'), ('Martina', 'Balogova'), ('Xinyun', 'Han'), ('Nicole', 'Riner'), ('Lara', 'Meccico'), ('Mai', 'Iwasaki'), ('Oksana', 'Kalashnikova'), ('Dipti', 'Srivastava'), ('Claudia', 'Mercado'), ('Margarita', 'Lazareva'), ('Shaozhuo', 'Liu'), ('Ana Maria', 'Chavez Franco'), ('Arantxa', 'Rus'), ('Ekaterina', 'Kamendova'), ('Monika', 'Tumova'), ('Gabriella', 'Boboc'), ('Ganna', 'Lukianchykova'), ('Sofia', 'Medina'), ('Ekaterina', 'Abaeva'), ('Andressa', 'Garcia'), ('Giulia', 'Bruzzone'), ('Catia', 'Rodrigues'), ('Danielle', 'Mills'), ('Flavia', 'Borges'), ('Misaki', 'Doi'), ('Veronika', 'Domagala'), ('Cindy', 'Chala'), ('Ksenia', 'Pervak'), ('Bianca', 'Botto'), ('Marianna', 'Natali'), ('Carolina', 'Orsi'), ('Aleksandra', 'Vukadinovic'), ('Elixane', 'Lechemia'), ('Sonya', 'Dayal'), ('Francesca', 'Campigotto'), ('Cristina Bianca', 'Danaila'), ('Tereza', 'Budilova'), ('Gemma', 'Praditngam'), ('Ekaterine', 'Gorgodze'), ('Dejana', 'Raickovic'), ('Alena', 'Gerasimova'), ('Quirine', 'Lemoine'), ('Chieh Yu', 'Hsu'), ('Anastasiya', 'Vasylyeva'), ('Alexia', 'Quartetto'), ('Joanna', 'Bougon'), ('Kristyna', 'Pliskova'), ('Elena', 'Bogdan'), ('Fiorella', 'Jerardino'), ('Julie', 'Gonzalez Rodriguez'), ('Alejandra', 'Barragan'), ('Renata', 'Bakieva'), ('Ashley', 'Krysiak'), ('Sarah Rebecca', 'Sekulic'), ('Na Lae', 'Han'), ('Natali', 'Coronel'), ('Kristyna', 'Hancarova'), ('Doroteja', 'Eric'), ('Chanel', 'Simmonds'), ('Kobkanok', 'Upapong'), ('Annie', 'Sullivan'), ('Jenny Thuy', 'Le'), ('Xenia', 'Knoll'), ('Francisca', 'Matos'), ('Christina', 'Madenoglou'), ('Alexandra', 'Avirvarei'), ('Georgina', 'Fedosenkova'), ('Alicia', 'Doms Golobart'), ('Amy', 'Hoburn'), ('Monica', 'Turewicz'), ('Martina', 'Zerbola'), ('Mashaal', 'Hameed'), ('Sabrina', 'Dos Reis'), ('Maria Sol', 'Carrasco'), ('Ruxandra', 'Ababii'), ('Daniella', 'Patton'), ('Veronika', 'Zavodska'), ('Briar', 'Preston'), ('Gabriela', 'Ce'), ('Amanda', 'Rodgers'), ('Constanze', 'Lotz'), ('Paula', 'Mocete Talamantes'), ('Verena', 'Gantschnig'), ('Ainhoa', 'Atucha Gomez'), ('Katarzyna', 'Kossowska'), ('Julia', 'Stamatova'), ('Vorranavaporn', 'Vorrarattanamongkol'), ('Michaela', 'Jasenakova'), ('Agustina Sol', 'Eskenazi'), ('Maja', 'Mladenovic'), ('Sandra', 'Garriga Catala'), ('Rita', 'Vilaca'), ('Zanmarie', 'Pienaar'), ('Julia', 'Kimmelmann'), ('Martina', 'Trevisan'), ('Charitomeni', 'Matoula'), ('Andreea', 'Istrate'), ('Sowjanya', 'Bavisetti'), ('Gabrielle', 'Moxey'), ('Viktoryia', 'Kisialeva'), ('Sarahi', 'Garcia Carrera'), ('Rachel', 'Girard'), ('Laura', 'Robson'), ('Kate', 'Vialle'), ('Anna', 'Montserrat Sanchez'), ('Elena Teodora', 'Cadar'), ('Carol', 'Augustine Benito'), ('Kamila', 'Pavelkova'), ('Arantxa', 'Sanchez'), ('Ana Sofia', 'Sanchez'), ('Julia', 'Wachaczyk'), ('Ecaterina', 'Oproiu'), ('Snigdha', 'Padamata'), ('Rona', 'Berisha'), ('Olga', 'Doroshina'), ('So Ra', 'Lee'), ('Brandy', 'Mina'), ('Natalie', 'Novakova'), ('Storm', 'Sanders'), ('Alexandra', 'Martinez'), ('Ysaline', 'Bonaventure'), ('Barbora', 'Trestikova'), ('Stefania', 'Hristov'), ('Ana Maria', 'Crisan'), ('Elpida', 'Papanelopoulou'), ('Tereza', 'Jankovska'), ('Rebecca', 'Andrade'), ('Kelly', 'Williford'), ('Tina', 'Rupert'), ('Mia Nicole', 'Eklund'), ('Bernarda', 'Pera'), ('Montserrat', 'Alonso'), ('Rosalie', 'Van Der Hoek'), ('Hedda', 'Odegaard'), ('Samira', 'Radjaa'), ('Zuzanna', 'Maciejewska'), ('Saumya', 'Vig'), ('Marie', 'Benoit'), ('Iga', 'Odrzywolek'), ('Shakhlo', 'Saidova'), ('Irina', 'Khromacheva'), ('Yuliya', 'Lysa'), ('Sophie', 'Blom'), ('Jennifer', 'Zerbone'), ('Kristina', 'Chasovskikh'), ('Maria Camila', 'Trujillo Hoyos'), ('Karina', 'Rovira'), ('Teodora Adina', 'Ardeleanu'), ('Yasmine', 'Rashad'), ('Judit', 'Vives Joan'), ('Sarah Beth', 'Askew'), ('Yasmine', 'Xantos'), ('Lea', 'Tholey'), ('Hikari', 'Yamamoto'), ('Ines Miren', 'De Pablo'), ('Stuti', 'Singh Tomar'), ('Naomi', 'Totka'), ('Polina', 'Bezsmertnaya'), ('Hannah', 'King'), ('Gabriele', 'Bertasiute'), ('Rebecca', 'Smaller'), ('Busra', 'Kayrun'), ('Stephani', 'Rodriguez'), ('Raquel', 'Montalvo'), ('Oana', 'Irimescu'), ('Taylor', 'Townsend'), ('Carmen', 'Blasco Robaina'), ('Giulia', 'Della Cioppa'), ('Nadege', 'Jorda'), ('Beatriz', 'Haddad Maia'), ('Nelise', 'Verster'), ('Eleonore', 'Barrere'), ('Anastasia', 'Prokopenko'), ('Dzina', 'Milovanovic'), ('Isabelle', 'Wallace'), ('Katelyn', 'Jackson'), ('Polina', 'Novoselova'), ('Maite', 'Cano'), ('Ria', 'Vaidya'), ('Ana Lorena', 'Garcia Navas'), ('Aayushi', 'Chouhan'), ('Ivona', 'Cudina'), ('Karina', 'Gurgenyan'), ('Maria', 'Patrascu'), ('Denisa', 'Chereches'), ('Mirabelle', 'Njoze'), ('Vasanti', 'Shinde'), ('Amanda', 'Schneider'), ('Katharina', 'Herpertz'), ('Tayisiya', 'Morderger'), ('Tamara', 'Tomic'), ('Maria Fernanda', 'Herazo Gonzalez'), ('Andra Maria', 'Nitescu'), ('Micheline', 'Aubuchon'), ('Ilayda', 'Yondem'), ('Birgit', 'Burk'), ('Kanako', 'Osafune'), ('Anastasiya', 'Komardina'), ('Nina', 'Holanova'), ('Jil Belen', 'Teichmann'), ('Francesca', 'Di Lorenzo'), ('Natsuho', 'Arakawa'), ('Emerald', 'Able'), ('Manca', 'Pislak'), ('Irys', 'Ekani'), ('Veronica', 'Miroshnichenko'), ('Martina', 'Capurro Taborda'), ('Mariam', 'Bolkvadze'), ('Diana', 'Valverde'), ('Do Hee', 'Bae'), ('Daniela', 'Morales Beckmann'), ('Ioana Diana', 'Pietroiu'), ('Luisa Fernanda', 'Echeverry Rodriguez'), ('Mayuka', 'Aikawa'), ('Nicole', 'Frenkel'), ('Daria', 'Kruzhkova'), ('Alejandra', 'Tamayo Gomez'), ('Tereza', 'Koplova'), ('Chiara', 'Lommer'), ('Laura', 'Illanes'), ('Olga', 'Fridman'), ('Ana Paula', 'Leal'), ('Shiraz', 'Bronstein'), ('Nicole', 'Bunea'), ('Charlotte', 'Robillard Millette'), ('Ashley', 'Kratzer'), ('Momoka', 'Chimura'), ('Anna', 'Slovakova'), ('Ai Qi', 'Chen'), ('Jiaying', 'He'), ('Ysabel', 'Gonzalez Rico'), ('Andreea', 'Stanescu'), ('Marketa', 'Vondrousova'), ('Ecaterina', 'Ivasco'), ('Ivon', 'Mihaleva'), ('Jasmine', 'Boyd'), ('Andrea', 'Arratia Fernandez'), ('Kayla', 'Day'), ('Ekaterina', 'Davletova'), ('Irina', 'Cantos Siemers'), ('Oceane', 'Mialon'), ('Watsachol', 'Sawasdee'), ('Ellen', 'Ashley'), ('Mila', 'Mejic'), ('Natalia', 'Nikolopoulou'), ('Marta', 'Del Pino Maturano'), ('Jayci', 'Goldsmith'), ('Yang', 'Lee'), ('Isabella', 'Tcherkes Zade'), ('Mara', 'Vidal'), ('Taylor', 'Johnson'), ('Julia', 'Vulpio'), ('Dagmar', 'Zdrubecka'), ('Olga', 'Danilovic'), ('Xiyu', 'Wang'), ('Lina', 'Shokry'), ('Ya Hsin', 'Lee'), ('Ruxandra', 'Schech'), ('Yasmina', 'Karimjanova'), ('Lara', 'Biter'), ('Najah', 'Dawson'), ('Giulia', 'Morlet'), ('Matilde', 'Mariani'), ('Isabella', 'Nunez'), ('Betina', 'Tokac'), ('Noa', 'Krznaric')]
Gold Output      : [('Ann', 'Jones'), ('Wendy', 'Gilchrist'), ('Martina', 'Navratilova'), ('Mary', 'Carillo'), ('Katerina', 'Bohmova'), ('Petra', 'Delhees Jauch'), ('Nancy', 'Loeffler Caro'), ('Lise', 'Gregory'), ('Rene', 'Collins'), ('Nicole', 'Arendt'), ('Florencia', 'Labat'), ('Sabine', 'Appelmans'), ('Andreea', 'Ehritt Vanc'), ('Monica', 'Seles'), ('Gala', 'Leon Garcia'), ('Karen', 'Cross'), ('Julie', 'Pullin'), ('Vanessa', 'Webb'), ('Elena', 'Tatarkova'), ('Anca', 'Barna'), ('Francesca', 'Lubiani'), ('Gaelle', 'Widmer'), ('Amanda', 'Keen'), ('Amanda', 'Augustus'), ('Rita', 'Kuti Kis'), ('Amelie', 'Cocheteux'), ('Amelie', 'Castera'), ('Saori', 'Obata'), ('Marine', 'Nizri Spiegel'), ('Patty', 'Schnyder'), ('Julie', 'Ditty'), ('Joana', 'Cortez'), ('Barbara', 'Schwartz'), ('Ludmilla', 'Varmuza'), ('Magui', 'Serna'), ('Amanda', 'Grahame'), ('Kim', 'Kilsdonk'), ('Emilie', 'Loit'), ('Erika', 'Pineider'), ('Anne Gaelle', 'Sidot'), ('Erica', 'Biro'), ('Stephanie', 'Kovacic'), ('Sybille', 'Bammer'), ('Lisa', 'Fritz'), ('Maja', 'Matevzic'), ('Leanne', 'Baker'), ('Aurelie', 'Vedy'), ('Carla', 'Tiene'), ('Erika', 'Venere'), ('Jelena', 'Kostanic Tosic'), ('Clarisa', 'Fernandez'), ('Ansley', 'Cargill'), ('Dimana', 'Krastevitch'), ('Maria Jose', 'Martinez Sanchez'), ('Zerene', 'Reyes'), ('Melinda', 'Czink'), ('Sandra', 'Klemenschits'), ('Maria Elizabeth', 'Lopez'), ('Salome', 'Llaguno'), ('Lindsay', 'Cox'), ('Iveta', 'Benesova'), ('Eugenia', 'Chialvo'), ('Chun Yan', 'He'), ('Maria Fernanda', 'Alves'), ('Emily', 'Quin'), ('Fernanda', 'Oliveira Da Silva'), ('Annabel', 'Blow'), ('Julia', 'Smith'), ('Ana Lucia', 'Migliarini De Leon'), ('Elizabeth', 'Bondi'), ('Galina', 'Fokina'), ('Elise', 'Tamaela'), ('Bit Na', 'Lee'), ('Sonia', 'Iacovacci'), ('Mariana Pires', 'Junqueira'), ('Natalia', 'Bogdanova'), ('Irina', 'Smirnova'), ('Meghha', 'Vakaria'), ('Angela', 'Haynes'), ('Karly', 'Olson'), ('Casey', 'Dellacqua'), ('Kathrin', 'Hegel'), ('Beatrix', 'Csordas'), ('Zsuzsanna', 'Babos'), ('Emily', 'Applegate'), ('Olga', 'Pasichnichenko'), ('Theresa', 'Logar'), ('Jin A', 'Lee'), ('Hannah', 'Kuervers'), ('Andreea', 'Novaceanu'), ('Valentina', 'Tizzano'), ('Helen', 'Fritche'), ('Sandra', 'Sasidharan'), ('Isha', 'Lakhani'), ('Krushmi', 'Chheda'), ('Ljubica', 'Avramovic'), ('Avel Romaly', 'Coronado'), ('Shadisha', 'Robinson'), ('Carla', 'Zabaleta'), ('Diana', 'Arutyunova'), ('Cecile', 'Baijot'), ('Laura', 'Rocchi'), ('Rie', 'Imai'), ('Danielle', 'Harmsen'), ('Alejandra', 'Obregon'), ('Ariela', 'Perez'), ('Vasilisa', 'Davydova'), ('Emilia', 'Yorio'), ('Lizaan', 'Du Plessis'), ('Claire', 'Feuerstein'), ('Alexandria', 'Liles'), ('Katharine', 'Baker'), ('Emma', 'Laine'), ('Geraldine', 'Roma'), ('Aya', 'El Akkad'), ('Alexandra', 'Kazanova'), ('Allison', 'Baker'), ('Lucy', 'Fletcher'), ('Monika', 'Musilova'), ('Jitka', 'Gavdunova'), ('Elena', 'Petrucciano'), ('Varvara', 'Lepchenko'), ('Claire', 'De Gubernatis'), ('Seheno', 'Razafindramaso'), ('Karolina', 'Soor'), ('Melisa', 'Cabrera Handt'), ('Shraddha', 'Lodha'), ('Sylvia', 'Krywacz'), ('Amina', 'El Sahn'), ('Hendrike Lea', 'Heitmann'), ('Dunja', 'Antunovic'), ('Micaela', 'Acosta'), ('Katerina', 'Bohmova'), ('Catherine', 'Grotz'), ('Yurika', 'Sema'), ('Sheng Nan', 'Sun'), ('Lucie', 'Safarova'), ('Jitka', 'Kleisnerova'), ('Carolina', 'Escamilla'), ('Tapiwa', 'Marobela'), ('Punam', 'Reddy'), ('Katia', 'Sabate Orera'), ('Shana', 'Claes'), ('Chrissie', 'Seredni'), ('Yui', 'Nagasawa'), ('Marcela', 'Vojtiskova'), ('Seul Ki', 'Chin'), ('Nina', 'Munch Soegaard'), ('Hannah', 'Grady'), ('Karen', 'Castiblanco'), ('Angelique', 'Kerber'), ('Lauren', 'Lui'), ('Rana', 'Tharwat Hafez'), ('Nicole', 'Grunwald'), ('Ana', 'Veselinovic'), ('Sanaa', 'Bhambri'), ('Diana Andreea', 'Gae'), ('Ana', 'Beltran Trigueros'), ('Barbora', 'Bozkova'), ('Camila', 'Belassi'), ('Violette', 'Huck'), ('Megumi', 'Fukui'), ('Rita', 'Gouveia'), ('Mihaela', 'Buzarnescu'), ('Liset', 'Brito Herrera'), ('Paulina', 'Jorquera'), ('Ekaterina', 'Makarova'), ('Dessislava', 'Mladenova'), ('Sanaz', 'Marand'), ('Cristina', 'Greco Naccarato'), ('Cagla', 'Urcu'), ('Liege', 'Vieira'), ('Chang', 'Xu'), ('Jessica', 'Sweeting'), ('Yi Fan', 'Xu'), ('Eloisa Maria', 'Compostizo De Andres'), ('Karina', 'Porushkevich'), ('Ornella', 'Gentile'), ('Valeria', 'Casillo'), ('Bianca Ioana', 'Bonifate'), ('Michelle', 'Russ'), ('Monika', 'Lalewicz'), ('Amandine', 'Cazeaux'), ('Fatima', 'El Allami'), ('Simonetta', 'Miori'), ('Gabriela', 'Roux'), ('Sherazad', 'Benamar'), ('Sherazad', 'Reix'), ('Zora', 'Vlckova'), ('Naomi', 'Cavaday'), ('Nathalia', 'Rossi'), ('Maria Eugenia', 'Roca Recarey'), ('Lauren', 'Jones'), ('Roxane', 'Vaisemberg'), ('Ivana', 'Belejova'), ('Petra', 'Vogel'), ('Majdouline', 'Akrate'), ('Laura', 'Sadria'), ('Ia', 'Jikia'), ('Alessandra', 'Caprara'), ('Guadalupe', 'Moreno'), ('Lucie', 'Sipkova'), ('Xenia', 'Samoilova'), ('Kotomi', 'Takahata'), ('Stephanie', 'Theiler'), ('Maria', 'Prishlyak'), ('Grace', 'Leake'), ('Ioana Alexandra', 'Oprea'), ('Sanne', 'Bakker'), ('Katerina', 'Vankova'), ('Kristy', 'Frilling'), ('Tatiana', 'Bua'), ('Anastasia', 'Kontratevidi'), ('Chane', 'Hines'), ('Julia', 'Gavenko'), ('Yuuki', 'Tanaka'), ('Petra', 'Kvitova'), ('Leticia', 'Costas'), ('Sandra', 'Roma'), ('Nina', 'Mujezinovic'), ('Stella', 'Papaspyrou'), ('Chinami', 'Ogi'), ('Martina', 'Balogova'), ('Xinyun', 'Han'), ('Nicole', 'Riner'), ('Lara', 'Meccico'), ('Mai', 'Iwasaki'), ('Oksana', 'Kalashnikova'), ('Dipti', 'Srivastava'), ('Claudia', 'Mercado'), ('Margarita', 'Lazareva'), ('Shaozhuo', 'Liu'), ('Ana Maria', 'Chavez Franco'), ('Arantxa', 'Rus'), ('Ekaterina', 'Kamendova'), ('Monika', 'Tumova'), ('Gabriella', 'Boboc'), ('Ganna', 'Lukianchykova'), ('Sofia', 'Medina'), ('Ekaterina', 'Abaeva'), ('Andressa', 'Garcia'), ('Giulia', 'Bruzzone'), ('Catia', 'Rodrigues'), ('Danielle', 'Mills'), ('Flavia', 'Borges'), ('Misaki', 'Doi'), ('Veronika', 'Domagala'), ('Cindy', 'Chala'), ('Ksenia', 'Pervak'), ('Bianca', 'Botto'), ('Marianna', 'Natali'), ('Carolina', 'Orsi'), ('Aleksandra', 'Vukadinovic'), ('Elixane', 'Lechemia'), ('Sonya', 'Dayal'), ('Francesca', 'Campigotto'), ('Cristina Bianca', 'Danaila'), ('Tereza', 'Budilova'), ('Gemma', 'Praditngam'), ('Ekaterine', 'Gorgodze'), ('Dejana', 'Raickovic'), ('Alena', 'Gerasimova'), ('Quirine', 'Lemoine'), ('Chieh Yu', 'Hsu'), ('Anastasiya', 'Vasylyeva'), ('Alexia', 'Quartetto'), ('Joanna', 'Bougon'), ('Kristyna', 'Pliskova'), ('Elena', 'Bogdan'), ('Fiorella', 'Jerardino'), ('Julie', 'Gonzalez Rodriguez'), ('Alejandra', 'Barragan'), ('Renata', 'Bakieva'), ('Ashley', 'Krysiak'), ('Sarah Rebecca', 'Sekulic'), ('Na Lae', 'Han'), ('Natali', 'Coronel'), ('Kristyna', 'Hancarova'), ('Doroteja', 'Eric'), ('Chanel', 'Simmonds'), ('Kobkanok', 'Upapong'), ('Annie', 'Sullivan'), ('Jenny Thuy', 'Le'), ('Xenia', 'Knoll'), ('Francisca', 'Matos'), ('Christina', 'Madenoglou'), ('Alexandra', 'Avirvarei'), ('Georgina', 'Fedosenkova'), ('Alicia', 'Doms Golobart'), ('Amy', 'Hoburn'), ('Monica', 'Turewicz'), ('Martina', 'Zerbola'), ('Mashaal', 'Hameed'), ('Sabrina', 'Dos Reis'), ('Maria Sol', 'Carrasco'), ('Ruxandra', 'Ababii'), ('Daniella', 'Patton'), ('Veronika', 'Zavodska'), ('Briar', 'Preston'), ('Gabriela', 'Ce'), ('Amanda', 'Rodgers'), ('Constanze', 'Lotz'), ('Paula', 'Mocete Talamantes'), ('Verena', 'Gantschnig'), ('Ainhoa', 'Atucha Gomez'), ('Katarzyna', 'Kossowska'), ('Julia', 'Stamatova'), ('Vorranavaporn', 'Vorrarattanamongkol'), ('Michaela', 'Jasenakova'), ('Agustina Sol', 'Eskenazi'), ('Maja', 'Mladenovic'), ('Sandra', 'Garriga Catala'), ('Rita', 'Vilaca'), ('Zanmarie', 'Pienaar'), ('Julia', 'Kimmelmann'), ('Martina', 'Trevisan'), ('Charitomeni', 'Matoula'), ('Andreea', 'Istrate'), ('Sowjanya', 'Bavisetti'), ('Gabrielle', 'Moxey'), ('Viktoryia', 'Kisialeva'), ('Sarahi', 'Garcia Carrera'), ('Rachel', 'Girard'), ('Laura', 'Robson'), ('Kate', 'Vialle'), ('Anna', 'Montserrat Sanchez'), ('Elena Teodora', 'Cadar'), ('Carol', 'Augustine Benito'), ('Kamila', 'Pavelkova'), ('Arantxa', 'Sanchez'), ('Ana Sofia', 'Sanchez'), ('Julia', 'Wachaczyk'), ('Ecaterina', 'Oproiu'), ('Snigdha', 'Padamata'), ('Rona', 'Berisha'), ('Olga', 'Doroshina'), ('So Ra', 'Lee'), ('Brandy', 'Mina'), ('Natalie', 'Novakova'), ('Storm', 'Sanders'), ('Alexandra', 'Martinez'), ('Ysaline', 'Bonaventure'), ('Barbora', 'Trestikova'), ('Stefania', 'Hristov'), ('Ana Maria', 'Crisan'), ('Elpida', 'Papanelopoulou'), ('Tereza', 'Jankovska'), ('Rebecca', 'Andrade'), ('Kelly', 'Williford'), ('Tina', 'Rupert'), ('Mia Nicole', 'Eklund'), ('Bernarda', 'Pera'), ('Montserrat', 'Alonso'), ('Rosalie', 'Van Der Hoek'), ('Hedda', 'Odegaard'), ('Samira', 'Radjaa'), ('Zuzanna', 'Maciejewska'), ('Saumya', 'Vig'), ('Marie', 'Benoit'), ('Iga', 'Odrzywolek'), ('Shakhlo', 'Saidova'), ('Irina', 'Khromacheva'), ('Yuliya', 'Lysa'), ('Sophie', 'Blom'), ('Jennifer', 'Zerbone'), ('Kristina', 'Chasovskikh'), ('Maria Camila', 'Trujillo Hoyos'), ('Karina', 'Rovira'), ('Teodora Adina', 'Ardeleanu'), ('Yasmine', 'Rashad'), ('Judit', 'Vives Joan'), ('Sarah Beth', 'Askew'), ('Yasmine', 'Xantos'), ('Lea', 'Tholey'), ('Hikari', 'Yamamoto'), ('Ines Miren', 'De Pablo'), ('Stuti', 'Singh Tomar'), ('Naomi', 'Totka'), ('Polina', 'Bezsmertnaya'), ('Hannah', 'King'), ('Gabriele', 'Bertasiute'), ('Rebecca', 'Smaller'), ('Busra', 'Kayrun'), ('Stephani', 'Rodriguez'), ('Raquel', 'Montalvo'), ('Oana', 'Irimescu'), ('Taylor', 'Townsend'), ('Carmen', 'Blasco Robaina'), ('Giulia', 'Della Cioppa'), ('Nadege', 'Jorda'), ('Beatriz', 'Haddad Maia'), ('Nelise', 'Verster'), ('Eleonore', 'Barrere'), ('Anastasia', 'Prokopenko'), ('Dzina', 'Milovanovic'), ('Isabelle', 'Wallace'), ('Katelyn', 'Jackson'), ('Polina', 'Novoselova'), ('Maite', 'Cano'), ('Ria', 'Vaidya'), ('Ana Lorena', 'Garcia Navas'), ('Aayushi', 'Chouhan'), ('Ivona', 'Cudina'), ('Karina', 'Gurgenyan'), ('Maria', 'Patrascu'), ('Denisa', 'Chereches'), ('Mirabelle', 'Njoze'), ('Vasanti', 'Shinde'), ('Amanda', 'Schneider'), ('Katharina', 'Herpertz'), ('Tayisiya', 'Morderger'), ('Tamara', 'Tomic'), ('Maria Fernanda', 'Herazo Gonzalez'), ('Andra Maria', 'Nitescu'), ('Micheline', 'Aubuchon'), ('Ilayda', 'Yondem'), ('Birgit', 'Burk'), ('Kanako', 'Osafune'), ('Anastasiya', 'Komardina'), ('Nina', 'Holanova'), ('Jil Belen', 'Teichmann'), ('Francesca', 'Di Lorenzo'), ('Natsuho', 'Arakawa'), ('Emerald', 'Able'), ('Manca', 'Pislak'), ('Irys', 'Ekani'), ('Veronica', 'Miroshnichenko'), ('Martina', 'Capurro Taborda'), ('Mariam', 'Bolkvadze'), ('Diana', 'Valverde'), ('Do Hee', 'Bae'), ('Daniela', 'Morales Beckmann'), ('Ioana Diana', 'Pietroiu'), ('Luisa Fernanda', 'Echeverry Rodriguez'), ('Mayuka', 'Aikawa'), ('Nicole', 'Frenkel'), ('Daria', 'Kruzhkova'), ('Alejandra', 'Tamayo Gomez'), ('Tereza', 'Koplova'), ('Chiara', 'Lommer'), ('Laura', 'Illanes'), ('Olga', 'Fridman'), ('Ana Paula', 'Leal'), ('Shiraz', 'Bronstein'), ('Nicole', 'Bunea'), ('Charlotte', 'Robillard Millette'), ('Ashley', 'Kratzer'), ('Momoka', 'Chimura'), ('Anna', 'Slovakova'), ('Ai Qi', 'Chen'), ('Jiaying', 'He'), ('Ysabel', 'Gonzalez Rico'), ('Andreea', 'Stanescu'), ('Marketa', 'Vondrousova'), ('Ecaterina', 'Ivasco'), ('Ivon', 'Mihaleva'), ('Jasmine', 'Boyd'), ('Andrea', 'Arratia Fernandez'), ('Kayla', 'Day'), ('Ekaterina', 'Davletova'), ('Irina', 'Cantos Siemers'), ('Oceane', 'Mialon'), ('Watsachol', 'Sawasdee'), ('Ellen', 'Ashley'), ('Mila', 'Mejic'), ('Natalia', 'Nikolopoulou'), ('Marta', 'Del Pino Maturano'), ('Jayci', 'Goldsmith'), ('Yang', 'Lee'), ('Isabella', 'Tcherkes Zade'), ('Mara', 'Vidal'), ('Taylor', 'Johnson'), ('Julia', 'Vulpio'), ('Dagmar', 'Zdrubecka'), ('Olga', 'Danilovic'), ('Xiyu', 'Wang'), ('Lina', 'Shokry'), ('Ya Hsin', 'Lee'), ('Ruxandra', 'Schech'), ('Yasmina', 'Karimjanova'), ('Lara', 'Biter'), ('Najah', 'Dawson'), ('Giulia', 'Morlet'), ('Matilde', 'Mariani'), ('Isabella', 'Nunez'), ('Betina', 'Tokac'), ('Noa', 'Krznaric')]

===== Eval Round 459 =====
Database         : wta_1
Prediction SQL   : SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date
Gold SQL         : SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Ann', 'Jones'), ('Wendy', 'Gilchrist'), ('Martina', 'Navratilova'), ('Mary', 'Carillo'), ('Katerina', 'Bohmova'), ('Petra', 'Delhees Jauch'), ('Nancy', 'Loeffler Caro'), ('Lise', 'Gregory'), ('Rene', 'Collins'), ('Nicole', 'Arendt'), ('Florencia', 'Labat'), ('Sabine', 'Appelmans'), ('Andreea', 'Ehritt Vanc'), ('Monica', 'Seles'), ('Gala', 'Leon Garcia'), ('Karen', 'Cross'), ('Julie', 'Pullin'), ('Vanessa', 'Webb'), ('Elena', 'Tatarkova'), ('Anca', 'Barna'), ('Francesca', 'Lubiani'), ('Gaelle', 'Widmer'), ('Amanda', 'Keen'), ('Amanda', 'Augustus'), ('Rita', 'Kuti Kis'), ('Amelie', 'Cocheteux'), ('Amelie', 'Castera'), ('Saori', 'Obata'), ('Marine', 'Nizri Spiegel'), ('Patty', 'Schnyder'), ('Julie', 'Ditty'), ('Joana', 'Cortez'), ('Barbara', 'Schwartz'), ('Ludmilla', 'Varmuza'), ('Magui', 'Serna'), ('Amanda', 'Grahame'), ('Kim', 'Kilsdonk'), ('Emilie', 'Loit'), ('Erika', 'Pineider'), ('Anne Gaelle', 'Sidot'), ('Erica', 'Biro'), ('Stephanie', 'Kovacic'), ('Sybille', 'Bammer'), ('Lisa', 'Fritz'), ('Maja', 'Matevzic'), ('Leanne', 'Baker'), ('Aurelie', 'Vedy'), ('Carla', 'Tiene'), ('Erika', 'Venere'), ('Jelena', 'Kostanic Tosic'), ('Clarisa', 'Fernandez'), ('Ansley', 'Cargill'), ('Dimana', 'Krastevitch'), ('Maria Jose', 'Martinez Sanchez'), ('Zerene', 'Reyes'), ('Melinda', 'Czink'), ('Sandra', 'Klemenschits'), ('Maria Elizabeth', 'Lopez'), ('Salome', 'Llaguno'), ('Lindsay', 'Cox'), ('Iveta', 'Benesova'), ('Eugenia', 'Chialvo'), ('Chun Yan', 'He'), ('Maria Fernanda', 'Alves'), ('Emily', 'Quin'), ('Fernanda', 'Oliveira Da Silva'), ('Annabel', 'Blow'), ('Julia', 'Smith'), ('Ana Lucia', 'Migliarini De Leon'), ('Elizabeth', 'Bondi'), ('Galina', 'Fokina'), ('Elise', 'Tamaela'), ('Bit Na', 'Lee'), ('Sonia', 'Iacovacci'), ('Mariana Pires', 'Junqueira'), ('Natalia', 'Bogdanova'), ('Irina', 'Smirnova'), ('Meghha', 'Vakaria'), ('Angela', 'Haynes'), ('Karly', 'Olson'), ('Casey', 'Dellacqua'), ('Kathrin', 'Hegel'), ('Beatrix', 'Csordas'), ('Zsuzsanna', 'Babos'), ('Emily', 'Applegate'), ('Olga', 'Pasichnichenko'), ('Theresa', 'Logar'), ('Jin A', 'Lee'), ('Hannah', 'Kuervers'), ('Andreea', 'Novaceanu'), ('Valentina', 'Tizzano'), ('Helen', 'Fritche'), ('Sandra', 'Sasidharan'), ('Isha', 'Lakhani'), ('Krushmi', 'Chheda'), ('Ljubica', 'Avramovic'), ('Avel Romaly', 'Coronado'), ('Shadisha', 'Robinson'), ('Carla', 'Zabaleta'), ('Diana', 'Arutyunova'), ('Cecile', 'Baijot'), ('Laura', 'Rocchi'), ('Rie', 'Imai'), ('Danielle', 'Harmsen'), ('Alejandra', 'Obregon'), ('Ariela', 'Perez'), ('Vasilisa', 'Davydova'), ('Emilia', 'Yorio'), ('Lizaan', 'Du Plessis'), ('Claire', 'Feuerstein'), ('Alexandria', 'Liles'), ('Katharine', 'Baker'), ('Emma', 'Laine'), ('Geraldine', 'Roma'), ('Aya', 'El Akkad'), ('Alexandra', 'Kazanova'), ('Allison', 'Baker'), ('Lucy', 'Fletcher'), ('Monika', 'Musilova'), ('Jitka', 'Gavdunova'), ('Elena', 'Petrucciano'), ('Varvara', 'Lepchenko'), ('Claire', 'De Gubernatis'), ('Seheno', 'Razafindramaso'), ('Karolina', 'Soor'), ('Melisa', 'Cabrera Handt'), ('Shraddha', 'Lodha'), ('Sylvia', 'Krywacz'), ('Amina', 'El Sahn'), ('Hendrike Lea', 'Heitmann'), ('Dunja', 'Antunovic'), ('Micaela', 'Acosta'), ('Katerina', 'Bohmova'), ('Catherine', 'Grotz'), ('Yurika', 'Sema'), ('Sheng Nan', 'Sun'), ('Lucie', 'Safarova'), ('Jitka', 'Kleisnerova'), ('Carolina', 'Escamilla'), ('Tapiwa', 'Marobela'), ('Punam', 'Reddy'), ('Katia', 'Sabate Orera'), ('Shana', 'Claes'), ('Chrissie', 'Seredni'), ('Yui', 'Nagasawa'), ('Marcela', 'Vojtiskova'), ('Seul Ki', 'Chin'), ('Nina', 'Munch Soegaard'), ('Hannah', 'Grady'), ('Karen', 'Castiblanco'), ('Angelique', 'Kerber'), ('Lauren', 'Lui'), ('Rana', 'Tharwat Hafez'), ('Nicole', 'Grunwald'), ('Ana', 'Veselinovic'), ('Sanaa', 'Bhambri'), ('Diana Andreea', 'Gae'), ('Ana', 'Beltran Trigueros'), ('Barbora', 'Bozkova'), ('Camila', 'Belassi'), ('Violette', 'Huck'), ('Megumi', 'Fukui'), ('Rita', 'Gouveia'), ('Mihaela', 'Buzarnescu'), ('Liset', 'Brito Herrera'), ('Paulina', 'Jorquera'), ('Ekaterina', 'Makarova'), ('Dessislava', 'Mladenova'), ('Sanaz', 'Marand'), ('Cristina', 'Greco Naccarato'), ('Cagla', 'Urcu'), ('Liege', 'Vieira'), ('Chang', 'Xu'), ('Jessica', 'Sweeting'), ('Yi Fan', 'Xu'), ('Eloisa Maria', 'Compostizo De Andres'), ('Karina', 'Porushkevich'), ('Ornella', 'Gentile'), ('Valeria', 'Casillo'), ('Bianca Ioana', 'Bonifate'), ('Michelle', 'Russ'), ('Monika', 'Lalewicz'), ('Amandine', 'Cazeaux'), ('Fatima', 'El Allami'), ('Simonetta', 'Miori'), ('Gabriela', 'Roux'), ('Sherazad', 'Benamar'), ('Sherazad', 'Reix'), ('Zora', 'Vlckova'), ('Naomi', 'Cavaday'), ('Nathalia', 'Rossi'), ('Maria Eugenia', 'Roca Recarey'), ('Lauren', 'Jones'), ('Roxane', 'Vaisemberg'), ('Ivana', 'Belejova'), ('Petra', 'Vogel'), ('Majdouline', 'Akrate'), ('Laura', 'Sadria'), ('Ia', 'Jikia'), ('Alessandra', 'Caprara'), ('Guadalupe', 'Moreno'), ('Lucie', 'Sipkova'), ('Xenia', 'Samoilova'), ('Kotomi', 'Takahata'), ('Stephanie', 'Theiler'), ('Maria', 'Prishlyak'), ('Grace', 'Leake'), ('Ioana Alexandra', 'Oprea'), ('Sanne', 'Bakker'), ('Katerina', 'Vankova'), ('Kristy', 'Frilling'), ('Tatiana', 'Bua'), ('Anastasia', 'Kontratevidi'), ('Chane', 'Hines'), ('Julia', 'Gavenko'), ('Yuuki', 'Tanaka'), ('Petra', 'Kvitova'), ('Leticia', 'Costas'), ('Sandra', 'Roma'), ('Nina', 'Mujezinovic'), ('Stella', 'Papaspyrou'), ('Chinami', 'Ogi'), ('Martina', 'Balogova'), ('Xinyun', 'Han'), ('Nicole', 'Riner'), ('Lara', 'Meccico'), ('Mai', 'Iwasaki'), ('Oksana', 'Kalashnikova'), ('Dipti', 'Srivastava'), ('Claudia', 'Mercado'), ('Margarita', 'Lazareva'), ('Shaozhuo', 'Liu'), ('Ana Maria', 'Chavez Franco'), ('Arantxa', 'Rus'), ('Ekaterina', 'Kamendova'), ('Monika', 'Tumova'), ('Gabriella', 'Boboc'), ('Ganna', 'Lukianchykova'), ('Sofia', 'Medina'), ('Ekaterina', 'Abaeva'), ('Andressa', 'Garcia'), ('Giulia', 'Bruzzone'), ('Catia', 'Rodrigues'), ('Danielle', 'Mills'), ('Flavia', 'Borges'), ('Misaki', 'Doi'), ('Veronika', 'Domagala'), ('Cindy', 'Chala'), ('Ksenia', 'Pervak'), ('Bianca', 'Botto'), ('Marianna', 'Natali'), ('Carolina', 'Orsi'), ('Aleksandra', 'Vukadinovic'), ('Elixane', 'Lechemia'), ('Sonya', 'Dayal'), ('Francesca', 'Campigotto'), ('Cristina Bianca', 'Danaila'), ('Tereza', 'Budilova'), ('Gemma', 'Praditngam'), ('Ekaterine', 'Gorgodze'), ('Dejana', 'Raickovic'), ('Alena', 'Gerasimova'), ('Quirine', 'Lemoine'), ('Chieh Yu', 'Hsu'), ('Anastasiya', 'Vasylyeva'), ('Alexia', 'Quartetto'), ('Joanna', 'Bougon'), ('Kristyna', 'Pliskova'), ('Elena', 'Bogdan'), ('Fiorella', 'Jerardino'), ('Julie', 'Gonzalez Rodriguez'), ('Alejandra', 'Barragan'), ('Renata', 'Bakieva'), ('Ashley', 'Krysiak'), ('Sarah Rebecca', 'Sekulic'), ('Na Lae', 'Han'), ('Natali', 'Coronel'), ('Kristyna', 'Hancarova'), ('Doroteja', 'Eric'), ('Chanel', 'Simmonds'), ('Kobkanok', 'Upapong'), ('Annie', 'Sullivan'), ('Jenny Thuy', 'Le'), ('Xenia', 'Knoll'), ('Francisca', 'Matos'), ('Christina', 'Madenoglou'), ('Alexandra', 'Avirvarei'), ('Georgina', 'Fedosenkova'), ('Alicia', 'Doms Golobart'), ('Amy', 'Hoburn'), ('Monica', 'Turewicz'), ('Martina', 'Zerbola'), ('Mashaal', 'Hameed'), ('Sabrina', 'Dos Reis'), ('Maria Sol', 'Carrasco'), ('Ruxandra', 'Ababii'), ('Daniella', 'Patton'), ('Veronika', 'Zavodska'), ('Briar', 'Preston'), ('Gabriela', 'Ce'), ('Amanda', 'Rodgers'), ('Constanze', 'Lotz'), ('Paula', 'Mocete Talamantes'), ('Verena', 'Gantschnig'), ('Ainhoa', 'Atucha Gomez'), ('Katarzyna', 'Kossowska'), ('Julia', 'Stamatova'), ('Vorranavaporn', 'Vorrarattanamongkol'), ('Michaela', 'Jasenakova'), ('Agustina Sol', 'Eskenazi'), ('Maja', 'Mladenovic'), ('Sandra', 'Garriga Catala'), ('Rita', 'Vilaca'), ('Zanmarie', 'Pienaar'), ('Julia', 'Kimmelmann'), ('Martina', 'Trevisan'), ('Charitomeni', 'Matoula'), ('Andreea', 'Istrate'), ('Sowjanya', 'Bavisetti'), ('Gabrielle', 'Moxey'), ('Viktoryia', 'Kisialeva'), ('Sarahi', 'Garcia Carrera'), ('Rachel', 'Girard'), ('Laura', 'Robson'), ('Kate', 'Vialle'), ('Anna', 'Montserrat Sanchez'), ('Elena Teodora', 'Cadar'), ('Carol', 'Augustine Benito'), ('Kamila', 'Pavelkova'), ('Arantxa', 'Sanchez'), ('Ana Sofia', 'Sanchez'), ('Julia', 'Wachaczyk'), ('Ecaterina', 'Oproiu'), ('Snigdha', 'Padamata'), ('Rona', 'Berisha'), ('Olga', 'Doroshina'), ('So Ra', 'Lee'), ('Brandy', 'Mina'), ('Natalie', 'Novakova'), ('Storm', 'Sanders'), ('Alexandra', 'Martinez'), ('Ysaline', 'Bonaventure'), ('Barbora', 'Trestikova'), ('Stefania', 'Hristov'), ('Ana Maria', 'Crisan'), ('Elpida', 'Papanelopoulou'), ('Tereza', 'Jankovska'), ('Rebecca', 'Andrade'), ('Kelly', 'Williford'), ('Tina', 'Rupert'), ('Mia Nicole', 'Eklund'), ('Bernarda', 'Pera'), ('Montserrat', 'Alonso'), ('Rosalie', 'Van Der Hoek'), ('Hedda', 'Odegaard'), ('Samira', 'Radjaa'), ('Zuzanna', 'Maciejewska'), ('Saumya', 'Vig'), ('Marie', 'Benoit'), ('Iga', 'Odrzywolek'), ('Shakhlo', 'Saidova'), ('Irina', 'Khromacheva'), ('Yuliya', 'Lysa'), ('Sophie', 'Blom'), ('Jennifer', 'Zerbone'), ('Kristina', 'Chasovskikh'), ('Maria Camila', 'Trujillo Hoyos'), ('Karina', 'Rovira'), ('Teodora Adina', 'Ardeleanu'), ('Yasmine', 'Rashad'), ('Judit', 'Vives Joan'), ('Sarah Beth', 'Askew'), ('Yasmine', 'Xantos'), ('Lea', 'Tholey'), ('Hikari', 'Yamamoto'), ('Ines Miren', 'De Pablo'), ('Stuti', 'Singh Tomar'), ('Naomi', 'Totka'), ('Polina', 'Bezsmertnaya'), ('Hannah', 'King'), ('Gabriele', 'Bertasiute'), ('Rebecca', 'Smaller'), ('Busra', 'Kayrun'), ('Stephani', 'Rodriguez'), ('Raquel', 'Montalvo'), ('Oana', 'Irimescu'), ('Taylor', 'Townsend'), ('Carmen', 'Blasco Robaina'), ('Giulia', 'Della Cioppa'), ('Nadege', 'Jorda'), ('Beatriz', 'Haddad Maia'), ('Nelise', 'Verster'), ('Eleonore', 'Barrere'), ('Anastasia', 'Prokopenko'), ('Dzina', 'Milovanovic'), ('Isabelle', 'Wallace'), ('Katelyn', 'Jackson'), ('Polina', 'Novoselova'), ('Maite', 'Cano'), ('Ria', 'Vaidya'), ('Ana Lorena', 'Garcia Navas'), ('Aayushi', 'Chouhan'), ('Ivona', 'Cudina'), ('Karina', 'Gurgenyan'), ('Maria', 'Patrascu'), ('Denisa', 'Chereches'), ('Mirabelle', 'Njoze'), ('Vasanti', 'Shinde'), ('Amanda', 'Schneider'), ('Katharina', 'Herpertz'), ('Tayisiya', 'Morderger'), ('Tamara', 'Tomic'), ('Maria Fernanda', 'Herazo Gonzalez'), ('Andra Maria', 'Nitescu'), ('Micheline', 'Aubuchon'), ('Ilayda', 'Yondem'), ('Birgit', 'Burk'), ('Kanako', 'Osafune'), ('Anastasiya', 'Komardina'), ('Nina', 'Holanova'), ('Jil Belen', 'Teichmann'), ('Francesca', 'Di Lorenzo'), ('Natsuho', 'Arakawa'), ('Emerald', 'Able'), ('Manca', 'Pislak'), ('Irys', 'Ekani'), ('Veronica', 'Miroshnichenko'), ('Martina', 'Capurro Taborda'), ('Mariam', 'Bolkvadze'), ('Diana', 'Valverde'), ('Do Hee', 'Bae'), ('Daniela', 'Morales Beckmann'), ('Ioana Diana', 'Pietroiu'), ('Luisa Fernanda', 'Echeverry Rodriguez'), ('Mayuka', 'Aikawa'), ('Nicole', 'Frenkel'), ('Daria', 'Kruzhkova'), ('Alejandra', 'Tamayo Gomez'), ('Tereza', 'Koplova'), ('Chiara', 'Lommer'), ('Laura', 'Illanes'), ('Olga', 'Fridman'), ('Ana Paula', 'Leal'), ('Shiraz', 'Bronstein'), ('Nicole', 'Bunea'), ('Charlotte', 'Robillard Millette'), ('Ashley', 'Kratzer'), ('Momoka', 'Chimura'), ('Anna', 'Slovakova'), ('Ai Qi', 'Chen'), ('Jiaying', 'He'), ('Ysabel', 'Gonzalez Rico'), ('Andreea', 'Stanescu'), ('Marketa', 'Vondrousova'), ('Ecaterina', 'Ivasco'), ('Ivon', 'Mihaleva'), ('Jasmine', 'Boyd'), ('Andrea', 'Arratia Fernandez'), ('Kayla', 'Day'), ('Ekaterina', 'Davletova'), ('Irina', 'Cantos Siemers'), ('Oceane', 'Mialon'), ('Watsachol', 'Sawasdee'), ('Ellen', 'Ashley'), ('Mila', 'Mejic'), ('Natalia', 'Nikolopoulou'), ('Marta', 'Del Pino Maturano'), ('Jayci', 'Goldsmith'), ('Yang', 'Lee'), ('Isabella', 'Tcherkes Zade'), ('Mara', 'Vidal'), ('Taylor', 'Johnson'), ('Julia', 'Vulpio'), ('Dagmar', 'Zdrubecka'), ('Olga', 'Danilovic'), ('Xiyu', 'Wang'), ('Lina', 'Shokry'), ('Ya Hsin', 'Lee'), ('Ruxandra', 'Schech'), ('Yasmina', 'Karimjanova'), ('Lara', 'Biter'), ('Najah', 'Dawson'), ('Giulia', 'Morlet'), ('Matilde', 'Mariani'), ('Isabella', 'Nunez'), ('Betina', 'Tokac'), ('Noa', 'Krznaric')]
Gold Output      : [('Ann', 'Jones'), ('Wendy', 'Gilchrist'), ('Martina', 'Navratilova'), ('Mary', 'Carillo'), ('Katerina', 'Bohmova'), ('Petra', 'Delhees Jauch'), ('Nancy', 'Loeffler Caro'), ('Lise', 'Gregory'), ('Rene', 'Collins'), ('Nicole', 'Arendt'), ('Florencia', 'Labat'), ('Sabine', 'Appelmans'), ('Andreea', 'Ehritt Vanc'), ('Monica', 'Seles'), ('Gala', 'Leon Garcia'), ('Karen', 'Cross'), ('Julie', 'Pullin'), ('Vanessa', 'Webb'), ('Elena', 'Tatarkova'), ('Anca', 'Barna'), ('Francesca', 'Lubiani'), ('Gaelle', 'Widmer'), ('Amanda', 'Keen'), ('Amanda', 'Augustus'), ('Rita', 'Kuti Kis'), ('Amelie', 'Cocheteux'), ('Amelie', 'Castera'), ('Saori', 'Obata'), ('Marine', 'Nizri Spiegel'), ('Patty', 'Schnyder'), ('Julie', 'Ditty'), ('Joana', 'Cortez'), ('Barbara', 'Schwartz'), ('Ludmilla', 'Varmuza'), ('Magui', 'Serna'), ('Amanda', 'Grahame'), ('Kim', 'Kilsdonk'), ('Emilie', 'Loit'), ('Erika', 'Pineider'), ('Anne Gaelle', 'Sidot'), ('Erica', 'Biro'), ('Stephanie', 'Kovacic'), ('Sybille', 'Bammer'), ('Lisa', 'Fritz'), ('Maja', 'Matevzic'), ('Leanne', 'Baker'), ('Aurelie', 'Vedy'), ('Carla', 'Tiene'), ('Erika', 'Venere'), ('Jelena', 'Kostanic Tosic'), ('Clarisa', 'Fernandez'), ('Ansley', 'Cargill'), ('Dimana', 'Krastevitch'), ('Maria Jose', 'Martinez Sanchez'), ('Zerene', 'Reyes'), ('Melinda', 'Czink'), ('Sandra', 'Klemenschits'), ('Maria Elizabeth', 'Lopez'), ('Salome', 'Llaguno'), ('Lindsay', 'Cox'), ('Iveta', 'Benesova'), ('Eugenia', 'Chialvo'), ('Chun Yan', 'He'), ('Maria Fernanda', 'Alves'), ('Emily', 'Quin'), ('Fernanda', 'Oliveira Da Silva'), ('Annabel', 'Blow'), ('Julia', 'Smith'), ('Ana Lucia', 'Migliarini De Leon'), ('Elizabeth', 'Bondi'), ('Galina', 'Fokina'), ('Elise', 'Tamaela'), ('Bit Na', 'Lee'), ('Sonia', 'Iacovacci'), ('Mariana Pires', 'Junqueira'), ('Natalia', 'Bogdanova'), ('Irina', 'Smirnova'), ('Meghha', 'Vakaria'), ('Angela', 'Haynes'), ('Karly', 'Olson'), ('Casey', 'Dellacqua'), ('Kathrin', 'Hegel'), ('Beatrix', 'Csordas'), ('Zsuzsanna', 'Babos'), ('Emily', 'Applegate'), ('Olga', 'Pasichnichenko'), ('Theresa', 'Logar'), ('Jin A', 'Lee'), ('Hannah', 'Kuervers'), ('Andreea', 'Novaceanu'), ('Valentina', 'Tizzano'), ('Helen', 'Fritche'), ('Sandra', 'Sasidharan'), ('Isha', 'Lakhani'), ('Krushmi', 'Chheda'), ('Ljubica', 'Avramovic'), ('Avel Romaly', 'Coronado'), ('Shadisha', 'Robinson'), ('Carla', 'Zabaleta'), ('Diana', 'Arutyunova'), ('Cecile', 'Baijot'), ('Laura', 'Rocchi'), ('Rie', 'Imai'), ('Danielle', 'Harmsen'), ('Alejandra', 'Obregon'), ('Ariela', 'Perez'), ('Vasilisa', 'Davydova'), ('Emilia', 'Yorio'), ('Lizaan', 'Du Plessis'), ('Claire', 'Feuerstein'), ('Alexandria', 'Liles'), ('Katharine', 'Baker'), ('Emma', 'Laine'), ('Geraldine', 'Roma'), ('Aya', 'El Akkad'), ('Alexandra', 'Kazanova'), ('Allison', 'Baker'), ('Lucy', 'Fletcher'), ('Monika', 'Musilova'), ('Jitka', 'Gavdunova'), ('Elena', 'Petrucciano'), ('Varvara', 'Lepchenko'), ('Claire', 'De Gubernatis'), ('Seheno', 'Razafindramaso'), ('Karolina', 'Soor'), ('Melisa', 'Cabrera Handt'), ('Shraddha', 'Lodha'), ('Sylvia', 'Krywacz'), ('Amina', 'El Sahn'), ('Hendrike Lea', 'Heitmann'), ('Dunja', 'Antunovic'), ('Micaela', 'Acosta'), ('Katerina', 'Bohmova'), ('Catherine', 'Grotz'), ('Yurika', 'Sema'), ('Sheng Nan', 'Sun'), ('Lucie', 'Safarova'), ('Jitka', 'Kleisnerova'), ('Carolina', 'Escamilla'), ('Tapiwa', 'Marobela'), ('Punam', 'Reddy'), ('Katia', 'Sabate Orera'), ('Shana', 'Claes'), ('Chrissie', 'Seredni'), ('Yui', 'Nagasawa'), ('Marcela', 'Vojtiskova'), ('Seul Ki', 'Chin'), ('Nina', 'Munch Soegaard'), ('Hannah', 'Grady'), ('Karen', 'Castiblanco'), ('Angelique', 'Kerber'), ('Lauren', 'Lui'), ('Rana', 'Tharwat Hafez'), ('Nicole', 'Grunwald'), ('Ana', 'Veselinovic'), ('Sanaa', 'Bhambri'), ('Diana Andreea', 'Gae'), ('Ana', 'Beltran Trigueros'), ('Barbora', 'Bozkova'), ('Camila', 'Belassi'), ('Violette', 'Huck'), ('Megumi', 'Fukui'), ('Rita', 'Gouveia'), ('Mihaela', 'Buzarnescu'), ('Liset', 'Brito Herrera'), ('Paulina', 'Jorquera'), ('Ekaterina', 'Makarova'), ('Dessislava', 'Mladenova'), ('Sanaz', 'Marand'), ('Cristina', 'Greco Naccarato'), ('Cagla', 'Urcu'), ('Liege', 'Vieira'), ('Chang', 'Xu'), ('Jessica', 'Sweeting'), ('Yi Fan', 'Xu'), ('Eloisa Maria', 'Compostizo De Andres'), ('Karina', 'Porushkevich'), ('Ornella', 'Gentile'), ('Valeria', 'Casillo'), ('Bianca Ioana', 'Bonifate'), ('Michelle', 'Russ'), ('Monika', 'Lalewicz'), ('Amandine', 'Cazeaux'), ('Fatima', 'El Allami'), ('Simonetta', 'Miori'), ('Gabriela', 'Roux'), ('Sherazad', 'Benamar'), ('Sherazad', 'Reix'), ('Zora', 'Vlckova'), ('Naomi', 'Cavaday'), ('Nathalia', 'Rossi'), ('Maria Eugenia', 'Roca Recarey'), ('Lauren', 'Jones'), ('Roxane', 'Vaisemberg'), ('Ivana', 'Belejova'), ('Petra', 'Vogel'), ('Majdouline', 'Akrate'), ('Laura', 'Sadria'), ('Ia', 'Jikia'), ('Alessandra', 'Caprara'), ('Guadalupe', 'Moreno'), ('Lucie', 'Sipkova'), ('Xenia', 'Samoilova'), ('Kotomi', 'Takahata'), ('Stephanie', 'Theiler'), ('Maria', 'Prishlyak'), ('Grace', 'Leake'), ('Ioana Alexandra', 'Oprea'), ('Sanne', 'Bakker'), ('Katerina', 'Vankova'), ('Kristy', 'Frilling'), ('Tatiana', 'Bua'), ('Anastasia', 'Kontratevidi'), ('Chane', 'Hines'), ('Julia', 'Gavenko'), ('Yuuki', 'Tanaka'), ('Petra', 'Kvitova'), ('Leticia', 'Costas'), ('Sandra', 'Roma'), ('Nina', 'Mujezinovic'), ('Stella', 'Papaspyrou'), ('Chinami', 'Ogi'), ('Martina', 'Balogova'), ('Xinyun', 'Han'), ('Nicole', 'Riner'), ('Lara', 'Meccico'), ('Mai', 'Iwasaki'), ('Oksana', 'Kalashnikova'), ('Dipti', 'Srivastava'), ('Claudia', 'Mercado'), ('Margarita', 'Lazareva'), ('Shaozhuo', 'Liu'), ('Ana Maria', 'Chavez Franco'), ('Arantxa', 'Rus'), ('Ekaterina', 'Kamendova'), ('Monika', 'Tumova'), ('Gabriella', 'Boboc'), ('Ganna', 'Lukianchykova'), ('Sofia', 'Medina'), ('Ekaterina', 'Abaeva'), ('Andressa', 'Garcia'), ('Giulia', 'Bruzzone'), ('Catia', 'Rodrigues'), ('Danielle', 'Mills'), ('Flavia', 'Borges'), ('Misaki', 'Doi'), ('Veronika', 'Domagala'), ('Cindy', 'Chala'), ('Ksenia', 'Pervak'), ('Bianca', 'Botto'), ('Marianna', 'Natali'), ('Carolina', 'Orsi'), ('Aleksandra', 'Vukadinovic'), ('Elixane', 'Lechemia'), ('Sonya', 'Dayal'), ('Francesca', 'Campigotto'), ('Cristina Bianca', 'Danaila'), ('Tereza', 'Budilova'), ('Gemma', 'Praditngam'), ('Ekaterine', 'Gorgodze'), ('Dejana', 'Raickovic'), ('Alena', 'Gerasimova'), ('Quirine', 'Lemoine'), ('Chieh Yu', 'Hsu'), ('Anastasiya', 'Vasylyeva'), ('Alexia', 'Quartetto'), ('Joanna', 'Bougon'), ('Kristyna', 'Pliskova'), ('Elena', 'Bogdan'), ('Fiorella', 'Jerardino'), ('Julie', 'Gonzalez Rodriguez'), ('Alejandra', 'Barragan'), ('Renata', 'Bakieva'), ('Ashley', 'Krysiak'), ('Sarah Rebecca', 'Sekulic'), ('Na Lae', 'Han'), ('Natali', 'Coronel'), ('Kristyna', 'Hancarova'), ('Doroteja', 'Eric'), ('Chanel', 'Simmonds'), ('Kobkanok', 'Upapong'), ('Annie', 'Sullivan'), ('Jenny Thuy', 'Le'), ('Xenia', 'Knoll'), ('Francisca', 'Matos'), ('Christina', 'Madenoglou'), ('Alexandra', 'Avirvarei'), ('Georgina', 'Fedosenkova'), ('Alicia', 'Doms Golobart'), ('Amy', 'Hoburn'), ('Monica', 'Turewicz'), ('Martina', 'Zerbola'), ('Mashaal', 'Hameed'), ('Sabrina', 'Dos Reis'), ('Maria Sol', 'Carrasco'), ('Ruxandra', 'Ababii'), ('Daniella', 'Patton'), ('Veronika', 'Zavodska'), ('Briar', 'Preston'), ('Gabriela', 'Ce'), ('Amanda', 'Rodgers'), ('Constanze', 'Lotz'), ('Paula', 'Mocete Talamantes'), ('Verena', 'Gantschnig'), ('Ainhoa', 'Atucha Gomez'), ('Katarzyna', 'Kossowska'), ('Julia', 'Stamatova'), ('Vorranavaporn', 'Vorrarattanamongkol'), ('Michaela', 'Jasenakova'), ('Agustina Sol', 'Eskenazi'), ('Maja', 'Mladenovic'), ('Sandra', 'Garriga Catala'), ('Rita', 'Vilaca'), ('Zanmarie', 'Pienaar'), ('Julia', 'Kimmelmann'), ('Martina', 'Trevisan'), ('Charitomeni', 'Matoula'), ('Andreea', 'Istrate'), ('Sowjanya', 'Bavisetti'), ('Gabrielle', 'Moxey'), ('Viktoryia', 'Kisialeva'), ('Sarahi', 'Garcia Carrera'), ('Rachel', 'Girard'), ('Laura', 'Robson'), ('Kate', 'Vialle'), ('Anna', 'Montserrat Sanchez'), ('Elena Teodora', 'Cadar'), ('Carol', 'Augustine Benito'), ('Kamila', 'Pavelkova'), ('Arantxa', 'Sanchez'), ('Ana Sofia', 'Sanchez'), ('Julia', 'Wachaczyk'), ('Ecaterina', 'Oproiu'), ('Snigdha', 'Padamata'), ('Rona', 'Berisha'), ('Olga', 'Doroshina'), ('So Ra', 'Lee'), ('Brandy', 'Mina'), ('Natalie', 'Novakova'), ('Storm', 'Sanders'), ('Alexandra', 'Martinez'), ('Ysaline', 'Bonaventure'), ('Barbora', 'Trestikova'), ('Stefania', 'Hristov'), ('Ana Maria', 'Crisan'), ('Elpida', 'Papanelopoulou'), ('Tereza', 'Jankovska'), ('Rebecca', 'Andrade'), ('Kelly', 'Williford'), ('Tina', 'Rupert'), ('Mia Nicole', 'Eklund'), ('Bernarda', 'Pera'), ('Montserrat', 'Alonso'), ('Rosalie', 'Van Der Hoek'), ('Hedda', 'Odegaard'), ('Samira', 'Radjaa'), ('Zuzanna', 'Maciejewska'), ('Saumya', 'Vig'), ('Marie', 'Benoit'), ('Iga', 'Odrzywolek'), ('Shakhlo', 'Saidova'), ('Irina', 'Khromacheva'), ('Yuliya', 'Lysa'), ('Sophie', 'Blom'), ('Jennifer', 'Zerbone'), ('Kristina', 'Chasovskikh'), ('Maria Camila', 'Trujillo Hoyos'), ('Karina', 'Rovira'), ('Teodora Adina', 'Ardeleanu'), ('Yasmine', 'Rashad'), ('Judit', 'Vives Joan'), ('Sarah Beth', 'Askew'), ('Yasmine', 'Xantos'), ('Lea', 'Tholey'), ('Hikari', 'Yamamoto'), ('Ines Miren', 'De Pablo'), ('Stuti', 'Singh Tomar'), ('Naomi', 'Totka'), ('Polina', 'Bezsmertnaya'), ('Hannah', 'King'), ('Gabriele', 'Bertasiute'), ('Rebecca', 'Smaller'), ('Busra', 'Kayrun'), ('Stephani', 'Rodriguez'), ('Raquel', 'Montalvo'), ('Oana', 'Irimescu'), ('Taylor', 'Townsend'), ('Carmen', 'Blasco Robaina'), ('Giulia', 'Della Cioppa'), ('Nadege', 'Jorda'), ('Beatriz', 'Haddad Maia'), ('Nelise', 'Verster'), ('Eleonore', 'Barrere'), ('Anastasia', 'Prokopenko'), ('Dzina', 'Milovanovic'), ('Isabelle', 'Wallace'), ('Katelyn', 'Jackson'), ('Polina', 'Novoselova'), ('Maite', 'Cano'), ('Ria', 'Vaidya'), ('Ana Lorena', 'Garcia Navas'), ('Aayushi', 'Chouhan'), ('Ivona', 'Cudina'), ('Karina', 'Gurgenyan'), ('Maria', 'Patrascu'), ('Denisa', 'Chereches'), ('Mirabelle', 'Njoze'), ('Vasanti', 'Shinde'), ('Amanda', 'Schneider'), ('Katharina', 'Herpertz'), ('Tayisiya', 'Morderger'), ('Tamara', 'Tomic'), ('Maria Fernanda', 'Herazo Gonzalez'), ('Andra Maria', 'Nitescu'), ('Micheline', 'Aubuchon'), ('Ilayda', 'Yondem'), ('Birgit', 'Burk'), ('Kanako', 'Osafune'), ('Anastasiya', 'Komardina'), ('Nina', 'Holanova'), ('Jil Belen', 'Teichmann'), ('Francesca', 'Di Lorenzo'), ('Natsuho', 'Arakawa'), ('Emerald', 'Able'), ('Manca', 'Pislak'), ('Irys', 'Ekani'), ('Veronica', 'Miroshnichenko'), ('Martina', 'Capurro Taborda'), ('Mariam', 'Bolkvadze'), ('Diana', 'Valverde'), ('Do Hee', 'Bae'), ('Daniela', 'Morales Beckmann'), ('Ioana Diana', 'Pietroiu'), ('Luisa Fernanda', 'Echeverry Rodriguez'), ('Mayuka', 'Aikawa'), ('Nicole', 'Frenkel'), ('Daria', 'Kruzhkova'), ('Alejandra', 'Tamayo Gomez'), ('Tereza', 'Koplova'), ('Chiara', 'Lommer'), ('Laura', 'Illanes'), ('Olga', 'Fridman'), ('Ana Paula', 'Leal'), ('Shiraz', 'Bronstein'), ('Nicole', 'Bunea'), ('Charlotte', 'Robillard Millette'), ('Ashley', 'Kratzer'), ('Momoka', 'Chimura'), ('Anna', 'Slovakova'), ('Ai Qi', 'Chen'), ('Jiaying', 'He'), ('Ysabel', 'Gonzalez Rico'), ('Andreea', 'Stanescu'), ('Marketa', 'Vondrousova'), ('Ecaterina', 'Ivasco'), ('Ivon', 'Mihaleva'), ('Jasmine', 'Boyd'), ('Andrea', 'Arratia Fernandez'), ('Kayla', 'Day'), ('Ekaterina', 'Davletova'), ('Irina', 'Cantos Siemers'), ('Oceane', 'Mialon'), ('Watsachol', 'Sawasdee'), ('Ellen', 'Ashley'), ('Mila', 'Mejic'), ('Natalia', 'Nikolopoulou'), ('Marta', 'Del Pino Maturano'), ('Jayci', 'Goldsmith'), ('Yang', 'Lee'), ('Isabella', 'Tcherkes Zade'), ('Mara', 'Vidal'), ('Taylor', 'Johnson'), ('Julia', 'Vulpio'), ('Dagmar', 'Zdrubecka'), ('Olga', 'Danilovic'), ('Xiyu', 'Wang'), ('Lina', 'Shokry'), ('Ya Hsin', 'Lee'), ('Ruxandra', 'Schech'), ('Yasmina', 'Karimjanova'), ('Lara', 'Biter'), ('Najah', 'Dawson'), ('Giulia', 'Morlet'), ('Matilde', 'Mariani'), ('Isabella', 'Nunez'), ('Betina', 'Tokac'), ('Noa', 'Krznaric')]

===== Eval Round 460 =====
Database         : wta_1
Prediction SQL   : SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.ranking_points DESC LIMIT 1
Gold SQL         : SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Serena', 'USA')]
Gold Output      : [('USA', 'Julia')]

===== Eval Round 461 =====
Database         : wta_1
Prediction SQL   : SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings ORDER BY ranking_points DESC LIMIT 1)
Gold SQL         : SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Serena', 'USA')]
Gold Output      : [('USA', 'Julia')]

===== Eval Round 462 =====
Database         : wta_1
Prediction SQL   : SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(2016,)]
Gold Output      : [(2016,)]

===== Eval Round 463 =====
Database         : wta_1
Prediction SQL   : SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(2016,)]
Gold Output      : [(2016,)]

===== Eval Round 464 =====
Database         : wta_1
Prediction SQL   : SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Angelique Kerber', 3715)]
Gold Output      : [('Angelique Kerber', 3715)]

===== Eval Round 465 =====
Database         : wta_1
Prediction SQL   : SELECT T1.winner_name, T2.winner_rank_points FROM matches AS T1 JOIN rankings AS T2 ON T1.winner_id = T2.player_id GROUP BY T1.winner_id ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: T2.winner_rank_points
Gold Output      : [('Angelique Kerber', 3715)]

===== Eval Round 466 =====
Database         : wta_1
Prediction SQL   : SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
Gold SQL         : SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Serena Williams',)]
Gold Output      : [('Serena Williams',)]

===== Eval Round 467 =====
Database         : wta_1
Prediction SQL   : SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
Gold SQL         : SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Serena Williams',)]
Gold Output      : [('Serena Williams',)]

===== Eval Round 468 =====
Database         : wta_1
Prediction SQL   : SELECT loser_name, winner_name FROM matches ORDER BY minutes DESC LIMIT 1
Gold SQL         : SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Angelique Kerber', 'Petra Kvitova')]
Gold Output      : [('Petra Kvitova', 'Angelique Kerber')]

===== Eval Round 469 =====
Database         : wta_1
Prediction SQL   : SELECT T1.winner_name, T2.loser_name FROM matches AS T1 JOIN matches AS T2 ON T1.match_num = T2.match_num ORDER BY T1.minutes DESC LIMIT 1
Gold SQL         : SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : False
Pred Output      : [('Petra Kvitova', 'Agnieszka Radwanska')]
Gold Output      : [('Petra Kvitova', 'Angelique Kerber')]

===== Eval Round 470 =====
Database         : wta_1
Prediction SQL   : SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name
Gold SQL         : SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Mirjana', 186.76587795765877), ('Tamarine', 121.82273948075202), ('Katarina', 196.02280912364947), ('Jana', 178.44725111441306), ('Lisa', 101.55520833333334), ('Maureen', 1070.21875), ('Serena', 14.654294803817603), ('Nicole', 153.08190476190475), ('Virginie', 114.47024504084014), ('Patty', 385.8135593220339), ('Nadia', 61.8536866359447), ('Cara', 236.07412398921832), ('Alexandra', 281.5547667342799), ('Paola', 132.12638580931264), ('Kveta', 159.62397820163488), ('Jelena', 183.76478318002628), ('Anne', 220.68534906588005), ('Brenda', 128.8655462184874), ('Kimiko', 95.03465982028241), ('Yayuk', 114.78806907378336), ('Janette', 240.5306603773585), ('Romana', 402.49931972789113), ('Katerina', 205.56581986143186), ('Lindsay', 275.6055900621118), ('Svetlana', 428.6868029739777), ('Venus', 32.984862819299906), ('Jill', 121.9579326923077), ('Elena', 263.2128174123337), ('Katalin', 331.93949394939494), ('Stephanie', 170.97505422993493), ('Liezel', 284.8326771653543), ('Sophie', 576.5778364116095), ('Greta', 274.5718623481781), ('Elizabeth', 1140.1973684210527), ('Kyra', 263.821608040201), ('Francesca', 117.2057942057942), ('Anabel', 144.3264367816092), ('Maria Jose', 256.4249699879952), ('Daniela', 52.9563679245283), ('Nuria', 228.1888198757764), ('Catalina', 260.55779427359494), ('Marion', 105.36299435028249), ('Anne', 205.10836762688615), ('Elena', 237.35254691689008), ('Eleni', 189.36174863387978), ('Maria Elena', 194.2392065344224), ('Roberta', 150.96681415929203), ('Bethanie', 146.59709379128137), ('Svetlana', 35.72872340425532), ('Samantha', 116.44005102040816), ('Vera', 81.09357541899442), ('Iveta', 117.95684523809524), ('Zuzana', 273.0369928400955), ('Renata', 251.02574002574002), ('Klara', 137.5751708428246), ('Maria', 42.25396825396825), ('Jelena', 64.19160104986877), ('Casey', 242.36818181818182), ('Melinda', 169.13578500707214), ('Stanislava', 312.54158964879855), ('Flavia', 158.83442265795208), ('Eva', 235.0951008645533), ('Anais', 447.1293900184843), ('Edina', 211.67325428194994), ('Barbora', 102.04657933042212), ('Arantxa', 268.76683937823833), ('Carly', 318.69978858350953), ('Anastasia', 215.67872340425532), ('Vera', 141.8237951807229), ('Maria', 85.55817610062893), ('Yuliya', 238.01381909547737), ('Claudine', 383.6413199426112), ('Marie Eve', 300.56296296296296), ('Chia Jung', 359.3764705882353), ('Jie', 114.05571428571429), ('Sofia', 147.30172413793105), ('Zuzana', 295.0), ('Mervana', 337.5292682926829), ('Severine', 218.4701086956522), ('Anna Lena', 168.40409683426444), ('Shuai', 112.48686030428769), ('Emily', 457.0421511627907), ('Nicole', 417.51063829787233), ('Abigail', 322.00815217391306), ('Sesil', 162.3505747126437), ('Anna', 185.06484641638227), ('Evgenia', 414.66339869281046), ('Monique', 363.6527293844367), ('Aiko', 230.80138169257341), ('Anastasia', 248.8754098360656), ('Michaella', 185.3469387755102), ('Alona', 1175.0625), ('Marta', 187.96103896103895), ('Na', 82.13112391930835), ('Sania', 177.22695035460993), ('Ana', 54.12816188870152), ('Yvonne', 168.8637083993661), ('Shahar', 166.41358024691357), ('Lucie', 63.76451612903226), ('Pauline', 173.570987654321), ('Alize', 150.6958762886598), ('Mathilde', 225.54984894259817), ('Rika', 290.0614657210402), ('Aravane', 200.97080291970804), ('Sarah', 417.0098765432099), ('Kateryna', 184.2012012012012), ('Ivana', 297.1693989071038), ('Ekaterina', 200.24960753532181), ('Laura', 231.16949152542372), ('Emma', 412.71140939597313), ('Yung Jan', 166.6586270871985), ('Alexa', 278.57538994800694), ('Su Wei', 217.2493188010899), ('Vania', 185.75), ('Galina', 185.0057224606581), ('Tsvetana', 131.02074074074073), ('Kathrin', 291.4792817679558), ('Lourdes', 188.06095041322314), ('Akgul', 215.25185185185185), ('Elena', 110.90505359877488), ('Olga', 205.99685534591194), ('Jarmila', 149.46360759493672), ('Victoria', 92.10391822827938), ('Zi', 291.11032028469754), ('Alberta', 343.22432701894314), ('Kirsten', 178.02928257686676), ('Kaia', 127.06775067750678), ('Yaroslava', 211.41240310077518), ('Melanie', 385.1445182724253), ('Kristina', 167.9602510460251), ('Naomi', 582.2777777777778), ('Romina', 283.63246554364474), ('Vasilisa', 563.1287878787879), ('Agnieszka', 122.19587628865979), ('Ahsha', 728.5), ('Lauren', 420.47591522157995), ('Stephanie', 202.60919540229884), ('Varvara', 168.25584795321637), ('Olga', 295.493487698987), ('Tamira', 135.88910505836577), ('Andreja', 424.64521739130436), ('Madison', 268.11610486891385), ('Sandra', 294.9404958677686), ('Alla', 217.85922330097088), ('Aleksandra', 257.66568483063327), ('Jessica', 441.5659229208925), ('Mariya', 281.871335504886), ('Timea', 172.28095238095239), ('Andrea', 176.82479338842975), ('Angelique', 140.94803149606298), ('Raluca', 304.4619771863118), ('Dominika', 104.85343228200371), ('Caroline', 50.034274193548384), ('Agnes', 218.52747252747253), ('Karin', 252.99188311688312), ('Anastasia', 117.10590631364562), ('Olga', 208.31903945111492), ('Tatjana', 274.4980988593156), ('Ayumi', 191.73745173745175), ('Julia', 188.6425855513308), ('Ekaterina', 128.51776649746193), ('Sara', 197.24117647058824), ('Petra', 221.0070521861777), ('Ashley', 453.49585062240664), ('Ekaterina', 351.4223385689354), ('Monica', 205.06020558002936), ('Sabine', 203.5871080139373), ('Sorana', 213.75043630017453), ('Alisa', 266.65635738831617), ('Evgeniya', 258.0659340659341), ('Magdalena', 188.7824561403509), ('Yanina', 150.74395161290323), ('Petra', 75.06681034482759), ('Carla', 155.3848797250859), ('Jelena', 449.3012939001848), ('Marina', 172.7581818181818), ('Urszula', 229.35687022900763), ('Eva', 380.8822463768116), ('Julie', 284.07964601769913), ('Stefanie', 241.69011406844106), ('Melanie', 223.3237885462555), ('Kristie', 445.18918918918916), ('Gail', 526.2644836272041), ('Mariana', 260.6950998185118), ('Anastasia', 321.59166666666664), ('Shuai', 237.83595113438045), ('Asia', 453.43392070484583), ('Coco', 270.5896860986547), ('Patricia', 324.9109848484849), ('Isabella', 523.5121293800539), ('Christina', 228.9607390300231), ('Kristina', 263.1496062992126), ('Chanelle', 195.57309941520467), ('Olivia', 359.037527593819), ('Emelyn', 672.730407523511), ('Anastasija', 192.35827664399093), ('Michelle', 168.98067632850243), ('Ajla', 302.84831460674155), ('Petra', 188.66216216216216), ('Tamaryn', 386.7025316455696), ('Arantxa', 179.59712230215828), ('Lenka', 391.9670781893004), ('Vitalia', 293.81748071979433), ('Polona', 173.26180257510728), ('Lucie', 169.75233644859813), ('Corinna', 356.8219696969697), ('Lauren', 615.8323699421966), ('Irena', 288.74423480083857), ('Kinnie', 606.1467576791808), ('Claire', 406.7672131147541), ('Silvia', 298.4636510500808), ('Darya', 422.06724137931036), ('Lenka', 430.4562937062937), ('Katarzyna', 396.4295302013423), ('Agnes', 501.8861283643892), ('Alexandra', 274.33022388059703), ('Kristina', 300.7413043478261), ('Vesna', 240.0448979591837), ('Masa', 263.1043307086614), ('Regina', 289.60283687943263), ('Laura', 242.01152737752162), ('Heidi', 417.44323483670297), ('Kai Chen', 272.08855291576674), ('Yurika', 322.17758620689654), ('Xinyun', 309.35767790262173), ('Chun Mei', 692.390625), ('Jing Jing', 369.1620469083156), ('Yana', 725.9122807017544), ('Ksenia', 229.89227166276348), ('Sloane', 259.63589743589745), ('Heather', 167.50632911392404), ('Bojana', 177.8061797752809), ('Anna', 239.51930501930502), ('Sharon', 296.5792682926829), ('Alison', 263.70631067961165), ('Margalita', 325.5912596401028), ('Beatriz', 463.1709741550696), ('Irina Camelia', 285.84388185654007), ('Simona', 145.9185185185185), ('Misaki', 208.95263157894738), ('Johanna', 261.31778929188255), ('Kurumi', 165.96132596685084), ('Noppawan', 374.93926247288505), ('Andrea', 270.69384615384615), ('Jamie', 381.56892230576443), ('Chelsey', 719.3061224489796), ('Beatrice', 676.8051118210863), ('Shelby', 293.45733788395904), ('Irina', 358.4449244060475), ('Mandy', 299.5691176470588), ('Rebecca', 414.0690690690691), ('Sally', 529.583908045977), ('Sheng Nan', 451.8657487091222), ('Yi Miao', 418.2566137566138), ('Zarina', 222.81428571428572), ('Daria', 314.1638795986622), ('Junri', 262.30884808013354), ('Arina', 344.75), ('Caroline', 217.325), ('Lesia', 205.17590361445784), ('Lauren', 208.0751879699248), ('Ana', 293.9810495626822), ('Fatma', 648.2984054669704), ('Madison', 219.54063604240284), ('Monica', 222.481884057971), ('Mona', 273.57517899761336), ('Iryna', 419.9982269503546), ('Nicha', 515.3191489361702), ('Estrella', 347.34943639291464), ('Maria Teresa', 359.81081081081084), ('Nadia', 702.8116438356165), ('Fatima', 673.7509157509157), ('Eva', 460.72909698996654), ('Maria Joao', 486.6092544987147), ('Jasmin', 445.3071553228621), ('Naomi', 381.3239130434783), ('Lenka', 378.54046997389037), ('Irina', 445.6770072992701), ('Ksenia', 447.35916824196596), ('Ellen', 754.8923076923077), ('Sandra', 793.5132075471698), ('Anna', 360.4993234100135), ('Tadeja', 343.0985324947589), ('Nastja', 593.1772853185596), ('Melanie', 440.77246653919696), ('Tereza', 490.3264705882353), ('Tina', 382.1750380517504), ('Karolina', 344.97713097713097), ('Ekaterina', 374.29928315412184), ('Pemra', 465.24962852897477), ('Ipek', 655.8983666061706), ('Cagla', 311.87854251012146), ('Ling', 418.81925343811395), ('Alexandra', 367.9034941763727), ('Amra', 415.9078341013825), ('Ksenia', 423.12334801762114), ('Nigina', 376.7617554858934), ('Sabina', 376.1625), ('So Jung', 514.1732026143791), ('Ye Ra', 431.3144424131627), ('Mi', 554.3953934740883), ('Sacha', 340.2890442890443), ('Varatchaya', 450.4642082429501), ('Nudnida', 436.66881028938906), ('Bianca', 411.2672955974843), ('Lina', 847.7010869565217), ('Claire', 476.3121693121693), ('Nina', 250.36305732484075), ('Dia', 383.7832512315271), ('Michaela', 511.1923076923077), ('Timea', 201.32704402515722), ('Silvia', 673.017094017094), ('Laura', 396.82570162481534), ('Kristyna', 389.73932584269664), ('Liana Gabriela', 387.87113402061857), ('Martina', 575.696335078534), ('Nikola', 485.7513966480447), ('Basak', 587.9803278688524), ('Malou', 947.3333333333334), ('Yi Fan', 381.5512572533849), ('Alina', 1060.0184049079755), ('Sachie', 368.26881720430106), ('Natalie', 394.5745222929936), ('Yulia', 262.494623655914), ('Petra', 360.89268292682925), ('Galina', 449.05308219178085), ('Vanessa', 371.69403973509935), ('Shiho', 1070.5714285714287), ('Cory Ann', 406.5511363636364), ('Habiba', 1051.623188405797), ('Liga', 567.9464544138929), ('Mariana', 1211.258064516129), ('Olga', 525.3591954022988), ('Kyung Mi', 533.433770014556), ('Maria', 461.9377990430622), ('Maria Fernanda', 373.0431137724551), ('Diana', 472.8539007092199), ('Darija', 464.95631067961165), ('Sandra', 494.09510086455333), ('Magdalena', 571.8631346578367), ('Klaudia', 780.7905027932961), ('Ayu Fani', 479.5530612244898), ('Daniella', 625.4092920353983), ('Karolina', 406.56919642857144), ('Lina', 371.00802568218296), ('Rushmi', 573.8729603729604), ('Andrea', 496.8243243243243), ('Nikola', 614.3153526970955), ('Madalina', 324.63613231552165), ('Chin Wei', 385.2651515151515), ('Marrit', 783.1711711711712), ('Erika', 397.3320537428023), ('Teodora', 411.579476861167), ('Lavinia', 612.736), ('Raquel', 578.120792079208), ('Kirsten', 1084.4173913043478), ('Chieh Yu', 533.9586374695864), ('Ksenia', 527.0520547945206), ('Kyra', 727.8778280542987), ('Sung Hee', 570.6993736951983), ('Vlada', 585.0383795309168), ('Sandra', 551.0725593667546), ('Akiko', 466.9746434231379), ('Andrea', 553.5460122699386), ('Camila', 647.9409090909091), ('Maria', 351.9477756286267), ('Anna', 626.9345372460497), ('Amanda', 775.6847826086956), ('Leticia', 481.3229166666667), ('Alexis', 589.8897637795276), ('Natasa', 666.2853403141361), ('Amanda', 684.5194444444444), ('Alisa', 933.8396226415094), ('Sofia', 461.0702987697715), ('Maria', 680.1504424778761), ('Florencia', 364.22522522522524), ('Catherine', 969.9928571428571), ('Ximena', 646.3770491803278), ('Nungnadda', 537.577922077922), ('Tetiana', 437.4119658119658), ('Lara', 284.14021164021165), ('Barbara', 697.5), ('An Sophie', 460.8932038834951), ('Alison', 277.85227272727275), ('Shuko', 421.44179894179894), ('Sarah', 367.33684210526314), ('Conny', 390.0), ('Samantha', 699.2705882352941), ('Julia', 543.4917012448133), ('Johanna', 256.5040431266846), ('Kiki', 287.71625344352617), ('Camila', 316.69181034482756), ('Alize', 412.9482288828338), ('Tetyana', 398.83478260869566), ('Hilda', 673.6635071090047), ('Anna Giulia', 428.5496828752643), ('Aleksandra', 215.03548387096774), ('Vanda', 696.4126984126984), ('Reka Luca', 323.1388101983003), ('Anastasia', 460.7960687960688), ('Ani', 574.4025641025642), ('Silvia', 1013.3469387755102), ('Paula', 374.0572207084469), ('Nina', 1181.1190476190477), ('Tatia', 1075.0), ('Valeria', 389.49271844660194), ('Kamilla', 1162.8301886792453), ('Valeria', 339.99632352941177), ('Eugenie', 421.3669467787115), ('Alexandra', 502.8416149068323), ('Zoe Gwen', 935.081081081081), ('Victoria', 465.5233333333333), ('Jana', 262.31929824561405), ('Nicole', 653.0375), ('Yi Jing', 656.8787276341948), ('Saisai', 297.39032258064515), ('Erika', 397.39929328621906), ('Yue Yue', 444.96190476190475), ('Alexandra', 435.7653846153846), ('Bibiane', 550.1941544885177), ('Ashleigh', 331.3681818181818), ('Bojana', 513.439024390244), ('Ons', 435.1470588235294), ('Julia', 404.706390328152), ('Karen', 674.4780600461894), ('Ines', 546.3460559796438), ('Yuliana', 694.0), ('Maria', 501.8732943469786), ('Nadia', 861.640625), ('Elitsa', 418.39748953974896), ('Jessica', 386.18394648829434), ('Garbine', 229.3774193548387), ('Annika', 265.79487179487177), ('Karen', 675.4691943127962), ('Laura', 481.1577909270217), ('Annalisa', 583.9347826086956), ('Jasmina', 513.1592689295039), ('Csilla', 894.8397790055249), ('Dinah', 268.05945945945945), ('Tara', 475.2979683972912), ('Grace', 389.61876832844575), ('Richel', 246.19871794871796), ('Chi Chi', 464.1367781155015), ('Barbara', 460.1609195402299), ('Sandra', 510.56216216216217), ('Nicole', 408.45185185185187), ('Jana', 568.4027149321267), ('Mallory', 143.48235294117646), ('Nastassja', 554.5290322580645), ('Valentyna', 368.14331210191085), ('Carina', 416.3666666666667), ('Rebecca', 511.37888198757764), ('Varvara', 573.6621621621622), ('Qiang', 383.4714587737844), ('Ekaterine', 553.9434782608696), ('Elina', 203.95604395604394), ('Jennifer', 477.20512820512823), ('Samantha', 424.93981481481484), ('Victoria', 540.4605263157895), ('Julia', 405.8921568627451), ('Donna', 223.50900900900902), ('Maria', 393.4439834024896), ('Hyun Hui', 729.0671936758894), ('So Ra', 572.2654545454545), ('Luksika', 284.22813688212926), ('Ying Ying', 403.8775981524249), ('Belinda', 499.7090909090909), ('Margarita', 371.1981566820277), ('Wing Yau Venise', 585.2589641434263), ('Yuxuan', 545.449074074074), ('Stefania', 618.7228525121556), ('Giulia', 576.740350877193), ('Erika', 792.7021696252466), ('Marina', 513.1254019292604), ('Natalia', 589.568306010929), ('Estelle', 571.8520084566596), ('Ana', 556.0942028985507), ('Federica', 626.0774647887324), ('Alison', 579.0348162475822), ('Neda', 708.8378378378378), ('Alexia', 694.5176470588235), ('Vivienne', 659.2103004291846), ('Eleni', 742.5714285714286), ('Afroditi', 1155.0392156862745), ('Stamatia', 841.8387096774194), ('Stephanie', 541.0248618784531), ('Hulya', 888.0055096418732), ('Veronika', 447.5016501650165), ('Anna', 531.44921875), ('Olga', 614.2371794871794), ('Evelyn', 471.5439093484419), ('Anna', 528.8242894056848), ('Yumi', 784.9147465437788), ('Hao Ching', 1153.936507936508), ('Chi Fan', 1039.3902439024391), ('Wen Hsin', 440.35214446952597), ('Remi', 494.6111111111111), ('Kumiko', 488.76107382550333), ('Laura Ioana', 516.1982942430703), ('Giulia', 527.75), ('Federica', 637.367139959432), ('Chanel', 343.2835365853659), ('Megan', 622.6036585365854), ('Nicole', 608.3569131832797), ('Lena', 500.8991354466859), ('Katie', 627.6082004555809), ('Diana', 550.6178707224335), ('Elena', 517.8571428571429), ('Alexandra', 806.576), ('Mihaela', 376.7356115107914), ('Natalie', 582.6028368794326), ('Alice', 625.4850948509485), ('Viktoriya', 598.6225165562914), ('Patrycja', 601.0849673202614), ('Despina', 665.686684073107), ('Julia', 448.98591549295776), ('Claudia', 661.1353965183753), ('Yi', 693.3742802303263), ('Akari', 704.9618138424821), ('Aki', 710.9617224880383), ('Oksana', 533.9652351738241), ('Jacqueline', 545.6203966005666), ('Natasha', 847.62), ('Justyna', 585.8517745302714), ('Ema', 734.71), ('Yuliya', 487.0730593607306), ('Elixane', 579.5214723926381), ('Lyudmyla', 382.82479784366575), ('Valentine', 691.1423076923077), ('Stephanie', 398.5627906976744), ('Fiona', 1041.7790697674418), ('Maryna', 276.67868852459014), ('Gabriela', 465.2834890965732), ('Eleanor', 1067.7619047619048), ('Lara', 731.8966666666666), ('Nina', 626.2072368421053), ('Chen', 524.7444668008048), ('Jin A', 492.8915187376726), ('Zuzana', 518.3550724637681), ('Shivika', 935.2322946175638), ('Chiaki', 437.73858921161826), ('Akiko', 504.54647887323944), ('Irina', 522.2766666666666), ('Natalia', 600.1), ('Gioia', 567.8518518518518), ('Yasmin', 688.6819923371647), ('Ting Fei', 739.7727272727273), ('Jessy', 967.6708860759494), ('Ana Clara', 524.9192825112108), ('Madrie', 958.0955414012739), ('Zarah', 709.625), ('Lynn', 920.6734693877551), ('Lisa', 459.5925925925926), ('Kim Alice', 762.4081632653061), ('Denisa', 419.1633466135458), ('Martina', 1000.8086419753087), ('Estelle', 714.7387387387388), ('Dijana', 669.2982456140351), ('Audrey', 576.5012531328321), ('Tereza', 418.1658878504673), ('Jade', 674.0), ('Lucy', 756.3141592920354), ('Camilla', 845.3106382978723), ('Magda', 300.3974358974359), ('Roxane', 479.51738241308794), ('Jessica', 776.3333333333334), ('Nicola', 649.751256281407), ('Natela', 566.4943396226415), ('Sina', 728.7443609022556), ('Cristina', 395.9633333333333), ('Cristina Andreea', 439.5747863247863), ('Ekaterina', 541.26953125), ('Anastasiya', 1020.3069306930693), ('Alexandra', 761.5461254612546), ('Aselya', 1181.27868852459), ('Prerna', 740.5361842105264), ('Ekaterina', 1035.1683673469388), ('Polina', 440.11052631578946), ('Yuliya', 658.64), ('Maria', 664.4128440366973), ('Gabriela', 580.905701754386), ('Sara', 1037.076923076923), ('Wan Ting', 701.4009009009009), ('Lin', 497.42124542124543), ('Misa', 466.3361111111111), ('Di', 736.1650485436893), ('Ran', 557.2607003891051), ('Isabella', 386.4824902723735), ('Vaszilisza', 859.8103448275862), ('Ani', 977.9270833333334), ('Radina', 955.7833333333333), ('Ya Hsuan', 586.865), ('Teliana', 461.06702898550725), ('Aleksandrina', 578.07962529274), ('Federica', 894.3545706371191), ('Anne Liz', 762.7606382978723), ('Alessondra', 1145.1641791044776), ('Ryann', 1069.0379746835442), ('Simone', 982.58), ('Irina', 273.65966386554624), ('Tereza', 347.5242718446602), ('Constance', 570.2723004694835), ('Rocio', 762.0532150776053), ('Veronica', 450.6966019417476), ('Manon', 537.3451776649746), ('Myrtille', 485.40168539325845), ('Kelly S', 312.7584269662921), ('Tinatin', 810.6666666666666), ('Mariana', 760.0), ('Katerina', 646.5019083969465), ('Vladimira', 823.8770833333333), ('Alicja', 855.813627254509), ('Vojislava', 555.6572164948453), ('Ria', 669.448275862069), ('Anne', 365.46034816247584), ('Tomoko', 828.09375), ('Natsumi', 490.70992366412213), ('Ana', 509.5892857142857), ('Chayenne', 593.9759036144578), ('Simona', 797.6269662921349), ('Indire', 627.7027027027027), ('Maya', 704.4129930394431), ('Sherazad', 737.1428571428571), ('Agustina', 565.3363914373089), ('Mari', 483.27852998065765), ('Justine', 443.1351888667992), ('Ayumi', 579.3763919821827), ('Yurina', 746.4803493449782), ('Romana Caroline', 669.8542372881356), ('Maria Fernanda', 447.0668058455115), ('Antonela', 1051.7096774193549), ('Marija', 521.0897009966777), ('Kaitlyn', 705.1531531531532), ('Miyabi', 447.93283582089555), ('Anastasiya', 407.95652173913044), ('Jara', 1121.767857142857), ('Georgina', 314.4109589041096), ('Raluca Elena', 672.2258064516129), ('Danielle', 643.331983805668), ('Chang', 575.4626436781609), ('Yi', 936.7860465116279), ('Shiho', 449.41388174807196), ('Michaela', 425.4343434343434), ('Anastasia', 669.2153392330383), ('Francesca', 798.2897959183673), ('Kotomi', 844.7460317460317), ('Korina', 567.0507399577167), ('Jessica', 904.7658227848101), ('Nicola', 864.8258426966293), ('Marta', 504.7244897959184), ('Celine', 619.094512195122), ('June', 1189.0), ('Krista', 522.984693877551), ('Kanae', 635.346516007533), ('Yuka', 646.8995433789954), ('Zuzana', 520.1380597014926), ('Makoto', 516.6615384615385), ('Maiko', 438.4245810055866), ('Ioana', 957.8421052631579), ('Rui', 1209.625), ('Danica', 380.609375), ('Tomoko', 1238.75), ('Danielle', 893.4137168141593), ('Yoon Young', 844.9310344827586), ('Hae Sung', 844.3856812933026), ('Etsuko', 781.3218390804598), ('Virginie', 890.4780361757106), ('Angelina', 677.4700193423598), ('Jillian', 721.14), ('Ai', 841.9686520376175), ('Maya', 682.8406862745098), ('Sakiko', 832.9585365853659), ('Kaori', 871.0790513833992), ('Nadja', 631.8181818181819), ('Gracia', 783.8288043478261), ('Amandine', 597.5297297297298), ('Katerina', 582.2656546489563), ('Veronika', 1053.8061224489795), ('Jia Jing', 682.961038961039), ('Piia', 668.2581196581197), ('Karolina', 625.8927038626609), ('Nadiya', 515.4014423076923), ('Marion', 819.0524017467249), ('Ana', 534.9107142857143), ('Tatiana', 742.8783185840708), ('Kristy', 837.7730496453901), ('Alexa', 489.4848484848485), ('Amandine', 876.4279069767442), ('Shu Ying', 1042.6802325581396), ('Martina', 696.7325301204819), ('Lisa', 538.9791271347249), ('Allie', 616.5055555555556), ('Ionela Andreea', 799.0552486187845), ('Yumi', 812.5773420479303), ('Veronica', 1273.838888888889), ('Sanaz', 703.1372549019608), ('Milana', 626.441935483871), ('Jasmina', 782.965811965812), ('Nikola', 797.2966101694915), ('Martina', 317.94520547945206), ('Libby', 899.9150326797386), ('Khristina', 1087.972972972973), ('Lauren', 848.126582278481), ('Vivian', 558.0348583877995), ('Vanesa', 579.437984496124), ('Tatiana', 562.8954081632653), ('Mailen', 410.8463541666667), ('Jasmin', 751.9386281588447), ('Tori', 841.7167381974249), ('Eugeniya', 620.6746411483253), ('Ksenia', 622.453744493392), ('Marina', 510.5781990521327), ('Julia', 742.8611111111111), ('Ganna', 628.8181818181819), ('Julia', 771.8067885117493), ('Miki', 586.2250489236791), ('Poojashree', 729.1047904191616), ('Danielle Rose', 434.68), ('Martina', 694.8266129032259), ('Danielle', 353.4719101123595), ('Ellen', 715.0604026845638), ('Tea', 1068.7457627118645), ('Svenja', 843.2311557788945), ('Ana', 878.8), ('Lucia', 757.5247524752475), ('Pilar', 740.5879828326181), ('Macall', 607.3360995850622), ('Nicole', 679.4014084507043), ('Ilona', 452.625), ('Natalia', 1137.2954545454545), ('Nanuli', 542.7168141592921), ('Avgusta', 1208.4285714285713), ('Elisabeth', 914.2566371681415), ('Marianne', 993.175925925926), ('Lena Marie', 657.8934169278997), ('Vivien', 607.2810218978102), ('Tamara', 577.373801916933), ('Keren', 643.422641509434), ('Rashmi', 1089.2100840336134), ('Rishika', 775.7269624573379), ('Dalila', 424.83561643835617), ('Anastasia', 768.875), ('Alexandra', 616.9638989169675), ('Sviatlana', 691.9934640522875), ('Aminat', 613.195652173913), ('Sofie', 724.5), ('Alexandra', 928.4886363636364), ('Sarah Rebecca', 743.6062176165804), ('Yana', 658.0246305418719), ('Marina', 604.295652173913), ('Aranza', 490.4144736842105), ('Elizabeth', 685.5346534653465), ('Andreea Roxana', 726.2657657657658), ('Jelena', 718.2207792207793), ('Polona', 833.6775), ('Cristina Madalina', 720.6428571428571), ('Lucie', 774.558521560575), ('Martina', 629.4468085106383), ('Kateryna', 344.7721518987342), ('Nuria', 713.6415094339623), ('Benedetta', 705.4688346883469), ('Amanda', 496.64941176470586), ('Iris', 866.1075949367089), ('Dariya', 1133.9636363636364), ('Alexandra', 994.2234636871508), ('Albina', 775.2734375), ('Anna', 928.7887323943662), ('Nika', 825.7028571428572), ('Carol', 564.1434426229508), ('Alejandra', 1116.6883116883116), ('Silvia', 872.2721518987341), ('Charlene', 766.4794520547945), ('Oceane', 911.1595744680851), ('Jennifer', 916.4569536423841), ('Jan', 592.5990783410139), ('Viktoryia', 845.7530864197531), ('Julia', 692.8122605363984), ('Celine', 821.992277992278), ('Andrea', 640.0540540540541), ('Doroteja', 520.9397993311037), ('Hao Chen', 680.1050228310502), ('Alyona', 496.9431818181818), ('Hirono', 860.8104265402843), ('Emi', 770.8472222222222), ('Chinami', 615.2230215827338), ('Sophie', 611.3353293413173), ('Simone', 1110.9722222222222), ('Elizabeth', 623.0714285714286), ('Gabrielle Faith', 985.7211538461538), ('Sachia', 400.8093385214008), ('Taylor', 348.2173913043478), ('Lindsey', 986.82), ('Kazusa', 772.2402912621359), ('Miyu', 594.9036697247707), ('Tereza', 1208.5535714285713), ('Giorgia', 843.6716417910447), ('Diana', 454.04788732394366), ('Nathalia', 543.031185031185), ('Alexandra', 580.3488372093024), ('Robin', 431.19607843137254), ('Katarzyna', 493.671826625387), ('Nadiya', 833.5096525096525), ('Chihiro', 870.6453488372093), ('Paula', 432.7289972899729), ('Arabela', 658.5074074074074), ('Andrea', 408.486301369863), ('Yevgeniya', 724.8712871287129), ('Isabel', 724.9178743961353), ('Morgane', 812.2753623188406), ('Anaeve', 922.2255639097745), ('Tammi', 601.906914893617), ('Khristina', 926.5274261603375), ('Nicola', 852.8411214953271), ('Sonja', 879.4974619289341), ('Viktorija', 454.87593984962405), ('Klara', 944.5289256198347), ('Michaela', 983.0747126436781), ('Anna Karolina', 345.51020408163265), ('Melis', 520.0968992248062), ('Sultan', 944.2432432432432), ('Nadezda', 868.6521739130435), ('Victoria', 425.08252427184465), ('Polina', 541.8262295081968), ('Anastasia', 660.0541871921182), ('Elizaveta', 468.5403225806452), ('Daria', 579.6666666666666), ('Stefanie', 1078.6511627906978), ('Monika', 1209.5), ('Anja', 725.3893333333333), ('Zuzana', 694.4581395348837), ('Agnese', 694.0659898477157), ('Olga', 592.1270903010034), ('Brianna', 854.3170731707318), ('Risa', 317.2361809045226), ('Riko', 495.22641509433964), ('Yuriko', 982.5393258426966), ('Mai', 550.2509960159363), ('Yuuki', 608.1309090909091), ('Mana', 689.891129032258), ('Lou', 661.2633928571429), ('Clothilde', 620.4120171673819), ('Whitney', 873.0103626943005), ('Charlotte', 1129.861111111111), ('Erin', 760.3974358974359), ('Emily J', 1041.948717948718), ('Chloe', 675.2445414847161), ('Alice', 911.6255506607929), ('Christina', 706.2669683257918), ('Ipek', 598.1783783783784), ('Naz', 1087.3823529411766), ('Olga', 668.3825136612022), ('Bermet', 717.7932330827068), ('Polina', 620.6008771929825), ('Lisanne', 673.6507936507936), ('Danka', 302.83268482490274), ('Kai Lin', 522.6561403508772), ('Caroline B', 1161.5675675675675), ('Fangzhou', 406.9281767955801), ('Chalena', 650.1367521367522), ('Elizabeth Anita Alexandria', 1006.2982456140351), ('Adriana', 361.5919540229885), ('Tatsiana', 912.1077844311377), ('Ioana Loredana', 646.0441176470588), ('Diana', 963.0), ('Cristina', 837.1969696969697), ('Camelia Elena', 803.7139479905437), ('Katy', 492.6608695652174), ('Dianne', 809.697247706422), ('Tyra', 992.4870588235294), ('Peangtarn', 514.586319218241), ('Samantha', 1040.40625), ('Paula Catalina', 868.7624113475177), ('Ingrid Esperanza', 748.6622691292876), ('Victoria', 1099.8367346938776), ('Ivette', 1136.8535031847134), ('Intissar', 1192.5454545454545), ('Fatyha', 1015.5), ('Lesley', 514.7174515235457), ('Csilla', 977.5013927576601), ('Paulina', 1022.5), ('Annie', 1042.037037037037), ('Jeannine', 767.7730496453901), ('Karolina', 790.4990925589836), ('Janina', 699.7864583333334), ('Martina', 716.4880636604775), ('Petra', 764.9778393351801), ('Natalie', 889.5686274509804), ('Anastasiya', 814.1554054054054), ('Ji Young', 833.5061082024433), ('Seung Yeon', 784.0465949820789), ('Ji Hee', 781.4336734693877), ('Mi Rae', 992.7225433526012), ('Min Hwa', 819.8425531914894), ('Na Lae', 608.7791798107255), ('Hyojung', 1069.3208955223881), ('Seo Kyung', 858.9173789173789), ('Su Jeong', 426.3886462882096), ('Christine', 841.4051724137931), ('Anna Arina', 760.639175257732), ('Viktorija', 559.3382899628252), ('Ashling', 823.0909090909091), ('Barbara', 817.0503144654089), ('Ashley', 1036.9322033898304), ('Jawairiah', 1070.5648854961833), ('Trang', 1029.3196721311476), ('Stephanie', 1085.9809523809524), ('Rita', 1115.6666666666667), ('Margarida', 987.6739130434783), ('Sofia', 1071.1351351351352), ('Maria', 1220.904761904762), ('Agata', 960.6770186335403), ('Mai', 945.8666666666667), ('Kimberley', 1077.1702127659576), ('Alice', 757.4059040590406), ('Seda', 1003.5367647058823), ('Cecilie Lundgaard', 1141.842105263158), ('Nazari', 825.7291666666666), ('Nan Nan', 890.4455445544554), ('Polina', 1004.5175438596491), ('Yvonne', 733.6431718061674), ('Chihiro', 864.5165289256198), ('Katherine', 859.8135593220339), ('Emily', 1137.5128205128206), ('Caroline', 831.92), ('Carolina', 812.9764150943396), ('Tanaporn', 1113.2325581395348), ('Camila', 916.7307692307693), ('Josie', 993.2105263157895), ('Victoria', 809.776397515528), ('Valerie', 730.6881720430108), ('Natasha', 1207.75), ('Julie', 1121.4102564102564), ('Frederikke', 1244.3333333333333), ('Demi', 983.4174757281553), ('Indy', 485.9559748427673), ('Matilda', 799.1875), ('Brenda', 827.4954954954954), ('Rebecca', 1192.6632653061224), ('Louise', 1019.520325203252), ('Valeria', 1103.178947368421), ('Beatrice', 762.469512195122), ('Agnes', 544.9512195121952), ('Marisa', 1067.3413173652696), ('Vincenza', 1214.1142857142856), ('Carolina', 622.8725868725869), ('Lisa Maria', 758.06), ('Anna Maria', 1057.1584158415842), ('Pia', 729.6136363636364), ('Sofia', 646.4561403508771), ('Valentini', 479.8914728682171), ('Brooke', 711.3770491803278), ('Arina', 988.8534031413612), ('Maftuna', 1173.75), ('Yana', 1019.9629629629629), ('Natella', 962.0188679245283), ('Priscila', 1132.0), ('Ah', 1156.340425531915), ('Ki Ryang', 1164.090909090909), ('Zi', 661.3205741626795), ('Yoshimi', 1096.9130434782608), ('Kanami', 799.9940828402367), ('Storm', 573.6708333333333), ('Belinda', 932.1125), ('Azra', 556.2303370786517), ('Nattawadee', 1177.622641509434), ('Alexandra', 981.0702247191011), ('Robyn', 1054.606896551724), ('Hana', 1083.407894736842), ('Daniella', 1062.3), ('Ana Sofia', 496.7156398104265), ('Marcela', 496.35593220338984), ('Ana Paula', 1112.0245398773006), ('Valeria', 1232.2), ('Hayley', 914.5321100917431), ('Anett', 367.2274678111588), ('Sara', 464.9339622641509), ('Miriam', 1015.6524822695036), ('Antonia', 589.1298076923077), ('Anna Lena', 287.06635071090045), ('Syna', 791.1240506329113), ('Ysaline', 458.86633663366337), ('Emma', 1184.625), ('Jessica', 1089.9884393063585), ('Daneika', 977.4539007092199), ('Sabrina', 1025.6526315789474), ('Kim', 613.8346774193549), ('Karina Ildor', 696.9606060606061), ('Magy', 1092.7621951219512), ('Marta', 798.5882352941177), ('Alice', 651.2678571428571), ('Gaelle', 1028.9708737864078), ('Juliana', 1110.0816326530612), ('Anamika', 859.3059701492538), ('Fatimah', 1070.9463414634147), ('Natalia', 749.6095717884131), ('Martina', 831.9251700680272), ('Beatrice', 743.3013698630137), ('Blessing', 1196.8064516129032), ('Cristina', 598.08), ('Shao Yuan', 967.9034090909091), ('Alessia', 1036.8349056603774), ('Agni', 940.2125603864735), ('Sun Jung', 812.4581005586592), ('Anouk', 1032.224358974359), ('Nicolette', 778.1648648648649), ('Lara', 920.5872093023256), ('Sylwia', 787.7645348837209), ('Giulia', 1105.4458598726114), ('Melisa', 993.1351351351351), ('Blessing', 1251.673076923077), ('Ekaterina', 1120.7931034482758), ('Ashmitha', 1018.6637931034483), ('Asha', 1151.95), ('Jana', 846.9828767123288), ('Misa', 1001.8085106382979), ('Yoo Ri', 1263.7666666666667), ('Lu', 907.3557312252965), ('Sara', 1050.9178082191781), ('Ioana', 1080.0555555555557), ('Naoko', 1180.3828125), ('Kady', 1055.020202020202), ('Marcella', 657.0171919770773), ('Yasmine', 972.7345132743363), ('Paula Cristina', 508.4679802955665), ('Aleksandra', 1028.6904761904761), ('Kateryna', 852.3478260869565), ('Viktoria', 299.6986301369863), ('Marcela Guimaraes', 1143.7957746478874), ('Marcela', 1174.1489361702127), ('Julia', 832.207100591716), ('Xin', 694.4808743169399), ('Nevena', 1031.0), ('Adnya', 1122.4423076923076), ('Tereza', 786.047619047619), ('Pavla', 915.5892857142857), ('Ester', 950.9090909090909), ('Eden', 1153.2553191489362), ('Christie', 1112.875), ('Ronke', 1072.857142857143), ('Karina', 882.3758865248227), ('Keri', 1018.6534653465346), ('Diana', 915.0235849056604), ('Emma', 784.240174672489), ('Brittany', 938.6777777777778), ('Julie', 745.4150943396227), ('Anna', 589.570652173913), ('Ineke', 919.6147540983607), ('Ema', 946.2142857142857), ('Carmen', 876.66472303207), ('Karin', 649.9320388349514), ('Dunja', 910.3070175438596), ('Natasha', 925.0068728522336), ('Ai', 998.4620689655172), ('Guadalupe', 790.8422535211267), ('Margarita', 734.7166666666667), ('Johanna', 1011.1739130434783), ('Ingrid Alexandra', 869.3571428571429), ('Dalia', 801.6933333333334), ('Adriana', 1048.4444444444443), ('Deeon', 1115.0851063829787), ('Stephanie', 1046.5884773662551), ('Noel', 965.5343511450382), ('Francesca', 776.0992907801418), ('Na Ri', 573.5197368421053), ('Alexandra', 860.8079470198676), ('Chun Yan', 986.3944099378882), ('Cynthia', 998.7722772277227), ('Yi', 921.5733333333334), ('Iryna', 993.2272727272727), ('Anastasiya', 1092.3584905660377), ('Julia', 787.3385416666666), ('Eri', 321.23595505617976), ('Ema', 803.3813229571984), ('Veronika', 938.3714285714286), ('Sabrina', 1115.8979591836735), ('Isabella', 701.0719696969697), ('Isabela', 1114.99375), ('Karina', 869.4357976653697), ('Beatriz Maria', 971.2865853658536), ('Melina', 1017.2560553633218), ('Monique', 726.3315789473684), ('Carla', 630.7457627118644), ('Li', 988.7425149700599), ('Carla', 597.8743169398907), ('Nathaly', 617.4615384615385), ('Yoko', 1128.901098901099), ('Elyne', 652.1984732824427), ('Anouk', 911.0778443113772), ('Makiho', 784.8009049773756), ('Veronika', 1016.5), ('Alix', 822.3459915611814), ('Silvia', 1158.1186440677966), ('Anna', 726.5689655172414), ('Stefania', 1028.2814371257484), ('Chantal', 609.90625), ('Angelique', 434.77777777777777), ('Ekaterina', 1085.9857142857143), ('Barbara', 704.8923766816143), ('Giuliana', 584.359375), ('Olawaseun', 1397.5), ('Abiodun', 1039.6744186046512), ('Beauty', 1382.1538461538462), ('Rana', 1117.6666666666667), ('Ola', 660.8924731182796), ('Florencia', 941.3030303030303), ('Luciana', 880.0536779324055), ('Kyle', 887.502487562189), ('Ulrikke', 506.39344262295083), ('Darya', 708.9009900990098), ('Vladislava', 1006.1769911504425), ('Chanelle', 587.027027027027), ('Abbie', 808.4545454545455), ('Malin', 825.039603960396), ('Aliaksandra', 441.9846743295019), ('Alina', 893.7272727272727), ('Hye Min', 1020.28125), ('Samantha', 1052.38), ('Eduarda', 656.2851711026616), ('Stefani', 1167.3333333333333), ('Maya', 1179.5555555555557), ('Carolina', 546.5490196078431), ('Anna', 542.1207729468599), ('Ganna', 573.6335078534031), ('Lidziya', 797.2128378378378), ('Shiori', 1070.6666666666667), ('Se Jin', 1122.4545454545455), ('Elena', 1101.55), ('Dilara', 1248.2), ('Busra', 1140.981981981982), ('Zsofia', 916.559633027523), ('Ivana', 929.7837837837837), ('Yawna', 1110.4594594594594), ('Giulia', 766.5333333333333), ('Laetitia', 677.4458598726114), ('Alejandra', 1041.6666666666667), ('Yana', 601.5174129353234), ('Beatriz', 1128.4444444444443), ('Mariona', 1163.0), ('Verena', 866.6914893617021), ('Gabriela', 891.4626865671642), ('Lucia', 1072.9156626506024), ('Josepha', 924.9325842696629), ('Linda', 916.4411764705883), ('Carmen', 947.5849056603773), ('Elisabeth', 749.4285714285714), ('Stephanie', 823.2670454545455), ('Manisha', 897.0974358974358), ('Kana', 924.2782608695652), ('Tamara', 881.8430232558139), ('Laura', 733.6889763779527), ('Diana', 798.7529411764706), ('Laura', 662.4254385964912), ('Liz Tatiane', 870.9007633587786), ('Giovanna', 1197.0), ('Flavia', 933.0194552529183), ('Flavia', 1086.0625), ('Asiya', 790.46875), ('Xiao', 814.4171122994652), ('Sirui', 949.7916666666666), ('Voni', 999.0215053763441), ('Yuka', 858.2450980392157), ('Laili', 996.8148148148148), ('Angelica', 637.6573705179283), ('Alena', 714.1326530612245), ('Bianca', 788.8869565217391), ('Julia', 783.424), ('Carolin', 592.2685714285715), ('Lisa Marie', 989.175925925926), ('Saana', 1117.88), ('Katerina', 1072.3333333333333), ('Petra', 905.1104294478528), ('Daniela', 519.1768707482993), ('Mariana', 926.6914285714286), ('Laura', 1022.2115384615385), ('Andrea', 1093.313725490196), ('Victoire', 1138.8490566037735), ('Bernice', 834.1005025125628), ('Quirine', 633.9770491803279), ('Carlotta', 1121.4414414414414), ('Jovana', 553.87), ('Marina', 711.544), ('Costanza', 1039.9928057553957), ('Helen', 1162.3125), ('Claudia Antonia', 967.2978723404256), ('Claudia Gianina', 996.2574257425742), ('Simona', 782.7252747252747), ('Ani', 620.7623762376238), ('Caroline', 816.65625), ('Liubov', 887.2875), ('Marianna', 637.9914893617022), ('Sofiya', 541.1570881226054), ('Erin', 1106.3275862068965), ('Nina', 1121.9622641509434), ('Eleanor', 1057.3870967741937), ('Ebony', 1073.1752577319587), ('Hiroko', 534.890243902439), ('Miharu', 523.2788844621514), ('Brooke', 1160.1458333333333), ('Karis', 1001.0679611650486), ('Caitlin', 652.5196078431372), ('Rachael', 859.2706766917294), ('Mai', 957.7058823529412), ('Yolande', 1068.4619883040937), ('Valeriya', 1022.25), ('Viktoriya', 1169.4814814814815), ('Lucia', 788.8130841121496), ('Raquel', 1065.0882352941176), ('Nikola', 1075.5029239766081), ('Ankita', 618.4714285714285), ('Ashvarya', 803.3904761904762), ('Sharmada', 851.5633802816901), ('Rutuja', 808.5096774193548), ('Prarthana G', 653.5070422535211), ('Zhaoxuan', 629.0081967213115), ('Jennifer', 326.64102564102564), ('Aishwarya', 1024.625), ('Hua Chen', 726.1737089201878), ('Carolina', 883.1845238095239), ('Sofia', 1050.469696969697), ('Amina', 1187.0), ('Chiara', 874.2444444444444), ('Desiree', 1032.2666666666667), ('Tereza', 487.1965811965812), ('Ju Eun', 812.6), ('Tjasa', 743.1953125), ('Francesca', 891.8471337579617), ('Martina', 1082.9313725490197), ('Yanina', 1023.5898876404494), ('Valeria', 843.5209580838323), ('Lutfiye', 1190.0629921259842), ('Deniz', 494.2918287937743), ('Oleksandra', 1070.409691629956), ('Tanya', 1023.089430894309), ('Xenia', 661.2222222222222), ('Diana', 781.0616113744076), ('Catalina', 417.07086614173227), ('Sofia', 780.7583333333333), ('Gabriela', 923.6264591439689), ('Napatsakorn', 929.4388489208633), ('Kamonwan', 765.1395348837209), ('Anna', 761.9615384615385), ('Varunya', 894.3846153846154), ('Lorenza', 1231.2727272727273), ('Natalie', 733.1492537313433), ('Zalina', 867.5288461538462), ('Alisa', 1130.1267605633802), ('Kamila', 568.2547169811321), ('Elizaveta Anna', 981.9814814814815), ('Yelena', 897.4873949579832), ('Jade', 700.3270142180095), ('Taisiya', 969.6588235294117), ('Rachel', 1147.8526315789475), ('Alice', 853.2352941176471), ('Chiara', 1183.7407407407406), ('Beatrice', 1029.9769230769232), ('Cecilia', 692.07299270073), ('Tess', 696.2878787878788), ('Samira', 932.8940397350993), ('Joana', 803.9454545454546), ('Susanne', 417.8053097345133), ('Nika', 1145.642857142857), ('Ghislaine', 1150.6607142857142), ('Eva', 735.4837209302326), ('Sabrina', 879.2727272727273), ('Cindy', 607.5764705882353), ('Kelly', 803.2569832402235), ('Ekaterina', 1103.125), ('Varvara', 1114.527027027027), ('Viktoryia', 1104.1830985915492), ('Anastasia', 1015.6833333333333), ('Ximena', 1101.3064516129032), ('Gabriela', 517.7974137931035), ('Ya', 1225.75), ('Xi Yao', 714.8653846153846), ('Ai Wen', 912.1523178807947), ('Alice Andrada', 951.9764150943396), ('Min', 866.0693069306931), ('Francesca', 877.6940639269407), ('Giulia', 797.895652173913), ('Maria', 1116.7941176470588), ('Anna', 755.8634146341464), ('Amy', 605.6197916666666), ('Franziska', 915.9846153846154), ('Olga', 589.388), ('Andjela', 1063.4736842105262), ('Oceane', 553.8112244897959), ('Mathilde', 963.45), ('Magalie', 1036.1214953271028), ('Madeline', 1217.469387755102), ('Sabina', 773.2608695652174), ('Evgeniya', 912.5755395683453), ('Cemre', 1123.3855421686746), ('Anette', 969.8181818181819), ('Natia', 929.6928104575163), ('Alicia', 1076.1882352941177), ('Alexandra', 1025.8503937007874), ('Abbi', 1110.0434782608695), ('Rocio', 1216.138888888889), ('Marina', 1116.394366197183), ('Patricia', 563.7251461988304), ('Beatriz', 413.5833333333333), ('Priscila', 1137.2424242424242), ('Gulchekhra', 1196.0), ('Ofri', 839.4923664122138), ('Iva', 782.2297297297297), ('Nicky', 843.9007633587786), ('Michaela', 930.5444444444445), ('Kimberley', 776.6428571428571), ('Barbora', 482.9059405940594), ('Ivonne', 591.3809523809524), ('Patricia Maria', 403.935), ('Dunja', 977.1011235955057), ('Katarina', 1099.1985815602836), ('Veronica M', 951.0075757575758), ('Patricia', 1155.4489795918366), ('Dejana', 850.3064516129032), ('Danijela', 1107.0919540229886), ('Ashley', 960.984), ('Chisa', 874.8181818181819), ('Claudia', 1055.3680981595091), ('Maud', 1013.4761904761905), ('Ainhoa', 943.7397959183673), ('Marine', 774.5654761904761), ('Lyann', 982.6666666666666), ('Stephanie', 744.9586776859504), ('Elena', 1041.1176470588234), ('Mayya', 619.9064748201439), ('Ziyue', 878.4606741573034), ('Ani', 1054.5243902439024), ('Tamari', 1146.3934426229507), ('Maria', 498.3878504672897), ('Nives', 841.0514705882352), ('Mary Ann', 1188.7096774193549), ('Astra', 829.5625), ('Yue', 983.359649122807), ('Nour', 1202.2), ('Nidhi', 762.1578947368421), ('Gaia', 759.5352697095435), ('Sylvia', 869.1702127659574), ('Sherry', 1024.0116279069769), ('Katrine Isabel', 1111.08), ('Ekaterina', 975.6143790849674), ('Lee', 908.156862745098), ('Libi', 1035.327868852459), ('Rona', 1125.5471698113208), ('Gulben', 1168.3396226415093), ('Vita', 1201.25), ('Boyan', 992.4222222222222), ('Leah', 1179.6216216216217), ('Dana', 874.3333333333334), ('Montserrat', 541.952380952381), ('Daniela', 911.4528301886793), ('Jazmin', 1035.46), ('Camila', 703.7586206896551), ('Linda', 907.8590604026846), ('Alena', 1160.6857142857143), ('Jesika', 501.5860215053763), ('Julia', 661.8320610687023), ('Clelia', 823.6306306306307), ('Stefania', 871.703488372093), ('Olga', 994.2792207792207), ('Paula', 1070.8273381294964), ('Maria Constanza De Las Mercedes', 861.5050505050505), ('Ornella', 978.7321428571429), ('Stephanie Mariel', 1035.5548387096774), ('Fernanda', 632.03), ('Victoria', 564.8894736842105), ('Denise', 956.2231404958678), ('Aimee', 1200.2), ('Mayo', 407.029702970297), ('Christina', 874.1980198019802), ('Rio', 1125.0363636363636), ('Noelle', 883.7787610619469), ('Lina', 1186.3684210526317), ('Angelique', 853.6762589928057), ('Claudia', 1131.0384615384614), ('Yihong', 1209.625), ('Nicole', 960.8412698412699), ('Naiktha', 767.4963503649635), ('Anna', 588.4468085106383), ('Paula', 976.5729166666666), ('Breaunna', 872.0930232558139), ('Spurti', 1149.3125), ('Veronika', 500.6933333333333), ('Emiliya', 1092.2771084337348), ('Daria', 712.054347826087), ('Alina', 783.5474452554745), ('Yafan', 325.6162790697674), ('Sonia', 1029.0980392156862), ('Nour', 1038.7702702702702), ('Elke', 1036.406976744186), ('Nicole', 978.0188679245283), ('Gabriella', 988.0208333333334), ('Carmen', 927.5833333333334), ('Sarahi', 1139.2340425531916), ('Maria Andrea', 1072.9591836734694), ('Ana Gabriela', 1084.7916666666667), ('Isabella', 1227.0), ('Aymet', 915.5932203389831), ('Clementina Eugenia', 964.1224489795918), ('Domenica', 803.8666666666667), ('Isabelle', 725.5555555555555), ('Ellen', 806.7682926829268), ('Yosr', 1222.24), ('Sarvinoz', 1235.1960784313726), ('Da Hye', 1010.3333333333334), ('Ji Hee', 1027.3658536585365), ('Francesca', 1060.8163265306123), ('Martina', 820.1656050955414), ('Sanae', 1105.171875), ('Kanako', 1105.3125), ('Alona', 801.0), ('Elizaveta', 416.8855421686747), ('Sofia', 990.6554054054054), ('Berta', 1005.75), ('Carolina', 857.370786516854), ('Nadia', 500.37654320987656), ('Guadalupe', 806.4901960784314), ('Agustina', 1075.2736842105264), ('Shakhlo', 924.8818897637796), ('Guzal', 995.4074074074074), ('Leolia', 773.5666666666667), ('Imane Maelle', 845.375), ('Karin', 739.3035714285714), ('Ekaterina', 423.656050955414), ('Nam Yeon', 878.6666666666666), ('Anastasia', 843.5766871165645), ('Sandra', 925.6860465116279), ('Katharina', 590.3914893617022), ('Giulia', 1153.275), ('Giulia', 897.0818181818182), ('Daiana', 720.7490039840637), ('Luisa', 1112.9183673469388), ('Marcela', 1178.1724137931035), ('Carolina Meligeni Rodrigues', 799.0650406504066), ('Andressa Cristina', 1184.0416666666667), ('Ivone', 872.0), ('Nadia', 933.3885350318471), ('Sarah', 1013.655737704918), ('Assia', 1172.5531914893618), ('Adriana', 738.4942528735633), ('Sarah', 1286.48), ('Daniela', 1146.5454545454545), ('Carmen Raluca', 842.1553398058253), ('Kirsten Andrea', 1035.0384615384614), ('Joanna', 931.025641025641), ('Amira', 1075.8260869565217), ('Olena', 1360.6666666666667), ('Mitsumi', 1121.04), ('Magdalena', 1231.421052631579), ('Lenka', 767.4705882352941), ('Wen Ling', 1117.55), ('Yasmin', 1142.5), ('Larikah', 1054.9019607843138), ('Alexandra', 1373.3673469387754), ('Jelena', 1046.944), ('Elena', 1106.5), ('Patricia', 1226.3164556962026), ('Micaela', 1332.0737704918033), ('Natalia', 1405.2424242424242), ('Emma', 819.7254901960785), ('Amy', 1084.030303030303), ('Julia', 1170.6774193548388), ('Jade', 934.6125), ('Lisa', 1106.1351351351352), ('Julia', 1049.0833333333333), ('Abigail', 1203.9285714285713), ('Jordana', 1022.6198347107438), ('Elaine', 1221.7931034482758), ('Risa', 1086.25), ('Stephanie', 896.3787878787879), ('Marina', 964.1477272727273), ('Grace', 1238.892857142857), ('Bianca', 892.3639575971731), ('Marianna', 1027.8082191780823), ('Milena', 1114.4074074074074), ('Treta', 1009.8666666666667), ('Almudena', 1157.8), ('Eveliina', 1023.8690476190476), ('Francesca', 1117.75), ('Sabina', 895.1770334928229), ('Katharina', 949.5916666666667), ('Priscilla', 668.9642857142857), ('Nikol', 1054.0813953488373), ('Maria Jesus', 1170.1830985915492), ('Denise', 941.5221238938053), ('Molly', 998.1320754716982), ('Jin', 1267.0), ('Sandy', 1028.9565217391305), ('Katherine Gabriela', 910.396694214876), ('Noelia', 1054.6531791907514), ('Brynn', 952.5619834710744), ('Cecilia', 999.125), ('Ushna', 1132.4109589041095), ('Ratnika', 1021.6504854368932), ('Shweta', 897.6951219512196), ('Natasha', 1047.6377952755906), ('Anna', 1177.15625), ('Yekaterina', 1146.8846153846155), ('Violetta', 1137.5135135135135), ('Anita', 947.472972972973), ('Ludmila', 846.2727272727273), ('Malika', 1004.7428571428571), ('Kathinka', 415.7), ('Meng Ning', 1035.95), ('Giulia', 986.8349514563107), ('Alina', 854.8849557522124), ('Gabriela', 1087.6161616161617), ('Rosalie', 1018.328947368421), ('Natalija', 591.7393162393163), ('Carlotta', 1200.0), ('Sandra', 1092.165137614679), ('Mara', 908.3962264150944), ('Francesca', 954.444976076555), ('Emiliana', 1165.945205479452), ('Arantxa', 1134.896551724138), ('Sowjanya', 813.1357142857142), ('Carla', 1015.8947368421053), ('Belen', 1167.3368421052633), ('Kate', 1117.7142857142858), ('Sabrina', 551.3582089552239), ('Alessia', 961.4230769230769), ('Mami', 1153.590909090909), ('Qianqian', 943.421052631579), ('Gabriela', 1150.0), ('India', 954.046875), ('Ella', 1151.021505376344), ('Patricia', 1105.537037037037), ('Lina', 1020.8352941176471), ('Veronika', 1153.1025641025642), ('Lynn', 1034.3684210526317), ('Mi Jeong', 1071.3076923076924), ('Angelina', 1230.5625), ('Despoina', 746.0962962962963), ('Karla', 807.616), ('Kayla', 1101.55), ('Valeria', 757.0555555555555), ('Haine', 1179.4153846153847), ('Dan Ni', 994.4769230769231), ('Michika', 718.047619047619), ('Camila Vital', 1192.3783783783783), ('Martina', 986.3452380952381), ('Andrea Renee', 878.3939393939394), ('Brandy', 970.9846153846154), ('Fiona', 908.4414414414415), ('Daphne', 1226.5454545454545), ('Jazzamay', 983.1290322580645), ('Yujia', 1034.1304347826087), ('Andrea', 759.2765957446809), ('Ilze', 847.0941176470589), ('Saray', 840.0776699029126), ('Liniques', 1184.7222222222222), ('Jasmin', 1094.5833333333333), ('Elena Teodora', 686.6470588235294), ('Stefanie', 1003.1884057971015), ('Stefania', 1071.142857142857), ('Federica', 799.6744186046511), ('Michele Alexandra', 946.8846153846154), ('Joana', 910.6521739130435), ('Valeria', 935.9090909090909), ('Chantelle', 1128.030303030303), ('Polina', 504.54545454545456), ('Gaelle', 1085.6), ('Anna Katalina', 916.7115384615385), ('Saska', 747.3695652173913), ('Elizabeta', 1154.2714285714285), ('Sari', 1081.1666666666667), ('Pauline', 793.5889570552147), ('Steffi', 891.8120805369127), ('Irina Maria', 578.1381578947369), ('Stefana', 993.4255319148937), ('Alory Regina Elorriaga', 1181.6078431372548), ('Madeleine', 1028.0365853658536), ('Elise', 334.7118644067797), ('Kyra', 1143.2608695652175), ('Aida', 1110.3333333333333), ('Jelena', 1025.25), ('Viktoria', 811.72), ('Laura', 901.8187919463087), ('Xiaorong', 848.4418604651163), ('Stefanie', 506.79487179487177), ('Iva', 692.2707182320441), ('Mariana', 868.2702702702703), ('Sonja', 946.3888888888889), ('Hanna', 1115.7714285714285), ('Vivian', 770.6042780748663), ('Francesca', 1031.2119205298013), ('Karolina', 1034.92), ('Jaimy Gayle', 1243.875), ('Gabriela', 1000.4246575342465), ('Kristina', 1016.5903614457832), ('Anastasia', 661.2774193548387), ('Barbara', 1014.9026548672566), ('Dagmara', 1159.1818181818182), ('Zuzanna', 794.5416666666666), ('Catherine', 918.6078431372549), ('Carolin', 1160.111111111111), ('Beatriz Magdalena', 1253.4), ('Marta', 1112.4528301886792), ('Claudia', 1175.2058823529412), ('Giada', 813.1351351351351), ('Miriana', 950.6263736263736), ('Valeria', 874.1242236024844), ('Jessica', 583.9622641509434), ('Marie', 916.5714285714286), ('Marijana', 1215.0), ('Natalia', 852.420731707317), ('Steffi', 1020.9090909090909), ('Suellen', 911.7619047619048), ('Borislava', 834.2066115702479), ('Mayar', 711.1785714285714), ('Diana', 1026.5037593984962), ('Kanika', 962.8536585365854), ('Apichaya', 1016.5714285714286), ('Laura', 1089.6666666666667), ('Pei Chi', 673.9809523809524), ('Chia Hsien', 950.8813559322034), ('Ching Wen', 583.530303030303), ('Ferny', 1187.0384615384614), ('Cornelia', 757.2253521126761), ('Alexandra', 628.2191780821918), ('Linda', 1232.2), ('Colomba', 1165.093023255814), ('Ivania', 871.109375), ('Macarena', 692.1515151515151), ('Se Hyun', 1210.2571428571428), ('Eva', 1134.9772727272727), ('Audrey', 647.8557692307693), ('Lea', 837.0), ('Maria', 881.1304347826087), ('Dominique', 1248.9166666666667), ('Sarah Beth', 875.9277108433735), ('Pippa', 1041.0740740740741), ('Natasha', 707.7594936708861), ('Vilma Y', 1243.0), ('Maria Paulina', 1047.98224852071), ('Paula Andrea', 1175.909090909091), ('Sri Vaishnavi', 792.1927710843373), ('Giorgia', 997.28), ('Valeriya', 621.5885714285714), ('Charlotte', 1207.0), ('Neda', 930.0), ('Sharon Sanchana', 1097.0), ('Aleksandra', 1097.741573033708), ('Smriti', 1184.8260869565217), ('Sai Samhitha', 998.5238095238095), ('Mariia', 1148.9166666666667), ('Vaniya', 1130.6037735849056), ('Anushka', 1037.0833333333333), ('Julia', 739.8951048951049), ('Bernarda', 541.273631840796), ('Cristina', 709.8819444444445), ('Nicoleta Catalina', 485.46875), ('Ioana', 876.3333333333334), ('Shelby', 788.5178571428571), ('Sara', 1016.6752136752136), ('Akvile', 1038.35), ('Katie', 555.3473684210526), ('Mafalda', 1139.7), ('Darya', 1119.6931818181818), ('Anna', 1201.08), ('Charlotte', 958.1869158878504), ('Casey', 1046.134328358209), ('Yukako', 1071.5833333333333), ('Julie', 1164.6818181818182), ('Jasmine', 437.86915887850466), ('Agustina Elena', 1154.25), ('Camila', 1201.25), ('Nikki', 1017.3134328358209), ('Mandy', 787.2551020408164), ('Isabella', 1166.8), ('Nina Isabella', 1124.1666666666667), ('Lena', 1153.6666666666667), ('Jessica', 797.6951219512196), ('Kelsey', 1012.325), ('Blair', 912.71875), ('Amanda', 1068.35), ('Patricia', 985.0350877192982), ('Jainy', 1037.5274725274726), ('Theresa', 1159.5632183908046), ('Angeliki', 1089.1603773584907), ('Eetee', 842.7045454545455), ('Sara', 1052.1315789473683), ('Ho Ching', 925.9865771812081), ('Cristiana', 554.5376344086021), ('Chiara', 1212.0), ('Jamie', 455.56410256410254), ('Quinn', 883.2352941176471), ('Lina', 607.5721393034826), ('Vladyslava', 856.0782608695653), ('Deria', 1123.6486486486488), ('Catherine', 959.6216216216217), ('Daniela', 1111.2), ('Marie', 518.2080536912752), ('Karolina', 1151.59375), ('Yulia', 970.7878787878788), ('Daniela', 1000.0769230769231), ('Laura', 1003.8620689655172), ('Eudice Wong', 911.7241379310345), ('Justine', 996.6626506024096), ('Michelle', 989.4), ('Harriet', 694.341935483871), ('Sophie', 981.4137931034483), ('Karoline', 873.6229508196722), ('Tayisiya', 747.3172413793103), ('Mia Nicole', 987.504761904762), ('Sybille', 1002.6792452830189), ('Dea', 550.9545454545455), ('Eugenie', 1125.5483870967741), ('Deborah', 650.7578947368421), ('Jessika', 818.2043795620438), ('Olaya', 1112.75), ('Klaartje', 576.9), ('Natalia', 833.9051724137931), ('Katherine', 924.3037037037037), ('Deborah', 741.02), ('Tena', 614.9346733668342), ('Marlies', 946.8934426229508), ('Georgia', 533.5940594059406), ('Charlotte', 824.1891891891892), ('Tamara', 354.43809523809523), ('Katharina', 782.1232876712329), ('Sarah', 1116.9423076923076), ('Gabriela', 856.4285714285714), ('Caroline', 868.6283185840708), ('Jil Nora', 1116.4190476190477), ('Chiara', 1154.0980392156862), ('Ayaka', 552.4653465346535), ('Alejandra', 1003.1176470588235), ('Nozomi', 936.3392857142857), ('Hikari', 1095.1176470588234), ('Hazal', 1214.7692307692307), ('Caroline', 575.8761904761905), ('Rosalia', 1059.73), ('Georgina', 1249.4285714285713), ('Melis', 1097.171875), ('Mari', 685.5), ('Ana', 1066.1382978723404), ('Ena', 1006.0392156862745), ('Gabriela', 699.9121621621622), ('Dejana', 684.156862745098), ('Kerstin', 1020.4271844660194), ('Nina', 225.57534246575344), ('Bojana', 737.0410958904109), ('Elena', 829.0), ('Ines', 1196.3461538461538), ('Giulia', 1208.3125), ('Esen', 1218.5652173913043), ('Lenka', 894.1379310344828), ('Sadafmoh', 665.8219178082192), ('Violetta', 1209.375), ('Nastassia', 1138.9166666666667), ('Eden', 945.7478260869565), ('Corina', 832.7818181818182), ('Bhuvana', 878.0138888888889), ('Charlotte', 1178.4166666666667), ('Manya', 1181.3548387096773), ('Daniela', 1000.1896551724138), ('Louise', 1095.060606060606), ('Eva', 1064.5657894736842), ('Sabina Elena', 1184.6666666666667), ('Julia', 386.24657534246575), ('Naomi', 769.8858695652174), ('Anna', 1264.2727272727273), ('Alena', 1070.6666666666667), ('Gulnaz', 1236.6153846153845), ('Oleksandra', 601.169014084507), ('Yekaterina', 1197.7333333333333), ('Polina', 1212.0), ('Victoria', 1185.75), ('Lou', 1209.625), ('Elodie', 1211.2333333333333), ('Manon', 973.3541666666666), ('Leslie', 1180.5454545454545), ('Maria Agustina', 1190.0833333333333), ('Helen', 912.234375), ('Nikita', 1174.0), ('Juliana Rocha', 1175.7666666666667), ('Josephine', 684.4892086330935), ('Wendy Qi Wen', 1011.469696969697), ('Rosalie', 1143.0), ('Ulyana', 844.0692307692308), ('Daria', 1108.2295081967213), ('Sandra', 489.4657534246575), ('Oana', 1168.2307692307693), ('Jelena', 460.47904191616766), ('Erika', 1108.8), ('Camille', 1029.8), ('Mathilde', 1083.6575342465753), ('Carla', 810.7826086956521), ('Fiona', 531.6888888888889), ('Jacqueline', 691.6936936936937), ('Jennifer', 861.2063492063492), ('Nagi', 828.0675675675676), ('Mihoki', 1110.4411764705883), ('Harmony', 574.8723404255319), ('Viktoriya', 1087.4782608695652), ('Helene', 682.3052631578947), ('Nina', 838.5604395604396), ('Vladica', 943.5432098765432), ('Martina', 1035.6969696969697), ('Danielle', 946.1477272727273), ('Wan Yi', 1081.142857142857), ('Alessandra', 1123.4864864864865), ('Jamilya', 1247.3333333333333), ('Diana', 1142.1315789473683), ('Yuliya', 1167.5428571428572), ('Aleksandra', 1209.625), ('Madina', 1203.5), ('Julia Mansano', 1024.6666666666667), ('Leticia Garcia', 1072.4), ('Ingrid', 853.2375), ('Anna', 823.74), ('Ailen', 1034.5833333333333), ('Ana Victoria', 961.2631578947369), ('Fernanda', 1243.875), ('Louisa', 380.5308641975309), ('Tornado Alicia', 878.1666666666666), ('Madison', 1074.8536585365853), ('Kajsa', 661.9589041095891), ('Oana Georgeta', 686.3047619047619), ('Elke', 906.75), ('Paula', 406.53846153846155), ('Ana Bianca', 842.8446601941747), ('Amrita', 1209.4), ('Simran Kaur', 974.8), ('Shreya', 1148.0), ('Riya', 651.4246575342465), ('Camila', 1212.5263157894738), ('Paulina', 1011.5109489051094), ('Aleksandra', 1210.764705882353), ('Magdalena', 586.9224137931035), ('Rebecca', 563.75), ('Deniz', 1220.1818181818182), ('Eva', 1063.9213483146068), ('Pernilla', 619.4154929577464), ('Karolina', 819.18), ('Barbora', 444.9727272727273), ('Katerina', 291.7972027972028), ('Nao', 313.45625), ('Polina', 1073.5), ('Jaqueline Adina', 748.7238095238096), ('Shilin', 632.2824427480916), ('Akiho', 1145.8235294117646), ('Szabina', 772.3186813186813), ('Nicole', 539.8356164383562), ('Kim', 1221.6470588235295), ('Sofico', 1084.107142857143), ('Melissa', 1154.093023255814), ('Aleksandra', 1018.3636363636364), ('Ekaterina', 1241.8), ('Alessia', 1134.12), ('Ivana', 473.54), ('Pia', 766.21875), ('Olena', 1113.1515151515152), ('Lauren', 1198.909090909091), ('Alexandra', 992.4444444444445), ('Laura', 1129.7818181818182), ('Patcharin', 863.5507246376811), ('Margaux', 1154.0), ('Sandra', 1226.25), ('Anastasiya', 834.7169811320755), ('Anna', 784.5217391304348), ('Emina', 682.0972222222222), ('Naomi', 390.5), ('Nicole', 884.4117647058823), ('Julia', 603.5777777777778), ('Ina', 1165.5573770491803), ('Beatrice', 945.1636363636363), ('Erika', 821.4102564102565), ('Yana', 845.5966386554621), ('Alexa', 1033.6486486486488), ('Monique', 940.5479452054794), ('Francoise', 437.05298013245033), ('Aldana', 1185.7142857142858), ('Luciana', 1243.875), ('Anke', 1228.388888888889), ('Daria', 782.2476190476191), ('Chiara', 1173.4186046511627), ('Deborah', 1219.448275862069), ('Luisa Marie', 820.59375), ('Julia', 418.26027397260276), ('Elena Gabriela', 392.44444444444446), ('Martina', 783.9285714285714), ('Chiara', 826.9069767441861), ('Darya', 1117.0222222222221), ('Anastasiya', 899.5407407407407), ('Hongrui', 914.8607594936709), ('You Na', 1170.3461538461538), ('Maxine', 973.8717948717949), ('Katie', 868.8571428571429), ('Eleonore', 1160.5238095238096), ('Anhelina', 432.6949152542373), ('Haruka', 774.6837606837607), ('Kyoka', 348.54794520547944), ('Rafaela', 1121.2432432432433), ('Emma Christine', 1193.3529411764705), ('Maria', 1048.2156862745098), ('Katerina', 555.9921875), ('Jessica', 863.9344262295082), ('Anastasiya', 394.16), ('Dominika', 1009.7674418604652), ('Emmanuelle', 1184.7692307692307), ('Ana Paula', 684.6578947368421), ('Maria Fernanda', 877.6076923076923), ('Vishesh', 1208.952380952381), ('Victoria', 462.3642857142857), ('Angelina', 830.6666666666666), ('Lizette', 666.1496062992126), ('Samantha', 1012.2051282051282), ('Priscilla', 678.396694214876), ('Olivia', 637.563829787234), ('Michelle', 852.36), ('Chiara', 1028.4310344827586), ('Alice', 536.8039215686274), ('Maia', 745.433962264151), ('Kaitlyn', 891.3095238095239), ('Donika', 1131.6333333333334), ('Gloria', 794.7118644067797), ('Andreea', 833.8493150684932), ('Aliona', 611.35), ('Jacqueline', 1033.34), ('Barbara', 734.2), ('Talya', 1230.2), ('Valeria', 1118.015625), ('Alona', 1037.3055555555557), ('Anastasija', 1144.7142857142858), ('Martina', 779.1060606060606), ('Julieta Lara', 707.1467889908257), ('Eliza', 978.2708333333334), ('Yana', 978.8979591836735), ('Aleksandra', 835.16), ('Teodora', 938.0540540540541), ('Gebriela', 1152.142857142857), ('Vivian', 922.4666666666667), ('Parris', 1099.625), ('Zoe', 677.8082191780821), ('Gabriela', 1003.4827586206897), ('Ana', 276.82481751824815), ('Nicole', 1088.6315789473683), ('Ariadna', 951.4146341463414), ('Ksenija', 975.6271186440678), ('Lilla', 722.5087719298245), ('Emmanuelle', 864.0645161290323), ('Muge', 1186.9444444444443), ('Ege', 1214.857142857143), ('Ilka', 868.2191780821918), ('Jasmin', 969.8666666666667), ('Ksenia', 851.2647058823529), ('Nina', 688.2054794520548), ('Natsumi', 974.3428571428572), ('Angelina', 1229.6521739130435), ('Chanikarn', 1281.8461538461538), ('Marija', 1241.8), ('Adrijana', 627.12), ('Janneke', 861.5102040816327), ('Anastasiya', 1002.2307692307693), ('Sarai Delfina', 1191.6470588235295), ('Sneha', 1225.388888888889), ('Victoria', 1232.2), ('Natalia', 414.9479166666667), ('Ivanka', 1079.05), ('Valeriya', 1029.9850746268658), ('Dhruthi', 615.1506849315068), ('Nelise', 1164.107142857143), ('Vanja', 1089.7111111111112), ('Jessica', 1003.0540540540541), ('Caitlin', 1237.090909090909), ('Yan', 768.560975609756), ('Yuenu', 961.876923076923), ('Kwan Yau', 1070.0377358490566), ('Fang Ying', 612.0185185185185), ('Si Qi', 1047.7575757575758), ('Veronika', 1127.8181818181818), ('Emilia', 1232.0), ('Paulina', 1195.9473684210527), ('Freya', 544.1627906976744), ('Katharina', 673.986301369863), ('Sinead', 975.3484848484849), ('Shiran', 1187.9245283018868), ('Nataliya', 1247.909090909091), ('Anastasia', 430.17808219178085), ('Amelie', 1011.3666666666667), ('Mariaryeni', 1085.4242424242425), ('Lesedi Sheya', 887.4545454545455), ('Justina', 1212.9166666666667), ('Paige Mary', 1156.28125), ('Anais', 1010.2222222222222), ('Petra', 607.7978723404256), ('Ting Jr', 789.6113989637306), ('Damilola', 1493.0), ('Brittany', 1151.4137931034484), ('Megan', 1142.4782608695652), ('Jil Belen', 501.0619469026549), ('Sara', 891.0576923076923), ('Allie', 338.2395833333333), ('Maria', 504.45054945054943), ('Olga', 426.958904109589), ('Pamela', 989.1904761904761), ('Elizaveta', 1180.12), ('Jana', 353.3222222222222), ('Sofia', 433.7792207792208), ('Adeliya', 790.1538461538462), ('Camille', 1214.341463414634), ('Louise', 1208.5128205128206), ('Theo', 650.1206896551724), ('Maria', 905.6805555555555), ('Ao', 617.3333333333334), ('Karina Kristina', 1062.795918367347), ('Maria Jose', 817.8518518518518), ('Mahitha', 1007.15), ('Risa', 741.123595505618), ('Megumi', 1025.0), ('Iryna', 747.6422018348624), ('Oyku', 866.0454545454545), ('Yasmyn', 1261.8181818181818), ('Kristyna', 1077.4736842105262), ('Kateryna', 866.1971830985915), ('Tatjana', 131.44628099173553), ('Irina', 669.6590909090909), ('Hana', 1212.0), ('Tatiana', 1225.578947368421), ('Anna', 1052.1333333333334), ('Ksenia', 1046.2075471698113), ('Sandra', 838.4905660377359), ('Lisa', 1150.15), ('Jelena', 1010.1142857142858), ('Emily', 773.5352112676056), ('Gabriella', 557.6849315068494), ('Luisa', 911.8913043478261), ('Damini', 1242.0), ('Jessica', 457.1111111111111), ('Anna', 1084.9577464788733), ('Yana', 1200.1052631578948), ('Melanie', 597.8504672897196), ('Marie', 512.1145833333334), ('Zaineb', 1227.344827586207), ('Rita', 1002.7659574468086), ('Yukun', 824.3936170212766), ('Tina', 966.9056603773585), ('Vera', 1126.2), ('Eleni', 1069.25), ('Dalma', 279.16438356164383), ('Ahlam', 1248.72), ('Agne', 1231.5), ('Martha', 1056.0588235294117), ('Alexa', 704.0958904109589), ('Yukina', 857.1692307692308), ('Maddison', 748.0), ('Marie', 939.6129032258065), ('Alexandra', 801.0), ('Usue Maitane', 411.5068493150685), ('Ellie', 479.0652173913044), ('Jade', 1120.590909090909), ('Sung Hee', 1138.274193548387), ('Evgeniya', 1221.904761904762), ('Ivana', 1225.9166666666667), ('Silvia', 1212.0), ('Camilla', 661.2465753424658), ('Cecilia', 1237.34375), ('Sandra', 1222.5862068965516), ('Lisa', 758.609756097561), ('Costanza', 1153.3333333333333), ('Marta', 1045.0588235294117), ('Irene', 579.2153846153847), ('Chaoyi', 1232.8), ('Cristina', 820.3085106382979), ('Maja', 1190.6363636363637), ('Fanny', 707.972972972973), ('Ines', 749.6309523809524), ('Sean', 1240.92), ('May', 1084.0294117647059), ('Maria Del Rosario', 1119.4897959183672), ('Aina', 1164.95), ('Mariam', 662.1182795698925), ('Anastasia Evgenyevna', 956.5754716981132), ('Ana Luisa', 1243.4285714285713), ('Constanza', 835.1132075471698), ('Alexia', 1255.421052631579), ('Maia A', 1206.6666666666667), ('Eva', 961.8630136986301), ('Peggy', 755.5813953488372), ('Zhanlan', 627.7777777777778), ('En Pei', 1229.7333333333333), ('Thai Sa Grana', 802.7222222222222), ('Erika', 1146.8823529411766), ('Karyn', 903.5769230769231), ('Damira', 1198.3333333333333), ('Marina', 1029.6296296296296), ('Dajana', 1181.4736842105262), ('Ayla', 397.83561643835617), ('Amy', 908.546875), ('Yeong Won', 973.8617021276596), ('Yu Jin', 1098.357142857143), ('Maurien', 1121.0869565217392), ('Raluca Georgiana', 539.6164383561644), ('Andreea Amalia', 801.84375), ('Iulia Maria', 1170.9411764705883), ('Emilija', 1209.625), ('Katarina', 920.1794871794872), ('Sofia', 1157.6190476190477), ('Gozal', 716.3150684931506), ('Petra', 796.97), ('Yuanyi', 891.2340425531914), ('Aiko', 774.046875), ('Inger', 1039.0), ('Marie', 938.0645161290323), ('Mary', 869.1666666666666), ('Cristina', 1147.4583333333333), ('Alisa', 1240.2727272727273), ('Muazzez', 1227.0), ('Wushuang', 937.7878787878788), ('Verena', 931.780487804878), ('Plobrung', 937.7945205479452), ('Magdalena', 1223.9016393442623), ('Chompoothip', 1112.1458333333333), ('Qiu Yu', 705.8493150684932), ('Teodora', 1156.2424242424242), ('Rebeka', 842.0806451612904), ('Alba', 843.7260273972603), ('Federica Joe', 1204.7272727272727), ('Ylena', 892.3561643835617), ('Tamachan', 949.8059701492538), ('Nicole', 1132.0), ('Barbara', 1193.433962264151), ('Karolina', 1047.0243902439024), ('Hollie', 1185.75), ('Eliessa', 876.1730769230769), ('Elena', 1116.5), ('Magali', 734.0), ('Nonna', 1167.2758620689656), ('Angela', 1116.2571428571428), ('Ana', 1203.1698113207547), ('Ronit', 427.0), ('Kristina N', 1060.5633802816901), ('Ekaterina', 1014.2592592592592), ('Emma', 1215.698113207547), ('Anna', 1098.5135135135135), ('Nina', 1039.7272727272727), ('Antonina', 1049.4655172413793), ('Barbara', 895.763440860215), ('Lena', 938.4), ('Rosie', 984.1714285714286), ('Renata', 485.2386363636364), ('Britt', 647.5205479452055), ('Greetje', 547.277108433735), ('Morgane', 1105.3214285714287), ('Elina', 1116.5652173913043), ('Maria', 1080.3076923076924), ('Frances', 999.2), ('Yuriko', 1101.2045454545455), ('Clemence', 875.9772727272727), ('Milica', 1221.904761904762), ('Nina', 690.1022727272727), ('Tamara', 1245.6190476190477), ('Bianca', 561.1369863013699), ('Veronica', 1032.2), ('Ekaterina', 866.0357142857143), ('Nora', 921.6216216216217), ('Tereza', 1039.076923076923), ('Nikola', 1237.2666666666667), ('Anastasia', 710.9433962264151), ('Pranjala', 795.4736842105264), ('Jin Ju', 1035.6470588235295), ('Ying', 661.3972602739726), ('Dabin', 920.1276595744681), ('Hanna', 587.2), ('Sabina', 1161.3384615384616), ('Margaux', 1144.4594594594594), ('Sara', 1217.851851851852), ('Natasha', 871.4054054054054), ('Minami', 1238.0625), ('Ines', 974.8732394366198), ('Lamis', 1062.3666666666666), ('Yulia', 814.5192307692307), ('Sandra', 1103.658536585366), ('Elisabeth', 1211.2424242424242), ('Yulia', 1230.5625), ('Valentina', 921.3333333333334), ('Tamara', 1023.8333333333334), ('Ipek', 976.7878787878788), ('Inci', 1069.0925925925926), ('Irina', 1082.0), ('Natalie', 999.3636363636364), ('Nikola', 1182.1944444444443), ('Vendula', 729.0117647058823), ('Petia', 710.3972602739726), ('Dasha', 722.6986301369863), ('Elizabeth', 1242.6666666666667), ('Adriana', 1064.7826086956522), ('Raveena', 487.6268656716418), ('Amina', 670.2222222222222), ('Petra', 1203.0), ('Natalija', 812.4642857142857), ('Milagros', 1234.2857142857142), ('Chiraz', 749.3582089552239), ('Kimberly', 618.6923076923077), ('Bianka', 696.952380952381), ('Masa', 951.2911392405064), ('Vasilisa', 886.9589041095891), ('Katarina', 1059.4054054054054), ('Laura D', 910.5714285714286), ('Sofia', 977.12), ('Yuliana', 1082.5882352941176), ('Diana', 1217.7142857142858), ('Idia', 1232.2), ('Weronika Jasmina', 1152.7837837837837), ('Nicole', 618.8135593220339), ('Katharina', 434.52054794520546), ('Darya', 105.02597402597402), ('Mercedes', 1213.2142857142858), ('Vera', 1191.6571428571428), ('Karolina', 340.82191780821915), ('Caroline', 1242.0), ('Guillermina', 1027.0), ('Ekaterina', 1137.2), ('Luca', 859.8644067796611), ('Rebeka', 461.7291666666667), ('Kristina', 501.8493150684931), ('Anastasia', 1173.9333333333334), ('Melany Solange', 1039.8333333333333), ('Jasmine Amber', 1117.64), ('Julia', 943.6666666666666), ('Magdalena', 581.3275862068965), ('Viktoria', 434.8452380952381), ('Federica', 969.0845070422536), ('Anastasiya', 600.95), ('Eva', 1133.25), ('Margot', 925.1666666666666), ('Natalia', 1159.1458333333333), ('Valeria', 1048.5), ('Anna', 1062.509090909091), ('Anastasia', 524.7534246575342), ('Veronica', 792.015625), ('Anastasia', 1149.640625), ('Victoria', 1086.888888888889), ('Alicia', 1132.94), ('Seone', 889.8028169014085), ('Sofia', 1190.8461538461538), ('Simona', 875.5769230769231), ('Noelia', 1036.6031746031747), ('Marta Huqi', 851.1224489795918), ('Tessah', 390.2361111111111), ('Margot', 549.7671232876712), ('Ralina', 1176.5), ('Snehadevi S', 632.3150684931506), ('Man Ying Maggie', 1202.2692307692307), ('Julie', 1075.6031746031747), ('Angela', 1177.2222222222222), ('Verena', 1123.6153846153845), ('Sara', 570.8888888888889), ('Julia', 1047.1666666666667), ('Lena', 859.5757575757576), ('Alice', 1014.060606060606), ('Vinciane', 1150.0), ('Valeriya', 1217.7368421052631), ('Ana', 1151.3333333333333), ('Michaela', 667.082191780822), ('Ena', 931.7777777777778), ('Catherine Cartan', 134.21917808219177), ('Lisa', 909.9589041095891), ('Jaeda', 760.4920634920635), ('Ksenia', 1108.2222222222222), ('Yuan', 1054.0), ('Bunyawi', 555.3384615384615), ('Mizuno', 593.1506849315068), ('Mila', 1201.16), ('Alina', 1235.909090909091), ('Jiahui', 794.4931506849315), ('Kseniia', 990.6), ('Alisa', 1212.0), ('Tereza', 540.7397260273973), ('Erica', 788.0384615384615), ('Andie K', 970.3620689655172), ('Lucie', 1219.093023255814), ('Alexandria', 945.625), ('Tatiana', 869.0425531914893), ('Vera', 431.26027397260276), ('Kelly', 813.1428571428571), ('Ines', 1154.0857142857142), ('Sherazad', 271.3972602739726), ('Karin', 1194.591836734694), ('Mallaurie', 1031.5342465753424), ('Eleonore', 1028.2884615384614), ('Sara', 616.7735849056604), ('Valentine', 1185.5), ('Karolayne', 1077.8095238095239), ('Julia', 1083.05), ('Huijie', 1118.904761904762), ('Xu Liu', 488.7671232876712), ('Shangqing', 1228.3235294117646), ('Maria', 1178.9), ('Katya', 1050.7), ('Marta', 454.7945205479452), ('Shakhnoza', 1236.7627118644068), ('Terri', 963.5), ('Doga Selen', 1234.6176470588234), ('Natalie', 1172.3720930232557), ('Arthi', 1281.8461538461538), ('Daniela', 1183.4285714285713), ('Vera', 1171.0588235294117), ('Yixuan', 801.6712328767123), ('Xinyu', 370.7671232876712), ('Anna', 485.23809523809524), ('Maria', 1047.0), ('Alexis', 1207.8333333333333), ('Rianna', 638.6666666666666), ('Mirjam', 843.6428571428571), ('Savannah', 1142.9285714285713), ('Agata Jadwiga', 1082.3548387096773), ('Ida', 962.5), ('Lidia', 1147.8529411764705), ('Estela', 966.0540540540541), ('Mouna', 1258.5), ('Caroline', 553.5762711864406), ('Sophie', 676.4722222222222), ('Andrina', 1045.6666666666667), ('Lucia', 901.7966101694915), ('Manca', 838.1780821917808), ('Tamara', 298.32876712328766), ('Yuval', 1230.2), ('Shir', 1154.4166666666667), ('Maya', 1165.5714285714287), ('Sarlota', 1209.7777777777778), ('Phenomena', 1211.0), ('Alina', 1206.9), ('Yarden', 1166.875), ('Miriam Bianca', 628.075), ('Ioana', 1070.878787878788), ('Warona', 1249.3333333333333), ('Valeriya', 814.3333333333334), ('Haruna', 512.1515151515151), ('Berfu', 625.013698630137), ('Greta', 1252.608695652174), ('Yulia', 1162.0), ('Anastasia', 976.054794520548), ('Polina', 954.6), ('Andrea', 1039.448275862069), ('Lea', 833.2105263157895), ('Jessica', 1208.7142857142858), ('Komola', 826.0238095238095), ('Petra', 1152.5555555555557), ('Yuki Kristina', 698.8285714285714), ('Chihiro', 695.4794520547945), ('Fanny', 428.5068493150685), ('Anastasia', 851.3), ('Aryna', 349.54794520547944), ('Ekaterina', 708.8813559322034), ('Natalie', 1128.3934426229507), ('Paula', 1119.7272727272727), ('Lauren', 1242.3478260869565), ('Ingrid', 670.931506849315), ('Alexandra', 1178.888888888889), ('Farah', 1106.3076923076924), ('Dina', 1094.4583333333333), ('Maria', 993.375), ('Ayan', 901.8717948717949), ('Pei Hsuan', 1106.5), ('I Hsuan', 1038.6911764705883), ('Lucrezia', 845.986301369863), ('Giorgia', 1129.4333333333334), ('Gabriela Nicole', 994.0612244897959), ('Oana', 927.0909090909091), ('Georgia Andreea', 763.1014492753624), ('Jelena', 1139.418181818182), ('Jovana', 1157.1538461538462), ('Maria Lourdes', 918.0769230769231), ('Agustina', 1182.5), ('Margot', 1238.7777777777778), ('Sang Hee', 857.9508196721312), ('Jia Qi', 529.7777777777778), ('Anastasia', 996.76), ('Ludmilla', 787.5416666666666), ('Arina', 1098.1323529411766), ('Anastasiya', 1098.4347826086957), ('Xiaodi', 467.24657534246575), ('Andreea', 1145.8085106382978), ('Anna', 1027.6986301369864), ('Lusine', 974.2702702702703), ('Yuqi', 1047.3529411764705), ('Sunam', 611.0757575757576), ('Katherine', 653.4305555555555), ('Ylona Georgiana', 642.9487179487179), ('Marta', 1151.1818181818182), ('Karman', 652.917808219178), ('Tamar', 1118.4166666666667), ('Jessica', 820.6849315068494), ('Charlotte', 676.013698630137), ('Joanne', 1227.8), ('Natalia', 1135.0), ('Dana', 724.0), ('Georgiana', 1153.9166666666667), ('Valerie', 1232.2424242424242), ('Camila', 997.8333333333334), ('Jana', 1034.3392857142858), ('Sabrina', 1180.421052631579), ('Jiaxi', 578.5), ('Isabelle', 884.6296296296297), ('Anca', 1127.7368421052631), ('Ashley', 698.9076923076923), ('Suzuho', 980.6666666666666), ('Angelina', 967.4772727272727), ('Federica', 874.3333333333334), ('Barbora', 927.2641509433962), ('Alena', 1274.9444444444443), ('Gyulnara', 1087.6216216216217), ('Mirabelle', 721.1643835616438), ('Karolina', 1235.8461538461538), ('Margarita', 779.5217391304348), ('Emilie', 705.4716981132076), ('Sara', 988.6666666666666), ('Daria', 1025.0), ('Sophia', 1221.3333333333333), ('Sabastiani', 982.7397260273973), ('Evgeniya', 830.875), ('Satsuki', 888.7272727272727), ('Aleksandra', 962.4629629629629), ('Julyette Maria Josephine', 732.1666666666666), ('Aleksandra', 747.5342465753424), ('Anna', 1032.157894736842), ('Mira', 788.2622950819672), ('Moulika', 1243.4), ('Ioana Diana', 482.43243243243245), ('Janja', 1262.5416666666667), ('Susan', 1015.6792452830189), ('Carolyn', 1197.578947368421), ('Jodie Anna', 925.4230769230769), ('Maegan', 787.0), ('Karola Patricia', 928.3333333333334), ('Martina', 1042.4137931034484), ('Sofya', 483.3235294117647), ('Valeriya', 943.8), ('Ekaterina', 1260.6363636363637), ('Victoria', 923.1578947368421), ('Kennedy', 807.7222222222222), ('Iana', 1085.581818181818), ('Oliwia', 1006.5128205128206), ('Francesca', 1147.8461538461538), ('Meritxell', 1182.9107142857142), ('Stephanie', 1019.9512195121952), ('Petra', 1221.6363636363637), ('Tereza', 860.8055555555555), ('Kimika', 1097.219512195122), ('Martina', 1174.7142857142858), ('Abigail', 605.425925925926), ('Claire', 581.8194444444445), ('Jada', 909.2), ('Dalila', 876.6444444444444), ('Basak', 1235.0555555555557), ('Ema', 1234.2692307692307), ('Clara', 1218.2857142857142), ('Astrid Wanja', 1086.45), ('Malene', 999.15625), ('Eva', 852.1194029850747), ('Anna', 435.0281690140845), ('Claudia', 1148.5142857142857), ('Chelsea', 1132.0), ('Marketa', 353.44444444444446), ('Miriam', 564.547619047619), ('Nika', 1134.3055555555557), ('Anna', 947.0714285714286), ('Dariya', 1090.0), ('Laura Sofia', 1198.1538461538462), ('Kim', 1224.8823529411766), ('Shanshan', 694.2), ('Linnea', 959.6981132075472), ('Anhzelika', 850.9791666666666), ('Akiko', 1275.8235294117646), ('Jessica', 930.1315789473684), ('Elena', 632.6888888888889), ('Mihika', 1064.142857142857), ('Wiktoria', 1083.1454545454546), ('Zhibek', 1058.0), ('Polina', 1064.1025641025642), ('Sofya', 895.952380952381), ('Karina', 1246.3636363636363), ('Anna', 1024.904761904762), ('Siyu', 1241.1379310344828), ('Yijia', 1063.9411764705883), ('Marcelina', 1247.3636363636363), ('Karine', 868.8904109589041), ('Eleonora', 950.0277777777778), ('Destanee', 483.77464788732397), ('Anna', 319.4736842105263), ('Naima', 930.7027027027027), ('Elena', 1151.6666666666667), ('Kristina', 1218.0740740740741), ('Andra Maria', 1275.8235294117646), ('Dominique', 979.3589743589744), ('Dayana', 576.4307692307692), ('Kayla', 418.6031746031746), ('Pei Ju', 1061.3076923076924), ('Lara', 1180.5), ('Dalila', 1096.972972972973), ('Katie', 498.1111111111111), ('Qianhui', 826.1388888888889), ('Yu Tong', 1239.6666666666667), ('Xinyu', 681.175), ('Mi Zhuoma', 999.375), ('Michela', 1228.9285714285713), ('Schena', 1188.2941176470588), ('Dorien', 1196.56), ('Siqi', 980.9076923076923), ('Zhima', 1144.45), ('Reina', 1019.0), ('Carson', 1020.6), ('Maria', 835.2926829268292), ('Kylie', 798.3181818181819), ('Jenny', 902.1470588235294), ('Viktoriia', 1236.5333333333333), ('Polina', 1089.12), ('Laura', 937.5555555555555), ('Jaimee', 562.8450704225352), ('Emma', 1071.59375), ('Anna Maria', 1069.063492063492), ('Melissa Ishuan', 1104.357142857143), ('Alexandra', 1123.3461538461538), ('Natalie', 1062.0188679245282), ('Chengyiyi', 789.2857142857143), ('Lulu', 1098.2888888888888), ('Eugenia', 1157.5), ('Daniela', 1181.3684210526317), ('Shelly', 1171.0), ('Lina', 1153.5833333333333), ('Olesya', 501.44444444444446), ('Victoria Ariadna', 1236.0), ('Zeel', 791.2352941176471), ('Lizaveta', 1120.5652173913043), ('Aneta', 1149.9705882352941), ('Claudia', 1057.923076923077), ('Seira', 1115.72), ('Zhou', 1237.9), ('Alana', 1119.1639344262296), ('Sabina', 1057.837837837838), ('Veronika', 1080.3728813559321), ('Anda', 1150.0), ('Nicole', 1222.5135135135135), ('Mihaela Lorena', 1223.4), ('Anna', 1110.9333333333334), ('Kaja', 633.5454545454545), ('Aastha', 1199.8235294117646), ('Abigail', 915.0), ('Cameron', 1192.1818181818182), ('Katharine', 882.1071428571429), ('Elina', 1164.0), ('Daria', 859.4912280701755), ('Maria', 1078.25), ('Diana Maria', 1205.7692307692307), ('Nermeen', 1069.15), ('Mathilde', 1107.5166666666667), ('Daniela', 1024.888888888889), ('Yanni', 1059.2702702702702), ('Shou Na', 1120.388888888889), ('Hanyu', 543.968253968254), ('Leonie', 825.972972972973), ('Constanze', 1245.3333333333333), ('Zhuoma', 989.75), ('Ana', 1097.1025641025642), ('Alina', 1273.6842105263158), ('Katarina', 520.968253968254), ('Kristina', 1169.3725490196077), ('Karolina', 1277.1875), ('Desirae', 863.7826086956521), ('Emiliana', 732.8888888888889), ('Sing Le', 1141.842105263158), ('Yang', 1177.8823529411766), ('Margaux', 874.0), ('Olga', 710.5862068965517), ('Hortencia', 1251.1333333333334), ('Nina', 788.4166666666666), ('Lucia', 1144.4), ('Axana', 1064.0), ('Blanca', 904.6538461538462), ('Bianca', 408.7096774193548), ('Francesca', 533.8709677419355), ('Ksenia', 1136.24), ('Eva', 1162.1698113207547), ('Miranda', 1169.4864864864865), ('Vivian', 940.7358490566038), ('Sandra', 1251.6), ('Judith', 1224.0), ('Tijana', 1017.7777777777778), ('Lucia', 1122.3333333333333), ('Hana', 1233.0625), ('Boba', 1254.6341463414635), ('Vanessa', 1235.625), ('Kassandra', 927.0350877192982), ('Abir', 1228.75), ('Caroline', 1105.313725490196), ('Vicky', 1252.9130434782608), ('Patrycja', 982.4150943396227), ('Nikola', 1236.142857142857), ('Emily', 822.6792452830189), ('Olivia', 1149.3870967741937), ('Alessia', 1184.5217391304348), ('Monika', 893.7413793103449), ('Cindy', 1059.030303030303), ('Alicia', 1161.421052631579), ('Zinovia', 1221.5), ('Denise Antonela', 1160.3125), ('Marina', 1010.5454545454545), ('Carlota', 1236.7777777777778), ('Emily', 1099.6756756756756), ('Momoko', 772.6981132075472), ('Lorraine M', 972.75), ('Fiona', 1142.5882352941176), ('Suzan', 982.7222222222222), ('Ramu', 1010.4545454545455), ('Lisa Marie', 1015.0512820512821), ('Laura', 1035.7567567567567), ('Livia', 1179.875), ('Johana', 1111.8333333333333), ('Adva', 1255.3333333333333), ('Anna Maria', 1141.45), ('Laura', 947.6756756756756), ('Ayano', 597.6981132075472), ('Irina', 1227.8), ('Maryna', 735.0285714285715), ('Roosh', 1168.2857142857142), ('Guiomar', 957.9512195121952), ('Selin', 1168.6571428571428), ('Hsin Yuan', 1107.7142857142858), ('Kateryna', 1088.6), ('Anastasiia', 1245.75), ('Yasmine', 1018.3333333333334), ('Franziska', 1223.25), ('Elizabeth', 1249.0), ('Kei', 1003.1212121212121), ('Nicole', 1180.7272727272727), ('Lara', 1221.5), ('Kelia', 1114.9433962264152), ('Phillis', 826.6486486486486), ('Anne Sophie', 1252.0), ('Michaela', 754.8378378378378), ('Arlinda', 1074.3333333333333), ('Paula', 1122.6190476190477), ('Lucia', 1117.2702702702702), ('Dewi', 1154.2857142857142), ('Anna', 1112.7368421052631), ('Xiaoxi', 737.7547169811321), ('Anastasia', 337.23809523809524), ('Rebeca', 1145.4333333333334), ('Daria', 1186.6296296296296), ('Ekaterina', 1257.5238095238096), ('Sara', 1205.4), ('Ana', 1026.6842105263158), ('Mayar', 1252.5357142857142), ('Lea', 950.2093023255813), ('Mahak', 875.0), ('Oleksandra', 1012.4782608695652), ('Sarah', 869.3846153846154), ('Salma', 1249.3333333333333), ('Emmanuelle', 909.8205128205128), ('Emma', 1122.5384615384614), ('Maria Camila', 1188.5277777777778), ('Alexandra', 660.4509803921569), ('Eden', 1243.3333333333333), ('Lauryn', 1107.0882352941176), ('Rosa', 965.0), ('Kaylah', 1163.3478260869565), ('Alexandra', 1050.9130434782608), ('Shuyue', 966.0588235294117), ('Yidi', 1185.030303030303), ('Gabriella', 1027.5454545454545), ('Erina', 733.1351351351351), ('Vitalia', 1224.0), ('Laylo', 1226.076923076923), ('Ilay', 1135.5), ('Kaitlin', 901.3333333333334), ('Alexandra', 1225.6206896551723), ('Jule', 1243.904761904762), ('Simona', 995.3055555555555), ('Bojana', 857.6111111111111), ('Adrienn', 1200.4117647058824), ('Panna', 683.1081081081081), ('Salma', 1195.7333333333333), ('Julita', 1019.9411764705883), ('Francesca', 1121.0), ('Shuo', 864.1538461538462), ('Alexa', 971.0909090909091), ('Ye Xin', 1048.081081081081), ('Jia', 1169.6923076923076), ('Nina', 1220.3823529411766), ('Yasmina', 1227.7777777777778), ('Suzy', 698.7567567567568), ('Sasa', 1033.027027027027), ('Stefania', 1172.0714285714287), ('Katarzyna', 1045.344827586207), ('Valeriya', 735.3589743589744), ('Ann', 907.4), ('Mai', 721.4571428571429), ('Whitney', 1152.8947368421052), ('Julia', 1064.0), ('Draginja', 913.7272727272727), ('Yuliya', 963.9666666666667), ('Xiyu', 954.6), ('Jiatian', 1232.032258064516), ('Katyarina', 1010.1818181818181), ('Luna', 1139.0), ('Sunae', 1229.8), ('Yuki', 876.7428571428571), ('Svenja', 1231.0), ('Angelica', 1240.3181818181818), ('Francisca', 903.1666666666666), ('Meiling', 812.85), ('Tingting', 1015.2352941176471), ('Ella', 1223.9), ('Anna', 1136.2857142857142), ('Ashley', 460.9), ('Ran', 917.6060606060606), ('Maja', 717.1388888888889), ('Caty', 744.0), ('Michaela', 882.2424242424242), ('Loudmilla', 1220.0), ('Maileen', 1152.888888888889), ('Akilah', 772.8571428571429), ('Xin Yu', 1022.3333333333334), ('Vlada', 1034.090909090909), ('Romy', 758.1714285714286), ('Alessia', 1224.0), ('Marta', 536.0), ('Anna', 1228.5454545454545), ('Lara', 1104.076923076923), ('Amanda', 474.4166666666667), ('Himari', 1219.0), ('Ayumi', 1036.3666666666666), ('Meiqi', 1029.1666666666667), ('Mei Xu', 1031.6), ('Karolina', 938.375), ('Aneta', 1224.0), ('Ana', 1224.0), ('Sohyun', 1004.6666666666666), ('Adrienn', 1229.8461538461538), ('Ramya', 1121.8846153846155), ('Anne Marie', 1237.6363636363637), ('Yekaterina', 1224.0), ('Giulia', 1173.2631578947369), ('Clara', 1075.0), ('Yulia', 1117.6923076923076), ('Irina', 1137.75), ('Lucia', 1169.6923076923076), ('Ayumi', 1047.7575757575758), ('Ange Oby', 1226.3333333333333), ('Genevieve', 772.2857142857143), ('Eva Marie', 1083.8333333333333), ('Iga', 705.5625), ('Giorgie', 1226.5), ('Layne', 1184.0), ('Daria', 1178.2068965517242), ('Zoe', 1141.4117647058824), ('Jiaxue', 1161.0), ('Laura', 1231.7), ('Kariann', 1068.9166666666667), ('Caroline', 1231.904761904762), ('Mananchaya', 1230.6), ('Zeynep  Sena', 1229.5714285714287), ('Brienne', 917.0), ('Jiakang', 1230.6), ('Varvara', 1159.3076923076924), ('Betina', 1229.5714285714287), ('Viktoriya', 1174.608695652174), ('Eva', 1168.2857142857142), ('Taylor', 1066.3333333333333), ('Margaux', 1231.421052631579), ('Molly', 1210.7777777777778), ('Leylah Annie', 1030.5), ('Ellie', 1047.0), ('Moyuka', 1198.25), ('Nina', 1229.5714285714287), ('Brindtha', 1126.3333333333333), ('Naomi', 1104.5714285714287), ('Merel', 900.75), ('Arina Gabriela', 1224.0), ('Helene', 920.8333333333334), ('Kristina', 995.0)]
Gold Output      : [(1199.8235294117646, 'Aastha'), (1110.0434782608695, 'Abbi'), (808.4545454545455, 'Abbie'), (387.66706161137444, 'Abigail'), (1039.6744186046512, 'Abiodun'), (1228.75, 'Abir'), (790.1538461538462, 'Adeliya'), (1122.4423076923076, 'Adnya'), (619.6814159292036, 'Adriana'), (1213.1666666666667, 'Adrienn'), (627.12, 'Adrijana'), (1255.3333333333333, 'Adva'), (1155.0392156862745, 'Afroditi'), (960.6770186335403, 'Agata'), (1082.3548387096773, 'Agata Jadwiga'), (1231.5, 'Agne'), (391.3003629764065, 'Agnes'), (694.0659898477157, 'Agnese'), (940.2125603864735, 'Agni'), (122.19587628865979, 'Agnieszka'), (684.8497652582159, 'Agustina'), (1154.25, 'Agustina Elena'), (1156.340425531915, 'Ah'), (1248.72, 'Ahlam'), (728.5, 'Ahsha'), (890.8728448275862, 'Ai'), (912.1523178807947, 'Ai Wen'), (1110.3333333333333, 'Aida'), (284.8724727838258, 'Aiko'), (1034.5833333333333, 'Ailen'), (1200.2, 'Aimee'), (1164.95, 'Aina'), (943.7397959183673, 'Ainhoa'), (1024.625, 'Aishwarya'), (302.84831460674155, 'Ajla'), (704.9618138424821, 'Akari'), (215.25185185185185, 'Akgul'), (710.9617224880383, 'Aki'), (1145.8235294117646, 'Akiho'), (493.98205383848455, 'Akiko'), (772.8571428571429, 'Akilah'), (1038.35, 'Akvile'), (1119.1639344262296, 'Alana'), (843.7260273972603, 'Alba'), (343.22432701894314, 'Alberta'), (775.2734375, 'Albina'), (1185.7142857142858, 'Aldana'), (1067.019801980198, 'Alejandra'), (450.22998544395927, 'Aleksandra'), (578.07962529274, 'Aleksandrina'), (820.4563492063492, 'Alena'), (1123.4864864864865, 'Alessandra'), (1057.628205128205, 'Alessia'), (1145.1641791044776, 'Alessondra'), (383.9921465968586, 'Alexa'), (569.2647632558965, 'Alexandra'), (945.625, 'Alexandria'), (718.5202702702703, 'Alexia'), (604.15, 'Alexis'), (441.9846743295019, 'Aliaksandra'), (710.3822682786414, 'Alice'), (951.9764150943396, 'Alice Andrada'), (1105.1298701298701, 'Alicia'), (855.813627254509, 'Alicja'), (925.0028776978418, 'Alina'), (611.35, 'Aliona'), (453.01556420233464, 'Alisa'), (403.48784576697403, 'Alison'), (822.3459915611814, 'Alix'), (252.11485774499474, 'Alize'), (217.85922330097088, 'Alla'), (557.9232456140351, 'Allie'), (1157.8, 'Almudena'), (871.6926829268293, 'Alona'), (1181.6078431372548, 'Alory Regina Elorriaga'), (496.9431818181818, 'Alyona'), (650.6240276577355, 'Amanda'), (747.4375, 'Amandine'), (1011.3666666666667, 'Amelie'), (803.9764705882353, 'Amina'), (613.195652173913, 'Aminat'), (1075.8260869565217, 'Amira'), (415.9078341013825, 'Amra'), (1209.4, 'Amrita'), (763.888198757764, 'Amy'), (460.8932038834951, 'An Sophie'), (396.2893280632411, 'Ana'), (842.8446601941747, 'Ana Bianca'), (524.9192825112108, 'Ana Clara'), (1084.7916666666667, 'Ana Gabriela'), (1243.4285714285713, 'Ana Luisa'), (1031.228855721393, 'Ana Paula'), (496.7156398104265, 'Ana Sofia'), (961.2631578947369, 'Ana Victoria'), (144.3264367816092, 'Anabel'), (922.2255639097745, 'Anaeve'), (482.26169844020797, 'Anais'), (859.3059701492538, 'Anamika'), (430.0872542522642, 'Anastasia'), (956.5754716981132, 'Anastasia Evgenyevna'), (1245.75, 'Anastasiia'), (221.66153846153847, 'Anastasija'), (671.2584369449378, 'Anastasiya'), (1127.7368421052631, 'Anca'), (1150.0, 'Anda'), (970.3620689655172, 'Andie K'), (1063.4736842105262, 'Andjela'), (1275.8235294117646, 'Andra Maria'), (414.4332292750607, 'Andrea'), (878.3939393939394, 'Andrea Renee'), (956.0333333333333, 'Andreea'), (801.84375, 'Andreea Amalia'), (726.2657657657658, 'Andreea Roxana'), (424.64521739130436, 'Andreja'), (1184.0416666666667, 'Andressa Cristina'), (1045.6666666666667, 'Andrina'), (1152.0857142857142, 'Aneta'), (367.2274678111588, 'Anett'), (969.8181818181819, 'Anette'), (1226.3333333333333, 'Ange Oby'), (1128.7272727272727, 'Angela'), (686.2234432234433, 'Angelica'), (1089.1603773584907, 'Angeliki'), (750.3207810320781, 'Angelina'), (308.56833824975416, 'Angelique'), (432.6949152542373, 'Anhelina'), (850.9791666666666, 'Anhzelika'), (720.1431870669746, 'Ani'), (947.472972972973, 'Anita'), (725.3893333333333, 'Anja'), (1228.388888888889, 'Anke'), (618.4714285714285, 'Ankita'), (907.4, 'Ann'), (551.5557158312297, 'Anna'), (760.639175257732, 'Anna Arina'), (428.5496828752643, 'Anna Giulia'), (345.51020408163265, 'Anna Karolina'), (916.7115384615385, 'Anna Katalina'), (201.87700534759358, 'Anna Lena'), (1070.3967391304348, 'Anna Maria'), (583.9347826086956, 'Annalisa'), (248.74237737516572, 'Anne'), (762.7606382978723, 'Anne Liz'), (1237.6363636363637, 'Anne Marie'), (1252.0, 'Anne Sophie'), (1042.037037037037, 'Annie'), (265.79487179487177, 'Annika'), (969.5882352941177, 'Anouk'), (1051.7096774193549, 'Antonela'), (589.1298076923077, 'Antonia'), (1049.4655172413793, 'Antonina'), (1037.0833333333333, 'Anushka'), (617.3333333333334, 'Ao'), (1016.5714285714286, 'Apichaya'), (658.5074074074074, 'Arabela'), (279.23336006415394, 'Arantxa'), (490.4144736842105, 'Aranza'), (200.97080291970804, 'Aravane'), (951.4146341463414, 'Ariadna'), (560.6778190830236, 'Arina'), (1224.0, 'Arina Gabriela'), (1074.3333333333333, 'Arlinda'), (1281.8461538461538, 'Arthi'), (349.54794520547944, 'Aryna'), (1181.27868852459, 'Aselya'), (1151.95, 'Asha'), (331.3681818181818, 'Ashleigh'), (638.88, 'Ashley'), (823.0909090909091, 'Ashling'), (1018.6637931034483, 'Ashmitha'), (803.3904761904762, 'Ashvarya'), (453.43392070484583, 'Asia'), (790.46875, 'Asiya'), (1172.5531914893618, 'Assia'), (829.5625, 'Astra'), (1086.45, 'Astrid Wanja'), (591.2544731610338, 'Audrey'), (1208.4285714285713, 'Avgusta'), (1064.0, 'Axana'), (552.4653465346535, 'Ayaka'), (901.8717948717949, 'Ayan'), (597.6981132075472, 'Ayano'), (397.83561643835617, 'Ayla'), (915.5932203389831, 'Aymet'), (479.5530612244898, 'Ayu Fani'), (412.74466019417474, 'Ayumi'), (556.2303370786517, 'Azra'), (763.8900651465798, 'Barbara'), (252.6093155893536, 'Barbora'), (656.2932551319648, 'Basak'), (785.0707482993197, 'Beatrice'), (457.4050279329609, 'Beatriz'), (1253.4, 'Beatriz Magdalena'), (971.2865853658536, 'Beatriz Maria'), (1382.1538461538462, 'Beauty'), (1167.3368421052633, 'Belen'), (681.7736842105263, 'Belinda'), (705.4688346883469, 'Benedetta'), (625.013698630137, 'Berfu'), (717.7932330827068, 'Bermet'), (541.273631840796, 'Bernarda'), (834.1005025125628, 'Bernice'), (1005.75, 'Berta'), (146.59709379128137, 'Bethanie'), (1229.5714285714287, 'Betina'), (878.0138888888889, 'Bhuvana'), (653.2805383022775, 'Bianca'), (696.952380952381, 'Bianka'), (550.1941544885177, 'Bibiane'), (912.71875, 'Blair'), (904.6538461538462, 'Blanca'), (1221.8333333333333, 'Blessing'), (1254.6341463414635, 'Boba'), (392.7313829787234, 'Bojana'), (834.2066115702479, 'Borislava'), (992.4222222222222, 'Boyan'), (970.9846153846154, 'Brandy'), (872.0930232558139, 'Breaunna'), (211.01377118644066, 'Brenda'), (854.3170731707318, 'Brianna'), (917.0, 'Brienne'), (1126.3333333333333, 'Brindtha'), (647.5205479452055, 'Britt'), (990.5210084033613, 'Brittany'), (804.6277056277056, 'Brooke'), (952.5619834710744, 'Brynn'), (555.3384615384615, 'Bunyawi'), (1140.981981981982, 'Busra'), (311.87854251012146, 'Cagla'), (709.4247787610619, 'Caitlin'), (803.7139479905437, 'Camelia Elena'), (1192.1818181818182, 'Cameron'), (539.7944621938232, 'Camila'), (1192.3783783783783, 'Camila Vital'), (801.6850649350649, 'Camilla'), (1112.9450549450548, 'Camille'), (236.07412398921832, 'Cara'), (416.3666666666667, 'Carina'), (411.70779777206513, 'Carla'), (1236.7777777777778, 'Carlota'), (1127.9338842975208, 'Carlotta'), (318.69978858350953, 'Carly'), (890.6351351351351, 'Carmen'), (842.1553398058253, 'Carmen Raluca'), (564.1434426229508, 'Carol'), (645.2279792746114, 'Carolin'), (718.725321888412, 'Carolina'), (799.0650406504066, 'Carolina Meligeni Rodrigues'), (342.40130505709624, 'Caroline'), (1161.5675675675675, 'Caroline B'), (1197.578947368421, 'Carolyn'), (1020.6, 'Carson'), (378.0163727959698, 'Casey'), (293.76942355889724, 'Catalina'), (941.4724409448819, 'Catherine'), (134.21917808219177, 'Catherine Cartan'), (744.0, 'Caty'), (755.4649681528663, 'Cecilia'), (1141.842105263158, 'Cecilie Lundgaard'), (708.618398637138, 'Celine'), (1123.3855421686746, 'Cemre'), (650.1367521367522, 'Chalena'), (343.2835365853659, 'Chanel'), (215.6615811373093, 'Chanelle'), (575.4626436781609, 'Chang'), (1281.8461538461538, 'Chanikarn'), (609.90625, 'Chantal'), (1128.030303030303, 'Chantelle'), (1232.8, 'Chaoyi'), (766.4794520547945, 'Charlene'), (927.7647058823529, 'Charlotte'), (593.9759036144578, 'Chayenne'), (1132.0, 'Chelsea'), (719.3061224489796, 'Chelsey'), (524.7444668008048, 'Chen'), (789.2857142857143, 'Chengyiyi'), (464.1367781155015, 'Chi Chi'), (1039.3902439024391, 'Chi Fan'), (950.8813559322034, 'Chia Hsien'), (359.3764705882353, 'Chia Jung'), (437.73858921161826, 'Chiaki'), (977.9640591966173, 'Chiara'), (533.9586374695864, 'Chieh Yu'), (848.9908952959029, 'Chihiro'), (385.2651515151515, 'Chin Wei'), (615.2230215827338, 'Chinami'), (583.530303030303, 'Ching Wen'), (749.3582089552239, 'Chiraz'), (874.8181818181819, 'Chisa'), (675.2445414847161, 'Chloe'), (1112.1458333333333, 'Chompoothip'), (1112.875, 'Christie'), (454.9920529801324, 'Christina'), (841.4051724137931, 'Christine'), (692.390625, 'Chun Mei'), (986.3944099378882, 'Chun Yan'), (659.3055555555555, 'Cindy'), (443.45754716981133, 'Claire'), (1190.7307692307693, 'Clara'), (826.2619047619048, 'Claudia'), (967.2978723404256, 'Claudia Antonia'), (996.2574257425742, 'Claudia Gianina'), (383.6413199426112, 'Claudine'), (823.6306306306307, 'Clelia'), (875.9772727272727, 'Clemence'), (964.1224489795918, 'Clementina Eugenia'), (620.4120171673819, 'Clothilde'), (270.5896860986547, 'Coco'), (1165.093023255814, 'Colomba'), (390.0, 'Conny'), (570.2723004694835, 'Constance'), (835.1132075471698, 'Constanza'), (1245.3333333333333, 'Constanze'), (832.7818181818182, 'Corina'), (356.8219696969697, 'Corinna'), (757.2253521126761, 'Cornelia'), (406.5511363636364, 'Cory Ann'), (1049.0, 'Costanza'), (554.5376344086021, 'Cristiana'), (643.616049382716, 'Cristina'), (439.5747863247863, 'Cristina Andreea'), (720.6428571428571, 'Cristina Madalina'), (949.7944444444445, 'Csilla'), (998.7722772277227, 'Cynthia'), (1010.3333333333334, 'Da Hye'), (920.1276595744681, 'Dabin'), (1159.1818181818182, 'Dagmara'), (720.7490039840637, 'Daiana'), (1181.4736842105262, 'Dajana'), (801.6933333333334, 'Dalia'), (525.9552572706936, 'Dalila'), (279.16438356164383, 'Dalma'), (1493.0, 'Damilola'), (1242.0, 'Damini'), (1198.3333333333333, 'Damira'), (994.4769230769231, 'Dan Ni'), (805.7028985507246, 'Dana'), (977.4539007092199, 'Daneika'), (380.609375, 'Danica'), (348.6364892881825, 'Daniela'), (643.9216101694915, 'Daniella'), (744.7453250222618, 'Danielle'), (434.68, 'Danielle Rose'), (1107.0919540229886, 'Danijela'), (302.83268482490274, 'Danka'), (1226.5454545454545, 'Daphne'), (629.6443987667009, 'Daria'), (464.95631067961165, 'Darija'), (1132.1744186046512, 'Dariya'), (531.1829405162739, 'Darya'), (722.6986301369863, 'Dasha'), (576.4307692307692, 'Dayana'), (550.9545454545455, 'Dea'), (764.6785714285714, 'Deborah'), (1115.0851063829787, 'Deeon'), (758.5342960288808, 'Dejana'), (983.4174757281553, 'Demi'), (419.1633466135458, 'Denisa'), (949.1239316239316, 'Denise'), (1160.3125, 'Denise Antonela'), (551.5304659498208, 'Deniz'), (1123.6486486486488, 'Deria'), (863.7826086956521, 'Desirae'), (1032.2666666666667, 'Desiree'), (665.686684073107, 'Despina'), (746.0962962962963, 'Despoina'), (483.77464788732397, 'Destanee'), (1154.2857142857142, 'Dewi'), (615.1506849315068, 'Dhruthi'), (736.1650485436893, 'Di'), (383.7832512315271, 'Dia'), (654.3773657782928, 'Diana'), (1205.7692307692307, 'Diana Maria'), (809.697247706422, 'Dianne'), (669.2982456140351, 'Dijana'), (1248.2, 'Dilara'), (1094.4583333333333, 'Dina'), (268.05945945945945, 'Dinah'), (1234.6176470588234, 'Doga Selen'), (803.8666666666667, 'Domenica'), (171.71134020618555, 'Dominika'), (1042.7843137254902, 'Dominique'), (1131.6333333333334, 'Donika'), (223.50900900900902, 'Donna'), (1196.56, 'Dorien'), (520.9397993311037, 'Doroteja'), (913.7272727272727, 'Draginja'), (929.0599369085173, 'Dunja'), (1073.1752577319587, 'Ebony'), (1029.6888888888889, 'Eden'), (211.67325428194994, 'Edina'), (656.2851711026616, 'Eduarda'), (842.7045454545455, 'Eetee'), (1214.857142857143, 'Ege'), (471.8367290748899, 'Ekaterina'), (553.9434782608696, 'Ekaterine'), (1221.7931034482758, 'Elaine'), (1066.5343511450383, 'Eleanor'), (324.3720930232558, 'Elena'), (392.44444444444446, 'Elena Gabriela'), (686.6470588235294, 'Elena Teodora'), (249.5244140625, 'Eleni'), (950.0277777777778, 'Eleonora'), (1087.372340425532, 'Eleonore'), (876.1730769230769, 'Eliessa'), (421.6573033707865, 'Elina'), (888.2213114754098, 'Elisabeth'), (334.7118644067797, 'Elise'), (418.39748953974896, 'Elitsa'), (579.5214723926381, 'Elixane'), (978.2708333333334, 'Eliza'), (1154.2714285714285, 'Elizabeta'), (736.9747747747748, 'Elizabeth'), (1006.2982456140351, 'Elizabeth Anita Alexandria'), (489.5307517084282, 'Elizaveta'), (981.9814814814815, 'Elizaveta Anna'), (1011.9433962264151, 'Elke'), (1168.7967479674796, 'Ella'), (750.9460093896714, 'Ellen'), (508.340206185567, 'Ellie'), (1211.2333333333333, 'Elodie'), (652.1984732824427, 'Elyne'), (819.3400503778338, 'Ema'), (672.730407523511, 'Emelyn'), (770.8472222222222, 'Emi'), (1232.0, 'Emilia'), (1022.9174311926605, 'Emiliana'), (705.4716981132076, 'Emilie'), (1209.625, 'Emilija'), (1092.2771084337348, 'Emiliya'), (585.093851132686, 'Emily'), (1041.948717948718, 'Emily J'), (682.0972222222222, 'Emina'), (641.046992481203, 'Emma'), (1193.3529411764705, 'Emma Christine'), (943.7716535433071, 'Emmanuelle'), (1229.7333333333333, 'En Pei'), (980.3333333333334, 'Ena'), (321.23595505617976, 'Eri'), (788.0384615384615, 'Erica'), (544.5041866028708, 'Erika'), (942.7969696969697, 'Erin'), (733.1351351351351, 'Erina'), (1218.5652173913043, 'Esen'), (966.0540540540541, 'Estela'), (617.4935251798561, 'Estelle'), (950.9090909090909, 'Ester'), (347.34943639291464, 'Estrella'), (781.3218390804598, 'Etsuko'), (911.7241379310345, 'Eudice Wong'), (1157.5, 'Eugenia'), (477.62886597938143, 'Eugenie'), (620.6746411483253, 'Eugeniya'), (500.29483037156706, 'Eva'), (1083.8333333333333, 'Eva Marie'), (1023.8690476190476, 'Eveliina'), (471.5439093484419, 'Evelyn'), (414.66339869281046, 'Evgenia'), (442.0344827586207, 'Evgeniya'), (612.0185185185185, 'Fang Ying'), (406.9281767955801, 'Fangzhou'), (569.1904761904761, 'Fanny'), (1106.3076923076924, 'Farah'), (673.7509157509157, 'Fatima'), (1070.9463414634147, 'Fatimah'), (648.2984054669704, 'Fatma'), (1015.5, 'Fatyha'), (722.7286493034525, 'Federica'), (1204.7272727272727, 'Federica Joe'), (647.922077922078, 'Fernanda'), (1187.0384615384614, 'Ferny'), (853.3908045977012, 'Fiona'), (376.47888446215137, 'Flavia'), (451.5810397553517, 'Florencia'), (999.2, 'Frances'), (570.534951862704, 'Francesca'), (903.1666666666666, 'Francisca'), (437.05298013245033, 'Francoise'), (949.6575342465753, 'Franziska'), (1244.3333333333333, 'Frederikke'), (544.1627906976744, 'Freya'), (696.7697332607512, 'Gabriela'), (994.0612244897959, 'Gabriela Nicole'), (792.5, 'Gabriella'), (985.7211538461538, 'Gabrielle Faith'), (1052.8314606741574, 'Gaelle'), (759.5352697095435, 'Gaia'), (526.2644836272041, 'Gail'), (305.19563522992985, 'Galina'), (606.7211740041929, 'Ganna'), (229.3774193548387, 'Garbine'), (1152.142857142857, 'Gebriela'), (772.2857142857143, 'Genevieve'), (533.5940594059406, 'Georgia'), (763.1014492753624, 'Georgia Andreea'), (1153.9166666666667, 'Georgiana'), (396.225, 'Georgina'), (1150.6607142857142, 'Ghislaine'), (813.1351351351351, 'Giada'), (567.8518518518518, 'Gioia'), (960.4941860465116, 'Giorgia'), (1226.5, 'Giorgie'), (1197.0, 'Giovanna'), (693.6215943491422, 'Giulia'), (584.359375, 'Giuliana'), (794.7118644067797, 'Gloria'), (716.3150684931506, 'Gozal'), (454.06233062330625, 'Grace'), (783.8288043478261, 'Gracia'), (547.277108433735, 'Greetje'), (296.8219584569733, 'Greta'), (797.383606557377, 'Guadalupe'), (1027.0, 'Guillermina'), (957.9512195121952, 'Guiomar'), (1168.3396226415093, 'Gulben'), (1196.0, 'Gulchekhra'), (1236.6153846153845, 'Gulnaz'), (995.4074074074074, 'Guzal'), (1087.6216216216217, 'Gyulnara'), (1051.623188405797, 'Habiba'), (844.3856812933026, 'Hae Sung'), (1179.4153846153847, 'Haine'), (1110.5376344086021, 'Hana'), (957.2, 'Hanna'), (543.968253968254, 'Hanyu'), (680.1050228310502, 'Hao Chen'), (1153.936507936508, 'Hao Ching'), (574.8723404255319, 'Harmony'), (694.341935483871, 'Harriet'), (774.6837606837607, 'Haruka'), (512.1515151515151, 'Haruna'), (914.5321100917431, 'Hayley'), (1214.7692307692307, 'Hazal'), (167.50632911392404, 'Heather'), (417.44323483670297, 'Heidi'), (1019.4107142857143, 'Helen'), (696.4752475247525, 'Helene'), (1095.1176470588234, 'Hikari'), (673.6635071090047, 'Hilda'), (1219.0, 'Himari'), (534.890243902439, 'Hiroko'), (860.8104265402843, 'Hirono'), (925.9865771812081, 'Ho Ching'), (1185.75, 'Hollie'), (914.8607594936709, 'Hongrui'), (1251.1333333333334, 'Hortencia'), (1107.7142857142858, 'Hsin Yuan'), (726.1737089201878, 'Hua Chen'), (1118.904761904762, 'Huijie'), (888.0055096418732, 'Hulya'), (1020.28125, 'Hye Min'), (1069.3208955223881, 'Hyojung'), (729.0671936758894, 'Hyun Hui'), (1038.6911764705883, 'I Hsuan'), (1085.581818181818, 'Iana'), (962.5, 'Ida'), (1232.2, 'Idia'), (705.5625, 'Iga'), (1135.5, 'Ilay'), (868.2191780821918, 'Ilka'), (452.625, 'Ilona'), (847.0941176470589, 'Ilze'), (845.375, 'Imane Maelle'), (1165.5573770491803, 'Ina'), (1069.0925925925926, 'Inci'), (954.046875, 'India'), (627.7027027027027, 'Indire'), (485.9559748427673, 'Indy'), (919.6147540983607, 'Ineke'), (687.0229885057471, 'Ines'), (1039.0, 'Inger'), (766.2549019607843, 'Ingrid'), (869.3571428571429, 'Ingrid Alexandra'), (748.6622691292876, 'Ingrid Esperanza'), (1192.5454545454545, 'Intissar'), (980.2232142857143, 'Ioana'), (482.43243243243245, 'Ioana Diana'), (646.0441176470588, 'Ioana Loredana'), (799.0552486187845, 'Ionela Andreea'), (655.7828348504552, 'Ipek'), (288.74423480083857, 'Irena'), (579.2153846153847, 'Irene'), (436.84339509862525, 'Irina'), (285.84388185654007, 'Irina Camelia'), (578.1381578947369, 'Irina Maria'), (866.1075949367089, 'Iris'), (489.5294964028777, 'Iryna'), (724.9178743961353, 'Isabel'), (1114.99375, 'Isabela'), (566.7873931623932, 'Isabella'), (781.6993464052288, 'Isabelle'), (1170.9411764705883, 'Iulia Maria'), (732.7386018237082, 'Iva'), (439.81414868105514, 'Ivana'), (871.109375, 'Ivania'), (1079.05, 'Ivanka'), (117.95684523809524, 'Iveta'), (1136.8535031847134, 'Ivette'), (872.0, 'Ivone'), (591.3809523809524, 'Ivonne'), (624.6089494163424, 'Jacqueline'), (909.2, 'Jada'), (739.04802259887, 'Jade'), (760.4920634920635, 'Jaeda'), (562.8450704225352, 'Jaimee'), (1243.875, 'Jaimy Gayle'), (1037.5274725274726, 'Jainy'), (402.36756756756756, 'Jamie'), (1247.3333333333333, 'Jamilya'), (592.5990783410139, 'Jan'), (406.6258503401361, 'Jana'), (240.5306603773585, 'Janette'), (699.7864583333334, 'Janina'), (1262.5416666666667, 'Janja'), (861.5102040816327, 'Janneke'), (748.7238095238096, 'Jaqueline Adina'), (1121.767857142857, 'Jara'), (149.46360759493672, 'Jarmila'), (633.027027027027, 'Jasmin'), (642.1811989100818, 'Jasmina'), (437.86915887850466, 'Jasmine'), (1117.64, 'Jasmine Amber'), (1070.5648854961833, 'Jawairiah'), (1035.46, 'Jazmin'), (983.1290322580645, 'Jazzamay'), (767.7730496453901, 'Jeannine'), (348.19338235294117, 'Jelena'), (556.7936681222708, 'Jennifer'), (902.1470588235294, 'Jenny'), (501.5860215053763, 'Jesika'), (655.7464059804486, 'Jessica'), (818.2043795620438, 'Jessika'), (967.6708860759494, 'Jessy'), (823.9789029535865, 'Ji Hee'), (833.5061082024433, 'Ji Young'), (1169.6923076923076, 'Jia'), (682.961038961039, 'Jia Jing'), (529.7777777777778, 'Jia Qi'), (794.4931506849315, 'Jiahui'), (1230.6, 'Jiakang'), (1232.032258064516, 'Jiatian'), (578.5, 'Jiaxi'), (1161.0, 'Jiaxue'), (114.05571428571429, 'Jie'), (501.0619469026549, 'Jil Belen'), (1116.4190476190477, 'Jil Nora'), (121.9579326923077, 'Jill'), (721.14, 'Jillian'), (1267.0, 'Jin'), (492.8915187376726, 'Jin A'), (1035.6470588235295, 'Jin Ju'), (369.1620469083156, 'Jing Jing'), (863.3225806451613, 'Joana'), (931.025641025641, 'Joanna'), (1227.8, 'Joanne'), (925.4230769230769, 'Jodie Anna'), (1111.8333333333333, 'Johana'), (310.3405299313052, 'Johanna'), (1022.6198347107438, 'Jordana'), (924.9325842696629, 'Josepha'), (684.4892086330935, 'Josephine'), (993.2105263157895, 'Josie'), (601.9846625766871, 'Jovana'), (812.6, 'Ju Eun'), (1224.0, 'Judith'), (1243.904761904762, 'Jule'), (576.9173467252564, 'Julia'), (1024.6666666666667, 'Julia Mansano'), (1110.0816326530612, 'Juliana'), (1175.7666666666667, 'Juliana Rocha'), (512.3787128712871, 'Julie'), (707.1467889908257, 'Julieta Lara'), (1019.9411764705883, 'Julita'), (732.1666666666666, 'Julyette Maria Josephine'), (1189.0, 'June'), (262.30884808013354, 'Junri'), (1212.9166666666667, 'Justina'), (521.5358361774744, 'Justine'), (585.8517745302714, 'Justyna'), (1055.020202020202, 'Kady'), (272.08855291576674, 'Kai Chen'), (522.6561403508772, 'Kai Lin'), (127.06775067750678, 'Kaia'), (901.3333333333334, 'Kaitlin'), (756.2549019607843, 'Kaitlyn'), (633.5454545454545, 'Kaja'), (661.9589041095891, 'Kajsa'), (568.2547169811321, 'Kamila'), (1162.8301886792453, 'Kamilla'), (765.1395348837209, 'Kamonwan'), (924.2782608695652, 'Kana'), (635.346516007533, 'Kanae'), (1105.3125, 'Kanako'), (799.9940828402367, 'Kanami'), (962.8536585365854, 'Kanika'), (871.0790513833992, 'Kaori'), (674.9672514619883, 'Karen'), (1068.9166666666667, 'Kariann'), (472.338003502627, 'Karin'), (883.6090909090909, 'Karina'), (696.9606060606061, 'Karina Ildor'), (1062.795918367347, 'Karina Kristina'), (868.8904109589041, 'Karine'), (1001.0679611650486, 'Karis'), (807.616, 'Karla'), (652.917808219178, 'Karman'), (928.3333333333334, 'Karola Patricia'), (1077.8095238095239, 'Karolayne'), (586.9412296564195, 'Karolina'), (873.6229508196722, 'Karoline'), (903.5769230769231, 'Karyn'), (927.0350877192982, 'Kassandra'), (331.93949394939494, 'Katalin'), (401.0998263888889, 'Katarina'), (459.29286608260327, 'Katarzyna'), (1117.7142857142858, 'Kate'), (491.8507295173962, 'Katerina'), (294.33209990749305, 'Kateryna'), (680.677700348432, 'Katharina'), (882.1071428571429, 'Katharine'), (836.6804511278195, 'Katherine'), (910.396694214876, 'Katherine Gabriela'), (415.7, 'Kathinka'), (291.4792817679558, 'Kathrin'), (620.9404580152672, 'Katie'), (1111.08, 'Katrine Isabel'), (492.6608695652174, 'Katy'), (1050.7, 'Katya'), (1010.1818181818181, 'Katyarina'), (583.1686746987951, 'Kayla'), (1163.3478260869565, 'Kaylah'), (772.2402912621359, 'Kazusa'), (1003.1212121212121, 'Kei'), (1114.9433962264152, 'Kelia'), (804.873831775701, 'Kelly'), (312.7584269662921, 'Kelly S'), (1012.325, 'Kelsey'), (807.7222222222222, 'Kennedy'), (643.422641509434, 'Keren'), (1018.6534653465346, 'Keri'), (1020.4271844660194, 'Kerstin'), (978.0229885057471, 'Khristina'), (1164.090909090909, 'Ki Ryang'), (287.71625344352617, 'Kiki'), (687.3120567375887, 'Kim'), (762.4081632653061, 'Kim Alice'), (846.9154228855722, 'Kimberley'), (618.6923076923077, 'Kimberly'), (1097.219512195122, 'Kimika'), (95.03465982028241, 'Kimiko'), (606.1467576791808, 'Kinnie'), (308.64912280701753, 'Kirsten'), (1035.0384615384614, 'Kirsten Andrea'), (576.9, 'Klaartje'), (235.31431431431432, 'Klara'), (780.7905027932961, 'Klaudia'), (826.0238095238095, 'Komola'), (567.0507399577167, 'Korina'), (844.7460317460317, 'Kotomi'), (522.984693877551, 'Krista'), (445.18918918918916, 'Kristie'), (343.25546975546973, 'Kristina'), (1060.5633802816901, 'Kristina N'), (837.7730496453901, 'Kristy'), (443.8467908902692, 'Kristyna'), (482.36648501362396, 'Ksenia'), (990.6, 'Kseniia'), (975.6271186440678, 'Ksenija'), (488.76107382550333, 'Kumiko'), (165.96132596685084, 'Kurumi'), (159.62397820163488, 'Kveta'), (1070.0377358490566, 'Kwan Yau'), (887.502487562189, 'Kyle'), (798.3181818181819, 'Kylie'), (348.54794520547944, 'Kyoka'), (443.76148409893995, 'Kyra'), (533.433770014556, 'Kyung Mi'), (677.4458598726114, 'Laetitia'), (996.8148148148148, 'Laili'), (1062.3666666666666, 'Lamis'), (643.6939163498099, 'Lara'), (1054.9019607843138, 'Larikah'), (504.4145867098865, 'Laura'), (910.5714285714286, 'Laura D'), (516.1982942430703, 'Laura Ioana'), (1198.1538461538462, 'Laura Sofia'), (484.9442231075697, 'Lauren'), (1107.0882352941176, 'Lauryn'), (612.736, 'Lavinia'), (1226.076923076923, 'Laylo'), (1184.0, 'Layne'), (858.4107142857143, 'Lea'), (1179.6216216216217, 'Leah'), (908.156862745098, 'Lee'), (594.9436936936937, 'Lena'), (657.8934169278997, 'Lena Marie'), (451.33577981651376, 'Lenka'), (773.5666666666667, 'Leolia'), (825.972972972973, 'Leonie'), (887.4545454545455, 'Lesedi Sheya'), (205.17590361445784, 'Lesia'), (514.7174515235457, 'Lesley'), (1180.5454545454545, 'Leslie'), (481.3229166666667, 'Leticia'), (1072.4, 'Leticia Garcia'), (1030.5, 'Leylah Annie'), (988.7425149700599, 'Li'), (387.87113402061857, 'Liana Gabriela'), (899.9150326797386, 'Libby'), (1035.327868852459, 'Libi'), (1147.8529411764705, 'Lidia'), (797.2128378378378, 'Lidziya'), (284.8326771653543, 'Liezel'), (567.9464544138929, 'Liga'), (722.5087719298245, 'Lilla'), (497.42124542124543, 'Lin'), (574.9808362369338, 'Lina'), (929.4398496240601, 'Linda'), (275.6055900621118, 'Lindsay'), (986.82, 'Lindsey'), (418.81925343811395, 'Ling'), (1184.7222222222222, 'Liniques'), (959.6981132075472, 'Linnea'), (356.0105210420842, 'Lisa'), (758.06, 'Lisa Maria'), (996.0408163265306, 'Lisa Marie'), (673.6507936507936, 'Lisanne'), (887.2875, 'Liubov'), (1179.875, 'Livia'), (870.9007633587786, 'Liz Tatiane'), (1120.5652173913043, 'Lizaveta'), (666.1496062992126, 'Lizette'), (1231.2727272727273, 'Lorenza'), (972.75, 'Lorraine M'), (680.1724137931035, 'Lou'), (1220.0, 'Loudmilla'), (380.5308641975309, 'Louisa'), (1070.1025641025642, 'Louise'), (188.06095041322314, 'Lourdes'), (907.3557312252965, 'Lu'), (859.8644067796611, 'Luca'), (845.740638002774, 'Lucia'), (885.7495107632094, 'Luciana'), (322.62611607142856, 'Lucie'), (845.986301369863, 'Lucrezia'), (756.3141592920354, 'Lucy'), (846.2727272727273, 'Ludmila'), (787.5416666666666, 'Ludmilla'), (981.7517730496454, 'Luisa'), (820.59375, 'Luisa Marie'), (284.22813688212926, 'Luksika'), (1098.2888888888888, 'Lulu'), (1139.0, 'Luna'), (974.2702702702703, 'Lusine'), (1190.0629921259842, 'Lutfiye'), (982.6666666666666, 'Lyann'), (952.4411764705883, 'Lynn'), (382.82479784366575, 'Lyudmyla'), (607.3360995850622, 'Macall'), (692.1515151515151, 'Macarena'), (324.63613231552165, 'Madalina'), (748.0, 'Maddison'), (1028.0365853658536, 'Madeleine'), (1217.469387755102, 'Madeline'), (1203.5, 'Madina'), (290.64452214452217, 'Madison'), (958.0955414012739, 'Madrie'), (787.0, 'Maegan'), (1139.7, 'Mafalda'), (1173.75, 'Maftuna'), (734.0, 'Magali'), (1036.1214953271028, 'Magalie'), (300.3974358974359, 'Magda'), (443.6296006264683, 'Magdalena'), (1092.7621951219512, 'Magy'), (875.0, 'Mahak'), (1007.15, 'Mahitha'), (687.25, 'Mai'), (745.433962264151, 'Maia'), (1206.6666666666667, 'Maia A'), (438.4245810055866, 'Maiko'), (1152.888888888889, 'Maileen'), (410.8463541666667, 'Mailen'), (896.7413793103449, 'Maja'), (784.8009049773756, 'Makiho'), (516.6615384615385, 'Makoto'), (999.15625, 'Malene'), (1004.7428571428571, 'Malika'), (825.039603960396, 'Malin'), (1031.5342465753424, 'Mallaurie'), (143.48235294117646, 'Mallory'), (947.3333333333334, 'Malou'), (1153.590909090909, 'Mami'), (1202.2692307692307, 'Man Ying Maggie'), (689.891129032258, 'Mana'), (1230.6, 'Mananchaya'), (838.1780821917808, 'Manca'), (361.0, 'Mandy'), (897.0974358974358, 'Manisha'), (622.7673469387755, 'Manon'), (1181.3548387096773, 'Manya'), (908.3962264150944, 'Mara'), (774.64, 'Marcela'), (1143.7957746478874, 'Marcela Guimaraes'), (1247.3636363636363, 'Marcelina'), (657.0171919770773, 'Marcella'), (325.5912596401028, 'Margalita'), (987.6739130434783, 'Margarida'), (611.4060995184591, 'Margarita'), (1051.1224489795918, 'Margaux'), (753.8346456692914, 'Margot'), (526.3698630136986, 'Mari'), (426.6002565198803, 'Maria'), (1190.0833333333333, 'Maria Agustina'), (1072.9591836734694, 'Maria Andrea'), (1188.5277777777778, 'Maria Camila'), (861.5050505050505, 'Maria Constanza De Las Mercedes'), (1119.4897959183672, 'Maria Del Rosario'), (194.2392065344224, 'Maria Elena'), (443.0228531855956, 'Maria Fernanda'), (1170.1830985915492, 'Maria Jesus'), (486.6092544987147, 'Maria Joao'), (306.1794310722101, 'Maria Jose'), (918.0769230769231, 'Maria Lourdes'), (1047.98224852071, 'Maria Paulina'), (359.81081081081084, 'Maria Teresa'), (662.1182795698925, 'Mariam'), (556.0428051001821, 'Mariana'), (730.3831168831168, 'Marianna'), (993.175925925926, 'Marianne'), (1085.4242424242425, 'Mariaryeni'), (695.574074074074, 'Marie'), (300.56296296296296, 'Marie Eve'), (1148.9166666666667, 'Mariia'), (544.2636655948553, 'Marija'), (1215.0, 'Marijana'), (532.6881807180315, 'Marina'), (774.5654761904761, 'Marine'), (279.78655282817505, 'Marion'), (1163.0, 'Mariona'), (1067.3413173652696, 'Marisa'), (281.871335504886, 'Mariya'), (353.44444444444446, 'Marketa'), (946.8934426229508, 'Marlies'), (783.1711711711712, 'Marrit'), (419.32988047808766, 'Marta'), (851.1224489795918, 'Marta Huqi'), (1056.0588235294117, 'Martha'), (751.8679119412942, 'Martina'), (869.1666666666666, 'Mary'), (1188.7096774193549, 'Mary Ann'), (323.86176470588236, 'Maryna'), (355.7223168654174, 'Masa'), (437.11396648044695, 'Mathilde'), (799.1875, 'Matilda'), (1013.4761904761905, 'Maud'), (1070.21875, 'Maureen'), (1121.0869565217392, 'Maurien'), (973.8717948717949, 'Maxine'), (1084.0294117647059, 'May'), (732.4260679079956, 'Maya'), (891.6309523809524, 'Mayar'), (407.029702970297, 'Mayo'), (619.9064748201439, 'Mayya'), (736.4809523809524, 'Megan'), (1025.0, 'Megumi'), (1031.6, 'Mei Xu'), (812.85, 'Meiling'), (1029.1666666666667, 'Meiqi'), (372.32502965599053, 'Melanie'), (1039.8333333333333, 'Melany Solange'), (1017.2560553633218, 'Melina'), (169.13578500707214, 'Melinda'), (634.7950310559006, 'Melis'), (993.1351351351351, 'Melisa'), (1154.093023255814, 'Melissa'), (1104.357142857143, 'Melissa Ishuan'), (1035.95, 'Meng Ning'), (1213.2142857142858, 'Mercedes'), (900.75, 'Merel'), (1182.9107142857142, 'Meritxell'), (337.5292682926829, 'Mervana'), (554.3953934740883, 'Mi'), (1071.3076923076924, 'Mi Jeong'), (992.7225433526012, 'Mi Rae'), (999.375, 'Mi Zhuoma'), (987.504761904762, 'Mia Nicole'), (1332.0737704918033, 'Micaela'), (676.90589198036, 'Michaela'), (185.3469387755102, 'Michaella'), (1228.9285714285713, 'Michela'), (946.8846153846154, 'Michele Alexandra'), (280.79959100204496, 'Michelle'), (718.047619047619, 'Michika'), (376.7356115107914, 'Mihaela'), (1223.4, 'Mihaela Lorena'), (523.2788844621514, 'Miharu'), (1064.142857142857, 'Mihika'), (1110.4411764705883, 'Mihoki'), (586.2250489236791, 'Miki'), (1201.16, 'Mila'), (1234.2857142857142, 'Milagros'), (626.441935483871, 'Milana'), (1114.4074074074074, 'Milena'), (1221.904761904762, 'Milica'), (866.0693069306931, 'Min'), (819.8425531914894, 'Min Hwa'), (1238.0625, 'Minami'), (788.2622950819672, 'Mira'), (721.1643835616438, 'Mirabelle'), (1169.4864864864865, 'Miranda'), (912.120218579235, 'Miriam'), (628.075, 'Miriam Bianca'), (950.6263736263736, 'Miriana'), (843.6428571428571, 'Mirjam'), (186.76587795765877, 'Mirjana'), (617.0379241516966, 'Misa'), (208.95263157894738, 'Misaki'), (1121.04, 'Mitsumi'), (447.93283582089555, 'Miyabi'), (594.9036697247707, 'Miyu'), (593.1506849315068, 'Mizuno'), (1029.0, 'Molly'), (772.6981132075472, 'Momoko'), (273.57517899761336, 'Mona'), (210.0846394984326, 'Monica'), (980.575, 'Monika'), (462.4270462633452, 'Monique'), (541.952380952381, 'Montserrat'), (880.6527777777778, 'Morgane'), (1243.4, 'Moulika'), (1258.5, 'Mouna'), (1198.25, 'Moyuka'), (1227.0, 'Muazzez'), (1186.9444444444443, 'Muge'), (485.40168539325845, 'Myrtille'), (82.13112391930835, 'Na'), (608.7791798107255, 'Na Lae'), (573.5197368421053, 'Na Ri'), (868.6521739130435, 'Nadezda'), (407.5463976945245, 'Nadia'), (637.4607407407408, 'Nadiya'), (631.8181818181819, 'Nadja'), (828.0675675675676, 'Nagi'), (767.4963503649635, 'Naiktha'), (930.7027027027027, 'Naima'), (878.6666666666666, 'Nam Yeon'), (890.4455445544554, 'Nan Nan'), (542.7168141592921, 'Nanuli'), (313.45625, 'Nao'), (1180.3828125, 'Naoko'), (483.97225572979494, 'Naomi'), (929.4388489208633, 'Napatsakorn'), (1138.9166666666667, 'Nastassia'), (554.5290322580645, 'Nastassja'), (593.1772853185596, 'Nastja'), (720.132932166302, 'Natalia'), (577.9677419354839, 'Natalie'), (634.3620689655172, 'Natalija'), (1247.909090909091, 'Nataliya'), (666.2853403141361, 'Natasa'), (883.0777142857143, 'Natasha'), (566.4943396226415, 'Natela'), (962.0188679245283, 'Natella'), (543.031185031185, 'Nathalia'), (617.4615384615385, 'Nathaly'), (929.6928104575163, 'Natia'), (547.7037037037037, 'Natsumi'), (1177.622641509434, 'Nattawadee'), (1087.3823529411766, 'Naz'), (825.7291666666666, 'Nazari'), (745.421052631579, 'Neda'), (1164.107142857143, 'Nelise'), (1069.15, 'Nermeen'), (1031.0, 'Nevena'), (515.3191489361702, 'Nicha'), (843.9007633587786, 'Nicky'), (753.2253164556962, 'Nicola'), (499.4127634660422, 'Nicole'), (485.46875, 'Nicoleta Catalina'), (778.1648648648649, 'Nicolette'), (762.1578947368421, 'Nidhi'), (376.7617554858934, 'Nigina'), (913.4380165289256, 'Nika'), (1174.0, 'Nikita'), (1017.3134328358209, 'Nikki'), (1054.0813953488373, 'Nikol'), (723.484076433121, 'Nikola'), (528.8673050615595, 'Nina'), (1124.1666666666667, 'Nina Isabella'), (841.0514705882352, 'Nives'), (965.5343511450382, 'Noel'), (1049.834745762712, 'Noelia'), (883.7787610619469, 'Noelle'), (1167.2758620689656, 'Nonna'), (374.93926247288505, 'Noppawan'), (921.6216216216217, 'Nora'), (1096.1140350877192, 'Nour'), (936.3392857142857, 'Nozomi'), (436.66881028938906, 'Nudnida'), (537.577922077922, 'Nungnadda'), (395.6680227827502, 'Nuria'), (1027.1382978723404, 'Oana'), (686.3047619047619, 'Oana Georgeta'), (728.7630208333334, 'Oceane'), (839.4923664122138, 'Ofri'), (533.9652351738241, 'Oksana'), (660.8924731182796, 'Ola'), (1397.5, 'Olawaseun'), (1112.75, 'Olaya'), (903.4289156626506, 'Oleksandra'), (1179.1555555555556, 'Olena'), (501.44444444444446, 'Olesya'), (432.6511627906977, 'Olga'), (446.7231833910035, 'Olivia'), (1006.5128205128206, 'Oliwia'), (435.1470588235294, 'Ons'), (978.7321428571429, 'Ornella'), (866.0454545454545, 'Oyku'), (1156.28125, 'Paige Mary'), (989.1904761904761, 'Pamela'), (683.1081081081081, 'Panna'), (132.12638580931264, 'Paola'), (1099.625, 'Parris'), (863.5507246376811, 'Patcharin'), (572.8059701492538, 'Patricia'), (403.935, 'Patricia Maria'), (657.3816155988858, 'Patrycja'), (385.8135593220339, 'Patty'), (558.0162601626016, 'Paula'), (1175.909090909091, 'Paula Andrea'), (868.7624113475177, 'Paula Catalina'), (508.4679802955665, 'Paula Cristina'), (1035.7780678851175, 'Paulina'), (298.1861898890259, 'Pauline'), (915.5892857142857, 'Pavla'), (514.586319218241, 'Peangtarn'), (755.5813953488372, 'Peggy'), (673.9809523809524, 'Pei Chi'), (1106.5, 'Pei Hsuan'), (1061.3076923076924, 'Pei Ju'), (465.24962852897477, 'Pemra'), (619.4154929577464, 'Pernilla'), (710.3972602739726, 'Petia'), (365.50280484204313, 'Petra'), (1211.0, 'Phenomena'), (826.6486486486486, 'Phillis'), (737.862676056338, 'Pia'), (668.2581196581197, 'Piia'), (740.5879828326181, 'Pilar'), (1041.0740740740741, 'Pippa'), (937.7945205479452, 'Plobrung'), (630.7953529937444, 'Polina'), (478.30369515011546, 'Polona'), (729.1047904191616, 'Poojashree'), (795.4736842105264, 'Pranjala'), (653.5070422535211, 'Prarthana G'), (740.5361842105264, 'Prerna'), (1137.19, 'Priscila'), (675.4124293785311, 'Priscilla'), (383.4714587737844, 'Qiang'), (826.1388888888889, 'Qianhui'), (943.421052631579, 'Qianqian'), (705.8493150684932, 'Qiu Yu'), (883.2352941176471, 'Quinn'), (633.9770491803279, 'Quirine'), (859.2706766917294, 'Rachael'), (1147.8526315789475, 'Rachel'), (955.7833333333333, 'Radina'), (1121.2432432432433, 'Rafaela'), (1176.5, 'Ralina'), (304.4619771863118, 'Raluca'), (672.2258064516129, 'Raluca Elena'), (539.6164383561644, 'Raluca Georgiana'), (1010.4545454545455, 'Ramu'), (1121.8846153846155, 'Ramya'), (598.2655172413793, 'Ran'), (1117.6666666666667, 'Rana'), (700.7644444444444, 'Raquel'), (1089.2100840336134, 'Rashmi'), (1021.6504854368932, 'Ratnika'), (487.6268656716418, 'Raveena'), (1145.4333333333334, 'Rebeca'), (568.3374316939891, 'Rebecca'), (676.1090909090909, 'Rebeka'), (289.60283687943263, 'Regina'), (1019.0, 'Reina'), (323.1388101983003, 'Reka Luca'), (494.6111111111111, 'Remi'), (274.85317919075146, 'Renata'), (669.448275862069, 'Ria'), (638.6666666666666, 'Rianna'), (246.19871794871796, 'Richel'), (290.0614657210402, 'Rika'), (495.22641509433964, 'Riko'), (1125.0363636363636, 'Rio'), (489.65909090909093, 'Risa'), (775.7269624573379, 'Rishika'), (1051.7349397590363, 'Rita'), (651.4246575342465, 'Riya'), (150.96681415929203, 'Roberta'), (431.19607843137254, 'Robin'), (1054.606896551724, 'Robyn'), (795.6201232032854, 'Rocio'), (402.49931972789113, 'Romana'), (669.8542372881356, 'Romana Caroline'), (283.63246554364474, 'Romina'), (758.1714285714286, 'Romy'), (1125.5471698113208, 'Rona'), (427.0, 'Ronit'), (1072.857142857143, 'Ronke'), (1168.2857142857142, 'Roosh'), (965.0, 'Rosa'), (1059.73, 'Rosalia'), (1066.5887096774193, 'Rosalie'), (984.1714285714286, 'Rosie'), (479.51738241308794, 'Roxane'), (1209.625, 'Rui'), (573.8729603729604, 'Rushmi'), (808.5096774193548, 'Rutuja'), (1069.0379746835442, 'Ryann'), (1117.88, 'Saana'), (982.7397260273973, 'Sabastiani'), (682.2005532503458, 'Sabina'), (1184.6666666666667, 'Sabina Elena'), (203.5871080139373, 'Sabine'), (905.6324786324786, 'Sabrina'), (340.2890442890443, 'Sacha'), (400.8093385214008, 'Sachia'), (368.26881720430106, 'Sachie'), (665.8219178082192, 'Sadafmoh'), (998.5238095238095, 'Sai Samhitha'), (297.39032258064515, 'Saisai'), (832.9585365853659, 'Sakiko'), (529.583908045977, 'Sally'), (1204.6666666666667, 'Salma'), (406.21702404158543, 'Samantha'), (932.8940397350993, 'Samira'), (1105.171875, 'Sanae'), (703.1372549019608, 'Sanaz'), (563.964505613908, 'Sandra'), (1028.9565217391305, 'Sandy'), (857.9508196721312, 'Sang Hee'), (177.22695035460993, 'Sania'), (509.80945757997216, 'Sara'), (546.5551763367463, 'Sarah'), (875.9277108433735, 'Sarah Beth'), (743.6062176165804, 'Sarah Rebecca'), (1139.2340425531916, 'Sarahi'), (1191.6470588235295, 'Sarai Delfina'), (840.0776699029126, 'Saray'), (1081.1666666666667, 'Sari'), (1209.7777777777778, 'Sarlota'), (1235.1960784313726, 'Sarvinoz'), (1033.027027027027, 'Sasa'), (747.3695652173913, 'Saska'), (888.7272727272727, 'Satsuki'), (1142.9285714285713, 'Savannah'), (1188.2941176470588, 'Schena'), (1210.2571428571428, 'Se Hyun'), (1122.4545454545455, 'Se Jin'), (1240.92, 'Sean'), (1003.5367647058823, 'Seda'), (1115.72, 'Seira'), (1168.6571428571428, 'Selin'), (858.9173789173789, 'Seo Kyung'), (889.8028169014085, 'Seone'), (14.654294803817603, 'Serena'), (162.3505747126437, 'Sesil'), (784.0465949820789, 'Seung Yeon'), (218.4701086956522, 'Severine'), (166.41358024691357, 'Shahar'), (924.8818897637796, 'Shakhlo'), (1236.7627118644068, 'Shakhnoza'), (1228.3235294117646, 'Shangqing'), (694.2, 'Shanshan'), (967.9034090909091, 'Shao Yuan'), (851.5633802816901, 'Sharmada'), (296.5792682926829, 'Sharon'), (1097.0, 'Sharon Sanchana'), (372.89398280802294, 'Shelby'), (1171.0, 'Shelly'), (451.8657487091222, 'Sheng Nan'), (649.5154639175257, 'Sherazad'), (1024.0116279069769, 'Sherry'), (500.688679245283, 'Shiho'), (632.2824427480916, 'Shilin'), (1070.6666666666667, 'Shiori'), (1154.4166666666667, 'Shir'), (1187.9245283018868, 'Shiran'), (935.2322946175638, 'Shivika'), (1120.388888888889, 'Shou Na'), (1148.0, 'Shreya'), (1042.6802325581396, 'Shu Ying'), (167.90740740740742, 'Shuai'), (421.44179894179894, 'Shuko'), (864.1538461538462, 'Shuo'), (966.0588235294117, 'Shuyue'), (897.6951219512196, 'Shweta'), (1047.7575757575758, 'Si Qi'), (565.8211508553654, 'Silvia'), (542.2382851445662, 'Simona'), (1070.3417721518988, 'Simone'), (974.8, 'Simran Kaur'), (728.7443609022556, 'Sina'), (975.3484848484849, 'Sinead'), (1141.842105263158, 'Sing Le'), (980.9076923076923, 'Siqi'), (949.7916666666666, 'Sirui'), (1241.1379310344828, 'Siyu'), (259.63589743589745, 'Sloane'), (1184.8260869565217, 'Smriti'), (1225.388888888889, 'Sneha'), (632.3150684931506, 'Snehadevi S'), (514.1732026143791, 'So Jung'), (572.2654545454545, 'So Ra'), (526.3535641547861, 'Sofia'), (1084.107142857143, 'Sofico'), (724.5, 'Sofie'), (541.1570881226054, 'Sofiya'), (640.8727272727273, 'Sofya'), (1004.6666666666666, 'Sohyun'), (1029.0980392156862, 'Sonia'), (885.0976744186047, 'Sonja'), (1221.3333333333333, 'Sophia'), (600.6881091617934, 'Sophie'), (213.75043630017453, 'Sorana'), (813.1357142857142, 'Sowjanya'), (1149.3125, 'Spurti'), (792.1927710843373, 'Sri Vaishnavi'), (841.8387096774194, 'Stamatia'), (312.54158964879855, 'Stanislava'), (993.4255319148937, 'Stefana'), (1167.3333333333333, 'Stefani'), (759.2894995093228, 'Stefania'), (387.73412112259973, 'Stefanie'), (939.746835443038, 'Steffi'), (439.87772357723577, 'Stephanie'), (1035.5548387096774, 'Stephanie Mariel'), (573.6708333333333, 'Storm'), (426.3886462882096, 'Su Jeong'), (217.2493188010899, 'Su Wei'), (911.7619047619048, 'Suellen'), (944.2432432432432, 'Sultan'), (812.4581005586592, 'Sun Jung'), (1229.8, 'Sunae'), (611.0757575757576, 'Sunam'), (635.7449168207024, 'Sung Hee'), (1015.6792452830189, 'Susan'), (417.8053097345133, 'Susanne'), (982.7222222222222, 'Suzan'), (980.6666666666666, 'Suzuho'), (698.7567567567568, 'Suzy'), (844.203007518797, 'Svenja'), (267.03227571115974, 'Svetlana'), (691.9934640522875, 'Sviatlana'), (1002.6792452830189, 'Sybille'), (869.1702127659574, 'Sylvia'), (787.7645348837209, 'Sylwia'), (791.1240506329113, 'Syna'), (772.3186813186813, 'Szabina'), (343.0985324947589, 'Tadeja'), (969.6588235294117, 'Taisiya'), (1230.2, 'Talya'), (949.8059701492538, 'Tamachan'), (1118.4166666666667, 'Tamar'), (614.0434782608696, 'Tamara'), (1146.3934426229507, 'Tamari'), (121.82273948075202, 'Tamarine'), (386.7025316455696, 'Tamaryn'), (135.88910505836577, 'Tamira'), (601.906914893617, 'Tammi'), (1113.2325581395348, 'Tanaporn'), (1023.089430894309, 'Tanya'), (475.2979683972912, 'Tara'), (1075.0, 'Tatia'), (681.9417582417583, 'Tatiana'), (247.7449768160742, 'Tatjana'), (912.1077844311377, 'Tatsiana'), (747.3172413793103, 'Tayisiya'), (387.5662100456621, 'Taylor'), (1068.7457627118645, 'Tea'), (461.06702898550725, 'Teliana'), (614.9346733668342, 'Tena'), (489.27513227513225, 'Teodora'), (557.241418764302, 'Tereza'), (963.5, 'Terri'), (696.2878787878788, 'Tess'), (390.2361111111111, 'Tessah'), (437.4119658119658, 'Tetiana'), (398.83478260869566, 'Tetyana'), (802.7222222222222, 'Thai Sa Grana'), (650.1206896551724, 'Theo'), (1159.5632183908046, 'Theresa'), (1017.7777777777778, 'Tijana'), (182.02426160337552, 'Timea'), (425.82394366197184, 'Tina'), (810.6666666666666, 'Tinatin'), (739.7727272727273, 'Ting Fei'), (789.6113989637306, 'Ting Jr'), (1015.2352941176471, 'Tingting'), (743.1953125, 'Tjasa'), (838.8065217391304, 'Tomoko'), (841.7167381974249, 'Tori'), (878.1666666666666, 'Tornado Alicia'), (1029.3196721311476, 'Trang'), (1009.8666666666667, 'Treta'), (131.02074074074073, 'Tsvetana'), (992.4870588235294, 'Tyra'), (506.39344262295083, 'Ulrikke'), (844.0692307692308, 'Ulyana'), (229.35687022900763, 'Urszula'), (1132.4109589041095, 'Ushna'), (411.5068493150685, 'Usue Maitane'), (921.3333333333334, 'Valentina'), (751.2668918918919, 'Valentine'), (479.8914728682171, 'Valentini'), (368.14331210191085, 'Valentyna'), (661.8474576271186, 'Valeria'), (806.2648401826484, 'Valerie'), (799.8668224299065, 'Valeriya'), (696.4126984126984, 'Vanda'), (579.437984496124, 'Vanesa'), (398.3106546854942, 'Vanessa'), (185.75, 'Vania'), (1130.6037735849056, 'Vaniya'), (1089.7111111111112, 'Vanja'), (450.4642082429501, 'Varatchaya'), (894.3846153846154, 'Varunya'), (382.6888217522659, 'Varvara'), (613.5330490405117, 'Vasilisa'), (859.8103448275862, 'Vaszilisza'), (729.0117647058823, 'Vendula'), (32.984862819299906, 'Venus'), (195.66923570969814, 'Vera'), (958.1327800829876, 'Verena'), (726.1852387843704, 'Veronica'), (951.0075757575758, 'Veronica M'), (734.6018957345972, 'Veronika'), (240.0448979591837, 'Vesna'), (1252.9130434782608, 'Vicky'), (1138.8490566037735, 'Victoire'), (444.9760935910478, 'Victoria'), (1236.0, 'Victoria Ariadna'), (566.9148936170212, 'Viktoria'), (1236.5333333333333, 'Viktoriia'), (507.4, 'Viktorija'), (736.2288557213931, 'Viktoriya'), (966.4671052631579, 'Viktoryia'), (1243.0, 'Vilma Y'), (1214.1142857142856, 'Vincenza'), (1150.0, 'Vinciane'), (1170.840579710145, 'Violetta'), (355.88102893890675, 'Virginie'), (1208.952380952381, 'Vishesh'), (1201.25, 'Vita'), (296.2025641025641, 'Vitalia'), (670.9108527131783, 'Vivian'), (607.2810218978102, 'Vivien'), (659.2103004291846, 'Vivienne'), (595.3291666666667, 'Vlada'), (943.5432098765432, 'Vladica'), (823.8770833333333, 'Vladimira'), (1006.1769911504425, 'Vladislava'), (856.0782608695653, 'Vladyslava'), (555.6572164948453, 'Vojislava'), (999.0215053763441, 'Voni'), (701.4009009009009, 'Wan Ting'), (1081.142857142857, 'Wan Yi'), (1249.3333333333333, 'Warona'), (440.35214446952597, 'Wen Hsin'), (1117.55, 'Wen Ling'), (1011.469696969697, 'Wendy Qi Wen'), (1152.7837837837837, 'Weronika Jasmina'), (886.1407407407407, 'Whitney'), (1083.1454545454546, 'Wiktoria'), (585.2589641434263, 'Wing Yau Venise'), (937.7878787878788, 'Wushuang'), (661.2222222222222, 'Xenia'), (714.8653846153846, 'Xi Yao'), (814.4171122994652, 'Xiao'), (467.24657534246575, 'Xiaodi'), (848.4418604651163, 'Xiaorong'), (737.7547169811321, 'Xiaoxi'), (712.2780373831775, 'Ximena'), (694.4808743169399, 'Xin'), (1022.3333333333334, 'Xin Yu'), (480.646017699115, 'Xinyu'), (309.35767790262173, 'Xinyun'), (954.6, 'Xiyu'), (488.7671232876712, 'Xu Liu'), (1225.75, 'Ya'), (586.865, 'Ya Hsuan'), (325.6162790697674, 'Yafan'), (768.560975609756, 'Yan'), (740.0214504596527, 'Yana'), (1177.8823529411766, 'Yang'), (381.2581602373887, 'Yanina'), (1059.2702702702702, 'Yanni'), (1166.875, 'Yarden'), (211.41240310077518, 'Yaroslava'), (702.1784386617101, 'Yasmin'), (1227.7777777777778, 'Yasmina'), (983.0410958904109, 'Yasmine'), (1261.8181818181818, 'Yasmyn'), (1110.4594594594594, 'Yawna'), (114.78806907378336, 'Yayuk'), (431.3144424131627, 'Ye Ra'), (1048.081081081081, 'Ye Xin'), (1155.8191489361702, 'Yekaterina'), (897.4873949579832, 'Yelena'), (973.8617021276596, 'Yeong Won'), (724.8712871287129, 'Yevgeniya'), (791.0756207674943, 'Yi'), (381.5512572533849, 'Yi Fan'), (656.8787276341948, 'Yi Jing'), (418.2566137566138, 'Yi Miao'), (1185.030303030303, 'Yidi'), (1209.625, 'Yihong'), (1063.9411764705883, 'Yijia'), (661.3972602739726, 'Ying'), (403.8775981524249, 'Ying Ying'), (801.6712328767123, 'Yixuan'), (892.3561643835617, 'Ylena'), (642.9487179487179, 'Ylona Georgiana'), (1128.901098901099, 'Yoko'), (1068.4619883040937, 'Yolande'), (1263.7666666666667, 'Yoo Ri'), (844.9310344827586, 'Yoon Young'), (1096.9130434782608, 'Yoshimi'), (1222.24, 'Yosr'), (1170.3461538461538, 'You Na'), (458.86633663366337, 'Ysaline'), (1098.357142857143, 'Yu Jin'), (1239.6666666666667, 'Yu Tong'), (1054.0, 'Yuan'), (891.2340425531914, 'Yuanyi'), (983.359649122807, 'Yue'), (444.96190476190475, 'Yue Yue'), (961.876923076923, 'Yuenu'), (1034.1304347826087, 'Yujia'), (748.8250591016548, 'Yuka'), (1071.5833333333333, 'Yukako'), (876.7428571428571, 'Yuki'), (698.8285714285714, 'Yuki Kristina'), (857.1692307692308, 'Yukina'), (824.3936170212766, 'Yukun'), (485.35135135135135, 'Yulia'), (725.5322195704057, 'Yuliana'), (384.87776983559684, 'Yuliya'), (799.1332586786115, 'Yumi'), (166.6586270871985, 'Yung Jan'), (1047.3529411764705, 'Yuqi'), (322.17758620689654, 'Yurika'), (1041.5367231638418, 'Yuriko'), (746.4803493449782, 'Yurina'), (608.1309090909091, 'Yuuki'), (1230.2, 'Yuval'), (545.449074074074, 'Yuxuan'), (318.2867132867133, 'Yvonne'), (1227.344827586207, 'Zaineb'), (867.5288461538462, 'Zalina'), (709.625, 'Zarah'), (222.81428571428572, 'Zarina'), (791.2352941176471, 'Zeel'), (1229.5714285714287, 'Zeynep  Sena'), (627.7777777777778, 'Zhanlan'), (629.0081967213115, 'Zhaoxuan'), (1058.0, 'Zhibek'), (1144.45, 'Zhima'), (1237.9, 'Zhou'), (989.75, 'Zhuoma'), (391.4656290531777, 'Zi'), (1221.5, 'Zinovia'), (878.4606741573034, 'Ziyue'), (765.3777777777777, 'Zoe'), (935.081081081081, 'Zoe Gwen'), (916.559633027523, 'Zsofia'), (451.92875448487956, 'Zuzana'), (794.5416666666666, 'Zuzanna')]

===== Eval Round 471 =====
Database         : wta_1
Prediction SQL   : SELECT p.first_name, AVG(r.ranking) FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id
Gold SQL         : SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Mirjana', 186.76587795765877), ('Tamarine', 121.82273948075202), ('Katarina', 196.02280912364947), ('Jana', 178.44725111441306), ('Lisa', 101.55520833333334), ('Maureen', 1070.21875), ('Serena', 14.654294803817603), ('Nicole', 153.08190476190475), ('Virginie', 114.47024504084014), ('Patty', 385.8135593220339), ('Nadia', 61.8536866359447), ('Cara', 236.07412398921832), ('Alexandra', 281.5547667342799), ('Paola', 132.12638580931264), ('Kveta', 159.62397820163488), ('Jelena', 183.76478318002628), ('Anne', 220.68534906588005), ('Brenda', 128.8655462184874), ('Kimiko', 95.03465982028241), ('Yayuk', 114.78806907378336), ('Janette', 240.5306603773585), ('Romana', 402.49931972789113), ('Katerina', 205.56581986143186), ('Lindsay', 275.6055900621118), ('Svetlana', 428.6868029739777), ('Venus', 32.984862819299906), ('Jill', 121.9579326923077), ('Elena', 263.2128174123337), ('Katalin', 331.93949394939494), ('Stephanie', 170.97505422993493), ('Liezel', 284.8326771653543), ('Sophie', 576.5778364116095), ('Greta', 274.5718623481781), ('Elizabeth', 1140.1973684210527), ('Kyra', 263.821608040201), ('Francesca', 117.2057942057942), ('Anabel', 144.3264367816092), ('Maria Jose', 256.4249699879952), ('Daniela', 52.9563679245283), ('Nuria', 228.1888198757764), ('Catalina', 260.55779427359494), ('Marion', 105.36299435028249), ('Anne', 205.10836762688615), ('Elena', 237.35254691689008), ('Eleni', 189.36174863387978), ('Maria Elena', 194.2392065344224), ('Roberta', 150.96681415929203), ('Bethanie', 146.59709379128137), ('Svetlana', 35.72872340425532), ('Samantha', 116.44005102040816), ('Vera', 81.09357541899442), ('Iveta', 117.95684523809524), ('Zuzana', 273.0369928400955), ('Renata', 251.02574002574002), ('Klara', 137.5751708428246), ('Maria', 42.25396825396825), ('Jelena', 64.19160104986877), ('Casey', 242.36818181818182), ('Melinda', 169.13578500707214), ('Stanislava', 312.54158964879855), ('Flavia', 158.83442265795208), ('Eva', 235.0951008645533), ('Anais', 447.1293900184843), ('Edina', 211.67325428194994), ('Barbora', 102.04657933042212), ('Arantxa', 268.76683937823833), ('Carly', 318.69978858350953), ('Anastasia', 215.67872340425532), ('Vera', 141.8237951807229), ('Maria', 85.55817610062893), ('Yuliya', 238.01381909547737), ('Claudine', 383.6413199426112), ('Marie Eve', 300.56296296296296), ('Chia Jung', 359.3764705882353), ('Jie', 114.05571428571429), ('Sofia', 147.30172413793105), ('Zuzana', 295.0), ('Mervana', 337.5292682926829), ('Severine', 218.4701086956522), ('Anna Lena', 168.40409683426444), ('Shuai', 112.48686030428769), ('Emily', 457.0421511627907), ('Nicole', 417.51063829787233), ('Abigail', 322.00815217391306), ('Sesil', 162.3505747126437), ('Anna', 185.06484641638227), ('Evgenia', 414.66339869281046), ('Monique', 363.6527293844367), ('Aiko', 230.80138169257341), ('Anastasia', 248.8754098360656), ('Michaella', 185.3469387755102), ('Alona', 1175.0625), ('Marta', 187.96103896103895), ('Na', 82.13112391930835), ('Sania', 177.22695035460993), ('Ana', 54.12816188870152), ('Yvonne', 168.8637083993661), ('Shahar', 166.41358024691357), ('Lucie', 63.76451612903226), ('Pauline', 173.570987654321), ('Alize', 150.6958762886598), ('Mathilde', 225.54984894259817), ('Rika', 290.0614657210402), ('Aravane', 200.97080291970804), ('Sarah', 417.0098765432099), ('Kateryna', 184.2012012012012), ('Ivana', 297.1693989071038), ('Ekaterina', 200.24960753532181), ('Laura', 231.16949152542372), ('Emma', 412.71140939597313), ('Yung Jan', 166.6586270871985), ('Alexa', 278.57538994800694), ('Su Wei', 217.2493188010899), ('Vania', 185.75), ('Galina', 185.0057224606581), ('Tsvetana', 131.02074074074073), ('Kathrin', 291.4792817679558), ('Lourdes', 188.06095041322314), ('Akgul', 215.25185185185185), ('Elena', 110.90505359877488), ('Olga', 205.99685534591194), ('Jarmila', 149.46360759493672), ('Victoria', 92.10391822827938), ('Zi', 291.11032028469754), ('Alberta', 343.22432701894314), ('Kirsten', 178.02928257686676), ('Kaia', 127.06775067750678), ('Yaroslava', 211.41240310077518), ('Melanie', 385.1445182724253), ('Kristina', 167.9602510460251), ('Naomi', 582.2777777777778), ('Romina', 283.63246554364474), ('Vasilisa', 563.1287878787879), ('Agnieszka', 122.19587628865979), ('Ahsha', 728.5), ('Lauren', 420.47591522157995), ('Stephanie', 202.60919540229884), ('Varvara', 168.25584795321637), ('Olga', 295.493487698987), ('Tamira', 135.88910505836577), ('Andreja', 424.64521739130436), ('Madison', 268.11610486891385), ('Sandra', 294.9404958677686), ('Alla', 217.85922330097088), ('Aleksandra', 257.66568483063327), ('Jessica', 441.5659229208925), ('Mariya', 281.871335504886), ('Timea', 172.28095238095239), ('Andrea', 176.82479338842975), ('Angelique', 140.94803149606298), ('Raluca', 304.4619771863118), ('Dominika', 104.85343228200371), ('Caroline', 50.034274193548384), ('Agnes', 218.52747252747253), ('Karin', 252.99188311688312), ('Anastasia', 117.10590631364562), ('Olga', 208.31903945111492), ('Tatjana', 274.4980988593156), ('Ayumi', 191.73745173745175), ('Julia', 188.6425855513308), ('Ekaterina', 128.51776649746193), ('Sara', 197.24117647058824), ('Petra', 221.0070521861777), ('Ashley', 453.49585062240664), ('Ekaterina', 351.4223385689354), ('Monica', 205.06020558002936), ('Sabine', 203.5871080139373), ('Sorana', 213.75043630017453), ('Alisa', 266.65635738831617), ('Evgeniya', 258.0659340659341), ('Magdalena', 188.7824561403509), ('Yanina', 150.74395161290323), ('Petra', 75.06681034482759), ('Carla', 155.3848797250859), ('Jelena', 449.3012939001848), ('Marina', 172.7581818181818), ('Urszula', 229.35687022900763), ('Eva', 380.8822463768116), ('Julie', 284.07964601769913), ('Stefanie', 241.69011406844106), ('Melanie', 223.3237885462555), ('Kristie', 445.18918918918916), ('Gail', 526.2644836272041), ('Mariana', 260.6950998185118), ('Anastasia', 321.59166666666664), ('Shuai', 237.83595113438045), ('Asia', 453.43392070484583), ('Coco', 270.5896860986547), ('Patricia', 324.9109848484849), ('Isabella', 523.5121293800539), ('Christina', 228.9607390300231), ('Kristina', 263.1496062992126), ('Chanelle', 195.57309941520467), ('Olivia', 359.037527593819), ('Emelyn', 672.730407523511), ('Anastasija', 192.35827664399093), ('Michelle', 168.98067632850243), ('Ajla', 302.84831460674155), ('Petra', 188.66216216216216), ('Tamaryn', 386.7025316455696), ('Arantxa', 179.59712230215828), ('Lenka', 391.9670781893004), ('Vitalia', 293.81748071979433), ('Polona', 173.26180257510728), ('Lucie', 169.75233644859813), ('Corinna', 356.8219696969697), ('Lauren', 615.8323699421966), ('Irena', 288.74423480083857), ('Kinnie', 606.1467576791808), ('Claire', 406.7672131147541), ('Silvia', 298.4636510500808), ('Darya', 422.06724137931036), ('Lenka', 430.4562937062937), ('Katarzyna', 396.4295302013423), ('Agnes', 501.8861283643892), ('Alexandra', 274.33022388059703), ('Kristina', 300.7413043478261), ('Vesna', 240.0448979591837), ('Masa', 263.1043307086614), ('Regina', 289.60283687943263), ('Laura', 242.01152737752162), ('Heidi', 417.44323483670297), ('Kai Chen', 272.08855291576674), ('Yurika', 322.17758620689654), ('Xinyun', 309.35767790262173), ('Chun Mei', 692.390625), ('Jing Jing', 369.1620469083156), ('Yana', 725.9122807017544), ('Ksenia', 229.89227166276348), ('Sloane', 259.63589743589745), ('Heather', 167.50632911392404), ('Bojana', 177.8061797752809), ('Anna', 239.51930501930502), ('Sharon', 296.5792682926829), ('Alison', 263.70631067961165), ('Margalita', 325.5912596401028), ('Beatriz', 463.1709741550696), ('Irina Camelia', 285.84388185654007), ('Simona', 145.9185185185185), ('Misaki', 208.95263157894738), ('Johanna', 261.31778929188255), ('Kurumi', 165.96132596685084), ('Noppawan', 374.93926247288505), ('Andrea', 270.69384615384615), ('Jamie', 381.56892230576443), ('Chelsey', 719.3061224489796), ('Beatrice', 676.8051118210863), ('Shelby', 293.45733788395904), ('Irina', 358.4449244060475), ('Mandy', 299.5691176470588), ('Rebecca', 414.0690690690691), ('Sally', 529.583908045977), ('Sheng Nan', 451.8657487091222), ('Yi Miao', 418.2566137566138), ('Zarina', 222.81428571428572), ('Daria', 314.1638795986622), ('Junri', 262.30884808013354), ('Arina', 344.75), ('Caroline', 217.325), ('Lesia', 205.17590361445784), ('Lauren', 208.0751879699248), ('Ana', 293.9810495626822), ('Fatma', 648.2984054669704), ('Madison', 219.54063604240284), ('Monica', 222.481884057971), ('Mona', 273.57517899761336), ('Iryna', 419.9982269503546), ('Nicha', 515.3191489361702), ('Estrella', 347.34943639291464), ('Maria Teresa', 359.81081081081084), ('Nadia', 702.8116438356165), ('Fatima', 673.7509157509157), ('Eva', 460.72909698996654), ('Maria Joao', 486.6092544987147), ('Jasmin', 445.3071553228621), ('Naomi', 381.3239130434783), ('Lenka', 378.54046997389037), ('Irina', 445.6770072992701), ('Ksenia', 447.35916824196596), ('Ellen', 754.8923076923077), ('Sandra', 793.5132075471698), ('Anna', 360.4993234100135), ('Tadeja', 343.0985324947589), ('Nastja', 593.1772853185596), ('Melanie', 440.77246653919696), ('Tereza', 490.3264705882353), ('Tina', 382.1750380517504), ('Karolina', 344.97713097713097), ('Ekaterina', 374.29928315412184), ('Pemra', 465.24962852897477), ('Ipek', 655.8983666061706), ('Cagla', 311.87854251012146), ('Ling', 418.81925343811395), ('Alexandra', 367.9034941763727), ('Amra', 415.9078341013825), ('Ksenia', 423.12334801762114), ('Nigina', 376.7617554858934), ('Sabina', 376.1625), ('So Jung', 514.1732026143791), ('Ye Ra', 431.3144424131627), ('Mi', 554.3953934740883), ('Sacha', 340.2890442890443), ('Varatchaya', 450.4642082429501), ('Nudnida', 436.66881028938906), ('Bianca', 411.2672955974843), ('Lina', 847.7010869565217), ('Claire', 476.3121693121693), ('Nina', 250.36305732484075), ('Dia', 383.7832512315271), ('Michaela', 511.1923076923077), ('Timea', 201.32704402515722), ('Silvia', 673.017094017094), ('Laura', 396.82570162481534), ('Kristyna', 389.73932584269664), ('Liana Gabriela', 387.87113402061857), ('Martina', 575.696335078534), ('Nikola', 485.7513966480447), ('Basak', 587.9803278688524), ('Malou', 947.3333333333334), ('Yi Fan', 381.5512572533849), ('Alina', 1060.0184049079755), ('Sachie', 368.26881720430106), ('Natalie', 394.5745222929936), ('Yulia', 262.494623655914), ('Petra', 360.89268292682925), ('Galina', 449.05308219178085), ('Vanessa', 371.69403973509935), ('Shiho', 1070.5714285714287), ('Cory Ann', 406.5511363636364), ('Habiba', 1051.623188405797), ('Liga', 567.9464544138929), ('Mariana', 1211.258064516129), ('Olga', 525.3591954022988), ('Kyung Mi', 533.433770014556), ('Maria', 461.9377990430622), ('Maria Fernanda', 373.0431137724551), ('Diana', 472.8539007092199), ('Darija', 464.95631067961165), ('Sandra', 494.09510086455333), ('Magdalena', 571.8631346578367), ('Klaudia', 780.7905027932961), ('Ayu Fani', 479.5530612244898), ('Daniella', 625.4092920353983), ('Karolina', 406.56919642857144), ('Lina', 371.00802568218296), ('Rushmi', 573.8729603729604), ('Andrea', 496.8243243243243), ('Nikola', 614.3153526970955), ('Madalina', 324.63613231552165), ('Chin Wei', 385.2651515151515), ('Marrit', 783.1711711711712), ('Erika', 397.3320537428023), ('Teodora', 411.579476861167), ('Lavinia', 612.736), ('Raquel', 578.120792079208), ('Kirsten', 1084.4173913043478), ('Chieh Yu', 533.9586374695864), ('Ksenia', 527.0520547945206), ('Kyra', 727.8778280542987), ('Sung Hee', 570.6993736951983), ('Vlada', 585.0383795309168), ('Sandra', 551.0725593667546), ('Akiko', 466.9746434231379), ('Andrea', 553.5460122699386), ('Camila', 647.9409090909091), ('Maria', 351.9477756286267), ('Anna', 626.9345372460497), ('Amanda', 775.6847826086956), ('Leticia', 481.3229166666667), ('Alexis', 589.8897637795276), ('Natasa', 666.2853403141361), ('Amanda', 684.5194444444444), ('Alisa', 933.8396226415094), ('Sofia', 461.0702987697715), ('Maria', 680.1504424778761), ('Florencia', 364.22522522522524), ('Catherine', 969.9928571428571), ('Ximena', 646.3770491803278), ('Nungnadda', 537.577922077922), ('Tetiana', 437.4119658119658), ('Lara', 284.14021164021165), ('Barbara', 697.5), ('An Sophie', 460.8932038834951), ('Alison', 277.85227272727275), ('Shuko', 421.44179894179894), ('Sarah', 367.33684210526314), ('Conny', 390.0), ('Samantha', 699.2705882352941), ('Julia', 543.4917012448133), ('Johanna', 256.5040431266846), ('Kiki', 287.71625344352617), ('Camila', 316.69181034482756), ('Alize', 412.9482288828338), ('Tetyana', 398.83478260869566), ('Hilda', 673.6635071090047), ('Anna Giulia', 428.5496828752643), ('Aleksandra', 215.03548387096774), ('Vanda', 696.4126984126984), ('Reka Luca', 323.1388101983003), ('Anastasia', 460.7960687960688), ('Ani', 574.4025641025642), ('Silvia', 1013.3469387755102), ('Paula', 374.0572207084469), ('Nina', 1181.1190476190477), ('Tatia', 1075.0), ('Valeria', 389.49271844660194), ('Kamilla', 1162.8301886792453), ('Valeria', 339.99632352941177), ('Eugenie', 421.3669467787115), ('Alexandra', 502.8416149068323), ('Zoe Gwen', 935.081081081081), ('Victoria', 465.5233333333333), ('Jana', 262.31929824561405), ('Nicole', 653.0375), ('Yi Jing', 656.8787276341948), ('Saisai', 297.39032258064515), ('Erika', 397.39929328621906), ('Yue Yue', 444.96190476190475), ('Alexandra', 435.7653846153846), ('Bibiane', 550.1941544885177), ('Ashleigh', 331.3681818181818), ('Bojana', 513.439024390244), ('Ons', 435.1470588235294), ('Julia', 404.706390328152), ('Karen', 674.4780600461894), ('Ines', 546.3460559796438), ('Yuliana', 694.0), ('Maria', 501.8732943469786), ('Nadia', 861.640625), ('Elitsa', 418.39748953974896), ('Jessica', 386.18394648829434), ('Garbine', 229.3774193548387), ('Annika', 265.79487179487177), ('Karen', 675.4691943127962), ('Laura', 481.1577909270217), ('Annalisa', 583.9347826086956), ('Jasmina', 513.1592689295039), ('Csilla', 894.8397790055249), ('Dinah', 268.05945945945945), ('Tara', 475.2979683972912), ('Grace', 389.61876832844575), ('Richel', 246.19871794871796), ('Chi Chi', 464.1367781155015), ('Barbara', 460.1609195402299), ('Sandra', 510.56216216216217), ('Nicole', 408.45185185185187), ('Jana', 568.4027149321267), ('Mallory', 143.48235294117646), ('Nastassja', 554.5290322580645), ('Valentyna', 368.14331210191085), ('Carina', 416.3666666666667), ('Rebecca', 511.37888198757764), ('Varvara', 573.6621621621622), ('Qiang', 383.4714587737844), ('Ekaterine', 553.9434782608696), ('Elina', 203.95604395604394), ('Jennifer', 477.20512820512823), ('Samantha', 424.93981481481484), ('Victoria', 540.4605263157895), ('Julia', 405.8921568627451), ('Donna', 223.50900900900902), ('Maria', 393.4439834024896), ('Hyun Hui', 729.0671936758894), ('So Ra', 572.2654545454545), ('Luksika', 284.22813688212926), ('Ying Ying', 403.8775981524249), ('Belinda', 499.7090909090909), ('Margarita', 371.1981566820277), ('Wing Yau Venise', 585.2589641434263), ('Yuxuan', 545.449074074074), ('Stefania', 618.7228525121556), ('Giulia', 576.740350877193), ('Erika', 792.7021696252466), ('Marina', 513.1254019292604), ('Natalia', 589.568306010929), ('Estelle', 571.8520084566596), ('Ana', 556.0942028985507), ('Federica', 626.0774647887324), ('Alison', 579.0348162475822), ('Neda', 708.8378378378378), ('Alexia', 694.5176470588235), ('Vivienne', 659.2103004291846), ('Eleni', 742.5714285714286), ('Afroditi', 1155.0392156862745), ('Stamatia', 841.8387096774194), ('Stephanie', 541.0248618784531), ('Hulya', 888.0055096418732), ('Veronika', 447.5016501650165), ('Anna', 531.44921875), ('Olga', 614.2371794871794), ('Evelyn', 471.5439093484419), ('Anna', 528.8242894056848), ('Yumi', 784.9147465437788), ('Hao Ching', 1153.936507936508), ('Chi Fan', 1039.3902439024391), ('Wen Hsin', 440.35214446952597), ('Remi', 494.6111111111111), ('Kumiko', 488.76107382550333), ('Laura Ioana', 516.1982942430703), ('Giulia', 527.75), ('Federica', 637.367139959432), ('Chanel', 343.2835365853659), ('Megan', 622.6036585365854), ('Nicole', 608.3569131832797), ('Lena', 500.8991354466859), ('Katie', 627.6082004555809), ('Diana', 550.6178707224335), ('Elena', 517.8571428571429), ('Alexandra', 806.576), ('Mihaela', 376.7356115107914), ('Natalie', 582.6028368794326), ('Alice', 625.4850948509485), ('Viktoriya', 598.6225165562914), ('Patrycja', 601.0849673202614), ('Despina', 665.686684073107), ('Julia', 448.98591549295776), ('Claudia', 661.1353965183753), ('Yi', 693.3742802303263), ('Akari', 704.9618138424821), ('Aki', 710.9617224880383), ('Oksana', 533.9652351738241), ('Jacqueline', 545.6203966005666), ('Natasha', 847.62), ('Justyna', 585.8517745302714), ('Ema', 734.71), ('Yuliya', 487.0730593607306), ('Elixane', 579.5214723926381), ('Lyudmyla', 382.82479784366575), ('Valentine', 691.1423076923077), ('Stephanie', 398.5627906976744), ('Fiona', 1041.7790697674418), ('Maryna', 276.67868852459014), ('Gabriela', 465.2834890965732), ('Eleanor', 1067.7619047619048), ('Lara', 731.8966666666666), ('Nina', 626.2072368421053), ('Chen', 524.7444668008048), ('Jin A', 492.8915187376726), ('Zuzana', 518.3550724637681), ('Shivika', 935.2322946175638), ('Chiaki', 437.73858921161826), ('Akiko', 504.54647887323944), ('Irina', 522.2766666666666), ('Natalia', 600.1), ('Gioia', 567.8518518518518), ('Yasmin', 688.6819923371647), ('Ting Fei', 739.7727272727273), ('Jessy', 967.6708860759494), ('Ana Clara', 524.9192825112108), ('Madrie', 958.0955414012739), ('Zarah', 709.625), ('Lynn', 920.6734693877551), ('Lisa', 459.5925925925926), ('Kim Alice', 762.4081632653061), ('Denisa', 419.1633466135458), ('Martina', 1000.8086419753087), ('Estelle', 714.7387387387388), ('Dijana', 669.2982456140351), ('Audrey', 576.5012531328321), ('Tereza', 418.1658878504673), ('Jade', 674.0), ('Lucy', 756.3141592920354), ('Camilla', 845.3106382978723), ('Magda', 300.3974358974359), ('Roxane', 479.51738241308794), ('Jessica', 776.3333333333334), ('Nicola', 649.751256281407), ('Natela', 566.4943396226415), ('Sina', 728.7443609022556), ('Cristina', 395.9633333333333), ('Cristina Andreea', 439.5747863247863), ('Ekaterina', 541.26953125), ('Anastasiya', 1020.3069306930693), ('Alexandra', 761.5461254612546), ('Aselya', 1181.27868852459), ('Prerna', 740.5361842105264), ('Ekaterina', 1035.1683673469388), ('Polina', 440.11052631578946), ('Yuliya', 658.64), ('Maria', 664.4128440366973), ('Gabriela', 580.905701754386), ('Sara', 1037.076923076923), ('Wan Ting', 701.4009009009009), ('Lin', 497.42124542124543), ('Misa', 466.3361111111111), ('Di', 736.1650485436893), ('Ran', 557.2607003891051), ('Isabella', 386.4824902723735), ('Vaszilisza', 859.8103448275862), ('Ani', 977.9270833333334), ('Radina', 955.7833333333333), ('Ya Hsuan', 586.865), ('Teliana', 461.06702898550725), ('Aleksandrina', 578.07962529274), ('Federica', 894.3545706371191), ('Anne Liz', 762.7606382978723), ('Alessondra', 1145.1641791044776), ('Ryann', 1069.0379746835442), ('Simone', 982.58), ('Irina', 273.65966386554624), ('Tereza', 347.5242718446602), ('Constance', 570.2723004694835), ('Rocio', 762.0532150776053), ('Veronica', 450.6966019417476), ('Manon', 537.3451776649746), ('Myrtille', 485.40168539325845), ('Kelly S', 312.7584269662921), ('Tinatin', 810.6666666666666), ('Mariana', 760.0), ('Katerina', 646.5019083969465), ('Vladimira', 823.8770833333333), ('Alicja', 855.813627254509), ('Vojislava', 555.6572164948453), ('Ria', 669.448275862069), ('Anne', 365.46034816247584), ('Tomoko', 828.09375), ('Natsumi', 490.70992366412213), ('Ana', 509.5892857142857), ('Chayenne', 593.9759036144578), ('Simona', 797.6269662921349), ('Indire', 627.7027027027027), ('Maya', 704.4129930394431), ('Sherazad', 737.1428571428571), ('Agustina', 565.3363914373089), ('Mari', 483.27852998065765), ('Justine', 443.1351888667992), ('Ayumi', 579.3763919821827), ('Yurina', 746.4803493449782), ('Romana Caroline', 669.8542372881356), ('Maria Fernanda', 447.0668058455115), ('Antonela', 1051.7096774193549), ('Marija', 521.0897009966777), ('Kaitlyn', 705.1531531531532), ('Miyabi', 447.93283582089555), ('Anastasiya', 407.95652173913044), ('Jara', 1121.767857142857), ('Georgina', 314.4109589041096), ('Raluca Elena', 672.2258064516129), ('Danielle', 643.331983805668), ('Chang', 575.4626436781609), ('Yi', 936.7860465116279), ('Shiho', 449.41388174807196), ('Michaela', 425.4343434343434), ('Anastasia', 669.2153392330383), ('Francesca', 798.2897959183673), ('Kotomi', 844.7460317460317), ('Korina', 567.0507399577167), ('Jessica', 904.7658227848101), ('Nicola', 864.8258426966293), ('Marta', 504.7244897959184), ('Celine', 619.094512195122), ('June', 1189.0), ('Krista', 522.984693877551), ('Kanae', 635.346516007533), ('Yuka', 646.8995433789954), ('Zuzana', 520.1380597014926), ('Makoto', 516.6615384615385), ('Maiko', 438.4245810055866), ('Ioana', 957.8421052631579), ('Rui', 1209.625), ('Danica', 380.609375), ('Tomoko', 1238.75), ('Danielle', 893.4137168141593), ('Yoon Young', 844.9310344827586), ('Hae Sung', 844.3856812933026), ('Etsuko', 781.3218390804598), ('Virginie', 890.4780361757106), ('Angelina', 677.4700193423598), ('Jillian', 721.14), ('Ai', 841.9686520376175), ('Maya', 682.8406862745098), ('Sakiko', 832.9585365853659), ('Kaori', 871.0790513833992), ('Nadja', 631.8181818181819), ('Gracia', 783.8288043478261), ('Amandine', 597.5297297297298), ('Katerina', 582.2656546489563), ('Veronika', 1053.8061224489795), ('Jia Jing', 682.961038961039), ('Piia', 668.2581196581197), ('Karolina', 625.8927038626609), ('Nadiya', 515.4014423076923), ('Marion', 819.0524017467249), ('Ana', 534.9107142857143), ('Tatiana', 742.8783185840708), ('Kristy', 837.7730496453901), ('Alexa', 489.4848484848485), ('Amandine', 876.4279069767442), ('Shu Ying', 1042.6802325581396), ('Martina', 696.7325301204819), ('Lisa', 538.9791271347249), ('Allie', 616.5055555555556), ('Ionela Andreea', 799.0552486187845), ('Yumi', 812.5773420479303), ('Veronica', 1273.838888888889), ('Sanaz', 703.1372549019608), ('Milana', 626.441935483871), ('Jasmina', 782.965811965812), ('Nikola', 797.2966101694915), ('Martina', 317.94520547945206), ('Libby', 899.9150326797386), ('Khristina', 1087.972972972973), ('Lauren', 848.126582278481), ('Vivian', 558.0348583877995), ('Vanesa', 579.437984496124), ('Tatiana', 562.8954081632653), ('Mailen', 410.8463541666667), ('Jasmin', 751.9386281588447), ('Tori', 841.7167381974249), ('Eugeniya', 620.6746411483253), ('Ksenia', 622.453744493392), ('Marina', 510.5781990521327), ('Julia', 742.8611111111111), ('Ganna', 628.8181818181819), ('Julia', 771.8067885117493), ('Miki', 586.2250489236791), ('Poojashree', 729.1047904191616), ('Danielle Rose', 434.68), ('Martina', 694.8266129032259), ('Danielle', 353.4719101123595), ('Ellen', 715.0604026845638), ('Tea', 1068.7457627118645), ('Svenja', 843.2311557788945), ('Ana', 878.8), ('Lucia', 757.5247524752475), ('Pilar', 740.5879828326181), ('Macall', 607.3360995850622), ('Nicole', 679.4014084507043), ('Ilona', 452.625), ('Natalia', 1137.2954545454545), ('Nanuli', 542.7168141592921), ('Avgusta', 1208.4285714285713), ('Elisabeth', 914.2566371681415), ('Marianne', 993.175925925926), ('Lena Marie', 657.8934169278997), ('Vivien', 607.2810218978102), ('Tamara', 577.373801916933), ('Keren', 643.422641509434), ('Rashmi', 1089.2100840336134), ('Rishika', 775.7269624573379), ('Dalila', 424.83561643835617), ('Anastasia', 768.875), ('Alexandra', 616.9638989169675), ('Sviatlana', 691.9934640522875), ('Aminat', 613.195652173913), ('Sofie', 724.5), ('Alexandra', 928.4886363636364), ('Sarah Rebecca', 743.6062176165804), ('Yana', 658.0246305418719), ('Marina', 604.295652173913), ('Aranza', 490.4144736842105), ('Elizabeth', 685.5346534653465), ('Andreea Roxana', 726.2657657657658), ('Jelena', 718.2207792207793), ('Polona', 833.6775), ('Cristina Madalina', 720.6428571428571), ('Lucie', 774.558521560575), ('Martina', 629.4468085106383), ('Kateryna', 344.7721518987342), ('Nuria', 713.6415094339623), ('Benedetta', 705.4688346883469), ('Amanda', 496.64941176470586), ('Iris', 866.1075949367089), ('Dariya', 1133.9636363636364), ('Alexandra', 994.2234636871508), ('Albina', 775.2734375), ('Anna', 928.7887323943662), ('Nika', 825.7028571428572), ('Carol', 564.1434426229508), ('Alejandra', 1116.6883116883116), ('Silvia', 872.2721518987341), ('Charlene', 766.4794520547945), ('Oceane', 911.1595744680851), ('Jennifer', 916.4569536423841), ('Jan', 592.5990783410139), ('Viktoryia', 845.7530864197531), ('Julia', 692.8122605363984), ('Celine', 821.992277992278), ('Andrea', 640.0540540540541), ('Doroteja', 520.9397993311037), ('Hao Chen', 680.1050228310502), ('Alyona', 496.9431818181818), ('Hirono', 860.8104265402843), ('Emi', 770.8472222222222), ('Chinami', 615.2230215827338), ('Sophie', 611.3353293413173), ('Simone', 1110.9722222222222), ('Elizabeth', 623.0714285714286), ('Gabrielle Faith', 985.7211538461538), ('Sachia', 400.8093385214008), ('Taylor', 348.2173913043478), ('Lindsey', 986.82), ('Kazusa', 772.2402912621359), ('Miyu', 594.9036697247707), ('Tereza', 1208.5535714285713), ('Giorgia', 843.6716417910447), ('Diana', 454.04788732394366), ('Nathalia', 543.031185031185), ('Alexandra', 580.3488372093024), ('Robin', 431.19607843137254), ('Katarzyna', 493.671826625387), ('Nadiya', 833.5096525096525), ('Chihiro', 870.6453488372093), ('Paula', 432.7289972899729), ('Arabela', 658.5074074074074), ('Andrea', 408.486301369863), ('Yevgeniya', 724.8712871287129), ('Isabel', 724.9178743961353), ('Morgane', 812.2753623188406), ('Anaeve', 922.2255639097745), ('Tammi', 601.906914893617), ('Khristina', 926.5274261603375), ('Nicola', 852.8411214953271), ('Sonja', 879.4974619289341), ('Viktorija', 454.87593984962405), ('Klara', 944.5289256198347), ('Michaela', 983.0747126436781), ('Anna Karolina', 345.51020408163265), ('Melis', 520.0968992248062), ('Sultan', 944.2432432432432), ('Nadezda', 868.6521739130435), ('Victoria', 425.08252427184465), ('Polina', 541.8262295081968), ('Anastasia', 660.0541871921182), ('Elizaveta', 468.5403225806452), ('Daria', 579.6666666666666), ('Stefanie', 1078.6511627906978), ('Monika', 1209.5), ('Anja', 725.3893333333333), ('Zuzana', 694.4581395348837), ('Agnese', 694.0659898477157), ('Olga', 592.1270903010034), ('Brianna', 854.3170731707318), ('Risa', 317.2361809045226), ('Riko', 495.22641509433964), ('Yuriko', 982.5393258426966), ('Mai', 550.2509960159363), ('Yuuki', 608.1309090909091), ('Mana', 689.891129032258), ('Lou', 661.2633928571429), ('Clothilde', 620.4120171673819), ('Whitney', 873.0103626943005), ('Charlotte', 1129.861111111111), ('Erin', 760.3974358974359), ('Emily J', 1041.948717948718), ('Chloe', 675.2445414847161), ('Alice', 911.6255506607929), ('Christina', 706.2669683257918), ('Ipek', 598.1783783783784), ('Naz', 1087.3823529411766), ('Olga', 668.3825136612022), ('Bermet', 717.7932330827068), ('Polina', 620.6008771929825), ('Lisanne', 673.6507936507936), ('Danka', 302.83268482490274), ('Kai Lin', 522.6561403508772), ('Caroline B', 1161.5675675675675), ('Fangzhou', 406.9281767955801), ('Chalena', 650.1367521367522), ('Elizabeth Anita Alexandria', 1006.2982456140351), ('Adriana', 361.5919540229885), ('Tatsiana', 912.1077844311377), ('Ioana Loredana', 646.0441176470588), ('Diana', 963.0), ('Cristina', 837.1969696969697), ('Camelia Elena', 803.7139479905437), ('Katy', 492.6608695652174), ('Dianne', 809.697247706422), ('Tyra', 992.4870588235294), ('Peangtarn', 514.586319218241), ('Samantha', 1040.40625), ('Paula Catalina', 868.7624113475177), ('Ingrid Esperanza', 748.6622691292876), ('Victoria', 1099.8367346938776), ('Ivette', 1136.8535031847134), ('Intissar', 1192.5454545454545), ('Fatyha', 1015.5), ('Lesley', 514.7174515235457), ('Csilla', 977.5013927576601), ('Paulina', 1022.5), ('Annie', 1042.037037037037), ('Jeannine', 767.7730496453901), ('Karolina', 790.4990925589836), ('Janina', 699.7864583333334), ('Martina', 716.4880636604775), ('Petra', 764.9778393351801), ('Natalie', 889.5686274509804), ('Anastasiya', 814.1554054054054), ('Ji Young', 833.5061082024433), ('Seung Yeon', 784.0465949820789), ('Ji Hee', 781.4336734693877), ('Mi Rae', 992.7225433526012), ('Min Hwa', 819.8425531914894), ('Na Lae', 608.7791798107255), ('Hyojung', 1069.3208955223881), ('Seo Kyung', 858.9173789173789), ('Su Jeong', 426.3886462882096), ('Christine', 841.4051724137931), ('Anna Arina', 760.639175257732), ('Viktorija', 559.3382899628252), ('Ashling', 823.0909090909091), ('Barbara', 817.0503144654089), ('Ashley', 1036.9322033898304), ('Jawairiah', 1070.5648854961833), ('Trang', 1029.3196721311476), ('Stephanie', 1085.9809523809524), ('Rita', 1115.6666666666667), ('Margarida', 987.6739130434783), ('Sofia', 1071.1351351351352), ('Maria', 1220.904761904762), ('Agata', 960.6770186335403), ('Mai', 945.8666666666667), ('Kimberley', 1077.1702127659576), ('Alice', 757.4059040590406), ('Seda', 1003.5367647058823), ('Cecilie Lundgaard', 1141.842105263158), ('Nazari', 825.7291666666666), ('Nan Nan', 890.4455445544554), ('Polina', 1004.5175438596491), ('Yvonne', 733.6431718061674), ('Chihiro', 864.5165289256198), ('Katherine', 859.8135593220339), ('Emily', 1137.5128205128206), ('Caroline', 831.92), ('Carolina', 812.9764150943396), ('Tanaporn', 1113.2325581395348), ('Camila', 916.7307692307693), ('Josie', 993.2105263157895), ('Victoria', 809.776397515528), ('Valerie', 730.6881720430108), ('Natasha', 1207.75), ('Julie', 1121.4102564102564), ('Frederikke', 1244.3333333333333), ('Demi', 983.4174757281553), ('Indy', 485.9559748427673), ('Matilda', 799.1875), ('Brenda', 827.4954954954954), ('Rebecca', 1192.6632653061224), ('Louise', 1019.520325203252), ('Valeria', 1103.178947368421), ('Beatrice', 762.469512195122), ('Agnes', 544.9512195121952), ('Marisa', 1067.3413173652696), ('Vincenza', 1214.1142857142856), ('Carolina', 622.8725868725869), ('Lisa Maria', 758.06), ('Anna Maria', 1057.1584158415842), ('Pia', 729.6136363636364), ('Sofia', 646.4561403508771), ('Valentini', 479.8914728682171), ('Brooke', 711.3770491803278), ('Arina', 988.8534031413612), ('Maftuna', 1173.75), ('Yana', 1019.9629629629629), ('Natella', 962.0188679245283), ('Priscila', 1132.0), ('Ah', 1156.340425531915), ('Ki Ryang', 1164.090909090909), ('Zi', 661.3205741626795), ('Yoshimi', 1096.9130434782608), ('Kanami', 799.9940828402367), ('Storm', 573.6708333333333), ('Belinda', 932.1125), ('Azra', 556.2303370786517), ('Nattawadee', 1177.622641509434), ('Alexandra', 981.0702247191011), ('Robyn', 1054.606896551724), ('Hana', 1083.407894736842), ('Daniella', 1062.3), ('Ana Sofia', 496.7156398104265), ('Marcela', 496.35593220338984), ('Ana Paula', 1112.0245398773006), ('Valeria', 1232.2), ('Hayley', 914.5321100917431), ('Anett', 367.2274678111588), ('Sara', 464.9339622641509), ('Miriam', 1015.6524822695036), ('Antonia', 589.1298076923077), ('Anna Lena', 287.06635071090045), ('Syna', 791.1240506329113), ('Ysaline', 458.86633663366337), ('Emma', 1184.625), ('Jessica', 1089.9884393063585), ('Daneika', 977.4539007092199), ('Sabrina', 1025.6526315789474), ('Kim', 613.8346774193549), ('Karina Ildor', 696.9606060606061), ('Magy', 1092.7621951219512), ('Marta', 798.5882352941177), ('Alice', 651.2678571428571), ('Gaelle', 1028.9708737864078), ('Juliana', 1110.0816326530612), ('Anamika', 859.3059701492538), ('Fatimah', 1070.9463414634147), ('Natalia', 749.6095717884131), ('Martina', 831.9251700680272), ('Beatrice', 743.3013698630137), ('Blessing', 1196.8064516129032), ('Cristina', 598.08), ('Shao Yuan', 967.9034090909091), ('Alessia', 1036.8349056603774), ('Agni', 940.2125603864735), ('Sun Jung', 812.4581005586592), ('Anouk', 1032.224358974359), ('Nicolette', 778.1648648648649), ('Lara', 920.5872093023256), ('Sylwia', 787.7645348837209), ('Giulia', 1105.4458598726114), ('Melisa', 993.1351351351351), ('Blessing', 1251.673076923077), ('Ekaterina', 1120.7931034482758), ('Ashmitha', 1018.6637931034483), ('Asha', 1151.95), ('Jana', 846.9828767123288), ('Misa', 1001.8085106382979), ('Yoo Ri', 1263.7666666666667), ('Lu', 907.3557312252965), ('Sara', 1050.9178082191781), ('Ioana', 1080.0555555555557), ('Naoko', 1180.3828125), ('Kady', 1055.020202020202), ('Marcella', 657.0171919770773), ('Yasmine', 972.7345132743363), ('Paula Cristina', 508.4679802955665), ('Aleksandra', 1028.6904761904761), ('Kateryna', 852.3478260869565), ('Viktoria', 299.6986301369863), ('Marcela Guimaraes', 1143.7957746478874), ('Marcela', 1174.1489361702127), ('Julia', 832.207100591716), ('Xin', 694.4808743169399), ('Nevena', 1031.0), ('Adnya', 1122.4423076923076), ('Tereza', 786.047619047619), ('Pavla', 915.5892857142857), ('Ester', 950.9090909090909), ('Eden', 1153.2553191489362), ('Christie', 1112.875), ('Ronke', 1072.857142857143), ('Karina', 882.3758865248227), ('Keri', 1018.6534653465346), ('Diana', 915.0235849056604), ('Emma', 784.240174672489), ('Brittany', 938.6777777777778), ('Julie', 745.4150943396227), ('Anna', 589.570652173913), ('Ineke', 919.6147540983607), ('Ema', 946.2142857142857), ('Carmen', 876.66472303207), ('Karin', 649.9320388349514), ('Dunja', 910.3070175438596), ('Natasha', 925.0068728522336), ('Ai', 998.4620689655172), ('Guadalupe', 790.8422535211267), ('Margarita', 734.7166666666667), ('Johanna', 1011.1739130434783), ('Ingrid Alexandra', 869.3571428571429), ('Dalia', 801.6933333333334), ('Adriana', 1048.4444444444443), ('Deeon', 1115.0851063829787), ('Stephanie', 1046.5884773662551), ('Noel', 965.5343511450382), ('Francesca', 776.0992907801418), ('Na Ri', 573.5197368421053), ('Alexandra', 860.8079470198676), ('Chun Yan', 986.3944099378882), ('Cynthia', 998.7722772277227), ('Yi', 921.5733333333334), ('Iryna', 993.2272727272727), ('Anastasiya', 1092.3584905660377), ('Julia', 787.3385416666666), ('Eri', 321.23595505617976), ('Ema', 803.3813229571984), ('Veronika', 938.3714285714286), ('Sabrina', 1115.8979591836735), ('Isabella', 701.0719696969697), ('Isabela', 1114.99375), ('Karina', 869.4357976653697), ('Beatriz Maria', 971.2865853658536), ('Melina', 1017.2560553633218), ('Monique', 726.3315789473684), ('Carla', 630.7457627118644), ('Li', 988.7425149700599), ('Carla', 597.8743169398907), ('Nathaly', 617.4615384615385), ('Yoko', 1128.901098901099), ('Elyne', 652.1984732824427), ('Anouk', 911.0778443113772), ('Makiho', 784.8009049773756), ('Veronika', 1016.5), ('Alix', 822.3459915611814), ('Silvia', 1158.1186440677966), ('Anna', 726.5689655172414), ('Stefania', 1028.2814371257484), ('Chantal', 609.90625), ('Angelique', 434.77777777777777), ('Ekaterina', 1085.9857142857143), ('Barbara', 704.8923766816143), ('Giuliana', 584.359375), ('Olawaseun', 1397.5), ('Abiodun', 1039.6744186046512), ('Beauty', 1382.1538461538462), ('Rana', 1117.6666666666667), ('Ola', 660.8924731182796), ('Florencia', 941.3030303030303), ('Luciana', 880.0536779324055), ('Kyle', 887.502487562189), ('Ulrikke', 506.39344262295083), ('Darya', 708.9009900990098), ('Vladislava', 1006.1769911504425), ('Chanelle', 587.027027027027), ('Abbie', 808.4545454545455), ('Malin', 825.039603960396), ('Aliaksandra', 441.9846743295019), ('Alina', 893.7272727272727), ('Hye Min', 1020.28125), ('Samantha', 1052.38), ('Eduarda', 656.2851711026616), ('Stefani', 1167.3333333333333), ('Maya', 1179.5555555555557), ('Carolina', 546.5490196078431), ('Anna', 542.1207729468599), ('Ganna', 573.6335078534031), ('Lidziya', 797.2128378378378), ('Shiori', 1070.6666666666667), ('Se Jin', 1122.4545454545455), ('Elena', 1101.55), ('Dilara', 1248.2), ('Busra', 1140.981981981982), ('Zsofia', 916.559633027523), ('Ivana', 929.7837837837837), ('Yawna', 1110.4594594594594), ('Giulia', 766.5333333333333), ('Laetitia', 677.4458598726114), ('Alejandra', 1041.6666666666667), ('Yana', 601.5174129353234), ('Beatriz', 1128.4444444444443), ('Mariona', 1163.0), ('Verena', 866.6914893617021), ('Gabriela', 891.4626865671642), ('Lucia', 1072.9156626506024), ('Josepha', 924.9325842696629), ('Linda', 916.4411764705883), ('Carmen', 947.5849056603773), ('Elisabeth', 749.4285714285714), ('Stephanie', 823.2670454545455), ('Manisha', 897.0974358974358), ('Kana', 924.2782608695652), ('Tamara', 881.8430232558139), ('Laura', 733.6889763779527), ('Diana', 798.7529411764706), ('Laura', 662.4254385964912), ('Liz Tatiane', 870.9007633587786), ('Giovanna', 1197.0), ('Flavia', 933.0194552529183), ('Flavia', 1086.0625), ('Asiya', 790.46875), ('Xiao', 814.4171122994652), ('Sirui', 949.7916666666666), ('Voni', 999.0215053763441), ('Yuka', 858.2450980392157), ('Laili', 996.8148148148148), ('Angelica', 637.6573705179283), ('Alena', 714.1326530612245), ('Bianca', 788.8869565217391), ('Julia', 783.424), ('Carolin', 592.2685714285715), ('Lisa Marie', 989.175925925926), ('Saana', 1117.88), ('Katerina', 1072.3333333333333), ('Petra', 905.1104294478528), ('Daniela', 519.1768707482993), ('Mariana', 926.6914285714286), ('Laura', 1022.2115384615385), ('Andrea', 1093.313725490196), ('Victoire', 1138.8490566037735), ('Bernice', 834.1005025125628), ('Quirine', 633.9770491803279), ('Carlotta', 1121.4414414414414), ('Jovana', 553.87), ('Marina', 711.544), ('Costanza', 1039.9928057553957), ('Helen', 1162.3125), ('Claudia Antonia', 967.2978723404256), ('Claudia Gianina', 996.2574257425742), ('Simona', 782.7252747252747), ('Ani', 620.7623762376238), ('Caroline', 816.65625), ('Liubov', 887.2875), ('Marianna', 637.9914893617022), ('Sofiya', 541.1570881226054), ('Erin', 1106.3275862068965), ('Nina', 1121.9622641509434), ('Eleanor', 1057.3870967741937), ('Ebony', 1073.1752577319587), ('Hiroko', 534.890243902439), ('Miharu', 523.2788844621514), ('Brooke', 1160.1458333333333), ('Karis', 1001.0679611650486), ('Caitlin', 652.5196078431372), ('Rachael', 859.2706766917294), ('Mai', 957.7058823529412), ('Yolande', 1068.4619883040937), ('Valeriya', 1022.25), ('Viktoriya', 1169.4814814814815), ('Lucia', 788.8130841121496), ('Raquel', 1065.0882352941176), ('Nikola', 1075.5029239766081), ('Ankita', 618.4714285714285), ('Ashvarya', 803.3904761904762), ('Sharmada', 851.5633802816901), ('Rutuja', 808.5096774193548), ('Prarthana G', 653.5070422535211), ('Zhaoxuan', 629.0081967213115), ('Jennifer', 326.64102564102564), ('Aishwarya', 1024.625), ('Hua Chen', 726.1737089201878), ('Carolina', 883.1845238095239), ('Sofia', 1050.469696969697), ('Amina', 1187.0), ('Chiara', 874.2444444444444), ('Desiree', 1032.2666666666667), ('Tereza', 487.1965811965812), ('Ju Eun', 812.6), ('Tjasa', 743.1953125), ('Francesca', 891.8471337579617), ('Martina', 1082.9313725490197), ('Yanina', 1023.5898876404494), ('Valeria', 843.5209580838323), ('Lutfiye', 1190.0629921259842), ('Deniz', 494.2918287937743), ('Oleksandra', 1070.409691629956), ('Tanya', 1023.089430894309), ('Xenia', 661.2222222222222), ('Diana', 781.0616113744076), ('Catalina', 417.07086614173227), ('Sofia', 780.7583333333333), ('Gabriela', 923.6264591439689), ('Napatsakorn', 929.4388489208633), ('Kamonwan', 765.1395348837209), ('Anna', 761.9615384615385), ('Varunya', 894.3846153846154), ('Lorenza', 1231.2727272727273), ('Natalie', 733.1492537313433), ('Zalina', 867.5288461538462), ('Alisa', 1130.1267605633802), ('Kamila', 568.2547169811321), ('Elizaveta Anna', 981.9814814814815), ('Yelena', 897.4873949579832), ('Jade', 700.3270142180095), ('Taisiya', 969.6588235294117), ('Rachel', 1147.8526315789475), ('Alice', 853.2352941176471), ('Chiara', 1183.7407407407406), ('Beatrice', 1029.9769230769232), ('Cecilia', 692.07299270073), ('Tess', 696.2878787878788), ('Samira', 932.8940397350993), ('Joana', 803.9454545454546), ('Susanne', 417.8053097345133), ('Nika', 1145.642857142857), ('Ghislaine', 1150.6607142857142), ('Eva', 735.4837209302326), ('Sabrina', 879.2727272727273), ('Cindy', 607.5764705882353), ('Kelly', 803.2569832402235), ('Ekaterina', 1103.125), ('Varvara', 1114.527027027027), ('Viktoryia', 1104.1830985915492), ('Anastasia', 1015.6833333333333), ('Ximena', 1101.3064516129032), ('Gabriela', 517.7974137931035), ('Ya', 1225.75), ('Xi Yao', 714.8653846153846), ('Ai Wen', 912.1523178807947), ('Alice Andrada', 951.9764150943396), ('Min', 866.0693069306931), ('Francesca', 877.6940639269407), ('Giulia', 797.895652173913), ('Maria', 1116.7941176470588), ('Anna', 755.8634146341464), ('Amy', 605.6197916666666), ('Franziska', 915.9846153846154), ('Olga', 589.388), ('Andjela', 1063.4736842105262), ('Oceane', 553.8112244897959), ('Mathilde', 963.45), ('Magalie', 1036.1214953271028), ('Madeline', 1217.469387755102), ('Sabina', 773.2608695652174), ('Evgeniya', 912.5755395683453), ('Cemre', 1123.3855421686746), ('Anette', 969.8181818181819), ('Natia', 929.6928104575163), ('Alicia', 1076.1882352941177), ('Alexandra', 1025.8503937007874), ('Abbi', 1110.0434782608695), ('Rocio', 1216.138888888889), ('Marina', 1116.394366197183), ('Patricia', 563.7251461988304), ('Beatriz', 413.5833333333333), ('Priscila', 1137.2424242424242), ('Gulchekhra', 1196.0), ('Ofri', 839.4923664122138), ('Iva', 782.2297297297297), ('Nicky', 843.9007633587786), ('Michaela', 930.5444444444445), ('Kimberley', 776.6428571428571), ('Barbora', 482.9059405940594), ('Ivonne', 591.3809523809524), ('Patricia Maria', 403.935), ('Dunja', 977.1011235955057), ('Katarina', 1099.1985815602836), ('Veronica M', 951.0075757575758), ('Patricia', 1155.4489795918366), ('Dejana', 850.3064516129032), ('Danijela', 1107.0919540229886), ('Ashley', 960.984), ('Chisa', 874.8181818181819), ('Claudia', 1055.3680981595091), ('Maud', 1013.4761904761905), ('Ainhoa', 943.7397959183673), ('Marine', 774.5654761904761), ('Lyann', 982.6666666666666), ('Stephanie', 744.9586776859504), ('Elena', 1041.1176470588234), ('Mayya', 619.9064748201439), ('Ziyue', 878.4606741573034), ('Ani', 1054.5243902439024), ('Tamari', 1146.3934426229507), ('Maria', 498.3878504672897), ('Nives', 841.0514705882352), ('Mary Ann', 1188.7096774193549), ('Astra', 829.5625), ('Yue', 983.359649122807), ('Nour', 1202.2), ('Nidhi', 762.1578947368421), ('Gaia', 759.5352697095435), ('Sylvia', 869.1702127659574), ('Sherry', 1024.0116279069769), ('Katrine Isabel', 1111.08), ('Ekaterina', 975.6143790849674), ('Lee', 908.156862745098), ('Libi', 1035.327868852459), ('Rona', 1125.5471698113208), ('Gulben', 1168.3396226415093), ('Vita', 1201.25), ('Boyan', 992.4222222222222), ('Leah', 1179.6216216216217), ('Dana', 874.3333333333334), ('Montserrat', 541.952380952381), ('Daniela', 911.4528301886793), ('Jazmin', 1035.46), ('Camila', 703.7586206896551), ('Linda', 907.8590604026846), ('Alena', 1160.6857142857143), ('Jesika', 501.5860215053763), ('Julia', 661.8320610687023), ('Clelia', 823.6306306306307), ('Stefania', 871.703488372093), ('Olga', 994.2792207792207), ('Paula', 1070.8273381294964), ('Maria Constanza De Las Mercedes', 861.5050505050505), ('Ornella', 978.7321428571429), ('Stephanie Mariel', 1035.5548387096774), ('Fernanda', 632.03), ('Victoria', 564.8894736842105), ('Denise', 956.2231404958678), ('Aimee', 1200.2), ('Mayo', 407.029702970297), ('Christina', 874.1980198019802), ('Rio', 1125.0363636363636), ('Noelle', 883.7787610619469), ('Lina', 1186.3684210526317), ('Angelique', 853.6762589928057), ('Claudia', 1131.0384615384614), ('Yihong', 1209.625), ('Nicole', 960.8412698412699), ('Naiktha', 767.4963503649635), ('Anna', 588.4468085106383), ('Paula', 976.5729166666666), ('Breaunna', 872.0930232558139), ('Spurti', 1149.3125), ('Veronika', 500.6933333333333), ('Emiliya', 1092.2771084337348), ('Daria', 712.054347826087), ('Alina', 783.5474452554745), ('Yafan', 325.6162790697674), ('Sonia', 1029.0980392156862), ('Nour', 1038.7702702702702), ('Elke', 1036.406976744186), ('Nicole', 978.0188679245283), ('Gabriella', 988.0208333333334), ('Carmen', 927.5833333333334), ('Sarahi', 1139.2340425531916), ('Maria Andrea', 1072.9591836734694), ('Ana Gabriela', 1084.7916666666667), ('Isabella', 1227.0), ('Aymet', 915.5932203389831), ('Clementina Eugenia', 964.1224489795918), ('Domenica', 803.8666666666667), ('Isabelle', 725.5555555555555), ('Ellen', 806.7682926829268), ('Yosr', 1222.24), ('Sarvinoz', 1235.1960784313726), ('Da Hye', 1010.3333333333334), ('Ji Hee', 1027.3658536585365), ('Francesca', 1060.8163265306123), ('Martina', 820.1656050955414), ('Sanae', 1105.171875), ('Kanako', 1105.3125), ('Alona', 801.0), ('Elizaveta', 416.8855421686747), ('Sofia', 990.6554054054054), ('Berta', 1005.75), ('Carolina', 857.370786516854), ('Nadia', 500.37654320987656), ('Guadalupe', 806.4901960784314), ('Agustina', 1075.2736842105264), ('Shakhlo', 924.8818897637796), ('Guzal', 995.4074074074074), ('Leolia', 773.5666666666667), ('Imane Maelle', 845.375), ('Karin', 739.3035714285714), ('Ekaterina', 423.656050955414), ('Nam Yeon', 878.6666666666666), ('Anastasia', 843.5766871165645), ('Sandra', 925.6860465116279), ('Katharina', 590.3914893617022), ('Giulia', 1153.275), ('Giulia', 897.0818181818182), ('Daiana', 720.7490039840637), ('Luisa', 1112.9183673469388), ('Marcela', 1178.1724137931035), ('Carolina Meligeni Rodrigues', 799.0650406504066), ('Andressa Cristina', 1184.0416666666667), ('Ivone', 872.0), ('Nadia', 933.3885350318471), ('Sarah', 1013.655737704918), ('Assia', 1172.5531914893618), ('Adriana', 738.4942528735633), ('Sarah', 1286.48), ('Daniela', 1146.5454545454545), ('Carmen Raluca', 842.1553398058253), ('Kirsten Andrea', 1035.0384615384614), ('Joanna', 931.025641025641), ('Amira', 1075.8260869565217), ('Olena', 1360.6666666666667), ('Mitsumi', 1121.04), ('Magdalena', 1231.421052631579), ('Lenka', 767.4705882352941), ('Wen Ling', 1117.55), ('Yasmin', 1142.5), ('Larikah', 1054.9019607843138), ('Alexandra', 1373.3673469387754), ('Jelena', 1046.944), ('Elena', 1106.5), ('Patricia', 1226.3164556962026), ('Micaela', 1332.0737704918033), ('Natalia', 1405.2424242424242), ('Emma', 819.7254901960785), ('Amy', 1084.030303030303), ('Julia', 1170.6774193548388), ('Jade', 934.6125), ('Lisa', 1106.1351351351352), ('Julia', 1049.0833333333333), ('Abigail', 1203.9285714285713), ('Jordana', 1022.6198347107438), ('Elaine', 1221.7931034482758), ('Risa', 1086.25), ('Stephanie', 896.3787878787879), ('Marina', 964.1477272727273), ('Grace', 1238.892857142857), ('Bianca', 892.3639575971731), ('Marianna', 1027.8082191780823), ('Milena', 1114.4074074074074), ('Treta', 1009.8666666666667), ('Almudena', 1157.8), ('Eveliina', 1023.8690476190476), ('Francesca', 1117.75), ('Sabina', 895.1770334928229), ('Katharina', 949.5916666666667), ('Priscilla', 668.9642857142857), ('Nikol', 1054.0813953488373), ('Maria Jesus', 1170.1830985915492), ('Denise', 941.5221238938053), ('Molly', 998.1320754716982), ('Jin', 1267.0), ('Sandy', 1028.9565217391305), ('Katherine Gabriela', 910.396694214876), ('Noelia', 1054.6531791907514), ('Brynn', 952.5619834710744), ('Cecilia', 999.125), ('Ushna', 1132.4109589041095), ('Ratnika', 1021.6504854368932), ('Shweta', 897.6951219512196), ('Natasha', 1047.6377952755906), ('Anna', 1177.15625), ('Yekaterina', 1146.8846153846155), ('Violetta', 1137.5135135135135), ('Anita', 947.472972972973), ('Ludmila', 846.2727272727273), ('Malika', 1004.7428571428571), ('Kathinka', 415.7), ('Meng Ning', 1035.95), ('Giulia', 986.8349514563107), ('Alina', 854.8849557522124), ('Gabriela', 1087.6161616161617), ('Rosalie', 1018.328947368421), ('Natalija', 591.7393162393163), ('Carlotta', 1200.0), ('Sandra', 1092.165137614679), ('Mara', 908.3962264150944), ('Francesca', 954.444976076555), ('Emiliana', 1165.945205479452), ('Arantxa', 1134.896551724138), ('Sowjanya', 813.1357142857142), ('Carla', 1015.8947368421053), ('Belen', 1167.3368421052633), ('Kate', 1117.7142857142858), ('Sabrina', 551.3582089552239), ('Alessia', 961.4230769230769), ('Mami', 1153.590909090909), ('Qianqian', 943.421052631579), ('Gabriela', 1150.0), ('India', 954.046875), ('Ella', 1151.021505376344), ('Patricia', 1105.537037037037), ('Lina', 1020.8352941176471), ('Veronika', 1153.1025641025642), ('Lynn', 1034.3684210526317), ('Mi Jeong', 1071.3076923076924), ('Angelina', 1230.5625), ('Despoina', 746.0962962962963), ('Karla', 807.616), ('Kayla', 1101.55), ('Valeria', 757.0555555555555), ('Haine', 1179.4153846153847), ('Dan Ni', 994.4769230769231), ('Michika', 718.047619047619), ('Camila Vital', 1192.3783783783783), ('Martina', 986.3452380952381), ('Andrea Renee', 878.3939393939394), ('Brandy', 970.9846153846154), ('Fiona', 908.4414414414415), ('Daphne', 1226.5454545454545), ('Jazzamay', 983.1290322580645), ('Yujia', 1034.1304347826087), ('Andrea', 759.2765957446809), ('Ilze', 847.0941176470589), ('Saray', 840.0776699029126), ('Liniques', 1184.7222222222222), ('Jasmin', 1094.5833333333333), ('Elena Teodora', 686.6470588235294), ('Stefanie', 1003.1884057971015), ('Stefania', 1071.142857142857), ('Federica', 799.6744186046511), ('Michele Alexandra', 946.8846153846154), ('Joana', 910.6521739130435), ('Valeria', 935.9090909090909), ('Chantelle', 1128.030303030303), ('Polina', 504.54545454545456), ('Gaelle', 1085.6), ('Anna Katalina', 916.7115384615385), ('Saska', 747.3695652173913), ('Elizabeta', 1154.2714285714285), ('Sari', 1081.1666666666667), ('Pauline', 793.5889570552147), ('Steffi', 891.8120805369127), ('Irina Maria', 578.1381578947369), ('Stefana', 993.4255319148937), ('Alory Regina Elorriaga', 1181.6078431372548), ('Madeleine', 1028.0365853658536), ('Elise', 334.7118644067797), ('Kyra', 1143.2608695652175), ('Aida', 1110.3333333333333), ('Jelena', 1025.25), ('Viktoria', 811.72), ('Laura', 901.8187919463087), ('Xiaorong', 848.4418604651163), ('Stefanie', 506.79487179487177), ('Iva', 692.2707182320441), ('Mariana', 868.2702702702703), ('Sonja', 946.3888888888889), ('Hanna', 1115.7714285714285), ('Vivian', 770.6042780748663), ('Francesca', 1031.2119205298013), ('Karolina', 1034.92), ('Jaimy Gayle', 1243.875), ('Gabriela', 1000.4246575342465), ('Kristina', 1016.5903614457832), ('Anastasia', 661.2774193548387), ('Barbara', 1014.9026548672566), ('Dagmara', 1159.1818181818182), ('Zuzanna', 794.5416666666666), ('Catherine', 918.6078431372549), ('Carolin', 1160.111111111111), ('Beatriz Magdalena', 1253.4), ('Marta', 1112.4528301886792), ('Claudia', 1175.2058823529412), ('Giada', 813.1351351351351), ('Miriana', 950.6263736263736), ('Valeria', 874.1242236024844), ('Jessica', 583.9622641509434), ('Marie', 916.5714285714286), ('Marijana', 1215.0), ('Natalia', 852.420731707317), ('Steffi', 1020.9090909090909), ('Suellen', 911.7619047619048), ('Borislava', 834.2066115702479), ('Mayar', 711.1785714285714), ('Diana', 1026.5037593984962), ('Kanika', 962.8536585365854), ('Apichaya', 1016.5714285714286), ('Laura', 1089.6666666666667), ('Pei Chi', 673.9809523809524), ('Chia Hsien', 950.8813559322034), ('Ching Wen', 583.530303030303), ('Ferny', 1187.0384615384614), ('Cornelia', 757.2253521126761), ('Alexandra', 628.2191780821918), ('Linda', 1232.2), ('Colomba', 1165.093023255814), ('Ivania', 871.109375), ('Macarena', 692.1515151515151), ('Se Hyun', 1210.2571428571428), ('Eva', 1134.9772727272727), ('Audrey', 647.8557692307693), ('Lea', 837.0), ('Maria', 881.1304347826087), ('Dominique', 1248.9166666666667), ('Sarah Beth', 875.9277108433735), ('Pippa', 1041.0740740740741), ('Natasha', 707.7594936708861), ('Vilma Y', 1243.0), ('Maria Paulina', 1047.98224852071), ('Paula Andrea', 1175.909090909091), ('Sri Vaishnavi', 792.1927710843373), ('Giorgia', 997.28), ('Valeriya', 621.5885714285714), ('Charlotte', 1207.0), ('Neda', 930.0), ('Sharon Sanchana', 1097.0), ('Aleksandra', 1097.741573033708), ('Smriti', 1184.8260869565217), ('Sai Samhitha', 998.5238095238095), ('Mariia', 1148.9166666666667), ('Vaniya', 1130.6037735849056), ('Anushka', 1037.0833333333333), ('Julia', 739.8951048951049), ('Bernarda', 541.273631840796), ('Cristina', 709.8819444444445), ('Nicoleta Catalina', 485.46875), ('Ioana', 876.3333333333334), ('Shelby', 788.5178571428571), ('Sara', 1016.6752136752136), ('Akvile', 1038.35), ('Katie', 555.3473684210526), ('Mafalda', 1139.7), ('Darya', 1119.6931818181818), ('Anna', 1201.08), ('Charlotte', 958.1869158878504), ('Casey', 1046.134328358209), ('Yukako', 1071.5833333333333), ('Julie', 1164.6818181818182), ('Jasmine', 437.86915887850466), ('Agustina Elena', 1154.25), ('Camila', 1201.25), ('Nikki', 1017.3134328358209), ('Mandy', 787.2551020408164), ('Isabella', 1166.8), ('Nina Isabella', 1124.1666666666667), ('Lena', 1153.6666666666667), ('Jessica', 797.6951219512196), ('Kelsey', 1012.325), ('Blair', 912.71875), ('Amanda', 1068.35), ('Patricia', 985.0350877192982), ('Jainy', 1037.5274725274726), ('Theresa', 1159.5632183908046), ('Angeliki', 1089.1603773584907), ('Eetee', 842.7045454545455), ('Sara', 1052.1315789473683), ('Ho Ching', 925.9865771812081), ('Cristiana', 554.5376344086021), ('Chiara', 1212.0), ('Jamie', 455.56410256410254), ('Quinn', 883.2352941176471), ('Lina', 607.5721393034826), ('Vladyslava', 856.0782608695653), ('Deria', 1123.6486486486488), ('Catherine', 959.6216216216217), ('Daniela', 1111.2), ('Marie', 518.2080536912752), ('Karolina', 1151.59375), ('Yulia', 970.7878787878788), ('Daniela', 1000.0769230769231), ('Laura', 1003.8620689655172), ('Eudice Wong', 911.7241379310345), ('Justine', 996.6626506024096), ('Michelle', 989.4), ('Harriet', 694.341935483871), ('Sophie', 981.4137931034483), ('Karoline', 873.6229508196722), ('Tayisiya', 747.3172413793103), ('Mia Nicole', 987.504761904762), ('Sybille', 1002.6792452830189), ('Dea', 550.9545454545455), ('Eugenie', 1125.5483870967741), ('Deborah', 650.7578947368421), ('Jessika', 818.2043795620438), ('Olaya', 1112.75), ('Klaartje', 576.9), ('Natalia', 833.9051724137931), ('Katherine', 924.3037037037037), ('Deborah', 741.02), ('Tena', 614.9346733668342), ('Marlies', 946.8934426229508), ('Georgia', 533.5940594059406), ('Charlotte', 824.1891891891892), ('Tamara', 354.43809523809523), ('Katharina', 782.1232876712329), ('Sarah', 1116.9423076923076), ('Gabriela', 856.4285714285714), ('Caroline', 868.6283185840708), ('Jil Nora', 1116.4190476190477), ('Chiara', 1154.0980392156862), ('Ayaka', 552.4653465346535), ('Alejandra', 1003.1176470588235), ('Nozomi', 936.3392857142857), ('Hikari', 1095.1176470588234), ('Hazal', 1214.7692307692307), ('Caroline', 575.8761904761905), ('Rosalia', 1059.73), ('Georgina', 1249.4285714285713), ('Melis', 1097.171875), ('Mari', 685.5), ('Ana', 1066.1382978723404), ('Ena', 1006.0392156862745), ('Gabriela', 699.9121621621622), ('Dejana', 684.156862745098), ('Kerstin', 1020.4271844660194), ('Nina', 225.57534246575344), ('Bojana', 737.0410958904109), ('Elena', 829.0), ('Ines', 1196.3461538461538), ('Giulia', 1208.3125), ('Esen', 1218.5652173913043), ('Lenka', 894.1379310344828), ('Sadafmoh', 665.8219178082192), ('Violetta', 1209.375), ('Nastassia', 1138.9166666666667), ('Eden', 945.7478260869565), ('Corina', 832.7818181818182), ('Bhuvana', 878.0138888888889), ('Charlotte', 1178.4166666666667), ('Manya', 1181.3548387096773), ('Daniela', 1000.1896551724138), ('Louise', 1095.060606060606), ('Eva', 1064.5657894736842), ('Sabina Elena', 1184.6666666666667), ('Julia', 386.24657534246575), ('Naomi', 769.8858695652174), ('Anna', 1264.2727272727273), ('Alena', 1070.6666666666667), ('Gulnaz', 1236.6153846153845), ('Oleksandra', 601.169014084507), ('Yekaterina', 1197.7333333333333), ('Polina', 1212.0), ('Victoria', 1185.75), ('Lou', 1209.625), ('Elodie', 1211.2333333333333), ('Manon', 973.3541666666666), ('Leslie', 1180.5454545454545), ('Maria Agustina', 1190.0833333333333), ('Helen', 912.234375), ('Nikita', 1174.0), ('Juliana Rocha', 1175.7666666666667), ('Josephine', 684.4892086330935), ('Wendy Qi Wen', 1011.469696969697), ('Rosalie', 1143.0), ('Ulyana', 844.0692307692308), ('Daria', 1108.2295081967213), ('Sandra', 489.4657534246575), ('Oana', 1168.2307692307693), ('Jelena', 460.47904191616766), ('Erika', 1108.8), ('Camille', 1029.8), ('Mathilde', 1083.6575342465753), ('Carla', 810.7826086956521), ('Fiona', 531.6888888888889), ('Jacqueline', 691.6936936936937), ('Jennifer', 861.2063492063492), ('Nagi', 828.0675675675676), ('Mihoki', 1110.4411764705883), ('Harmony', 574.8723404255319), ('Viktoriya', 1087.4782608695652), ('Helene', 682.3052631578947), ('Nina', 838.5604395604396), ('Vladica', 943.5432098765432), ('Martina', 1035.6969696969697), ('Danielle', 946.1477272727273), ('Wan Yi', 1081.142857142857), ('Alessandra', 1123.4864864864865), ('Jamilya', 1247.3333333333333), ('Diana', 1142.1315789473683), ('Yuliya', 1167.5428571428572), ('Aleksandra', 1209.625), ('Madina', 1203.5), ('Julia Mansano', 1024.6666666666667), ('Leticia Garcia', 1072.4), ('Ingrid', 853.2375), ('Anna', 823.74), ('Ailen', 1034.5833333333333), ('Ana Victoria', 961.2631578947369), ('Fernanda', 1243.875), ('Louisa', 380.5308641975309), ('Tornado Alicia', 878.1666666666666), ('Madison', 1074.8536585365853), ('Kajsa', 661.9589041095891), ('Oana Georgeta', 686.3047619047619), ('Elke', 906.75), ('Paula', 406.53846153846155), ('Ana Bianca', 842.8446601941747), ('Amrita', 1209.4), ('Simran Kaur', 974.8), ('Shreya', 1148.0), ('Riya', 651.4246575342465), ('Camila', 1212.5263157894738), ('Paulina', 1011.5109489051094), ('Aleksandra', 1210.764705882353), ('Magdalena', 586.9224137931035), ('Rebecca', 563.75), ('Deniz', 1220.1818181818182), ('Eva', 1063.9213483146068), ('Pernilla', 619.4154929577464), ('Karolina', 819.18), ('Barbora', 444.9727272727273), ('Katerina', 291.7972027972028), ('Nao', 313.45625), ('Polina', 1073.5), ('Jaqueline Adina', 748.7238095238096), ('Shilin', 632.2824427480916), ('Akiho', 1145.8235294117646), ('Szabina', 772.3186813186813), ('Nicole', 539.8356164383562), ('Kim', 1221.6470588235295), ('Sofico', 1084.107142857143), ('Melissa', 1154.093023255814), ('Aleksandra', 1018.3636363636364), ('Ekaterina', 1241.8), ('Alessia', 1134.12), ('Ivana', 473.54), ('Pia', 766.21875), ('Olena', 1113.1515151515152), ('Lauren', 1198.909090909091), ('Alexandra', 992.4444444444445), ('Laura', 1129.7818181818182), ('Patcharin', 863.5507246376811), ('Margaux', 1154.0), ('Sandra', 1226.25), ('Anastasiya', 834.7169811320755), ('Anna', 784.5217391304348), ('Emina', 682.0972222222222), ('Naomi', 390.5), ('Nicole', 884.4117647058823), ('Julia', 603.5777777777778), ('Ina', 1165.5573770491803), ('Beatrice', 945.1636363636363), ('Erika', 821.4102564102565), ('Yana', 845.5966386554621), ('Alexa', 1033.6486486486488), ('Monique', 940.5479452054794), ('Francoise', 437.05298013245033), ('Aldana', 1185.7142857142858), ('Luciana', 1243.875), ('Anke', 1228.388888888889), ('Daria', 782.2476190476191), ('Chiara', 1173.4186046511627), ('Deborah', 1219.448275862069), ('Luisa Marie', 820.59375), ('Julia', 418.26027397260276), ('Elena Gabriela', 392.44444444444446), ('Martina', 783.9285714285714), ('Chiara', 826.9069767441861), ('Darya', 1117.0222222222221), ('Anastasiya', 899.5407407407407), ('Hongrui', 914.8607594936709), ('You Na', 1170.3461538461538), ('Maxine', 973.8717948717949), ('Katie', 868.8571428571429), ('Eleonore', 1160.5238095238096), ('Anhelina', 432.6949152542373), ('Haruka', 774.6837606837607), ('Kyoka', 348.54794520547944), ('Rafaela', 1121.2432432432433), ('Emma Christine', 1193.3529411764705), ('Maria', 1048.2156862745098), ('Katerina', 555.9921875), ('Jessica', 863.9344262295082), ('Anastasiya', 394.16), ('Dominika', 1009.7674418604652), ('Emmanuelle', 1184.7692307692307), ('Ana Paula', 684.6578947368421), ('Maria Fernanda', 877.6076923076923), ('Vishesh', 1208.952380952381), ('Victoria', 462.3642857142857), ('Angelina', 830.6666666666666), ('Lizette', 666.1496062992126), ('Samantha', 1012.2051282051282), ('Priscilla', 678.396694214876), ('Olivia', 637.563829787234), ('Michelle', 852.36), ('Chiara', 1028.4310344827586), ('Alice', 536.8039215686274), ('Maia', 745.433962264151), ('Kaitlyn', 891.3095238095239), ('Donika', 1131.6333333333334), ('Gloria', 794.7118644067797), ('Andreea', 833.8493150684932), ('Aliona', 611.35), ('Jacqueline', 1033.34), ('Barbara', 734.2), ('Talya', 1230.2), ('Valeria', 1118.015625), ('Alona', 1037.3055555555557), ('Anastasija', 1144.7142857142858), ('Martina', 779.1060606060606), ('Julieta Lara', 707.1467889908257), ('Eliza', 978.2708333333334), ('Yana', 978.8979591836735), ('Aleksandra', 835.16), ('Teodora', 938.0540540540541), ('Gebriela', 1152.142857142857), ('Vivian', 922.4666666666667), ('Parris', 1099.625), ('Zoe', 677.8082191780821), ('Gabriela', 1003.4827586206897), ('Ana', 276.82481751824815), ('Nicole', 1088.6315789473683), ('Ariadna', 951.4146341463414), ('Ksenija', 975.6271186440678), ('Lilla', 722.5087719298245), ('Emmanuelle', 864.0645161290323), ('Muge', 1186.9444444444443), ('Ege', 1214.857142857143), ('Ilka', 868.2191780821918), ('Jasmin', 969.8666666666667), ('Ksenia', 851.2647058823529), ('Nina', 688.2054794520548), ('Natsumi', 974.3428571428572), ('Angelina', 1229.6521739130435), ('Chanikarn', 1281.8461538461538), ('Marija', 1241.8), ('Adrijana', 627.12), ('Janneke', 861.5102040816327), ('Anastasiya', 1002.2307692307693), ('Sarai Delfina', 1191.6470588235295), ('Sneha', 1225.388888888889), ('Victoria', 1232.2), ('Natalia', 414.9479166666667), ('Ivanka', 1079.05), ('Valeriya', 1029.9850746268658), ('Dhruthi', 615.1506849315068), ('Nelise', 1164.107142857143), ('Vanja', 1089.7111111111112), ('Jessica', 1003.0540540540541), ('Caitlin', 1237.090909090909), ('Yan', 768.560975609756), ('Yuenu', 961.876923076923), ('Kwan Yau', 1070.0377358490566), ('Fang Ying', 612.0185185185185), ('Si Qi', 1047.7575757575758), ('Veronika', 1127.8181818181818), ('Emilia', 1232.0), ('Paulina', 1195.9473684210527), ('Freya', 544.1627906976744), ('Katharina', 673.986301369863), ('Sinead', 975.3484848484849), ('Shiran', 1187.9245283018868), ('Nataliya', 1247.909090909091), ('Anastasia', 430.17808219178085), ('Amelie', 1011.3666666666667), ('Mariaryeni', 1085.4242424242425), ('Lesedi Sheya', 887.4545454545455), ('Justina', 1212.9166666666667), ('Paige Mary', 1156.28125), ('Anais', 1010.2222222222222), ('Petra', 607.7978723404256), ('Ting Jr', 789.6113989637306), ('Damilola', 1493.0), ('Brittany', 1151.4137931034484), ('Megan', 1142.4782608695652), ('Jil Belen', 501.0619469026549), ('Sara', 891.0576923076923), ('Allie', 338.2395833333333), ('Maria', 504.45054945054943), ('Olga', 426.958904109589), ('Pamela', 989.1904761904761), ('Elizaveta', 1180.12), ('Jana', 353.3222222222222), ('Sofia', 433.7792207792208), ('Adeliya', 790.1538461538462), ('Camille', 1214.341463414634), ('Louise', 1208.5128205128206), ('Theo', 650.1206896551724), ('Maria', 905.6805555555555), ('Ao', 617.3333333333334), ('Karina Kristina', 1062.795918367347), ('Maria Jose', 817.8518518518518), ('Mahitha', 1007.15), ('Risa', 741.123595505618), ('Megumi', 1025.0), ('Iryna', 747.6422018348624), ('Oyku', 866.0454545454545), ('Yasmyn', 1261.8181818181818), ('Kristyna', 1077.4736842105262), ('Kateryna', 866.1971830985915), ('Tatjana', 131.44628099173553), ('Irina', 669.6590909090909), ('Hana', 1212.0), ('Tatiana', 1225.578947368421), ('Anna', 1052.1333333333334), ('Ksenia', 1046.2075471698113), ('Sandra', 838.4905660377359), ('Lisa', 1150.15), ('Jelena', 1010.1142857142858), ('Emily', 773.5352112676056), ('Gabriella', 557.6849315068494), ('Luisa', 911.8913043478261), ('Damini', 1242.0), ('Jessica', 457.1111111111111), ('Anna', 1084.9577464788733), ('Yana', 1200.1052631578948), ('Melanie', 597.8504672897196), ('Marie', 512.1145833333334), ('Zaineb', 1227.344827586207), ('Rita', 1002.7659574468086), ('Yukun', 824.3936170212766), ('Tina', 966.9056603773585), ('Vera', 1126.2), ('Eleni', 1069.25), ('Dalma', 279.16438356164383), ('Ahlam', 1248.72), ('Agne', 1231.5), ('Martha', 1056.0588235294117), ('Alexa', 704.0958904109589), ('Yukina', 857.1692307692308), ('Maddison', 748.0), ('Marie', 939.6129032258065), ('Alexandra', 801.0), ('Usue Maitane', 411.5068493150685), ('Ellie', 479.0652173913044), ('Jade', 1120.590909090909), ('Sung Hee', 1138.274193548387), ('Evgeniya', 1221.904761904762), ('Ivana', 1225.9166666666667), ('Silvia', 1212.0), ('Camilla', 661.2465753424658), ('Cecilia', 1237.34375), ('Sandra', 1222.5862068965516), ('Lisa', 758.609756097561), ('Costanza', 1153.3333333333333), ('Marta', 1045.0588235294117), ('Irene', 579.2153846153847), ('Chaoyi', 1232.8), ('Cristina', 820.3085106382979), ('Maja', 1190.6363636363637), ('Fanny', 707.972972972973), ('Ines', 749.6309523809524), ('Sean', 1240.92), ('May', 1084.0294117647059), ('Maria Del Rosario', 1119.4897959183672), ('Aina', 1164.95), ('Mariam', 662.1182795698925), ('Anastasia Evgenyevna', 956.5754716981132), ('Ana Luisa', 1243.4285714285713), ('Constanza', 835.1132075471698), ('Alexia', 1255.421052631579), ('Maia A', 1206.6666666666667), ('Eva', 961.8630136986301), ('Peggy', 755.5813953488372), ('Zhanlan', 627.7777777777778), ('En Pei', 1229.7333333333333), ('Thai Sa Grana', 802.7222222222222), ('Erika', 1146.8823529411766), ('Karyn', 903.5769230769231), ('Damira', 1198.3333333333333), ('Marina', 1029.6296296296296), ('Dajana', 1181.4736842105262), ('Ayla', 397.83561643835617), ('Amy', 908.546875), ('Yeong Won', 973.8617021276596), ('Yu Jin', 1098.357142857143), ('Maurien', 1121.0869565217392), ('Raluca Georgiana', 539.6164383561644), ('Andreea Amalia', 801.84375), ('Iulia Maria', 1170.9411764705883), ('Emilija', 1209.625), ('Katarina', 920.1794871794872), ('Sofia', 1157.6190476190477), ('Gozal', 716.3150684931506), ('Petra', 796.97), ('Yuanyi', 891.2340425531914), ('Aiko', 774.046875), ('Inger', 1039.0), ('Marie', 938.0645161290323), ('Mary', 869.1666666666666), ('Cristina', 1147.4583333333333), ('Alisa', 1240.2727272727273), ('Muazzez', 1227.0), ('Wushuang', 937.7878787878788), ('Verena', 931.780487804878), ('Plobrung', 937.7945205479452), ('Magdalena', 1223.9016393442623), ('Chompoothip', 1112.1458333333333), ('Qiu Yu', 705.8493150684932), ('Teodora', 1156.2424242424242), ('Rebeka', 842.0806451612904), ('Alba', 843.7260273972603), ('Federica Joe', 1204.7272727272727), ('Ylena', 892.3561643835617), ('Tamachan', 949.8059701492538), ('Nicole', 1132.0), ('Barbara', 1193.433962264151), ('Karolina', 1047.0243902439024), ('Hollie', 1185.75), ('Eliessa', 876.1730769230769), ('Elena', 1116.5), ('Magali', 734.0), ('Nonna', 1167.2758620689656), ('Angela', 1116.2571428571428), ('Ana', 1203.1698113207547), ('Ronit', 427.0), ('Kristina N', 1060.5633802816901), ('Ekaterina', 1014.2592592592592), ('Emma', 1215.698113207547), ('Anna', 1098.5135135135135), ('Nina', 1039.7272727272727), ('Antonina', 1049.4655172413793), ('Barbara', 895.763440860215), ('Lena', 938.4), ('Rosie', 984.1714285714286), ('Renata', 485.2386363636364), ('Britt', 647.5205479452055), ('Greetje', 547.277108433735), ('Morgane', 1105.3214285714287), ('Elina', 1116.5652173913043), ('Maria', 1080.3076923076924), ('Frances', 999.2), ('Yuriko', 1101.2045454545455), ('Clemence', 875.9772727272727), ('Milica', 1221.904761904762), ('Nina', 690.1022727272727), ('Tamara', 1245.6190476190477), ('Bianca', 561.1369863013699), ('Veronica', 1032.2), ('Ekaterina', 866.0357142857143), ('Nora', 921.6216216216217), ('Tereza', 1039.076923076923), ('Nikola', 1237.2666666666667), ('Anastasia', 710.9433962264151), ('Pranjala', 795.4736842105264), ('Jin Ju', 1035.6470588235295), ('Ying', 661.3972602739726), ('Dabin', 920.1276595744681), ('Hanna', 587.2), ('Sabina', 1161.3384615384616), ('Margaux', 1144.4594594594594), ('Sara', 1217.851851851852), ('Natasha', 871.4054054054054), ('Minami', 1238.0625), ('Ines', 974.8732394366198), ('Lamis', 1062.3666666666666), ('Yulia', 814.5192307692307), ('Sandra', 1103.658536585366), ('Elisabeth', 1211.2424242424242), ('Yulia', 1230.5625), ('Valentina', 921.3333333333334), ('Tamara', 1023.8333333333334), ('Ipek', 976.7878787878788), ('Inci', 1069.0925925925926), ('Irina', 1082.0), ('Natalie', 999.3636363636364), ('Nikola', 1182.1944444444443), ('Vendula', 729.0117647058823), ('Petia', 710.3972602739726), ('Dasha', 722.6986301369863), ('Elizabeth', 1242.6666666666667), ('Adriana', 1064.7826086956522), ('Raveena', 487.6268656716418), ('Amina', 670.2222222222222), ('Petra', 1203.0), ('Natalija', 812.4642857142857), ('Milagros', 1234.2857142857142), ('Chiraz', 749.3582089552239), ('Kimberly', 618.6923076923077), ('Bianka', 696.952380952381), ('Masa', 951.2911392405064), ('Vasilisa', 886.9589041095891), ('Katarina', 1059.4054054054054), ('Laura D', 910.5714285714286), ('Sofia', 977.12), ('Yuliana', 1082.5882352941176), ('Diana', 1217.7142857142858), ('Idia', 1232.2), ('Weronika Jasmina', 1152.7837837837837), ('Nicole', 618.8135593220339), ('Katharina', 434.52054794520546), ('Darya', 105.02597402597402), ('Mercedes', 1213.2142857142858), ('Vera', 1191.6571428571428), ('Karolina', 340.82191780821915), ('Caroline', 1242.0), ('Guillermina', 1027.0), ('Ekaterina', 1137.2), ('Luca', 859.8644067796611), ('Rebeka', 461.7291666666667), ('Kristina', 501.8493150684931), ('Anastasia', 1173.9333333333334), ('Melany Solange', 1039.8333333333333), ('Jasmine Amber', 1117.64), ('Julia', 943.6666666666666), ('Magdalena', 581.3275862068965), ('Viktoria', 434.8452380952381), ('Federica', 969.0845070422536), ('Anastasiya', 600.95), ('Eva', 1133.25), ('Margot', 925.1666666666666), ('Natalia', 1159.1458333333333), ('Valeria', 1048.5), ('Anna', 1062.509090909091), ('Anastasia', 524.7534246575342), ('Veronica', 792.015625), ('Anastasia', 1149.640625), ('Victoria', 1086.888888888889), ('Alicia', 1132.94), ('Seone', 889.8028169014085), ('Sofia', 1190.8461538461538), ('Simona', 875.5769230769231), ('Noelia', 1036.6031746031747), ('Marta Huqi', 851.1224489795918), ('Tessah', 390.2361111111111), ('Margot', 549.7671232876712), ('Ralina', 1176.5), ('Snehadevi S', 632.3150684931506), ('Man Ying Maggie', 1202.2692307692307), ('Julie', 1075.6031746031747), ('Angela', 1177.2222222222222), ('Verena', 1123.6153846153845), ('Sara', 570.8888888888889), ('Julia', 1047.1666666666667), ('Lena', 859.5757575757576), ('Alice', 1014.060606060606), ('Vinciane', 1150.0), ('Valeriya', 1217.7368421052631), ('Ana', 1151.3333333333333), ('Michaela', 667.082191780822), ('Ena', 931.7777777777778), ('Catherine Cartan', 134.21917808219177), ('Lisa', 909.9589041095891), ('Jaeda', 760.4920634920635), ('Ksenia', 1108.2222222222222), ('Yuan', 1054.0), ('Bunyawi', 555.3384615384615), ('Mizuno', 593.1506849315068), ('Mila', 1201.16), ('Alina', 1235.909090909091), ('Jiahui', 794.4931506849315), ('Kseniia', 990.6), ('Alisa', 1212.0), ('Tereza', 540.7397260273973), ('Erica', 788.0384615384615), ('Andie K', 970.3620689655172), ('Lucie', 1219.093023255814), ('Alexandria', 945.625), ('Tatiana', 869.0425531914893), ('Vera', 431.26027397260276), ('Kelly', 813.1428571428571), ('Ines', 1154.0857142857142), ('Sherazad', 271.3972602739726), ('Karin', 1194.591836734694), ('Mallaurie', 1031.5342465753424), ('Eleonore', 1028.2884615384614), ('Sara', 616.7735849056604), ('Valentine', 1185.5), ('Karolayne', 1077.8095238095239), ('Julia', 1083.05), ('Huijie', 1118.904761904762), ('Xu Liu', 488.7671232876712), ('Shangqing', 1228.3235294117646), ('Maria', 1178.9), ('Katya', 1050.7), ('Marta', 454.7945205479452), ('Shakhnoza', 1236.7627118644068), ('Terri', 963.5), ('Doga Selen', 1234.6176470588234), ('Natalie', 1172.3720930232557), ('Arthi', 1281.8461538461538), ('Daniela', 1183.4285714285713), ('Vera', 1171.0588235294117), ('Yixuan', 801.6712328767123), ('Xinyu', 370.7671232876712), ('Anna', 485.23809523809524), ('Maria', 1047.0), ('Alexis', 1207.8333333333333), ('Rianna', 638.6666666666666), ('Mirjam', 843.6428571428571), ('Savannah', 1142.9285714285713), ('Agata Jadwiga', 1082.3548387096773), ('Ida', 962.5), ('Lidia', 1147.8529411764705), ('Estela', 966.0540540540541), ('Mouna', 1258.5), ('Caroline', 553.5762711864406), ('Sophie', 676.4722222222222), ('Andrina', 1045.6666666666667), ('Lucia', 901.7966101694915), ('Manca', 838.1780821917808), ('Tamara', 298.32876712328766), ('Yuval', 1230.2), ('Shir', 1154.4166666666667), ('Maya', 1165.5714285714287), ('Sarlota', 1209.7777777777778), ('Phenomena', 1211.0), ('Alina', 1206.9), ('Yarden', 1166.875), ('Miriam Bianca', 628.075), ('Ioana', 1070.878787878788), ('Warona', 1249.3333333333333), ('Valeriya', 814.3333333333334), ('Haruna', 512.1515151515151), ('Berfu', 625.013698630137), ('Greta', 1252.608695652174), ('Yulia', 1162.0), ('Anastasia', 976.054794520548), ('Polina', 954.6), ('Andrea', 1039.448275862069), ('Lea', 833.2105263157895), ('Jessica', 1208.7142857142858), ('Komola', 826.0238095238095), ('Petra', 1152.5555555555557), ('Yuki Kristina', 698.8285714285714), ('Chihiro', 695.4794520547945), ('Fanny', 428.5068493150685), ('Anastasia', 851.3), ('Aryna', 349.54794520547944), ('Ekaterina', 708.8813559322034), ('Natalie', 1128.3934426229507), ('Paula', 1119.7272727272727), ('Lauren', 1242.3478260869565), ('Ingrid', 670.931506849315), ('Alexandra', 1178.888888888889), ('Farah', 1106.3076923076924), ('Dina', 1094.4583333333333), ('Maria', 993.375), ('Ayan', 901.8717948717949), ('Pei Hsuan', 1106.5), ('I Hsuan', 1038.6911764705883), ('Lucrezia', 845.986301369863), ('Giorgia', 1129.4333333333334), ('Gabriela Nicole', 994.0612244897959), ('Oana', 927.0909090909091), ('Georgia Andreea', 763.1014492753624), ('Jelena', 1139.418181818182), ('Jovana', 1157.1538461538462), ('Maria Lourdes', 918.0769230769231), ('Agustina', 1182.5), ('Margot', 1238.7777777777778), ('Sang Hee', 857.9508196721312), ('Jia Qi', 529.7777777777778), ('Anastasia', 996.76), ('Ludmilla', 787.5416666666666), ('Arina', 1098.1323529411766), ('Anastasiya', 1098.4347826086957), ('Xiaodi', 467.24657534246575), ('Andreea', 1145.8085106382978), ('Anna', 1027.6986301369864), ('Lusine', 974.2702702702703), ('Yuqi', 1047.3529411764705), ('Sunam', 611.0757575757576), ('Katherine', 653.4305555555555), ('Ylona Georgiana', 642.9487179487179), ('Marta', 1151.1818181818182), ('Karman', 652.917808219178), ('Tamar', 1118.4166666666667), ('Jessica', 820.6849315068494), ('Charlotte', 676.013698630137), ('Joanne', 1227.8), ('Natalia', 1135.0), ('Dana', 724.0), ('Georgiana', 1153.9166666666667), ('Valerie', 1232.2424242424242), ('Camila', 997.8333333333334), ('Jana', 1034.3392857142858), ('Sabrina', 1180.421052631579), ('Jiaxi', 578.5), ('Isabelle', 884.6296296296297), ('Anca', 1127.7368421052631), ('Ashley', 698.9076923076923), ('Suzuho', 980.6666666666666), ('Angelina', 967.4772727272727), ('Federica', 874.3333333333334), ('Barbora', 927.2641509433962), ('Alena', 1274.9444444444443), ('Gyulnara', 1087.6216216216217), ('Mirabelle', 721.1643835616438), ('Karolina', 1235.8461538461538), ('Margarita', 779.5217391304348), ('Emilie', 705.4716981132076), ('Sara', 988.6666666666666), ('Daria', 1025.0), ('Sophia', 1221.3333333333333), ('Sabastiani', 982.7397260273973), ('Evgeniya', 830.875), ('Satsuki', 888.7272727272727), ('Aleksandra', 962.4629629629629), ('Julyette Maria Josephine', 732.1666666666666), ('Aleksandra', 747.5342465753424), ('Anna', 1032.157894736842), ('Mira', 788.2622950819672), ('Moulika', 1243.4), ('Ioana Diana', 482.43243243243245), ('Janja', 1262.5416666666667), ('Susan', 1015.6792452830189), ('Carolyn', 1197.578947368421), ('Jodie Anna', 925.4230769230769), ('Maegan', 787.0), ('Karola Patricia', 928.3333333333334), ('Martina', 1042.4137931034484), ('Sofya', 483.3235294117647), ('Valeriya', 943.8), ('Ekaterina', 1260.6363636363637), ('Victoria', 923.1578947368421), ('Kennedy', 807.7222222222222), ('Iana', 1085.581818181818), ('Oliwia', 1006.5128205128206), ('Francesca', 1147.8461538461538), ('Meritxell', 1182.9107142857142), ('Stephanie', 1019.9512195121952), ('Petra', 1221.6363636363637), ('Tereza', 860.8055555555555), ('Kimika', 1097.219512195122), ('Martina', 1174.7142857142858), ('Abigail', 605.425925925926), ('Claire', 581.8194444444445), ('Jada', 909.2), ('Dalila', 876.6444444444444), ('Basak', 1235.0555555555557), ('Ema', 1234.2692307692307), ('Clara', 1218.2857142857142), ('Astrid Wanja', 1086.45), ('Malene', 999.15625), ('Eva', 852.1194029850747), ('Anna', 435.0281690140845), ('Claudia', 1148.5142857142857), ('Chelsea', 1132.0), ('Marketa', 353.44444444444446), ('Miriam', 564.547619047619), ('Nika', 1134.3055555555557), ('Anna', 947.0714285714286), ('Dariya', 1090.0), ('Laura Sofia', 1198.1538461538462), ('Kim', 1224.8823529411766), ('Shanshan', 694.2), ('Linnea', 959.6981132075472), ('Anhzelika', 850.9791666666666), ('Akiko', 1275.8235294117646), ('Jessica', 930.1315789473684), ('Elena', 632.6888888888889), ('Mihika', 1064.142857142857), ('Wiktoria', 1083.1454545454546), ('Zhibek', 1058.0), ('Polina', 1064.1025641025642), ('Sofya', 895.952380952381), ('Karina', 1246.3636363636363), ('Anna', 1024.904761904762), ('Siyu', 1241.1379310344828), ('Yijia', 1063.9411764705883), ('Marcelina', 1247.3636363636363), ('Karine', 868.8904109589041), ('Eleonora', 950.0277777777778), ('Destanee', 483.77464788732397), ('Anna', 319.4736842105263), ('Naima', 930.7027027027027), ('Elena', 1151.6666666666667), ('Kristina', 1218.0740740740741), ('Andra Maria', 1275.8235294117646), ('Dominique', 979.3589743589744), ('Dayana', 576.4307692307692), ('Kayla', 418.6031746031746), ('Pei Ju', 1061.3076923076924), ('Lara', 1180.5), ('Dalila', 1096.972972972973), ('Katie', 498.1111111111111), ('Qianhui', 826.1388888888889), ('Yu Tong', 1239.6666666666667), ('Xinyu', 681.175), ('Mi Zhuoma', 999.375), ('Michela', 1228.9285714285713), ('Schena', 1188.2941176470588), ('Dorien', 1196.56), ('Siqi', 980.9076923076923), ('Zhima', 1144.45), ('Reina', 1019.0), ('Carson', 1020.6), ('Maria', 835.2926829268292), ('Kylie', 798.3181818181819), ('Jenny', 902.1470588235294), ('Viktoriia', 1236.5333333333333), ('Polina', 1089.12), ('Laura', 937.5555555555555), ('Jaimee', 562.8450704225352), ('Emma', 1071.59375), ('Anna Maria', 1069.063492063492), ('Melissa Ishuan', 1104.357142857143), ('Alexandra', 1123.3461538461538), ('Natalie', 1062.0188679245282), ('Chengyiyi', 789.2857142857143), ('Lulu', 1098.2888888888888), ('Eugenia', 1157.5), ('Daniela', 1181.3684210526317), ('Shelly', 1171.0), ('Lina', 1153.5833333333333), ('Olesya', 501.44444444444446), ('Victoria Ariadna', 1236.0), ('Zeel', 791.2352941176471), ('Lizaveta', 1120.5652173913043), ('Aneta', 1149.9705882352941), ('Claudia', 1057.923076923077), ('Seira', 1115.72), ('Zhou', 1237.9), ('Alana', 1119.1639344262296), ('Sabina', 1057.837837837838), ('Veronika', 1080.3728813559321), ('Anda', 1150.0), ('Nicole', 1222.5135135135135), ('Mihaela Lorena', 1223.4), ('Anna', 1110.9333333333334), ('Kaja', 633.5454545454545), ('Aastha', 1199.8235294117646), ('Abigail', 915.0), ('Cameron', 1192.1818181818182), ('Katharine', 882.1071428571429), ('Elina', 1164.0), ('Daria', 859.4912280701755), ('Maria', 1078.25), ('Diana Maria', 1205.7692307692307), ('Nermeen', 1069.15), ('Mathilde', 1107.5166666666667), ('Daniela', 1024.888888888889), ('Yanni', 1059.2702702702702), ('Shou Na', 1120.388888888889), ('Hanyu', 543.968253968254), ('Leonie', 825.972972972973), ('Constanze', 1245.3333333333333), ('Zhuoma', 989.75), ('Ana', 1097.1025641025642), ('Alina', 1273.6842105263158), ('Katarina', 520.968253968254), ('Kristina', 1169.3725490196077), ('Karolina', 1277.1875), ('Desirae', 863.7826086956521), ('Emiliana', 732.8888888888889), ('Sing Le', 1141.842105263158), ('Yang', 1177.8823529411766), ('Margaux', 874.0), ('Olga', 710.5862068965517), ('Hortencia', 1251.1333333333334), ('Nina', 788.4166666666666), ('Lucia', 1144.4), ('Axana', 1064.0), ('Blanca', 904.6538461538462), ('Bianca', 408.7096774193548), ('Francesca', 533.8709677419355), ('Ksenia', 1136.24), ('Eva', 1162.1698113207547), ('Miranda', 1169.4864864864865), ('Vivian', 940.7358490566038), ('Sandra', 1251.6), ('Judith', 1224.0), ('Tijana', 1017.7777777777778), ('Lucia', 1122.3333333333333), ('Hana', 1233.0625), ('Boba', 1254.6341463414635), ('Vanessa', 1235.625), ('Kassandra', 927.0350877192982), ('Abir', 1228.75), ('Caroline', 1105.313725490196), ('Vicky', 1252.9130434782608), ('Patrycja', 982.4150943396227), ('Nikola', 1236.142857142857), ('Emily', 822.6792452830189), ('Olivia', 1149.3870967741937), ('Alessia', 1184.5217391304348), ('Monika', 893.7413793103449), ('Cindy', 1059.030303030303), ('Alicia', 1161.421052631579), ('Zinovia', 1221.5), ('Denise Antonela', 1160.3125), ('Marina', 1010.5454545454545), ('Carlota', 1236.7777777777778), ('Emily', 1099.6756756756756), ('Momoko', 772.6981132075472), ('Lorraine M', 972.75), ('Fiona', 1142.5882352941176), ('Suzan', 982.7222222222222), ('Ramu', 1010.4545454545455), ('Lisa Marie', 1015.0512820512821), ('Laura', 1035.7567567567567), ('Livia', 1179.875), ('Johana', 1111.8333333333333), ('Adva', 1255.3333333333333), ('Anna Maria', 1141.45), ('Laura', 947.6756756756756), ('Ayano', 597.6981132075472), ('Irina', 1227.8), ('Maryna', 735.0285714285715), ('Roosh', 1168.2857142857142), ('Guiomar', 957.9512195121952), ('Selin', 1168.6571428571428), ('Hsin Yuan', 1107.7142857142858), ('Kateryna', 1088.6), ('Anastasiia', 1245.75), ('Yasmine', 1018.3333333333334), ('Franziska', 1223.25), ('Elizabeth', 1249.0), ('Kei', 1003.1212121212121), ('Nicole', 1180.7272727272727), ('Lara', 1221.5), ('Kelia', 1114.9433962264152), ('Phillis', 826.6486486486486), ('Anne Sophie', 1252.0), ('Michaela', 754.8378378378378), ('Arlinda', 1074.3333333333333), ('Paula', 1122.6190476190477), ('Lucia', 1117.2702702702702), ('Dewi', 1154.2857142857142), ('Anna', 1112.7368421052631), ('Xiaoxi', 737.7547169811321), ('Anastasia', 337.23809523809524), ('Rebeca', 1145.4333333333334), ('Daria', 1186.6296296296296), ('Ekaterina', 1257.5238095238096), ('Sara', 1205.4), ('Ana', 1026.6842105263158), ('Mayar', 1252.5357142857142), ('Lea', 950.2093023255813), ('Mahak', 875.0), ('Oleksandra', 1012.4782608695652), ('Sarah', 869.3846153846154), ('Salma', 1249.3333333333333), ('Emmanuelle', 909.8205128205128), ('Emma', 1122.5384615384614), ('Maria Camila', 1188.5277777777778), ('Alexandra', 660.4509803921569), ('Eden', 1243.3333333333333), ('Lauryn', 1107.0882352941176), ('Rosa', 965.0), ('Kaylah', 1163.3478260869565), ('Alexandra', 1050.9130434782608), ('Shuyue', 966.0588235294117), ('Yidi', 1185.030303030303), ('Gabriella', 1027.5454545454545), ('Erina', 733.1351351351351), ('Vitalia', 1224.0), ('Laylo', 1226.076923076923), ('Ilay', 1135.5), ('Kaitlin', 901.3333333333334), ('Alexandra', 1225.6206896551723), ('Jule', 1243.904761904762), ('Simona', 995.3055555555555), ('Bojana', 857.6111111111111), ('Adrienn', 1200.4117647058824), ('Panna', 683.1081081081081), ('Salma', 1195.7333333333333), ('Julita', 1019.9411764705883), ('Francesca', 1121.0), ('Shuo', 864.1538461538462), ('Alexa', 971.0909090909091), ('Ye Xin', 1048.081081081081), ('Jia', 1169.6923076923076), ('Nina', 1220.3823529411766), ('Yasmina', 1227.7777777777778), ('Suzy', 698.7567567567568), ('Sasa', 1033.027027027027), ('Stefania', 1172.0714285714287), ('Katarzyna', 1045.344827586207), ('Valeriya', 735.3589743589744), ('Ann', 907.4), ('Mai', 721.4571428571429), ('Whitney', 1152.8947368421052), ('Julia', 1064.0), ('Draginja', 913.7272727272727), ('Yuliya', 963.9666666666667), ('Xiyu', 954.6), ('Jiatian', 1232.032258064516), ('Katyarina', 1010.1818181818181), ('Luna', 1139.0), ('Sunae', 1229.8), ('Yuki', 876.7428571428571), ('Svenja', 1231.0), ('Angelica', 1240.3181818181818), ('Francisca', 903.1666666666666), ('Meiling', 812.85), ('Tingting', 1015.2352941176471), ('Ella', 1223.9), ('Anna', 1136.2857142857142), ('Ashley', 460.9), ('Ran', 917.6060606060606), ('Maja', 717.1388888888889), ('Caty', 744.0), ('Michaela', 882.2424242424242), ('Loudmilla', 1220.0), ('Maileen', 1152.888888888889), ('Akilah', 772.8571428571429), ('Xin Yu', 1022.3333333333334), ('Vlada', 1034.090909090909), ('Romy', 758.1714285714286), ('Alessia', 1224.0), ('Marta', 536.0), ('Anna', 1228.5454545454545), ('Lara', 1104.076923076923), ('Amanda', 474.4166666666667), ('Himari', 1219.0), ('Ayumi', 1036.3666666666666), ('Meiqi', 1029.1666666666667), ('Mei Xu', 1031.6), ('Karolina', 938.375), ('Aneta', 1224.0), ('Ana', 1224.0), ('Sohyun', 1004.6666666666666), ('Adrienn', 1229.8461538461538), ('Ramya', 1121.8846153846155), ('Anne Marie', 1237.6363636363637), ('Yekaterina', 1224.0), ('Giulia', 1173.2631578947369), ('Clara', 1075.0), ('Yulia', 1117.6923076923076), ('Irina', 1137.75), ('Lucia', 1169.6923076923076), ('Ayumi', 1047.7575757575758), ('Ange Oby', 1226.3333333333333), ('Genevieve', 772.2857142857143), ('Eva Marie', 1083.8333333333333), ('Iga', 705.5625), ('Giorgie', 1226.5), ('Layne', 1184.0), ('Daria', 1178.2068965517242), ('Zoe', 1141.4117647058824), ('Jiaxue', 1161.0), ('Laura', 1231.7), ('Kariann', 1068.9166666666667), ('Caroline', 1231.904761904762), ('Mananchaya', 1230.6), ('Zeynep  Sena', 1229.5714285714287), ('Brienne', 917.0), ('Jiakang', 1230.6), ('Varvara', 1159.3076923076924), ('Betina', 1229.5714285714287), ('Viktoriya', 1174.608695652174), ('Eva', 1168.2857142857142), ('Taylor', 1066.3333333333333), ('Margaux', 1231.421052631579), ('Molly', 1210.7777777777778), ('Leylah Annie', 1030.5), ('Ellie', 1047.0), ('Moyuka', 1198.25), ('Nina', 1229.5714285714287), ('Brindtha', 1126.3333333333333), ('Naomi', 1104.5714285714287), ('Merel', 900.75), ('Arina Gabriela', 1224.0), ('Helene', 920.8333333333334), ('Kristina', 995.0)]
Gold Output      : [(1199.8235294117646, 'Aastha'), (1110.0434782608695, 'Abbi'), (808.4545454545455, 'Abbie'), (387.66706161137444, 'Abigail'), (1039.6744186046512, 'Abiodun'), (1228.75, 'Abir'), (790.1538461538462, 'Adeliya'), (1122.4423076923076, 'Adnya'), (619.6814159292036, 'Adriana'), (1213.1666666666667, 'Adrienn'), (627.12, 'Adrijana'), (1255.3333333333333, 'Adva'), (1155.0392156862745, 'Afroditi'), (960.6770186335403, 'Agata'), (1082.3548387096773, 'Agata Jadwiga'), (1231.5, 'Agne'), (391.3003629764065, 'Agnes'), (694.0659898477157, 'Agnese'), (940.2125603864735, 'Agni'), (122.19587628865979, 'Agnieszka'), (684.8497652582159, 'Agustina'), (1154.25, 'Agustina Elena'), (1156.340425531915, 'Ah'), (1248.72, 'Ahlam'), (728.5, 'Ahsha'), (890.8728448275862, 'Ai'), (912.1523178807947, 'Ai Wen'), (1110.3333333333333, 'Aida'), (284.8724727838258, 'Aiko'), (1034.5833333333333, 'Ailen'), (1200.2, 'Aimee'), (1164.95, 'Aina'), (943.7397959183673, 'Ainhoa'), (1024.625, 'Aishwarya'), (302.84831460674155, 'Ajla'), (704.9618138424821, 'Akari'), (215.25185185185185, 'Akgul'), (710.9617224880383, 'Aki'), (1145.8235294117646, 'Akiho'), (493.98205383848455, 'Akiko'), (772.8571428571429, 'Akilah'), (1038.35, 'Akvile'), (1119.1639344262296, 'Alana'), (843.7260273972603, 'Alba'), (343.22432701894314, 'Alberta'), (775.2734375, 'Albina'), (1185.7142857142858, 'Aldana'), (1067.019801980198, 'Alejandra'), (450.22998544395927, 'Aleksandra'), (578.07962529274, 'Aleksandrina'), (820.4563492063492, 'Alena'), (1123.4864864864865, 'Alessandra'), (1057.628205128205, 'Alessia'), (1145.1641791044776, 'Alessondra'), (383.9921465968586, 'Alexa'), (569.2647632558965, 'Alexandra'), (945.625, 'Alexandria'), (718.5202702702703, 'Alexia'), (604.15, 'Alexis'), (441.9846743295019, 'Aliaksandra'), (710.3822682786414, 'Alice'), (951.9764150943396, 'Alice Andrada'), (1105.1298701298701, 'Alicia'), (855.813627254509, 'Alicja'), (925.0028776978418, 'Alina'), (611.35, 'Aliona'), (453.01556420233464, 'Alisa'), (403.48784576697403, 'Alison'), (822.3459915611814, 'Alix'), (252.11485774499474, 'Alize'), (217.85922330097088, 'Alla'), (557.9232456140351, 'Allie'), (1157.8, 'Almudena'), (871.6926829268293, 'Alona'), (1181.6078431372548, 'Alory Regina Elorriaga'), (496.9431818181818, 'Alyona'), (650.6240276577355, 'Amanda'), (747.4375, 'Amandine'), (1011.3666666666667, 'Amelie'), (803.9764705882353, 'Amina'), (613.195652173913, 'Aminat'), (1075.8260869565217, 'Amira'), (415.9078341013825, 'Amra'), (1209.4, 'Amrita'), (763.888198757764, 'Amy'), (460.8932038834951, 'An Sophie'), (396.2893280632411, 'Ana'), (842.8446601941747, 'Ana Bianca'), (524.9192825112108, 'Ana Clara'), (1084.7916666666667, 'Ana Gabriela'), (1243.4285714285713, 'Ana Luisa'), (1031.228855721393, 'Ana Paula'), (496.7156398104265, 'Ana Sofia'), (961.2631578947369, 'Ana Victoria'), (144.3264367816092, 'Anabel'), (922.2255639097745, 'Anaeve'), (482.26169844020797, 'Anais'), (859.3059701492538, 'Anamika'), (430.0872542522642, 'Anastasia'), (956.5754716981132, 'Anastasia Evgenyevna'), (1245.75, 'Anastasiia'), (221.66153846153847, 'Anastasija'), (671.2584369449378, 'Anastasiya'), (1127.7368421052631, 'Anca'), (1150.0, 'Anda'), (970.3620689655172, 'Andie K'), (1063.4736842105262, 'Andjela'), (1275.8235294117646, 'Andra Maria'), (414.4332292750607, 'Andrea'), (878.3939393939394, 'Andrea Renee'), (956.0333333333333, 'Andreea'), (801.84375, 'Andreea Amalia'), (726.2657657657658, 'Andreea Roxana'), (424.64521739130436, 'Andreja'), (1184.0416666666667, 'Andressa Cristina'), (1045.6666666666667, 'Andrina'), (1152.0857142857142, 'Aneta'), (367.2274678111588, 'Anett'), (969.8181818181819, 'Anette'), (1226.3333333333333, 'Ange Oby'), (1128.7272727272727, 'Angela'), (686.2234432234433, 'Angelica'), (1089.1603773584907, 'Angeliki'), (750.3207810320781, 'Angelina'), (308.56833824975416, 'Angelique'), (432.6949152542373, 'Anhelina'), (850.9791666666666, 'Anhzelika'), (720.1431870669746, 'Ani'), (947.472972972973, 'Anita'), (725.3893333333333, 'Anja'), (1228.388888888889, 'Anke'), (618.4714285714285, 'Ankita'), (907.4, 'Ann'), (551.5557158312297, 'Anna'), (760.639175257732, 'Anna Arina'), (428.5496828752643, 'Anna Giulia'), (345.51020408163265, 'Anna Karolina'), (916.7115384615385, 'Anna Katalina'), (201.87700534759358, 'Anna Lena'), (1070.3967391304348, 'Anna Maria'), (583.9347826086956, 'Annalisa'), (248.74237737516572, 'Anne'), (762.7606382978723, 'Anne Liz'), (1237.6363636363637, 'Anne Marie'), (1252.0, 'Anne Sophie'), (1042.037037037037, 'Annie'), (265.79487179487177, 'Annika'), (969.5882352941177, 'Anouk'), (1051.7096774193549, 'Antonela'), (589.1298076923077, 'Antonia'), (1049.4655172413793, 'Antonina'), (1037.0833333333333, 'Anushka'), (617.3333333333334, 'Ao'), (1016.5714285714286, 'Apichaya'), (658.5074074074074, 'Arabela'), (279.23336006415394, 'Arantxa'), (490.4144736842105, 'Aranza'), (200.97080291970804, 'Aravane'), (951.4146341463414, 'Ariadna'), (560.6778190830236, 'Arina'), (1224.0, 'Arina Gabriela'), (1074.3333333333333, 'Arlinda'), (1281.8461538461538, 'Arthi'), (349.54794520547944, 'Aryna'), (1181.27868852459, 'Aselya'), (1151.95, 'Asha'), (331.3681818181818, 'Ashleigh'), (638.88, 'Ashley'), (823.0909090909091, 'Ashling'), (1018.6637931034483, 'Ashmitha'), (803.3904761904762, 'Ashvarya'), (453.43392070484583, 'Asia'), (790.46875, 'Asiya'), (1172.5531914893618, 'Assia'), (829.5625, 'Astra'), (1086.45, 'Astrid Wanja'), (591.2544731610338, 'Audrey'), (1208.4285714285713, 'Avgusta'), (1064.0, 'Axana'), (552.4653465346535, 'Ayaka'), (901.8717948717949, 'Ayan'), (597.6981132075472, 'Ayano'), (397.83561643835617, 'Ayla'), (915.5932203389831, 'Aymet'), (479.5530612244898, 'Ayu Fani'), (412.74466019417474, 'Ayumi'), (556.2303370786517, 'Azra'), (763.8900651465798, 'Barbara'), (252.6093155893536, 'Barbora'), (656.2932551319648, 'Basak'), (785.0707482993197, 'Beatrice'), (457.4050279329609, 'Beatriz'), (1253.4, 'Beatriz Magdalena'), (971.2865853658536, 'Beatriz Maria'), (1382.1538461538462, 'Beauty'), (1167.3368421052633, 'Belen'), (681.7736842105263, 'Belinda'), (705.4688346883469, 'Benedetta'), (625.013698630137, 'Berfu'), (717.7932330827068, 'Bermet'), (541.273631840796, 'Bernarda'), (834.1005025125628, 'Bernice'), (1005.75, 'Berta'), (146.59709379128137, 'Bethanie'), (1229.5714285714287, 'Betina'), (878.0138888888889, 'Bhuvana'), (653.2805383022775, 'Bianca'), (696.952380952381, 'Bianka'), (550.1941544885177, 'Bibiane'), (912.71875, 'Blair'), (904.6538461538462, 'Blanca'), (1221.8333333333333, 'Blessing'), (1254.6341463414635, 'Boba'), (392.7313829787234, 'Bojana'), (834.2066115702479, 'Borislava'), (992.4222222222222, 'Boyan'), (970.9846153846154, 'Brandy'), (872.0930232558139, 'Breaunna'), (211.01377118644066, 'Brenda'), (854.3170731707318, 'Brianna'), (917.0, 'Brienne'), (1126.3333333333333, 'Brindtha'), (647.5205479452055, 'Britt'), (990.5210084033613, 'Brittany'), (804.6277056277056, 'Brooke'), (952.5619834710744, 'Brynn'), (555.3384615384615, 'Bunyawi'), (1140.981981981982, 'Busra'), (311.87854251012146, 'Cagla'), (709.4247787610619, 'Caitlin'), (803.7139479905437, 'Camelia Elena'), (1192.1818181818182, 'Cameron'), (539.7944621938232, 'Camila'), (1192.3783783783783, 'Camila Vital'), (801.6850649350649, 'Camilla'), (1112.9450549450548, 'Camille'), (236.07412398921832, 'Cara'), (416.3666666666667, 'Carina'), (411.70779777206513, 'Carla'), (1236.7777777777778, 'Carlota'), (1127.9338842975208, 'Carlotta'), (318.69978858350953, 'Carly'), (890.6351351351351, 'Carmen'), (842.1553398058253, 'Carmen Raluca'), (564.1434426229508, 'Carol'), (645.2279792746114, 'Carolin'), (718.725321888412, 'Carolina'), (799.0650406504066, 'Carolina Meligeni Rodrigues'), (342.40130505709624, 'Caroline'), (1161.5675675675675, 'Caroline B'), (1197.578947368421, 'Carolyn'), (1020.6, 'Carson'), (378.0163727959698, 'Casey'), (293.76942355889724, 'Catalina'), (941.4724409448819, 'Catherine'), (134.21917808219177, 'Catherine Cartan'), (744.0, 'Caty'), (755.4649681528663, 'Cecilia'), (1141.842105263158, 'Cecilie Lundgaard'), (708.618398637138, 'Celine'), (1123.3855421686746, 'Cemre'), (650.1367521367522, 'Chalena'), (343.2835365853659, 'Chanel'), (215.6615811373093, 'Chanelle'), (575.4626436781609, 'Chang'), (1281.8461538461538, 'Chanikarn'), (609.90625, 'Chantal'), (1128.030303030303, 'Chantelle'), (1232.8, 'Chaoyi'), (766.4794520547945, 'Charlene'), (927.7647058823529, 'Charlotte'), (593.9759036144578, 'Chayenne'), (1132.0, 'Chelsea'), (719.3061224489796, 'Chelsey'), (524.7444668008048, 'Chen'), (789.2857142857143, 'Chengyiyi'), (464.1367781155015, 'Chi Chi'), (1039.3902439024391, 'Chi Fan'), (950.8813559322034, 'Chia Hsien'), (359.3764705882353, 'Chia Jung'), (437.73858921161826, 'Chiaki'), (977.9640591966173, 'Chiara'), (533.9586374695864, 'Chieh Yu'), (848.9908952959029, 'Chihiro'), (385.2651515151515, 'Chin Wei'), (615.2230215827338, 'Chinami'), (583.530303030303, 'Ching Wen'), (749.3582089552239, 'Chiraz'), (874.8181818181819, 'Chisa'), (675.2445414847161, 'Chloe'), (1112.1458333333333, 'Chompoothip'), (1112.875, 'Christie'), (454.9920529801324, 'Christina'), (841.4051724137931, 'Christine'), (692.390625, 'Chun Mei'), (986.3944099378882, 'Chun Yan'), (659.3055555555555, 'Cindy'), (443.45754716981133, 'Claire'), (1190.7307692307693, 'Clara'), (826.2619047619048, 'Claudia'), (967.2978723404256, 'Claudia Antonia'), (996.2574257425742, 'Claudia Gianina'), (383.6413199426112, 'Claudine'), (823.6306306306307, 'Clelia'), (875.9772727272727, 'Clemence'), (964.1224489795918, 'Clementina Eugenia'), (620.4120171673819, 'Clothilde'), (270.5896860986547, 'Coco'), (1165.093023255814, 'Colomba'), (390.0, 'Conny'), (570.2723004694835, 'Constance'), (835.1132075471698, 'Constanza'), (1245.3333333333333, 'Constanze'), (832.7818181818182, 'Corina'), (356.8219696969697, 'Corinna'), (757.2253521126761, 'Cornelia'), (406.5511363636364, 'Cory Ann'), (1049.0, 'Costanza'), (554.5376344086021, 'Cristiana'), (643.616049382716, 'Cristina'), (439.5747863247863, 'Cristina Andreea'), (720.6428571428571, 'Cristina Madalina'), (949.7944444444445, 'Csilla'), (998.7722772277227, 'Cynthia'), (1010.3333333333334, 'Da Hye'), (920.1276595744681, 'Dabin'), (1159.1818181818182, 'Dagmara'), (720.7490039840637, 'Daiana'), (1181.4736842105262, 'Dajana'), (801.6933333333334, 'Dalia'), (525.9552572706936, 'Dalila'), (279.16438356164383, 'Dalma'), (1493.0, 'Damilola'), (1242.0, 'Damini'), (1198.3333333333333, 'Damira'), (994.4769230769231, 'Dan Ni'), (805.7028985507246, 'Dana'), (977.4539007092199, 'Daneika'), (380.609375, 'Danica'), (348.6364892881825, 'Daniela'), (643.9216101694915, 'Daniella'), (744.7453250222618, 'Danielle'), (434.68, 'Danielle Rose'), (1107.0919540229886, 'Danijela'), (302.83268482490274, 'Danka'), (1226.5454545454545, 'Daphne'), (629.6443987667009, 'Daria'), (464.95631067961165, 'Darija'), (1132.1744186046512, 'Dariya'), (531.1829405162739, 'Darya'), (722.6986301369863, 'Dasha'), (576.4307692307692, 'Dayana'), (550.9545454545455, 'Dea'), (764.6785714285714, 'Deborah'), (1115.0851063829787, 'Deeon'), (758.5342960288808, 'Dejana'), (983.4174757281553, 'Demi'), (419.1633466135458, 'Denisa'), (949.1239316239316, 'Denise'), (1160.3125, 'Denise Antonela'), (551.5304659498208, 'Deniz'), (1123.6486486486488, 'Deria'), (863.7826086956521, 'Desirae'), (1032.2666666666667, 'Desiree'), (665.686684073107, 'Despina'), (746.0962962962963, 'Despoina'), (483.77464788732397, 'Destanee'), (1154.2857142857142, 'Dewi'), (615.1506849315068, 'Dhruthi'), (736.1650485436893, 'Di'), (383.7832512315271, 'Dia'), (654.3773657782928, 'Diana'), (1205.7692307692307, 'Diana Maria'), (809.697247706422, 'Dianne'), (669.2982456140351, 'Dijana'), (1248.2, 'Dilara'), (1094.4583333333333, 'Dina'), (268.05945945945945, 'Dinah'), (1234.6176470588234, 'Doga Selen'), (803.8666666666667, 'Domenica'), (171.71134020618555, 'Dominika'), (1042.7843137254902, 'Dominique'), (1131.6333333333334, 'Donika'), (223.50900900900902, 'Donna'), (1196.56, 'Dorien'), (520.9397993311037, 'Doroteja'), (913.7272727272727, 'Draginja'), (929.0599369085173, 'Dunja'), (1073.1752577319587, 'Ebony'), (1029.6888888888889, 'Eden'), (211.67325428194994, 'Edina'), (656.2851711026616, 'Eduarda'), (842.7045454545455, 'Eetee'), (1214.857142857143, 'Ege'), (471.8367290748899, 'Ekaterina'), (553.9434782608696, 'Ekaterine'), (1221.7931034482758, 'Elaine'), (1066.5343511450383, 'Eleanor'), (324.3720930232558, 'Elena'), (392.44444444444446, 'Elena Gabriela'), (686.6470588235294, 'Elena Teodora'), (249.5244140625, 'Eleni'), (950.0277777777778, 'Eleonora'), (1087.372340425532, 'Eleonore'), (876.1730769230769, 'Eliessa'), (421.6573033707865, 'Elina'), (888.2213114754098, 'Elisabeth'), (334.7118644067797, 'Elise'), (418.39748953974896, 'Elitsa'), (579.5214723926381, 'Elixane'), (978.2708333333334, 'Eliza'), (1154.2714285714285, 'Elizabeta'), (736.9747747747748, 'Elizabeth'), (1006.2982456140351, 'Elizabeth Anita Alexandria'), (489.5307517084282, 'Elizaveta'), (981.9814814814815, 'Elizaveta Anna'), (1011.9433962264151, 'Elke'), (1168.7967479674796, 'Ella'), (750.9460093896714, 'Ellen'), (508.340206185567, 'Ellie'), (1211.2333333333333, 'Elodie'), (652.1984732824427, 'Elyne'), (819.3400503778338, 'Ema'), (672.730407523511, 'Emelyn'), (770.8472222222222, 'Emi'), (1232.0, 'Emilia'), (1022.9174311926605, 'Emiliana'), (705.4716981132076, 'Emilie'), (1209.625, 'Emilija'), (1092.2771084337348, 'Emiliya'), (585.093851132686, 'Emily'), (1041.948717948718, 'Emily J'), (682.0972222222222, 'Emina'), (641.046992481203, 'Emma'), (1193.3529411764705, 'Emma Christine'), (943.7716535433071, 'Emmanuelle'), (1229.7333333333333, 'En Pei'), (980.3333333333334, 'Ena'), (321.23595505617976, 'Eri'), (788.0384615384615, 'Erica'), (544.5041866028708, 'Erika'), (942.7969696969697, 'Erin'), (733.1351351351351, 'Erina'), (1218.5652173913043, 'Esen'), (966.0540540540541, 'Estela'), (617.4935251798561, 'Estelle'), (950.9090909090909, 'Ester'), (347.34943639291464, 'Estrella'), (781.3218390804598, 'Etsuko'), (911.7241379310345, 'Eudice Wong'), (1157.5, 'Eugenia'), (477.62886597938143, 'Eugenie'), (620.6746411483253, 'Eugeniya'), (500.29483037156706, 'Eva'), (1083.8333333333333, 'Eva Marie'), (1023.8690476190476, 'Eveliina'), (471.5439093484419, 'Evelyn'), (414.66339869281046, 'Evgenia'), (442.0344827586207, 'Evgeniya'), (612.0185185185185, 'Fang Ying'), (406.9281767955801, 'Fangzhou'), (569.1904761904761, 'Fanny'), (1106.3076923076924, 'Farah'), (673.7509157509157, 'Fatima'), (1070.9463414634147, 'Fatimah'), (648.2984054669704, 'Fatma'), (1015.5, 'Fatyha'), (722.7286493034525, 'Federica'), (1204.7272727272727, 'Federica Joe'), (647.922077922078, 'Fernanda'), (1187.0384615384614, 'Ferny'), (853.3908045977012, 'Fiona'), (376.47888446215137, 'Flavia'), (451.5810397553517, 'Florencia'), (999.2, 'Frances'), (570.534951862704, 'Francesca'), (903.1666666666666, 'Francisca'), (437.05298013245033, 'Francoise'), (949.6575342465753, 'Franziska'), (1244.3333333333333, 'Frederikke'), (544.1627906976744, 'Freya'), (696.7697332607512, 'Gabriela'), (994.0612244897959, 'Gabriela Nicole'), (792.5, 'Gabriella'), (985.7211538461538, 'Gabrielle Faith'), (1052.8314606741574, 'Gaelle'), (759.5352697095435, 'Gaia'), (526.2644836272041, 'Gail'), (305.19563522992985, 'Galina'), (606.7211740041929, 'Ganna'), (229.3774193548387, 'Garbine'), (1152.142857142857, 'Gebriela'), (772.2857142857143, 'Genevieve'), (533.5940594059406, 'Georgia'), (763.1014492753624, 'Georgia Andreea'), (1153.9166666666667, 'Georgiana'), (396.225, 'Georgina'), (1150.6607142857142, 'Ghislaine'), (813.1351351351351, 'Giada'), (567.8518518518518, 'Gioia'), (960.4941860465116, 'Giorgia'), (1226.5, 'Giorgie'), (1197.0, 'Giovanna'), (693.6215943491422, 'Giulia'), (584.359375, 'Giuliana'), (794.7118644067797, 'Gloria'), (716.3150684931506, 'Gozal'), (454.06233062330625, 'Grace'), (783.8288043478261, 'Gracia'), (547.277108433735, 'Greetje'), (296.8219584569733, 'Greta'), (797.383606557377, 'Guadalupe'), (1027.0, 'Guillermina'), (957.9512195121952, 'Guiomar'), (1168.3396226415093, 'Gulben'), (1196.0, 'Gulchekhra'), (1236.6153846153845, 'Gulnaz'), (995.4074074074074, 'Guzal'), (1087.6216216216217, 'Gyulnara'), (1051.623188405797, 'Habiba'), (844.3856812933026, 'Hae Sung'), (1179.4153846153847, 'Haine'), (1110.5376344086021, 'Hana'), (957.2, 'Hanna'), (543.968253968254, 'Hanyu'), (680.1050228310502, 'Hao Chen'), (1153.936507936508, 'Hao Ching'), (574.8723404255319, 'Harmony'), (694.341935483871, 'Harriet'), (774.6837606837607, 'Haruka'), (512.1515151515151, 'Haruna'), (914.5321100917431, 'Hayley'), (1214.7692307692307, 'Hazal'), (167.50632911392404, 'Heather'), (417.44323483670297, 'Heidi'), (1019.4107142857143, 'Helen'), (696.4752475247525, 'Helene'), (1095.1176470588234, 'Hikari'), (673.6635071090047, 'Hilda'), (1219.0, 'Himari'), (534.890243902439, 'Hiroko'), (860.8104265402843, 'Hirono'), (925.9865771812081, 'Ho Ching'), (1185.75, 'Hollie'), (914.8607594936709, 'Hongrui'), (1251.1333333333334, 'Hortencia'), (1107.7142857142858, 'Hsin Yuan'), (726.1737089201878, 'Hua Chen'), (1118.904761904762, 'Huijie'), (888.0055096418732, 'Hulya'), (1020.28125, 'Hye Min'), (1069.3208955223881, 'Hyojung'), (729.0671936758894, 'Hyun Hui'), (1038.6911764705883, 'I Hsuan'), (1085.581818181818, 'Iana'), (962.5, 'Ida'), (1232.2, 'Idia'), (705.5625, 'Iga'), (1135.5, 'Ilay'), (868.2191780821918, 'Ilka'), (452.625, 'Ilona'), (847.0941176470589, 'Ilze'), (845.375, 'Imane Maelle'), (1165.5573770491803, 'Ina'), (1069.0925925925926, 'Inci'), (954.046875, 'India'), (627.7027027027027, 'Indire'), (485.9559748427673, 'Indy'), (919.6147540983607, 'Ineke'), (687.0229885057471, 'Ines'), (1039.0, 'Inger'), (766.2549019607843, 'Ingrid'), (869.3571428571429, 'Ingrid Alexandra'), (748.6622691292876, 'Ingrid Esperanza'), (1192.5454545454545, 'Intissar'), (980.2232142857143, 'Ioana'), (482.43243243243245, 'Ioana Diana'), (646.0441176470588, 'Ioana Loredana'), (799.0552486187845, 'Ionela Andreea'), (655.7828348504552, 'Ipek'), (288.74423480083857, 'Irena'), (579.2153846153847, 'Irene'), (436.84339509862525, 'Irina'), (285.84388185654007, 'Irina Camelia'), (578.1381578947369, 'Irina Maria'), (866.1075949367089, 'Iris'), (489.5294964028777, 'Iryna'), (724.9178743961353, 'Isabel'), (1114.99375, 'Isabela'), (566.7873931623932, 'Isabella'), (781.6993464052288, 'Isabelle'), (1170.9411764705883, 'Iulia Maria'), (732.7386018237082, 'Iva'), (439.81414868105514, 'Ivana'), (871.109375, 'Ivania'), (1079.05, 'Ivanka'), (117.95684523809524, 'Iveta'), (1136.8535031847134, 'Ivette'), (872.0, 'Ivone'), (591.3809523809524, 'Ivonne'), (624.6089494163424, 'Jacqueline'), (909.2, 'Jada'), (739.04802259887, 'Jade'), (760.4920634920635, 'Jaeda'), (562.8450704225352, 'Jaimee'), (1243.875, 'Jaimy Gayle'), (1037.5274725274726, 'Jainy'), (402.36756756756756, 'Jamie'), (1247.3333333333333, 'Jamilya'), (592.5990783410139, 'Jan'), (406.6258503401361, 'Jana'), (240.5306603773585, 'Janette'), (699.7864583333334, 'Janina'), (1262.5416666666667, 'Janja'), (861.5102040816327, 'Janneke'), (748.7238095238096, 'Jaqueline Adina'), (1121.767857142857, 'Jara'), (149.46360759493672, 'Jarmila'), (633.027027027027, 'Jasmin'), (642.1811989100818, 'Jasmina'), (437.86915887850466, 'Jasmine'), (1117.64, 'Jasmine Amber'), (1070.5648854961833, 'Jawairiah'), (1035.46, 'Jazmin'), (983.1290322580645, 'Jazzamay'), (767.7730496453901, 'Jeannine'), (348.19338235294117, 'Jelena'), (556.7936681222708, 'Jennifer'), (902.1470588235294, 'Jenny'), (501.5860215053763, 'Jesika'), (655.7464059804486, 'Jessica'), (818.2043795620438, 'Jessika'), (967.6708860759494, 'Jessy'), (823.9789029535865, 'Ji Hee'), (833.5061082024433, 'Ji Young'), (1169.6923076923076, 'Jia'), (682.961038961039, 'Jia Jing'), (529.7777777777778, 'Jia Qi'), (794.4931506849315, 'Jiahui'), (1230.6, 'Jiakang'), (1232.032258064516, 'Jiatian'), (578.5, 'Jiaxi'), (1161.0, 'Jiaxue'), (114.05571428571429, 'Jie'), (501.0619469026549, 'Jil Belen'), (1116.4190476190477, 'Jil Nora'), (121.9579326923077, 'Jill'), (721.14, 'Jillian'), (1267.0, 'Jin'), (492.8915187376726, 'Jin A'), (1035.6470588235295, 'Jin Ju'), (369.1620469083156, 'Jing Jing'), (863.3225806451613, 'Joana'), (931.025641025641, 'Joanna'), (1227.8, 'Joanne'), (925.4230769230769, 'Jodie Anna'), (1111.8333333333333, 'Johana'), (310.3405299313052, 'Johanna'), (1022.6198347107438, 'Jordana'), (924.9325842696629, 'Josepha'), (684.4892086330935, 'Josephine'), (993.2105263157895, 'Josie'), (601.9846625766871, 'Jovana'), (812.6, 'Ju Eun'), (1224.0, 'Judith'), (1243.904761904762, 'Jule'), (576.9173467252564, 'Julia'), (1024.6666666666667, 'Julia Mansano'), (1110.0816326530612, 'Juliana'), (1175.7666666666667, 'Juliana Rocha'), (512.3787128712871, 'Julie'), (707.1467889908257, 'Julieta Lara'), (1019.9411764705883, 'Julita'), (732.1666666666666, 'Julyette Maria Josephine'), (1189.0, 'June'), (262.30884808013354, 'Junri'), (1212.9166666666667, 'Justina'), (521.5358361774744, 'Justine'), (585.8517745302714, 'Justyna'), (1055.020202020202, 'Kady'), (272.08855291576674, 'Kai Chen'), (522.6561403508772, 'Kai Lin'), (127.06775067750678, 'Kaia'), (901.3333333333334, 'Kaitlin'), (756.2549019607843, 'Kaitlyn'), (633.5454545454545, 'Kaja'), (661.9589041095891, 'Kajsa'), (568.2547169811321, 'Kamila'), (1162.8301886792453, 'Kamilla'), (765.1395348837209, 'Kamonwan'), (924.2782608695652, 'Kana'), (635.346516007533, 'Kanae'), (1105.3125, 'Kanako'), (799.9940828402367, 'Kanami'), (962.8536585365854, 'Kanika'), (871.0790513833992, 'Kaori'), (674.9672514619883, 'Karen'), (1068.9166666666667, 'Kariann'), (472.338003502627, 'Karin'), (883.6090909090909, 'Karina'), (696.9606060606061, 'Karina Ildor'), (1062.795918367347, 'Karina Kristina'), (868.8904109589041, 'Karine'), (1001.0679611650486, 'Karis'), (807.616, 'Karla'), (652.917808219178, 'Karman'), (928.3333333333334, 'Karola Patricia'), (1077.8095238095239, 'Karolayne'), (586.9412296564195, 'Karolina'), (873.6229508196722, 'Karoline'), (903.5769230769231, 'Karyn'), (927.0350877192982, 'Kassandra'), (331.93949394939494, 'Katalin'), (401.0998263888889, 'Katarina'), (459.29286608260327, 'Katarzyna'), (1117.7142857142858, 'Kate'), (491.8507295173962, 'Katerina'), (294.33209990749305, 'Kateryna'), (680.677700348432, 'Katharina'), (882.1071428571429, 'Katharine'), (836.6804511278195, 'Katherine'), (910.396694214876, 'Katherine Gabriela'), (415.7, 'Kathinka'), (291.4792817679558, 'Kathrin'), (620.9404580152672, 'Katie'), (1111.08, 'Katrine Isabel'), (492.6608695652174, 'Katy'), (1050.7, 'Katya'), (1010.1818181818181, 'Katyarina'), (583.1686746987951, 'Kayla'), (1163.3478260869565, 'Kaylah'), (772.2402912621359, 'Kazusa'), (1003.1212121212121, 'Kei'), (1114.9433962264152, 'Kelia'), (804.873831775701, 'Kelly'), (312.7584269662921, 'Kelly S'), (1012.325, 'Kelsey'), (807.7222222222222, 'Kennedy'), (643.422641509434, 'Keren'), (1018.6534653465346, 'Keri'), (1020.4271844660194, 'Kerstin'), (978.0229885057471, 'Khristina'), (1164.090909090909, 'Ki Ryang'), (287.71625344352617, 'Kiki'), (687.3120567375887, 'Kim'), (762.4081632653061, 'Kim Alice'), (846.9154228855722, 'Kimberley'), (618.6923076923077, 'Kimberly'), (1097.219512195122, 'Kimika'), (95.03465982028241, 'Kimiko'), (606.1467576791808, 'Kinnie'), (308.64912280701753, 'Kirsten'), (1035.0384615384614, 'Kirsten Andrea'), (576.9, 'Klaartje'), (235.31431431431432, 'Klara'), (780.7905027932961, 'Klaudia'), (826.0238095238095, 'Komola'), (567.0507399577167, 'Korina'), (844.7460317460317, 'Kotomi'), (522.984693877551, 'Krista'), (445.18918918918916, 'Kristie'), (343.25546975546973, 'Kristina'), (1060.5633802816901, 'Kristina N'), (837.7730496453901, 'Kristy'), (443.8467908902692, 'Kristyna'), (482.36648501362396, 'Ksenia'), (990.6, 'Kseniia'), (975.6271186440678, 'Ksenija'), (488.76107382550333, 'Kumiko'), (165.96132596685084, 'Kurumi'), (159.62397820163488, 'Kveta'), (1070.0377358490566, 'Kwan Yau'), (887.502487562189, 'Kyle'), (798.3181818181819, 'Kylie'), (348.54794520547944, 'Kyoka'), (443.76148409893995, 'Kyra'), (533.433770014556, 'Kyung Mi'), (677.4458598726114, 'Laetitia'), (996.8148148148148, 'Laili'), (1062.3666666666666, 'Lamis'), (643.6939163498099, 'Lara'), (1054.9019607843138, 'Larikah'), (504.4145867098865, 'Laura'), (910.5714285714286, 'Laura D'), (516.1982942430703, 'Laura Ioana'), (1198.1538461538462, 'Laura Sofia'), (484.9442231075697, 'Lauren'), (1107.0882352941176, 'Lauryn'), (612.736, 'Lavinia'), (1226.076923076923, 'Laylo'), (1184.0, 'Layne'), (858.4107142857143, 'Lea'), (1179.6216216216217, 'Leah'), (908.156862745098, 'Lee'), (594.9436936936937, 'Lena'), (657.8934169278997, 'Lena Marie'), (451.33577981651376, 'Lenka'), (773.5666666666667, 'Leolia'), (825.972972972973, 'Leonie'), (887.4545454545455, 'Lesedi Sheya'), (205.17590361445784, 'Lesia'), (514.7174515235457, 'Lesley'), (1180.5454545454545, 'Leslie'), (481.3229166666667, 'Leticia'), (1072.4, 'Leticia Garcia'), (1030.5, 'Leylah Annie'), (988.7425149700599, 'Li'), (387.87113402061857, 'Liana Gabriela'), (899.9150326797386, 'Libby'), (1035.327868852459, 'Libi'), (1147.8529411764705, 'Lidia'), (797.2128378378378, 'Lidziya'), (284.8326771653543, 'Liezel'), (567.9464544138929, 'Liga'), (722.5087719298245, 'Lilla'), (497.42124542124543, 'Lin'), (574.9808362369338, 'Lina'), (929.4398496240601, 'Linda'), (275.6055900621118, 'Lindsay'), (986.82, 'Lindsey'), (418.81925343811395, 'Ling'), (1184.7222222222222, 'Liniques'), (959.6981132075472, 'Linnea'), (356.0105210420842, 'Lisa'), (758.06, 'Lisa Maria'), (996.0408163265306, 'Lisa Marie'), (673.6507936507936, 'Lisanne'), (887.2875, 'Liubov'), (1179.875, 'Livia'), (870.9007633587786, 'Liz Tatiane'), (1120.5652173913043, 'Lizaveta'), (666.1496062992126, 'Lizette'), (1231.2727272727273, 'Lorenza'), (972.75, 'Lorraine M'), (680.1724137931035, 'Lou'), (1220.0, 'Loudmilla'), (380.5308641975309, 'Louisa'), (1070.1025641025642, 'Louise'), (188.06095041322314, 'Lourdes'), (907.3557312252965, 'Lu'), (859.8644067796611, 'Luca'), (845.740638002774, 'Lucia'), (885.7495107632094, 'Luciana'), (322.62611607142856, 'Lucie'), (845.986301369863, 'Lucrezia'), (756.3141592920354, 'Lucy'), (846.2727272727273, 'Ludmila'), (787.5416666666666, 'Ludmilla'), (981.7517730496454, 'Luisa'), (820.59375, 'Luisa Marie'), (284.22813688212926, 'Luksika'), (1098.2888888888888, 'Lulu'), (1139.0, 'Luna'), (974.2702702702703, 'Lusine'), (1190.0629921259842, 'Lutfiye'), (982.6666666666666, 'Lyann'), (952.4411764705883, 'Lynn'), (382.82479784366575, 'Lyudmyla'), (607.3360995850622, 'Macall'), (692.1515151515151, 'Macarena'), (324.63613231552165, 'Madalina'), (748.0, 'Maddison'), (1028.0365853658536, 'Madeleine'), (1217.469387755102, 'Madeline'), (1203.5, 'Madina'), (290.64452214452217, 'Madison'), (958.0955414012739, 'Madrie'), (787.0, 'Maegan'), (1139.7, 'Mafalda'), (1173.75, 'Maftuna'), (734.0, 'Magali'), (1036.1214953271028, 'Magalie'), (300.3974358974359, 'Magda'), (443.6296006264683, 'Magdalena'), (1092.7621951219512, 'Magy'), (875.0, 'Mahak'), (1007.15, 'Mahitha'), (687.25, 'Mai'), (745.433962264151, 'Maia'), (1206.6666666666667, 'Maia A'), (438.4245810055866, 'Maiko'), (1152.888888888889, 'Maileen'), (410.8463541666667, 'Mailen'), (896.7413793103449, 'Maja'), (784.8009049773756, 'Makiho'), (516.6615384615385, 'Makoto'), (999.15625, 'Malene'), (1004.7428571428571, 'Malika'), (825.039603960396, 'Malin'), (1031.5342465753424, 'Mallaurie'), (143.48235294117646, 'Mallory'), (947.3333333333334, 'Malou'), (1153.590909090909, 'Mami'), (1202.2692307692307, 'Man Ying Maggie'), (689.891129032258, 'Mana'), (1230.6, 'Mananchaya'), (838.1780821917808, 'Manca'), (361.0, 'Mandy'), (897.0974358974358, 'Manisha'), (622.7673469387755, 'Manon'), (1181.3548387096773, 'Manya'), (908.3962264150944, 'Mara'), (774.64, 'Marcela'), (1143.7957746478874, 'Marcela Guimaraes'), (1247.3636363636363, 'Marcelina'), (657.0171919770773, 'Marcella'), (325.5912596401028, 'Margalita'), (987.6739130434783, 'Margarida'), (611.4060995184591, 'Margarita'), (1051.1224489795918, 'Margaux'), (753.8346456692914, 'Margot'), (526.3698630136986, 'Mari'), (426.6002565198803, 'Maria'), (1190.0833333333333, 'Maria Agustina'), (1072.9591836734694, 'Maria Andrea'), (1188.5277777777778, 'Maria Camila'), (861.5050505050505, 'Maria Constanza De Las Mercedes'), (1119.4897959183672, 'Maria Del Rosario'), (194.2392065344224, 'Maria Elena'), (443.0228531855956, 'Maria Fernanda'), (1170.1830985915492, 'Maria Jesus'), (486.6092544987147, 'Maria Joao'), (306.1794310722101, 'Maria Jose'), (918.0769230769231, 'Maria Lourdes'), (1047.98224852071, 'Maria Paulina'), (359.81081081081084, 'Maria Teresa'), (662.1182795698925, 'Mariam'), (556.0428051001821, 'Mariana'), (730.3831168831168, 'Marianna'), (993.175925925926, 'Marianne'), (1085.4242424242425, 'Mariaryeni'), (695.574074074074, 'Marie'), (300.56296296296296, 'Marie Eve'), (1148.9166666666667, 'Mariia'), (544.2636655948553, 'Marija'), (1215.0, 'Marijana'), (532.6881807180315, 'Marina'), (774.5654761904761, 'Marine'), (279.78655282817505, 'Marion'), (1163.0, 'Mariona'), (1067.3413173652696, 'Marisa'), (281.871335504886, 'Mariya'), (353.44444444444446, 'Marketa'), (946.8934426229508, 'Marlies'), (783.1711711711712, 'Marrit'), (419.32988047808766, 'Marta'), (851.1224489795918, 'Marta Huqi'), (1056.0588235294117, 'Martha'), (751.8679119412942, 'Martina'), (869.1666666666666, 'Mary'), (1188.7096774193549, 'Mary Ann'), (323.86176470588236, 'Maryna'), (355.7223168654174, 'Masa'), (437.11396648044695, 'Mathilde'), (799.1875, 'Matilda'), (1013.4761904761905, 'Maud'), (1070.21875, 'Maureen'), (1121.0869565217392, 'Maurien'), (973.8717948717949, 'Maxine'), (1084.0294117647059, 'May'), (732.4260679079956, 'Maya'), (891.6309523809524, 'Mayar'), (407.029702970297, 'Mayo'), (619.9064748201439, 'Mayya'), (736.4809523809524, 'Megan'), (1025.0, 'Megumi'), (1031.6, 'Mei Xu'), (812.85, 'Meiling'), (1029.1666666666667, 'Meiqi'), (372.32502965599053, 'Melanie'), (1039.8333333333333, 'Melany Solange'), (1017.2560553633218, 'Melina'), (169.13578500707214, 'Melinda'), (634.7950310559006, 'Melis'), (993.1351351351351, 'Melisa'), (1154.093023255814, 'Melissa'), (1104.357142857143, 'Melissa Ishuan'), (1035.95, 'Meng Ning'), (1213.2142857142858, 'Mercedes'), (900.75, 'Merel'), (1182.9107142857142, 'Meritxell'), (337.5292682926829, 'Mervana'), (554.3953934740883, 'Mi'), (1071.3076923076924, 'Mi Jeong'), (992.7225433526012, 'Mi Rae'), (999.375, 'Mi Zhuoma'), (987.504761904762, 'Mia Nicole'), (1332.0737704918033, 'Micaela'), (676.90589198036, 'Michaela'), (185.3469387755102, 'Michaella'), (1228.9285714285713, 'Michela'), (946.8846153846154, 'Michele Alexandra'), (280.79959100204496, 'Michelle'), (718.047619047619, 'Michika'), (376.7356115107914, 'Mihaela'), (1223.4, 'Mihaela Lorena'), (523.2788844621514, 'Miharu'), (1064.142857142857, 'Mihika'), (1110.4411764705883, 'Mihoki'), (586.2250489236791, 'Miki'), (1201.16, 'Mila'), (1234.2857142857142, 'Milagros'), (626.441935483871, 'Milana'), (1114.4074074074074, 'Milena'), (1221.904761904762, 'Milica'), (866.0693069306931, 'Min'), (819.8425531914894, 'Min Hwa'), (1238.0625, 'Minami'), (788.2622950819672, 'Mira'), (721.1643835616438, 'Mirabelle'), (1169.4864864864865, 'Miranda'), (912.120218579235, 'Miriam'), (628.075, 'Miriam Bianca'), (950.6263736263736, 'Miriana'), (843.6428571428571, 'Mirjam'), (186.76587795765877, 'Mirjana'), (617.0379241516966, 'Misa'), (208.95263157894738, 'Misaki'), (1121.04, 'Mitsumi'), (447.93283582089555, 'Miyabi'), (594.9036697247707, 'Miyu'), (593.1506849315068, 'Mizuno'), (1029.0, 'Molly'), (772.6981132075472, 'Momoko'), (273.57517899761336, 'Mona'), (210.0846394984326, 'Monica'), (980.575, 'Monika'), (462.4270462633452, 'Monique'), (541.952380952381, 'Montserrat'), (880.6527777777778, 'Morgane'), (1243.4, 'Moulika'), (1258.5, 'Mouna'), (1198.25, 'Moyuka'), (1227.0, 'Muazzez'), (1186.9444444444443, 'Muge'), (485.40168539325845, 'Myrtille'), (82.13112391930835, 'Na'), (608.7791798107255, 'Na Lae'), (573.5197368421053, 'Na Ri'), (868.6521739130435, 'Nadezda'), (407.5463976945245, 'Nadia'), (637.4607407407408, 'Nadiya'), (631.8181818181819, 'Nadja'), (828.0675675675676, 'Nagi'), (767.4963503649635, 'Naiktha'), (930.7027027027027, 'Naima'), (878.6666666666666, 'Nam Yeon'), (890.4455445544554, 'Nan Nan'), (542.7168141592921, 'Nanuli'), (313.45625, 'Nao'), (1180.3828125, 'Naoko'), (483.97225572979494, 'Naomi'), (929.4388489208633, 'Napatsakorn'), (1138.9166666666667, 'Nastassia'), (554.5290322580645, 'Nastassja'), (593.1772853185596, 'Nastja'), (720.132932166302, 'Natalia'), (577.9677419354839, 'Natalie'), (634.3620689655172, 'Natalija'), (1247.909090909091, 'Nataliya'), (666.2853403141361, 'Natasa'), (883.0777142857143, 'Natasha'), (566.4943396226415, 'Natela'), (962.0188679245283, 'Natella'), (543.031185031185, 'Nathalia'), (617.4615384615385, 'Nathaly'), (929.6928104575163, 'Natia'), (547.7037037037037, 'Natsumi'), (1177.622641509434, 'Nattawadee'), (1087.3823529411766, 'Naz'), (825.7291666666666, 'Nazari'), (745.421052631579, 'Neda'), (1164.107142857143, 'Nelise'), (1069.15, 'Nermeen'), (1031.0, 'Nevena'), (515.3191489361702, 'Nicha'), (843.9007633587786, 'Nicky'), (753.2253164556962, 'Nicola'), (499.4127634660422, 'Nicole'), (485.46875, 'Nicoleta Catalina'), (778.1648648648649, 'Nicolette'), (762.1578947368421, 'Nidhi'), (376.7617554858934, 'Nigina'), (913.4380165289256, 'Nika'), (1174.0, 'Nikita'), (1017.3134328358209, 'Nikki'), (1054.0813953488373, 'Nikol'), (723.484076433121, 'Nikola'), (528.8673050615595, 'Nina'), (1124.1666666666667, 'Nina Isabella'), (841.0514705882352, 'Nives'), (965.5343511450382, 'Noel'), (1049.834745762712, 'Noelia'), (883.7787610619469, 'Noelle'), (1167.2758620689656, 'Nonna'), (374.93926247288505, 'Noppawan'), (921.6216216216217, 'Nora'), (1096.1140350877192, 'Nour'), (936.3392857142857, 'Nozomi'), (436.66881028938906, 'Nudnida'), (537.577922077922, 'Nungnadda'), (395.6680227827502, 'Nuria'), (1027.1382978723404, 'Oana'), (686.3047619047619, 'Oana Georgeta'), (728.7630208333334, 'Oceane'), (839.4923664122138, 'Ofri'), (533.9652351738241, 'Oksana'), (660.8924731182796, 'Ola'), (1397.5, 'Olawaseun'), (1112.75, 'Olaya'), (903.4289156626506, 'Oleksandra'), (1179.1555555555556, 'Olena'), (501.44444444444446, 'Olesya'), (432.6511627906977, 'Olga'), (446.7231833910035, 'Olivia'), (1006.5128205128206, 'Oliwia'), (435.1470588235294, 'Ons'), (978.7321428571429, 'Ornella'), (866.0454545454545, 'Oyku'), (1156.28125, 'Paige Mary'), (989.1904761904761, 'Pamela'), (683.1081081081081, 'Panna'), (132.12638580931264, 'Paola'), (1099.625, 'Parris'), (863.5507246376811, 'Patcharin'), (572.8059701492538, 'Patricia'), (403.935, 'Patricia Maria'), (657.3816155988858, 'Patrycja'), (385.8135593220339, 'Patty'), (558.0162601626016, 'Paula'), (1175.909090909091, 'Paula Andrea'), (868.7624113475177, 'Paula Catalina'), (508.4679802955665, 'Paula Cristina'), (1035.7780678851175, 'Paulina'), (298.1861898890259, 'Pauline'), (915.5892857142857, 'Pavla'), (514.586319218241, 'Peangtarn'), (755.5813953488372, 'Peggy'), (673.9809523809524, 'Pei Chi'), (1106.5, 'Pei Hsuan'), (1061.3076923076924, 'Pei Ju'), (465.24962852897477, 'Pemra'), (619.4154929577464, 'Pernilla'), (710.3972602739726, 'Petia'), (365.50280484204313, 'Petra'), (1211.0, 'Phenomena'), (826.6486486486486, 'Phillis'), (737.862676056338, 'Pia'), (668.2581196581197, 'Piia'), (740.5879828326181, 'Pilar'), (1041.0740740740741, 'Pippa'), (937.7945205479452, 'Plobrung'), (630.7953529937444, 'Polina'), (478.30369515011546, 'Polona'), (729.1047904191616, 'Poojashree'), (795.4736842105264, 'Pranjala'), (653.5070422535211, 'Prarthana G'), (740.5361842105264, 'Prerna'), (1137.19, 'Priscila'), (675.4124293785311, 'Priscilla'), (383.4714587737844, 'Qiang'), (826.1388888888889, 'Qianhui'), (943.421052631579, 'Qianqian'), (705.8493150684932, 'Qiu Yu'), (883.2352941176471, 'Quinn'), (633.9770491803279, 'Quirine'), (859.2706766917294, 'Rachael'), (1147.8526315789475, 'Rachel'), (955.7833333333333, 'Radina'), (1121.2432432432433, 'Rafaela'), (1176.5, 'Ralina'), (304.4619771863118, 'Raluca'), (672.2258064516129, 'Raluca Elena'), (539.6164383561644, 'Raluca Georgiana'), (1010.4545454545455, 'Ramu'), (1121.8846153846155, 'Ramya'), (598.2655172413793, 'Ran'), (1117.6666666666667, 'Rana'), (700.7644444444444, 'Raquel'), (1089.2100840336134, 'Rashmi'), (1021.6504854368932, 'Ratnika'), (487.6268656716418, 'Raveena'), (1145.4333333333334, 'Rebeca'), (568.3374316939891, 'Rebecca'), (676.1090909090909, 'Rebeka'), (289.60283687943263, 'Regina'), (1019.0, 'Reina'), (323.1388101983003, 'Reka Luca'), (494.6111111111111, 'Remi'), (274.85317919075146, 'Renata'), (669.448275862069, 'Ria'), (638.6666666666666, 'Rianna'), (246.19871794871796, 'Richel'), (290.0614657210402, 'Rika'), (495.22641509433964, 'Riko'), (1125.0363636363636, 'Rio'), (489.65909090909093, 'Risa'), (775.7269624573379, 'Rishika'), (1051.7349397590363, 'Rita'), (651.4246575342465, 'Riya'), (150.96681415929203, 'Roberta'), (431.19607843137254, 'Robin'), (1054.606896551724, 'Robyn'), (795.6201232032854, 'Rocio'), (402.49931972789113, 'Romana'), (669.8542372881356, 'Romana Caroline'), (283.63246554364474, 'Romina'), (758.1714285714286, 'Romy'), (1125.5471698113208, 'Rona'), (427.0, 'Ronit'), (1072.857142857143, 'Ronke'), (1168.2857142857142, 'Roosh'), (965.0, 'Rosa'), (1059.73, 'Rosalia'), (1066.5887096774193, 'Rosalie'), (984.1714285714286, 'Rosie'), (479.51738241308794, 'Roxane'), (1209.625, 'Rui'), (573.8729603729604, 'Rushmi'), (808.5096774193548, 'Rutuja'), (1069.0379746835442, 'Ryann'), (1117.88, 'Saana'), (982.7397260273973, 'Sabastiani'), (682.2005532503458, 'Sabina'), (1184.6666666666667, 'Sabina Elena'), (203.5871080139373, 'Sabine'), (905.6324786324786, 'Sabrina'), (340.2890442890443, 'Sacha'), (400.8093385214008, 'Sachia'), (368.26881720430106, 'Sachie'), (665.8219178082192, 'Sadafmoh'), (998.5238095238095, 'Sai Samhitha'), (297.39032258064515, 'Saisai'), (832.9585365853659, 'Sakiko'), (529.583908045977, 'Sally'), (1204.6666666666667, 'Salma'), (406.21702404158543, 'Samantha'), (932.8940397350993, 'Samira'), (1105.171875, 'Sanae'), (703.1372549019608, 'Sanaz'), (563.964505613908, 'Sandra'), (1028.9565217391305, 'Sandy'), (857.9508196721312, 'Sang Hee'), (177.22695035460993, 'Sania'), (509.80945757997216, 'Sara'), (546.5551763367463, 'Sarah'), (875.9277108433735, 'Sarah Beth'), (743.6062176165804, 'Sarah Rebecca'), (1139.2340425531916, 'Sarahi'), (1191.6470588235295, 'Sarai Delfina'), (840.0776699029126, 'Saray'), (1081.1666666666667, 'Sari'), (1209.7777777777778, 'Sarlota'), (1235.1960784313726, 'Sarvinoz'), (1033.027027027027, 'Sasa'), (747.3695652173913, 'Saska'), (888.7272727272727, 'Satsuki'), (1142.9285714285713, 'Savannah'), (1188.2941176470588, 'Schena'), (1210.2571428571428, 'Se Hyun'), (1122.4545454545455, 'Se Jin'), (1240.92, 'Sean'), (1003.5367647058823, 'Seda'), (1115.72, 'Seira'), (1168.6571428571428, 'Selin'), (858.9173789173789, 'Seo Kyung'), (889.8028169014085, 'Seone'), (14.654294803817603, 'Serena'), (162.3505747126437, 'Sesil'), (784.0465949820789, 'Seung Yeon'), (218.4701086956522, 'Severine'), (166.41358024691357, 'Shahar'), (924.8818897637796, 'Shakhlo'), (1236.7627118644068, 'Shakhnoza'), (1228.3235294117646, 'Shangqing'), (694.2, 'Shanshan'), (967.9034090909091, 'Shao Yuan'), (851.5633802816901, 'Sharmada'), (296.5792682926829, 'Sharon'), (1097.0, 'Sharon Sanchana'), (372.89398280802294, 'Shelby'), (1171.0, 'Shelly'), (451.8657487091222, 'Sheng Nan'), (649.5154639175257, 'Sherazad'), (1024.0116279069769, 'Sherry'), (500.688679245283, 'Shiho'), (632.2824427480916, 'Shilin'), (1070.6666666666667, 'Shiori'), (1154.4166666666667, 'Shir'), (1187.9245283018868, 'Shiran'), (935.2322946175638, 'Shivika'), (1120.388888888889, 'Shou Na'), (1148.0, 'Shreya'), (1042.6802325581396, 'Shu Ying'), (167.90740740740742, 'Shuai'), (421.44179894179894, 'Shuko'), (864.1538461538462, 'Shuo'), (966.0588235294117, 'Shuyue'), (897.6951219512196, 'Shweta'), (1047.7575757575758, 'Si Qi'), (565.8211508553654, 'Silvia'), (542.2382851445662, 'Simona'), (1070.3417721518988, 'Simone'), (974.8, 'Simran Kaur'), (728.7443609022556, 'Sina'), (975.3484848484849, 'Sinead'), (1141.842105263158, 'Sing Le'), (980.9076923076923, 'Siqi'), (949.7916666666666, 'Sirui'), (1241.1379310344828, 'Siyu'), (259.63589743589745, 'Sloane'), (1184.8260869565217, 'Smriti'), (1225.388888888889, 'Sneha'), (632.3150684931506, 'Snehadevi S'), (514.1732026143791, 'So Jung'), (572.2654545454545, 'So Ra'), (526.3535641547861, 'Sofia'), (1084.107142857143, 'Sofico'), (724.5, 'Sofie'), (541.1570881226054, 'Sofiya'), (640.8727272727273, 'Sofya'), (1004.6666666666666, 'Sohyun'), (1029.0980392156862, 'Sonia'), (885.0976744186047, 'Sonja'), (1221.3333333333333, 'Sophia'), (600.6881091617934, 'Sophie'), (213.75043630017453, 'Sorana'), (813.1357142857142, 'Sowjanya'), (1149.3125, 'Spurti'), (792.1927710843373, 'Sri Vaishnavi'), (841.8387096774194, 'Stamatia'), (312.54158964879855, 'Stanislava'), (993.4255319148937, 'Stefana'), (1167.3333333333333, 'Stefani'), (759.2894995093228, 'Stefania'), (387.73412112259973, 'Stefanie'), (939.746835443038, 'Steffi'), (439.87772357723577, 'Stephanie'), (1035.5548387096774, 'Stephanie Mariel'), (573.6708333333333, 'Storm'), (426.3886462882096, 'Su Jeong'), (217.2493188010899, 'Su Wei'), (911.7619047619048, 'Suellen'), (944.2432432432432, 'Sultan'), (812.4581005586592, 'Sun Jung'), (1229.8, 'Sunae'), (611.0757575757576, 'Sunam'), (635.7449168207024, 'Sung Hee'), (1015.6792452830189, 'Susan'), (417.8053097345133, 'Susanne'), (982.7222222222222, 'Suzan'), (980.6666666666666, 'Suzuho'), (698.7567567567568, 'Suzy'), (844.203007518797, 'Svenja'), (267.03227571115974, 'Svetlana'), (691.9934640522875, 'Sviatlana'), (1002.6792452830189, 'Sybille'), (869.1702127659574, 'Sylvia'), (787.7645348837209, 'Sylwia'), (791.1240506329113, 'Syna'), (772.3186813186813, 'Szabina'), (343.0985324947589, 'Tadeja'), (969.6588235294117, 'Taisiya'), (1230.2, 'Talya'), (949.8059701492538, 'Tamachan'), (1118.4166666666667, 'Tamar'), (614.0434782608696, 'Tamara'), (1146.3934426229507, 'Tamari'), (121.82273948075202, 'Tamarine'), (386.7025316455696, 'Tamaryn'), (135.88910505836577, 'Tamira'), (601.906914893617, 'Tammi'), (1113.2325581395348, 'Tanaporn'), (1023.089430894309, 'Tanya'), (475.2979683972912, 'Tara'), (1075.0, 'Tatia'), (681.9417582417583, 'Tatiana'), (247.7449768160742, 'Tatjana'), (912.1077844311377, 'Tatsiana'), (747.3172413793103, 'Tayisiya'), (387.5662100456621, 'Taylor'), (1068.7457627118645, 'Tea'), (461.06702898550725, 'Teliana'), (614.9346733668342, 'Tena'), (489.27513227513225, 'Teodora'), (557.241418764302, 'Tereza'), (963.5, 'Terri'), (696.2878787878788, 'Tess'), (390.2361111111111, 'Tessah'), (437.4119658119658, 'Tetiana'), (398.83478260869566, 'Tetyana'), (802.7222222222222, 'Thai Sa Grana'), (650.1206896551724, 'Theo'), (1159.5632183908046, 'Theresa'), (1017.7777777777778, 'Tijana'), (182.02426160337552, 'Timea'), (425.82394366197184, 'Tina'), (810.6666666666666, 'Tinatin'), (739.7727272727273, 'Ting Fei'), (789.6113989637306, 'Ting Jr'), (1015.2352941176471, 'Tingting'), (743.1953125, 'Tjasa'), (838.8065217391304, 'Tomoko'), (841.7167381974249, 'Tori'), (878.1666666666666, 'Tornado Alicia'), (1029.3196721311476, 'Trang'), (1009.8666666666667, 'Treta'), (131.02074074074073, 'Tsvetana'), (992.4870588235294, 'Tyra'), (506.39344262295083, 'Ulrikke'), (844.0692307692308, 'Ulyana'), (229.35687022900763, 'Urszula'), (1132.4109589041095, 'Ushna'), (411.5068493150685, 'Usue Maitane'), (921.3333333333334, 'Valentina'), (751.2668918918919, 'Valentine'), (479.8914728682171, 'Valentini'), (368.14331210191085, 'Valentyna'), (661.8474576271186, 'Valeria'), (806.2648401826484, 'Valerie'), (799.8668224299065, 'Valeriya'), (696.4126984126984, 'Vanda'), (579.437984496124, 'Vanesa'), (398.3106546854942, 'Vanessa'), (185.75, 'Vania'), (1130.6037735849056, 'Vaniya'), (1089.7111111111112, 'Vanja'), (450.4642082429501, 'Varatchaya'), (894.3846153846154, 'Varunya'), (382.6888217522659, 'Varvara'), (613.5330490405117, 'Vasilisa'), (859.8103448275862, 'Vaszilisza'), (729.0117647058823, 'Vendula'), (32.984862819299906, 'Venus'), (195.66923570969814, 'Vera'), (958.1327800829876, 'Verena'), (726.1852387843704, 'Veronica'), (951.0075757575758, 'Veronica M'), (734.6018957345972, 'Veronika'), (240.0448979591837, 'Vesna'), (1252.9130434782608, 'Vicky'), (1138.8490566037735, 'Victoire'), (444.9760935910478, 'Victoria'), (1236.0, 'Victoria Ariadna'), (566.9148936170212, 'Viktoria'), (1236.5333333333333, 'Viktoriia'), (507.4, 'Viktorija'), (736.2288557213931, 'Viktoriya'), (966.4671052631579, 'Viktoryia'), (1243.0, 'Vilma Y'), (1214.1142857142856, 'Vincenza'), (1150.0, 'Vinciane'), (1170.840579710145, 'Violetta'), (355.88102893890675, 'Virginie'), (1208.952380952381, 'Vishesh'), (1201.25, 'Vita'), (296.2025641025641, 'Vitalia'), (670.9108527131783, 'Vivian'), (607.2810218978102, 'Vivien'), (659.2103004291846, 'Vivienne'), (595.3291666666667, 'Vlada'), (943.5432098765432, 'Vladica'), (823.8770833333333, 'Vladimira'), (1006.1769911504425, 'Vladislava'), (856.0782608695653, 'Vladyslava'), (555.6572164948453, 'Vojislava'), (999.0215053763441, 'Voni'), (701.4009009009009, 'Wan Ting'), (1081.142857142857, 'Wan Yi'), (1249.3333333333333, 'Warona'), (440.35214446952597, 'Wen Hsin'), (1117.55, 'Wen Ling'), (1011.469696969697, 'Wendy Qi Wen'), (1152.7837837837837, 'Weronika Jasmina'), (886.1407407407407, 'Whitney'), (1083.1454545454546, 'Wiktoria'), (585.2589641434263, 'Wing Yau Venise'), (937.7878787878788, 'Wushuang'), (661.2222222222222, 'Xenia'), (714.8653846153846, 'Xi Yao'), (814.4171122994652, 'Xiao'), (467.24657534246575, 'Xiaodi'), (848.4418604651163, 'Xiaorong'), (737.7547169811321, 'Xiaoxi'), (712.2780373831775, 'Ximena'), (694.4808743169399, 'Xin'), (1022.3333333333334, 'Xin Yu'), (480.646017699115, 'Xinyu'), (309.35767790262173, 'Xinyun'), (954.6, 'Xiyu'), (488.7671232876712, 'Xu Liu'), (1225.75, 'Ya'), (586.865, 'Ya Hsuan'), (325.6162790697674, 'Yafan'), (768.560975609756, 'Yan'), (740.0214504596527, 'Yana'), (1177.8823529411766, 'Yang'), (381.2581602373887, 'Yanina'), (1059.2702702702702, 'Yanni'), (1166.875, 'Yarden'), (211.41240310077518, 'Yaroslava'), (702.1784386617101, 'Yasmin'), (1227.7777777777778, 'Yasmina'), (983.0410958904109, 'Yasmine'), (1261.8181818181818, 'Yasmyn'), (1110.4594594594594, 'Yawna'), (114.78806907378336, 'Yayuk'), (431.3144424131627, 'Ye Ra'), (1048.081081081081, 'Ye Xin'), (1155.8191489361702, 'Yekaterina'), (897.4873949579832, 'Yelena'), (973.8617021276596, 'Yeong Won'), (724.8712871287129, 'Yevgeniya'), (791.0756207674943, 'Yi'), (381.5512572533849, 'Yi Fan'), (656.8787276341948, 'Yi Jing'), (418.2566137566138, 'Yi Miao'), (1185.030303030303, 'Yidi'), (1209.625, 'Yihong'), (1063.9411764705883, 'Yijia'), (661.3972602739726, 'Ying'), (403.8775981524249, 'Ying Ying'), (801.6712328767123, 'Yixuan'), (892.3561643835617, 'Ylena'), (642.9487179487179, 'Ylona Georgiana'), (1128.901098901099, 'Yoko'), (1068.4619883040937, 'Yolande'), (1263.7666666666667, 'Yoo Ri'), (844.9310344827586, 'Yoon Young'), (1096.9130434782608, 'Yoshimi'), (1222.24, 'Yosr'), (1170.3461538461538, 'You Na'), (458.86633663366337, 'Ysaline'), (1098.357142857143, 'Yu Jin'), (1239.6666666666667, 'Yu Tong'), (1054.0, 'Yuan'), (891.2340425531914, 'Yuanyi'), (983.359649122807, 'Yue'), (444.96190476190475, 'Yue Yue'), (961.876923076923, 'Yuenu'), (1034.1304347826087, 'Yujia'), (748.8250591016548, 'Yuka'), (1071.5833333333333, 'Yukako'), (876.7428571428571, 'Yuki'), (698.8285714285714, 'Yuki Kristina'), (857.1692307692308, 'Yukina'), (824.3936170212766, 'Yukun'), (485.35135135135135, 'Yulia'), (725.5322195704057, 'Yuliana'), (384.87776983559684, 'Yuliya'), (799.1332586786115, 'Yumi'), (166.6586270871985, 'Yung Jan'), (1047.3529411764705, 'Yuqi'), (322.17758620689654, 'Yurika'), (1041.5367231638418, 'Yuriko'), (746.4803493449782, 'Yurina'), (608.1309090909091, 'Yuuki'), (1230.2, 'Yuval'), (545.449074074074, 'Yuxuan'), (318.2867132867133, 'Yvonne'), (1227.344827586207, 'Zaineb'), (867.5288461538462, 'Zalina'), (709.625, 'Zarah'), (222.81428571428572, 'Zarina'), (791.2352941176471, 'Zeel'), (1229.5714285714287, 'Zeynep  Sena'), (627.7777777777778, 'Zhanlan'), (629.0081967213115, 'Zhaoxuan'), (1058.0, 'Zhibek'), (1144.45, 'Zhima'), (1237.9, 'Zhou'), (989.75, 'Zhuoma'), (391.4656290531777, 'Zi'), (1221.5, 'Zinovia'), (878.4606741573034, 'Ziyue'), (765.3777777777777, 'Zoe'), (935.081081081081, 'Zoe Gwen'), (916.559633027523, 'Zsofia'), (451.92875448487956, 'Zuzana'), (794.5416666666666, 'Zuzanna')]

===== Eval Round 472 =====
Database         : wta_1
Prediction SQL   : SELECT first_name, SUM(ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name
Gold SQL         : SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Aastha', 68), ('Abbi', 304), ('Abbie', 5214), ('Abigail', 115293), ('Abiodun', 120), ('Abir', 72), ('Adeliya', 490), ('Adnya', 219), ('Adriana', 28045), ('Adrienn', 107), ('Adrijana', 4619), ('Adva', 9), ('Afroditi', 156), ('Agata', 1901), ('Agata Jadwiga', 219), ('Agne', 110), ('Agnes', 390148), ('Agnese', 13717), ('Agni', 2929), ('Agnieszka', 1801033), ('Agustina', 21728), ('Agustina Elena', 158), ('Ah', 141), ('Ahlam', 85), ('Ahsha', 52), ('Ai', 10751), ('Ai Wen', 2217), ('Aida', 703), ('Aiko', 140108), ('Ailen', 288), ('Aimee', 226), ('Aina', 92), ('Ainhoa', 2433), ('Aishwarya', 96), ('Ajla', 116548), ('Akari', 11873), ('Akgul', 228538), ('Aki', 14838), ('Akiho', 83), ('Akiko', 84446), ('Akilah', 742), ('Akvile', 640), ('Alana', 385), ('Alba', 1424), ('Alberta', 238803), ('Albina', 10507), ('Aldana', 71), ('Alejandra', 1578), ('Aleksandra', 451414), ('Aleksandrina', 35957), ('Alena', 8832), ('Alessandra', 235), ('Alessia', 2524), ('Alessondra', 265), ('Alexa', 138782), ('Alexandra', 955267), ('Alexandria', 191), ('Alexia', 12829), ('Alexis', 13389), ('Aliaksandra', 61196), ('Alice', 57745), ('Alice Andrada', 2358), ('Alicia', 993), ('Alicja', 5216), ('Alina', 11393), ('Aliona', 2369), ('Alisa', 369810), ('Alison', 323527), ('Alix', 5422), ('Alize', 596901), ('Alla', 253320), ('Allie', 33054), ('Almudena', 206), ('Alona', 4052), ('Alory Regina Elorriaga', 155), ('Alyona', 25183), ('Amanda', 68207), ('Amandine', 41575), ('Amelie', 887), ('Amina', 1990), ('Aminat', 12708), ('Amira', 157), ('Amra', 60702), ('Amrita', 159), ('Amy', 10616), ('An Sophie', 51803), ('Ana', 1589674), ('Ana Bianca', 2421), ('Ana Clara', 36696), ('Ana Gabriela', 288), ('Ana Luisa', 21), ('Ana Paula', 2141), ('Ana Sofia', 15955), ('Ana Victoria', 1367), ('Anabel', 678793), ('Anaeve', 1962), ('Anais', 46908), ('Anamika', 2338), ('Anastasia', 1433335), ('Anastasia Evgenyevna', 1235), ('Anastasiia', 12), ('Anastasija', 268277), ('Anastasiya', 75850), ('Anca', 101), ('Anda', 160), ('Andie K', 605), ('Andjela', 228), ('Andra Maria', 51), ('Andrea', 920433), ('Andrea Renee', 464), ('Andreea', 1484), ('Andreea Amalia', 1365), ('Andreea Roxana', 12727), ('Andreja', 74453), ('Andressa Cristina', 72), ('Andrina', 159), ('Aneta', 202), ('Anett', 71072), ('Anette', 1657), ('Ange Oby', 36), ('Angela', 245), ('Angelica', 13643), ('Angeliki', 677), ('Angelina', 19048), ('Angelique', 1132514), ('Anhelina', 17967), ('Anhzelika', 836), ('Ani', 48811), ('Anita', 2177), ('Anja', 11596), ('Anke', 54), ('Ankita', 21599), ('Ann', 62), ('Anna', 1017069), ('Anna Arina', 6650), ('Anna Giulia', 49207), ('Anna Karolina', 107880), ('Anna Katalina', 907), ('Anna Lena', 359374), ('Anna Maria', 1427), ('Annalisa', 29442), ('Anne', 647811), ('Anne Liz', 5269), ('Anne Marie', 99), ('Anne Sophie', 33), ('Annie', 172), ('Annika', 169371), ('Anouk', 3621), ('Antonela', 280), ('Antonia', 21624), ('Antonina', 484), ('Anushka', 480), ('Ao', 4941), ('Apichaya', 126), ('Arabela', 11608), ('Arantxa', 434692), ('Aranza', 24184), ('Aravane', 383495), ('Ariadna', 980), ('Arina', 96852), ('Arina Gabriela', 3), ('Arlinda', 154), ('Arthi', 39), ('Aryna', 19446), ('Aselya', 238), ('Asha', 99), ('Ashleigh', 58741), ('Ashley', 49980), ('Ashling', 5155), ('Ashmitha', 648), ('Ashvarya', 2321), ('Asia', 48788), ('Asiya', 802), ('Assia', 141), ('Astra', 1083), ('Astrid Wanja', 269), ('Audrey', 33624), ('Avgusta', 21), ('Axana', 7), ('Ayaka', 7996), ('Ayan', 571), ('Ayano', 5173), ('Ayla', 7444), ('Aymet', 791), ('Ayu Fani', 38501), ('Ayumi', 309990), ('Azra', 11721), ('Barbara', 53401), ('Barbora', 515957), ('Basak', 26624), ('Beatrice', 27061), ('Beatriz', 98798), ('Beatriz Magdalena', 75), ('Beatriz Maria', 1920), ('Beauty', 26), ('Belen', 351), ('Belinda', 137327), ('Benedetta', 11032), ('Berfu', 2850), ('Bermet', 8441), ('Bernarda', 19092), ('Bernice', 3894), ('Berta', 814), ('Bethanie', 371662), ('Betina', 21), ('Bhuvana', 1152), ('Bianca', 63998), ('Bianka', 1213), ('Bibiane', 50184), ('Blair', 905), ('Blanca', 312), ('Blessing', 662), ('Boba', 123), ('Bojana', 283166), ('Borislava', 3470), ('Boyan', 1465), ('Brandy', 725), ('Breaunna', 676), ('Brenda', 166760), ('Brianna', 2922), ('Brienne', 12), ('Brindtha', 30), ('Britt', 2487), ('Brittany', 1119), ('Brooke', 7062), ('Brynn', 1344), ('Bunyawi', 3187), ('Busra', 537), ('Cagla', 119797), ('Caitlin', 15218), ('Camelia Elena', 9147), ('Cameron', 38), ('Camila', 202172), ('Camila Vital', 136), ('Camilla', 11714), ('Camille', 574), ('Cara', 240762), ('Carina', 90451), ('Carla', 669546), ('Carlota', 27), ('Carlotta', 562), ('Carly', 67459), ('Carmen', 8174), ('Carmen Raluca', 1077), ('Carol', 14213), ('Carolin', 9093), ('Carolina', 36889), ('Carolina Meligeni Rodrigues', 3627), ('Caroline', 2076949), ('Caroline B', 111), ('Carolyn', 72), ('Carson', 289), ('Casey', 202697), ('Catalina', 250056), ('Catherine', 4987), ('Catherine Cartan', 45884), ('Caty', 22), ('Cecilia', 11954), ('Cecilie Lundgaard', 95), ('Celine', 18824), ('Cemre', 958), ('Chalena', 4914), ('Chanel', 62861), ('Chanelle', 275364), ('Chang', 26585), ('Chanikarn', 39), ('Chantal', 15001), ('Chantelle', 187), ('Chaoyi', 15), ('Charlene', 5683), ('Charlotte', 4356), ('Chayenne', 20132), ('Chelsea', 5), ('Chelsey', 6777), ('Chen', 26779), ('Chengyiyi', 277), ('Chi Chi', 49122), ('Chi Fan', 667), ('Chia Hsien', 679), ('Chia Jung', 33301), ('Chiaki', 42773), ('Chiara', 6159), ('Chieh Yu', 34796), ('Chihiro', 15401), ('Chin Wei', 70504), ('Chinami', 13141), ('Ching Wen', 7975), ('Chiraz', 1726), ('Chisa', 358), ('Chloe', 15190), ('Chompoothip', 276), ('Christie', 24), ('Christina', 310215), ('Christine', 2438), ('Chun Mei', 12519), ('Chun Yan', 3374), ('Cindy', 31620), ('Claire', 141876), ('Clara', 116), ('Claudia', 32581), ('Claudia Antonia', 1227), ('Claudia Gianina', 934), ('Claudine', 106762), ('Clelia', 2221), ('Clemence', 1622), ('Clementina Eugenia', 538), ('Clothilde', 12304), ('Coco', 235721), ('Colomba', 129), ('Conny', 52274), ('Constance', 25166), ('Constanza', 907), ('Constanze', 18), ('Corina', 1002), ('Corinna', 102260), ('Cornelia', 4053), ('Cory Ann', 20869), ('Costanza', 1236), ('Cristiana', 7486), ('Cristina', 59412), ('Cristina Andreea', 75414), ('Cristina Madalina', 317), ('Csilla', 6256), ('Cynthia', 1034), ('Da Hye', 1417), ('Dabin', 1261), ('Dagmara', 160), ('Daiana', 8589), ('Dajana', 150), ('Dalia', 8939), ('Dalila', 48857), ('Dalma', 15935), ('Damilola', 0), ('Damini', 12), ('Damira', 30), ('Dan Ni', 639), ('Dana', 3121), ('Daneika', 1607), ('Danica', 17597), ('Daniela', 1165205), ('Daniella', 16663), ('Danielle', 40823), ('Danielle Rose', 8507), ('Danijela', 545), ('Danka', 87958), ('Daphne', 33), ('Daria', 170617), ('Darija', 41925), ('Dariya', 857), ('Darya', 163036), ('Dasha', 1923), ('Dayana', 5619), ('Dea', 7027), ('Deborah', 7605), ('Deeon', 141), ('Dejana', 9846), ('Demi', 1192), ('Denisa', 65522), ('Denise', 3298), ('Denise Antonela', 168), ('Deniz', 23620), ('Deria', 215), ('Desirae', 354), ('Desiree', 709), ('Despina', 19065), ('Despoina', 3942), ('Destanee', 9227), ('Dewi', 134), ('Dhruthi', 2738), ('Di', 9780), ('Dia', 79958), ('Diana', 119279), ('Diana Maria', 99), ('Dianne', 6369), ('Dijana', 7353), ('Dilara', 85), ('Dina', 149), ('Dinah', 67017), ('Doga Selen', 117), ('Domenica', 1614), ('Dominika', 918746), ('Dominique', 455), ('Donika', 164), ('Donna', 114098), ('Dorien', 109), ('Doroteja', 23976), ('Draginja', 392), ('Dunja', 4703), ('Ebony', 713), ('Eden', 1978), ('Edina', 249446), ('Eduarda', 11216), ('Eetee', 2446), ('Ege', 50), ('Ekaterina', 1005319), ('Ekaterine', 26897), ('Elaine', 103), ('Eleanor', 2287), ('Elena', 1247887), ('Elena Gabriela', 7772), ('Elena Teodora', 6547), ('Eleni', 439179), ('Eleonora', 405), ('Eleonore', 567), ('Eliessa', 882), ('Elina', 314747), ('Elisabeth', 4709), ('Elise', 43779), ('Elitsa', 87263), ('Elixane', 18211), ('Eliza', 480), ('Elizabeta', 536), ('Elizabeth', 20368), ('Elizabeth Anita Alexandria', 1103), ('Elizaveta', 62977), ('Elizaveta Anna', 636), ('Elke', 960), ('Ella', 526), ('Ellen', 13761), ('Ellie', 8079), ('Elodie', 90), ('Elyne', 12554), ('Ema', 11218), ('Emelyn', 12728), ('Emi', 3880), ('Emilia', 43), ('Emiliana', 1258), ('Emilie', 1440), ('Emilija', 24), ('Emiliya', 541), ('Emily', 52889), ('Emily J', 964), ('Emina', 3029), ('Emma', 85022), ('Emma Christine', 65), ('Emmanuelle', 1609), ('En Pei', 52), ('Ena', 823), ('Eri', 34570), ('Erica', 472), ('Erika', 165477), ('Erin', 5356), ('Erina', 1225), ('Esen', 69), ('Estela', 376), ('Estelle', 39989), ('Ester', 3908), ('Estrella', 126811), ('Etsuko', 7147), ('Eudice Wong', 976), ('Eugenia', 36), ('Eugenie', 204801), ('Eugeniya', 20989), ('Eva', 320083), ('Eva Marie', 41), ('Eveliina', 744), ('Evelyn', 27011), ('Evgenia', 59775), ('Evgeniya', 206981), ('Fang Ying', 7755), ('Fangzhou', 33388), ('Fanny', 11260), ('Farah', 167), ('Fatima', 10865), ('Fatimah', 898), ('Fatma', 21261), ('Fatyha', 80), ('Federica', 56817), ('Federica Joe', 44), ('Fernanda', 17587), ('Ferny', 78), ('Fiona', 18219), ('Flavia', 1011058), ('Florencia', 89361), ('Frances', 359), ('Francesca', 1306087), ('Francisca', 157), ('Francoise', 21685), ('Franziska', 994), ('Frederikke', 9), ('Freya', 6525), ('Gabriela', 102623), ('Gabriela Nicole', 468), ('Gabriella', 6179), ('Gabrielle Faith', 1093), ('Gaelle', 1000), ('Gaia', 7998), ('Gail', 38651), ('Galina', 302957), ('Ganna', 30136), ('Garbine', 412872), ('Gebriela', 143), ('Genevieve', 440), ('Georgia', 9600), ('Georgia Andreea', 1848), ('Georgiana', 48), ('Georgina', 11569), ('Ghislaine', 290), ('Giada', 677), ('Gioia', 31741), ('Giorgia', 2484), ('Giorgie', 13), ('Giovanna', 289), ('Giulia', 106520), ('Giuliana', 2935), ('Gloria', 1297), ('Gozal', 2864), ('Grace', 70613), ('Gracia', 7999), ('Greetje', 6168), ('Greta', 240195), ('Guadalupe', 14277), ('Guillermina', 576), ('Guiomar', 687), ('Gulben', 410), ('Gulchekhra', 18), ('Gulnaz', 39), ('Guzal', 775), ('Gyulnara', 238), ('Habiba', 811), ('Hae Sung', 8180), ('Haine', 294), ('Hana', 413), ('Hanna', 2782), ('Hanyu', 4643), ('Hao Chen', 9631), ('Hao Ching', 224), ('Harmony', 5944), ('Harriet', 8608), ('Haruka', 3633), ('Haruna', 1873), ('Hayley', 1679), ('Hazal', 78), ('Heather', 202780), ('Heidi', 88542), ('Helen', 1039), ('Helene', 3928), ('Hikari', 122), ('Hilda', 10191), ('Himari', 3), ('Hiroko', 27580), ('Hirono', 4368), ('Ho Ching', 2371), ('Hollie', 24), ('Hongrui', 1063), ('Hortencia', 98), ('Hsin Yuan', 120), ('Hua Chen', 7367), ('Huijie', 118), ('Hulya', 7797), ('Hye Min', 1222), ('Hyojung', 870), ('Hyun Hui', 8301), ('I Hsuan', 511), ('Iana', 395), ('Ida', 467), ('Idia', 45), ('Iga', 916), ('Ilay', 52), ('Ilka', 1142), ('Ilona', 26950), ('Ilze', 1527), ('Imane Maelle', 1676), ('Ina', 292), ('Inci', 406), ('India', 762), ('Indire', 12633), ('Indy', 17382), ('Ineke', 1358), ('Ines', 40410), ('Inger', 221), ('Ingrid', 3471), ('Ingrid Alexandra', 4766), ('Ingrid Esperanza', 10133), ('Intissar', 33), ('Ioana', 1225), ('Ioana Diana', 2403), ('Ioana Loredana', 5425), ('Ionela Andreea', 6948), ('Ipek', 39352), ('Irena', 88369), ('Irene', 3133), ('Irina', 299698), ('Irina Camelia', 293366), ('Irina Maria', 13843), ('Iris', 4743), ('Iryna', 87844), ('Isabel', 6688), ('Isabela', 714), ('Isabella', 83476), ('Isabelle', 4777), ('Iulia Maria', 74), ('Iva', 10322), ('Ivana', 100848), ('Ivania', 2094), ('Ivanka', 291), ('Iveta', 443695), ('Ivette', 543), ('Ivone', 253), ('Ivonne', 13010), ('Jacqueline', 27462), ('Jada', 64), ('Jade', 26209), ('Jaeda', 1375), ('Jaimee', 5007), ('Jaimy Gayle', 24), ('Jainy', 761), ('Jamie', 190997), ('Jamilya', 18), ('Jan', 10947), ('Jana', 268372), ('Janette', 143422), ('Janina', 12525), ('Janja', 72), ('Janneke', 861), ('Jaqueline Adina', 5416), ('Jara', 464), ('Jarmila', 333150), ('Jasmin', 34453), ('Jasmina', 43862), ('Jasmine', 14865), ('Jasmine Amber', 142), ('Jawairiah', 822), ('Jazmin', 908), ('Jazzamay', 628), ('Jeannine', 3426), ('Jelena', 2515436), ('Jennifer', 81222), ('Jenny', 1002), ('Jesika', 17819), ('Jessica', 154599), ('Jessika', 4122), ('Jessy', 923), ('Ji Hee', 7179), ('Ji Young', 8592), ('Jia', 52), ('Jia Jing', 48117), ('Jia Qi', 4612), ('Jiahui', 1553), ('Jiakang', 15), ('Jiatian', 100), ('Jiaxi', 3002), ('Jiaxue', 96), ('Jie', 610820), ('Jil Belen', 13978), ('Jil Nora', 611), ('Jill', 359013), ('Jillian', 1991), ('Jin', 15), ('Jin A', 46355), ('Jin Ju', 414), ('Jing Jing', 68925), ('Joana', 1955), ('Joanna', 472), ('Joanne', 15), ('Jodie Anna', 355), ('Johana', 40), ('Johanna', 553107), ('Jordana', 1092), ('Josepha', 2710), ('Josephine', 4980), ('Josie', 804), ('Jovana', 39270), ('Ju Eun', 3453), ('Judith', 3), ('Jule', 63), ('Julia', 891796), ('Julia Mansano', 21), ('Juliana', 414), ('Juliana Rocha', 129), ('Julie', 156531), ('Julieta Lara', 4093), ('Julita', 286), ('Julyette Maria Josephine', 1446), ('June', 114), ('Junri', 128183), ('Justina', 36), ('Justine', 39418), ('Justyna', 30304), ('Kady', 467), ('Kai Chen', 172004), ('Kai Lin', 37817), ('Kaia', 625836), ('Kaitlin', 416), ('Kaitlyn', 3905), ('Kaja', 1176), ('Kajsa', 2280), ('Kamila', 12906), ('Kamilla', 249), ('Kamonwan', 5866), ('Kana', 1536), ('Kanae', 20142), ('Kanako', 229), ('Kanami', 3724), ('Kanika', 919), ('Kaori', 8406), ('Karen', 32169), ('Kariann', 85), ('Karin', 254520), ('Karina', 9355), ('Karina Ildor', 5493), ('Karina Kristina', 410), ('Karine', 1936), ('Karis', 1003), ('Karla', 3127), ('Karman', 3193), ('Karola Patricia', 776), ('Karolayne', 465), ('Karolina', 512490), ('Karoline', 910), ('Karyn', 330), ('Kassandra', 704), ('Katalin', 112562), ('Katarina', 444303), ('Katarzyna', 93730), ('Kate', 34), ('Katerina', 160945), ('Kateryna', 435038), ('Katharina', 24595), ('Katharine', 363), ('Katherine', 7843), ('Katherine Gabriela', 1894), ('Kathinka', 15970), ('Kathrin', 141281), ('Katie', 30035), ('Katrine Isabel', 308), ('Katy', 11572), ('Katya', 515), ('Katyarina', 97), ('Kayla', 13697), ('Kaylah', 237), ('Kazusa', 10107), ('Kei', 294), ('Kelia', 324), ('Kelly', 4705), ('Kelly S', 5880), ('Kelsey', 410), ('Kennedy', 653), ('Keren', 24062), ('Keri', 894), ('Kerstin', 942), ('Khristina', 3748), ('Ki Ryang', 86), ('Kiki', 214121), ('Kim', 4580), ('Kim Alice', 12388), ('Kimberley', 5393), ('Kimberly', 4831), ('Kimika', 272), ('Kimiko', 270102), ('Kinnie', 15102), ('Kirsten', 383077), ('Kirsten Andrea', 462), ('Klaartje', 5818), ('Klara', 568191), ('Klaudia', 4809), ('Komola', 701), ('Korina', 21417), ('Kotomi', 4962), ('Krista', 17577), ('Kristie', 34647), ('Kristina', 601693), ('Kristina N', 555), ('Kristy', 1899), ('Kristyna', 148728), ('Ksenia', 371140), ('Kseniia', 298), ('Ksenija', 625), ('Kumiko', 56212), ('Kurumi', 177170), ('Kveta', 210101), ('Kwan Yau', 403), ('Kyle', 3200), ('Kylie', 1236), ('Kyoka', 9036), ('Kyra', 102022), ('Kyung Mi', 26059), ('Laetitia', 6078), ('Laili', 595), ('Lamis', 456), ('Lara', 177458), ('Larikah', 255), ('Laura', 578964), ('Laura D', 281), ('Laura Ioana', 33822), ('Laura Sofia', 97), ('Lauren', 244807), ('Lauryn', 207), ('Lavinia', 23897), ('Laylo', 39), ('Layne', 22), ('Lea', 4197), ('Leah', 152), ('Lee', 733), ('Lena', 27997), ('Lena Marie', 14942), ('Lenka', 164900), ('Leolia', 750), ('Leonie', 672), ('Lesedi Sheya', 286), ('Lesia', 225987), ('Lesley', 42925), ('Leslie', 173), ('Leticia', 45115), ('Leticia Garcia', 87), ('Leylah Annie', 48), ('Li', 1696), ('Liana Gabriela', 59997), ('Libby', 2362), ('Libi', 522), ('Lidia', 169), ('Lidziya', 6809), ('Liezel', 39782), ('Liga', 23411), ('Lilla', 1960), ('Lin', 40341), ('Lina', 91117), ('Linda', 4216), ('Lindsay', 142454), ('Lindsey', 500), ('Ling', 64525), ('Liniques', 72), ('Linnea', 697), ('Lisa', 594217), ('Lisa Maria', 7898), ('Lisa Marie', 1583), ('Lisanne', 8284), ('Liubov', 2662), ('Livia', 128), ('Liz Tatiane', 2216), ('Lizaveta', 135), ('Lizette', 11623), ('Lorenza', 33), ('Lorraine M', 40), ('Lou', 10167), ('Loudmilla', 6), ('Louisa', 50700), ('Louise', 1633), ('Lourdes', 371035), ('Lu', 3445), ('Luca', 1013), ('Lucia', 17185), ('Luciana', 8305), ('Lucie', 1108372), ('Lucrezia', 1589), ('Lucy', 6542), ('Ludmila', 645), ('Ludmilla', 1187), ('Luisa', 1671), ('Luisa Marie', 1822), ('Luksika', 77519), ('Lulu', 304), ('Luna', 15), ('Lusine', 377), ('Lutfiye', 876), ('Lyann', 30), ('Lynn', 837), ('Lyudmyla', 54172), ('Macall', 12379), ('Macarena', 2133), ('Madalina', 62938), ('Maddison', 2434), ('Madeleine', 715), ('Madeline', 147), ('Madina', 6), ('Madison', 476768), ('Madrie', 2266), ('Maegan', 525), ('Mafalda', 163), ('Maftuna', 54), ('Magali', 1917), ('Magalie', 511), ('Magda', 103659), ('Magdalena', 401857), ('Magy', 756), ('Mahak', 154), ('Mahitha', 395), ('Mai', 19173), ('Maia', 1235), ('Maia A', 12), ('Maiko', 11320), ('Maileen', 83), ('Mailen', 39523), ('Maja', 1067), ('Makiho', 5592), ('Makoto', 14129), ('Malene', 316), ('Malika', 323), ('Malin', 2489), ('Mallaurie', 688), ('Mallory', 44497), ('Malou', 3073), ('Mami', 96), ('Man Ying Maggie', 102), ('Mana', 9593), ('Mananchaya', 15), ('Manca', 2070), ('Mandy', 193767), ('Manisha', 3112), ('Manon', 14608), ('Manya', 93), ('Mara', 702), ('Marcela', 16790), ('Marcela Guimaraes', 683), ('Marcelina', 33), ('Marcella', 13037), ('Margalita', 99836), ('Margarida', 1997), ('Margarita', 78265), ('Margaux', 905), ('Margot', 4787), ('Mari', 38086), ('Maria', 3613355), ('Maria Agustina', 185), ('Maria Andrea', 323), ('Maria Camila', 148), ('Maria Constanza De Las Mercedes', 1892), ('Maria Del Rosario', 296), ('Maria Elena', 296736), ('Maria Fernanda', 141257), ('Maria Jesus', 294), ('Maria Joao', 72682), ('Maria Jose', 413759), ('Maria Lourdes', 156), ('Maria Paulina', 1388), ('Maria Teresa', 106375), ('Mariam', 4060), ('Mariana', 201258), ('Marianna', 10178), ('Marianne', 1090), ('Mariaryeni', 226), ('Marie', 25496), ('Marie Eve', 114687), ('Mariia', 206), ('Marija', 20481), ('Marijana', 3), ('Marina', 362372), ('Marine', 4314), ('Marion', 1272285), ('Mariona', 4), ('Marisa', 1026), ('Mariya', 154484), ('Marketa', 18286), ('Marlies', 1624), ('Marrit', 1339), ('Marta', 267679), ('Marta Huqi', 778), ('Martha', 153), ('Martina', 109192), ('Mary', 653), ('Mary Ann', 102), ('Maryna', 85425), ('Masa', 117472), ('Mathilde', 245139), ('Matilda', 3466), ('Maud', 210), ('Maureen', 219), ('Maurien', 138), ('Maxine', 390), ('May', 225), ('Maya', 23668), ('Mayar', 1788), ('Mayo', 32445), ('Mayya', 9064), ('Megan', 13254), ('Megumi', 407), ('Mei Xu', 40), ('Meiling', 417), ('Meiqi', 96), ('Melanie', 385636), ('Melany Solange', 97), ('Melina', 2609), ('Melinda', 290299), ('Melis', 20196), ('Melisa', 340), ('Melissa', 200), ('Melissa Ishuan', 171), ('Meng Ning', 542), ('Mercedes', 48), ('Merel', 101), ('Meritxell', 284), ('Mervana', 102693), ('Mi', 24569), ('Mi Jeong', 176), ('Mi Rae', 1858), ('Mi Zhuoma', 72), ('Mia Nicole', 1098), ('Micaela', 230), ('Michaela', 76586), ('Michaella', 242619), ('Michela', 90), ('Michele Alexandra', 596), ('Michelle', 160164), ('Michika', 3657), ('Mihaela', 69242), ('Mihaela Lorena', 15), ('Miharu', 21205), ('Mihika', 427), ('Mihoki', 201), ('Miki', 24542), ('Mila', 107), ('Milagros', 42), ('Milana', 14123), ('Milena', 279), ('Milica', 63), ('Min', 1884), ('Min Hwa', 9938), ('Minami', 96), ('Mira', 1626), ('Mirabelle', 1977), ('Miranda', 180), ('Miriam', 3825), ('Miriam Bianca', 1458), ('Miriana', 1180), ('Mirjam', 272), ('Mirjana', 331434), ('Misa', 55981), ('Misaki', 203782), ('Mitsumi', 309), ('Miyabi', 22840), ('Miyu', 23968), ('Mizuno', 2927), ('Molly', 565), ('Momoko', 2061), ('Mona', 282445), ('Monica', 587309), ('Monika', 1240), ('Monique', 114104), ('Montserrat', 23564), ('Morgane', 6906), ('Moulika', 15), ('Mouna', 12), ('Moyuka', 32), ('Muazzez', 6), ('Muge', 162), ('Myrtille', 43550), ('Na', 1358928), ('Na Lae', 26185), ('Na Ri', 19223), ('Nadezda', 5027), ('Nadia', 1401125), ('Nadiya', 56596), ('Nadja', 2661), ('Nagi', 1535), ('Naiktha', 4380), ('Naima', 440), ('Nam Yeon', 259), ('Nan Nan', 3094), ('Nanuli', 16494), ('Nao', 59671), ('Naoko', 857), ('Naomi', 163239), ('Napatsakorn', 1945), ('Nastassia', 72), ('Nastassja', 65152), ('Nastja', 29250), ('Natalia', 97400), ('Natalie', 120995), ('Natalija', 13686), ('Nataliya', 33), ('Natasa', 14212), ('Natasha', 15365), ('Natela', 16303), ('Natella', 649), ('Nathalia', 28098), ('Nathaly', 13241), ('Natia', 2526), ('Natsumi', 37981), ('Nattawadee', 224), ('Naz', 251), ('Nazari', 980), ('Neda', 9536), ('Nelise', 142), ('Nermeen', 279), ('Nevena', 170), ('Nicha', 30972), ('Nicky', 2531), ('Nicola', 33550), ('Nicole', 447434), ('Nicoleta Catalina', 8146), ('Nicolette', 9627), ('Nidhi', 5425), ('Nigina', 47651), ('Nika', 9120), ('Nikita', 22), ('Nikki', 614), ('Nikol', 491), ('Nikola', 78513), ('Nina', 201173), ('Nina Isabella', 115), ('Nives', 2706), ('Noel', 1558), ('Noelia', 2025), ('Noelle', 1795), ('Nonna', 134), ('Noppawan', 73589), ('Nora', 1082), ('Nour', 760), ('Nozomi', 1333), ('Nudnida', 63013), ('Nungnadda', 24523), ('Nuria', 259116), ('Oana', 1096), ('Oana Georgeta', 4294), ('Oceane', 56853), ('Ofri', 5372), ('Oksana', 58279), ('Ola', 3497), ('Olawaseun', 2), ('Olaya', 40), ('Oleksandra', 8700), ('Olena', 484), ('Olesya', 3811), ('Olga', 773929), ('Olivia', 119756), ('Oliwia', 363), ('Ons', 56242), ('Ornella', 2133), ('Oyku', 382), ('Paige Mary', 147), ('Pamela', 241), ('Panna', 1446), ('Paola', 403127), ('Parris', 209), ('Patcharin', 1188), ('Patricia', 197904), ('Patricia Maria', 43755), ('Patrycja', 17514), ('Patty', 7323), ('Paula', 172431), ('Paula Andrea', 269), ('Paula Catalina', 3714), ('Paula Cristina', 37384), ('Paulina', 3208), ('Pauline', 313187), ('Pavla', 4128), ('Peangtarn', 26280), ('Peggy', 1016), ('Pei Chi', 8900), ('Pei Hsuan', 24), ('Pei Ju', 181), ('Pemra', 60908), ('Pernilla', 6573), ('Petia', 1832), ('Petra', 1958404), ('Phenomena', 3), ('Phillis', 664), ('Pia', 10859), ('Piia', 21340), ('Pilar', 6404), ('Pippa', 243), ('Plobrung', 934), ('Polina', 76747), ('Polona', 325216), ('Poojashree', 13006), ('Pranjala', 1214), ('Prarthana G', 5687), ('Prerna', 9318), ('Priscila', 510), ('Priscilla', 8203), ('Qiang', 116857), ('Qianhui', 683), ('Qianqian', 641), ('Qiu Yu', 2034), ('Quinn', 646), ('Quirine', 22978), ('Rachael', 2592), ('Rachel', 469), ('Radina', 699), ('Rafaela', 228), ('Ralina', 40), ('Raluca', 148701), ('Raluca Elena', 9202), ('Raluca Georgiana', 4258), ('Ramu', 443), ('Ramya', 161), ('Ran', 14709), ('Rana', 9), ('Raquel', 30401), ('Rashmi', 741), ('Ratnika', 957), ('Raveena', 5387), ('Rebeca', 168), ('Rebecca', 165013), ('Rebeka', 5803), ('Regina', 122331), ('Reina', 64), ('Reka Luca', 66271), ('Remi', 38116), ('Renata', 201856), ('Ria', 5566), ('Rianna', 984), ('Richel', 84184), ('Rika', 141257), ('Riko', 23195), ('Rio', 556), ('Risa', 62252), ('Rishika', 8448), ('Rita', 1401), ('Riya', 2634), ('Roberta', 809611), ('Robin', 12295), ('Robyn', 1103), ('Rocio', 16886), ('Romana', 29214), ('Romana Caroline', 17020), ('Romina', 253471), ('Romy', 911), ('Rona', 308), ('Ronit', 3165), ('Ronke', 49), ('Roosh', 28), ('Rosa', 111), ('Rosalia', 803), ('Rosalie', 880), ('Rosie', 336), ('Roxane', 38793), ('Rui', 24), ('Rushmi', 27452), ('Rutuja', 3642), ('Ryann', 597), ('Saana', 195), ('Sabastiani', 780), ('Sabina', 49784), ('Sabina Elena', 27), ('Sabine', 590911), ('Sabrina', 6810), ('Sacha', 78204), ('Sachia', 49767), ('Sachie', 42676), ('Sadafmoh', 2275), ('Sai Samhitha', 1034), ('Saisai', 113359), ('Sakiko', 9338), ('Sally', 53480), ('Salma', 66), ('Samantha', 1437656), ('Samira', 2020), ('Sanae', 354), ('Sanaz', 17975), ('Sandra', 266197), ('Sandy', 224), ('Sang Hee', 1277), ('Sania', 272889), ('Sara', 914981), ('Sarah', 78461), ('Sarah Beth', 1270), ('Sarah Rebecca', 13064), ('Sarahi', 461), ('Sarai Delfina', 148), ('Saray', 2061), ('Sari', 464), ('Sarlota', 27), ('Sarvinoz', 178), ('Sasa', 316), ('Saska', 2641), ('Satsuki', 906), ('Savannah', 70), ('Schena', 148), ('Se Hyun', 143), ('Se Jin', 681), ('Sean', 75), ('Seda', 1469), ('Seira', 144), ('Selin', 169), ('Seo Kyung', 6564), ('Seone', 1312), ('Serena', 4232828), ('Sesil', 208108), ('Seung Yeon', 6650), ('Severine', 192296), ('Shahar', 662926), ('Shakhlo', 2122), ('Shakhnoza', 198), ('Shangqing', 111), ('Shanshan', 2378), ('Shao Yuan', 1363), ('Sharmada', 4106), ('Sharon', 117825), ('Sharon Sanchana', 522), ('Shelby', 102140), ('Shelly', 142), ('Sheng Nan', 53610), ('Sherazad', 22977), ('Sherry', 801), ('Shiho', 39960), ('Shilin', 9634), ('Shiori', 18), ('Shir', 117), ('Shiran', 236), ('Shivika', 4611), ('Shou Na', 105), ('Shreya', 6), ('Shu Ying', 1483), ('Shuai', 913829), ('Shuko', 46124), ('Shuo', 597), ('Shuyue', 336), ('Shweta', 3255), ('Si Qi', 531), ('Silvia', 221695), ('Simona', 724638), ('Simone', 1149), ('Simran Kaur', 467), ('Sina', 10360), ('Sinead', 688), ('Sing Le', 95), ('Siqi', 716), ('Sirui', 276), ('Siyu', 87), ('Sloane', 352458), ('Smriti', 96), ('Sneha', 134), ('Snehadevi S', 2820), ('So Jung', 47282), ('So Ra', 18210), ('Sofia', 484140), ('Sofico', 336), ('Sofie', 10539), ('Sofiya', 18371), ('Sofya', 9180), ('Sohyun', 108), ('Sonia', 480), ('Sonja', 4499), ('Sophia', 96), ('Sophie', 39307), ('Sorana', 457043), ('Sowjanya', 2961), ('Spurti', 159), ('Sri Vaishnavi', 1744), ('Stamatia', 8072), ('Stanislava', 49412), ('Stefana', 497), ('Stefani', 126), ('Stefania', 24897), ('Stefanie', 247237), ('Steffi', 3085), ('Stephanie', 608309), ('Stephanie Mariel', 1397), ('Storm', 21152), ('Su Jeong', 33672), ('Su Wei', 274936), ('Suellen', 320), ('Sultan', 1544), ('Sun Jung', 6591), ('Sunae', 15), ('Sunam', 3594), ('Sung Hee', 29852), ('Susan', 502), ('Susanne', 16276), ('Suzan', 344), ('Suzuho', 324), ('Suzy', 1054), ('Svenja', 6341), ('Svetlana', 1906587), ('Sviatlana', 11201), ('Sybille', 581), ('Sylvia', 1626), ('Sylwia', 8268), ('Syna', 9001), ('Szabina', 2127), ('Tadeja', 83659), ('Taisiya', 1050), ('Talya', 45), ('Tamachan', 843), ('Tamar', 60), ('Tamara', 54140), ('Tamari', 304), ('Tamarine', 594281), ('Tamaryn', 40060), ('Tamira', 322202), ('Tammi', 26077), ('Tanaporn', 764), ('Tanya', 1229), ('Tara', 54798), ('Tatia', 42), ('Tatiana', 34795), ('Tatjana', 230262), ('Tatsiana', 1289), ('Tayisiya', 5051), ('Taylor', 38850), ('Tea', 2127), ('Teliana', 112570), ('Tena', 12402), ('Teodora', 41792), ('Tereza', 193362), ('Terri', 18), ('Tess', 7165), ('Tessah', 9116), ('Tetiana', 75337), ('Tetyana', 43020), ('Thai Sa Grana', 706), ('Theo', 2249), ('Theresa', 377), ('Tijana', 333), ('Timea', 612072), ('Tina', 57585), ('Tinatin', 476), ('Ting Fei', 8145), ('Ting Jr', 8676), ('Tingting', 151), ('Tjasa', 3361), ('Tomoko', 7431), ('Tori', 10630), ('Tornado Alicia', 1864), ('Trang', 1884), ('Treta', 736), ('Tsvetana', 456422), ('Tyra', 4543), ('Ulrikke', 27118), ('Ulyana', 2400), ('Urszula', 275255), ('Ushna', 413), ('Usue Maitane', 7874), ('Valentina', 338), ('Valentine', 9926), ('Valentini', 15198), ('Valentyna', 47854), ('Valeria', 159155), ('Valerie', 6146), ('Valeriya', 16621), ('Vanda', 10087), ('Vanesa', 30669), ('Vanessa', 71645), ('Vania', 299530), ('Vaniya', 255), ('Vanja', 291), ('Varatchaya', 54340), ('Varunya', 3623), ('Varvara', 401409), ('Vasilisa', 42527), ('Vaszilisza', 3763), ('Vendula', 2221), ('Venus', 2875425), ('Vera', 1929137), ('Verena', 3018), ('Veronica', 84543), ('Veronica M', 1678), ('Veronika', 73192), ('Vesna', 169500), ('Vicky', 77), ('Victoire', 454), ('Victoria', 2142854), ('Victoria Ariadna', 106), ('Viktoria', 30191), ('Viktoriia', 90), ('Viktorija', 79511), ('Viktoriya', 26226), ('Viktoryia', 1987), ('Vilma Y', 27), ('Vincenza', 105), ('Vinciane', 37), ('Violetta', 298), ('Virginie', 519208), ('Vishesh', 71), ('Vita', 64), ('Vitalia', 106927), ('Vivian', 36714), ('Vivien', 13041), ('Vivienne', 8918), ('Vlada', 22578), ('Vladica', 997), ('Vladimira', 6470), ('Vladislava', 1254), ('Vladyslava', 2570), ('Vojislava', 18781), ('Voni', 1036), ('Wan Ting', 11653), ('Wan Yi', 42), ('Warona', 9), ('Wen Hsin', 40633), ('Wen Ling', 120), ('Wendy Qi Wen', 613), ('Weronika Jasmina', 179), ('Whitney', 5604), ('Wiktoria', 363), ('Wing Yau Venise', 11694), ('Wushuang', 879), ('Xenia', 14578), ('Xi Yao', 1445), ('Xiao', 4789), ('Xiaodi', 5057), ('Xiaorong', 717), ('Xiaoxi', 1352), ('Ximena', 19495), ('Xin', 8744), ('Xin Yu', 187), ('Xinyu', 10705), ('Xinyun', 109256), ('Xiyu', 315), ('Xu Liu', 4535), ('Ya', 24), ('Ya Hsuan', 17078), ('Yafan', 39687), ('Yan', 4196), ('Yana', 39102), ('Yang', 73), ('Yanina', 602453), ('Yanni', 275), ('Yarden', 32), ('Yaroslava', 404915), ('Yasmin', 11251), ('Yasmina', 27), ('Yasmine', 1748), ('Yasmyn', 71), ('Yawna', 648), ('Yayuk', 128509), ('Ye Ra', 47867), ('Ye Xin', 281), ('Yekaterina', 376), ('Yelena', 1856), ('Yeong Won', 966), ('Yevgeniya', 6288), ('Yi', 19989), ('Yi Fan', 60646), ('Yi Jing', 22443), ('Yi Miao', 61839), ('Yidi', 136), ('Yihong', 24), ('Yijia', 366), ('Ying', 3783), ('Ying Ying', 107595), ('Yixuan', 1380), ('Ylena', 1546), ('Ylona Georgiana', 1453), ('Yoko', 285), ('Yolande', 1381), ('Yoo Ri', 182), ('Yoon Young', 3592), ('Yoshimi', 677), ('Yosr', 75), ('You Na', 242), ('Ysaline', 27804), ('Yu Jin', 452), ('Yu Tong', 9), ('Yuan', 281), ('Yuanyi', 772), ('Yue', 1259), ('Yue Yue', 21360), ('Yuenu', 682), ('Yujia', 184), ('Yuka', 12474), ('Yukako', 84), ('Yuki', 505), ('Yuki Kristina', 2191), ('Yukina', 998), ('Yukun', 1828), ('Yulia', 155143), ('Yuliana', 15248), ('Yuliya', 206375), ('Yumi', 20269), ('Yung Jan', 229391), ('Yuqi', 559), ('Yurika', 101816), ('Yuriko', 1728), ('Yurina', 12693), ('Yuuki', 15071), ('Yuval', 45), ('Yuxuan', 24279), ('Yvonne', 254491), ('Zaineb', 87), ('Zalina', 2052), ('Zarah', 3809), ('Zarina', 123243), ('Zeel', 702), ('Zeynep  Sena', 21), ('Zhanlan', 2166), ('Zhaoxuan', 20236), ('Zhibek', 7), ('Zhima', 99), ('Zhou', 30), ('Zhuoma', 121), ('Zi', 110290), ('Zinovia', 74), ('Ziyue', 1420), ('Zoe', 2772), ('Zoe Gwen', 2877), ('Zsofia', 1501), ('Zuzana', 266251), ('Zuzanna', 2258)]
Gold Output      : [(68, 'Aastha'), (304, 'Abbi'), (5214, 'Abbie'), (115293, 'Abigail'), (120, 'Abiodun'), (72, 'Abir'), (490, 'Adeliya'), (219, 'Adnya'), (28045, 'Adriana'), (107, 'Adrienn'), (4619, 'Adrijana'), (9, 'Adva'), (156, 'Afroditi'), (1901, 'Agata'), (219, 'Agata Jadwiga'), (110, 'Agne'), (390148, 'Agnes'), (13717, 'Agnese'), (2929, 'Agni'), (1801033, 'Agnieszka'), (21728, 'Agustina'), (158, 'Agustina Elena'), (141, 'Ah'), (85, 'Ahlam'), (52, 'Ahsha'), (10751, 'Ai'), (2217, 'Ai Wen'), (703, 'Aida'), (140108, 'Aiko'), (288, 'Ailen'), (226, 'Aimee'), (92, 'Aina'), (2433, 'Ainhoa'), (96, 'Aishwarya'), (116548, 'Ajla'), (11873, 'Akari'), (228538, 'Akgul'), (14838, 'Aki'), (83, 'Akiho'), (84446, 'Akiko'), (742, 'Akilah'), (640, 'Akvile'), (385, 'Alana'), (1424, 'Alba'), (238803, 'Alberta'), (10507, 'Albina'), (71, 'Aldana'), (1578, 'Alejandra'), (451414, 'Aleksandra'), (35957, 'Aleksandrina'), (8832, 'Alena'), (235, 'Alessandra'), (2524, 'Alessia'), (265, 'Alessondra'), (138782, 'Alexa'), (955267, 'Alexandra'), (191, 'Alexandria'), (12829, 'Alexia'), (13389, 'Alexis'), (61196, 'Aliaksandra'), (57745, 'Alice'), (2358, 'Alice Andrada'), (993, 'Alicia'), (5216, 'Alicja'), (11393, 'Alina'), (2369, 'Aliona'), (369810, 'Alisa'), (323527, 'Alison'), (5422, 'Alix'), (596901, 'Alize'), (253320, 'Alla'), (33054, 'Allie'), (206, 'Almudena'), (4052, 'Alona'), (155, 'Alory Regina Elorriaga'), (25183, 'Alyona'), (68207, 'Amanda'), (41575, 'Amandine'), (887, 'Amelie'), (1990, 'Amina'), (12708, 'Aminat'), (157, 'Amira'), (60702, 'Amra'), (159, 'Amrita'), (10616, 'Amy'), (51803, 'An Sophie'), (1589674, 'Ana'), (2421, 'Ana Bianca'), (36696, 'Ana Clara'), (288, 'Ana Gabriela'), (21, 'Ana Luisa'), (2141, 'Ana Paula'), (15955, 'Ana Sofia'), (1367, 'Ana Victoria'), (678793, 'Anabel'), (1962, 'Anaeve'), (46908, 'Anais'), (2338, 'Anamika'), (1433335, 'Anastasia'), (1235, 'Anastasia Evgenyevna'), (12, 'Anastasiia'), (268277, 'Anastasija'), (75850, 'Anastasiya'), (101, 'Anca'), (160, 'Anda'), (605, 'Andie K'), (228, 'Andjela'), (51, 'Andra Maria'), (920433, 'Andrea'), (464, 'Andrea Renee'), (1484, 'Andreea'), (1365, 'Andreea Amalia'), (12727, 'Andreea Roxana'), (74453, 'Andreja'), (72, 'Andressa Cristina'), (159, 'Andrina'), (202, 'Aneta'), (71072, 'Anett'), (1657, 'Anette'), (36, 'Ange Oby'), (245, 'Angela'), (13643, 'Angelica'), (677, 'Angeliki'), (19048, 'Angelina'), (1132514, 'Angelique'), (17967, 'Anhelina'), (836, 'Anhzelika'), (48811, 'Ani'), (2177, 'Anita'), (11596, 'Anja'), (54, 'Anke'), (21599, 'Ankita'), (62, 'Ann'), (1017069, 'Anna'), (6650, 'Anna Arina'), (49207, 'Anna Giulia'), (107880, 'Anna Karolina'), (907, 'Anna Katalina'), (359374, 'Anna Lena'), (1427, 'Anna Maria'), (29442, 'Annalisa'), (647811, 'Anne'), (5269, 'Anne Liz'), (99, 'Anne Marie'), (33, 'Anne Sophie'), (172, 'Annie'), (169371, 'Annika'), (3621, 'Anouk'), (280, 'Antonela'), (21624, 'Antonia'), (484, 'Antonina'), (480, 'Anushka'), (4941, 'Ao'), (126, 'Apichaya'), (11608, 'Arabela'), (434692, 'Arantxa'), (24184, 'Aranza'), (383495, 'Aravane'), (980, 'Ariadna'), (96852, 'Arina'), (3, 'Arina Gabriela'), (154, 'Arlinda'), (39, 'Arthi'), (19446, 'Aryna'), (238, 'Aselya'), (99, 'Asha'), (58741, 'Ashleigh'), (49980, 'Ashley'), (5155, 'Ashling'), (648, 'Ashmitha'), (2321, 'Ashvarya'), (48788, 'Asia'), (802, 'Asiya'), (141, 'Assia'), (1083, 'Astra'), (269, 'Astrid Wanja'), (33624, 'Audrey'), (21, 'Avgusta'), (7, 'Axana'), (7996, 'Ayaka'), (571, 'Ayan'), (5173, 'Ayano'), (7444, 'Ayla'), (791, 'Aymet'), (38501, 'Ayu Fani'), (309990, 'Ayumi'), (11721, 'Azra'), (53401, 'Barbara'), (515957, 'Barbora'), (26624, 'Basak'), (27061, 'Beatrice'), (98798, 'Beatriz'), (75, 'Beatriz Magdalena'), (1920, 'Beatriz Maria'), (26, 'Beauty'), (351, 'Belen'), (137327, 'Belinda'), (11032, 'Benedetta'), (2850, 'Berfu'), (8441, 'Bermet'), (19092, 'Bernarda'), (3894, 'Bernice'), (814, 'Berta'), (371662, 'Bethanie'), (21, 'Betina'), (1152, 'Bhuvana'), (63998, 'Bianca'), (1213, 'Bianka'), (50184, 'Bibiane'), (905, 'Blair'), (312, 'Blanca'), (662, 'Blessing'), (123, 'Boba'), (283166, 'Bojana'), (3470, 'Borislava'), (1465, 'Boyan'), (725, 'Brandy'), (676, 'Breaunna'), (166760, 'Brenda'), (2922, 'Brianna'), (12, 'Brienne'), (30, 'Brindtha'), (2487, 'Britt'), (1119, 'Brittany'), (7062, 'Brooke'), (1344, 'Brynn'), (3187, 'Bunyawi'), (537, 'Busra'), (119797, 'Cagla'), (15218, 'Caitlin'), (9147, 'Camelia Elena'), (38, 'Cameron'), (202172, 'Camila'), (136, 'Camila Vital'), (11714, 'Camilla'), (574, 'Camille'), (240762, 'Cara'), (90451, 'Carina'), (669546, 'Carla'), (27, 'Carlota'), (562, 'Carlotta'), (67459, 'Carly'), (8174, 'Carmen'), (1077, 'Carmen Raluca'), (14213, 'Carol'), (9093, 'Carolin'), (36889, 'Carolina'), (3627, 'Carolina Meligeni Rodrigues'), (2076949, 'Caroline'), (111, 'Caroline B'), (72, 'Carolyn'), (289, 'Carson'), (202697, 'Casey'), (250056, 'Catalina'), (4987, 'Catherine'), (45884, 'Catherine Cartan'), (22, 'Caty'), (11954, 'Cecilia'), (95, 'Cecilie Lundgaard'), (18824, 'Celine'), (958, 'Cemre'), (4914, 'Chalena'), (62861, 'Chanel'), (275364, 'Chanelle'), (26585, 'Chang'), (39, 'Chanikarn'), (15001, 'Chantal'), (187, 'Chantelle'), (15, 'Chaoyi'), (5683, 'Charlene'), (4356, 'Charlotte'), (20132, 'Chayenne'), (5, 'Chelsea'), (6777, 'Chelsey'), (26779, 'Chen'), (277, 'Chengyiyi'), (49122, 'Chi Chi'), (667, 'Chi Fan'), (679, 'Chia Hsien'), (33301, 'Chia Jung'), (42773, 'Chiaki'), (6159, 'Chiara'), (34796, 'Chieh Yu'), (15401, 'Chihiro'), (70504, 'Chin Wei'), (13141, 'Chinami'), (7975, 'Ching Wen'), (1726, 'Chiraz'), (358, 'Chisa'), (15190, 'Chloe'), (276, 'Chompoothip'), (24, 'Christie'), (310215, 'Christina'), (2438, 'Christine'), (12519, 'Chun Mei'), (3374, 'Chun Yan'), (31620, 'Cindy'), (141876, 'Claire'), (116, 'Clara'), (32581, 'Claudia'), (1227, 'Claudia Antonia'), (934, 'Claudia Gianina'), (106762, 'Claudine'), (2221, 'Clelia'), (1622, 'Clemence'), (538, 'Clementina Eugenia'), (12304, 'Clothilde'), (235721, 'Coco'), (129, 'Colomba'), (52274, 'Conny'), (25166, 'Constance'), (907, 'Constanza'), (18, 'Constanze'), (1002, 'Corina'), (102260, 'Corinna'), (4053, 'Cornelia'), (20869, 'Cory Ann'), (1236, 'Costanza'), (7486, 'Cristiana'), (59412, 'Cristina'), (75414, 'Cristina Andreea'), (317, 'Cristina Madalina'), (6256, 'Csilla'), (1034, 'Cynthia'), (1417, 'Da Hye'), (1261, 'Dabin'), (160, 'Dagmara'), (8589, 'Daiana'), (150, 'Dajana'), (8939, 'Dalia'), (48857, 'Dalila'), (15935, 'Dalma'), (0, 'Damilola'), (12, 'Damini'), (30, 'Damira'), (639, 'Dan Ni'), (3121, 'Dana'), (1607, 'Daneika'), (17597, 'Danica'), (1165205, 'Daniela'), (16663, 'Daniella'), (40823, 'Danielle'), (8507, 'Danielle Rose'), (545, 'Danijela'), (87958, 'Danka'), (33, 'Daphne'), (170617, 'Daria'), (41925, 'Darija'), (857, 'Dariya'), (163036, 'Darya'), (1923, 'Dasha'), (5619, 'Dayana'), (7027, 'Dea'), (7605, 'Deborah'), (141, 'Deeon'), (9846, 'Dejana'), (1192, 'Demi'), (65522, 'Denisa'), (3298, 'Denise'), (168, 'Denise Antonela'), (23620, 'Deniz'), (215, 'Deria'), (354, 'Desirae'), (709, 'Desiree'), (19065, 'Despina'), (3942, 'Despoina'), (9227, 'Destanee'), (134, 'Dewi'), (2738, 'Dhruthi'), (9780, 'Di'), (79958, 'Dia'), (119279, 'Diana'), (99, 'Diana Maria'), (6369, 'Dianne'), (7353, 'Dijana'), (85, 'Dilara'), (149, 'Dina'), (67017, 'Dinah'), (117, 'Doga Selen'), (1614, 'Domenica'), (918746, 'Dominika'), (455, 'Dominique'), (164, 'Donika'), (114098, 'Donna'), (109, 'Dorien'), (23976, 'Doroteja'), (392, 'Draginja'), (4703, 'Dunja'), (713, 'Ebony'), (1978, 'Eden'), (249446, 'Edina'), (11216, 'Eduarda'), (2446, 'Eetee'), (50, 'Ege'), (1005319, 'Ekaterina'), (26897, 'Ekaterine'), (103, 'Elaine'), (2287, 'Eleanor'), (1247887, 'Elena'), (7772, 'Elena Gabriela'), (6547, 'Elena Teodora'), (439179, 'Eleni'), (405, 'Eleonora'), (567, 'Eleonore'), (882, 'Eliessa'), (314747, 'Elina'), (4709, 'Elisabeth'), (43779, 'Elise'), (87263, 'Elitsa'), (18211, 'Elixane'), (480, 'Eliza'), (536, 'Elizabeta'), (20368, 'Elizabeth'), (1103, 'Elizabeth Anita Alexandria'), (62977, 'Elizaveta'), (636, 'Elizaveta Anna'), (960, 'Elke'), (526, 'Ella'), (13761, 'Ellen'), (8079, 'Ellie'), (90, 'Elodie'), (12554, 'Elyne'), (11218, 'Ema'), (12728, 'Emelyn'), (3880, 'Emi'), (43, 'Emilia'), (1258, 'Emiliana'), (1440, 'Emilie'), (24, 'Emilija'), (541, 'Emiliya'), (52889, 'Emily'), (964, 'Emily J'), (3029, 'Emina'), (85022, 'Emma'), (65, 'Emma Christine'), (1609, 'Emmanuelle'), (52, 'En Pei'), (823, 'Ena'), (34570, 'Eri'), (472, 'Erica'), (165477, 'Erika'), (5356, 'Erin'), (1225, 'Erina'), (69, 'Esen'), (376, 'Estela'), (39989, 'Estelle'), (3908, 'Ester'), (126811, 'Estrella'), (7147, 'Etsuko'), (976, 'Eudice Wong'), (36, 'Eugenia'), (204801, 'Eugenie'), (20989, 'Eugeniya'), (320083, 'Eva'), (41, 'Eva Marie'), (744, 'Eveliina'), (27011, 'Evelyn'), (59775, 'Evgenia'), (206981, 'Evgeniya'), (7755, 'Fang Ying'), (33388, 'Fangzhou'), (11260, 'Fanny'), (167, 'Farah'), (10865, 'Fatima'), (898, 'Fatimah'), (21261, 'Fatma'), (80, 'Fatyha'), (56817, 'Federica'), (44, 'Federica Joe'), (17587, 'Fernanda'), (78, 'Ferny'), (18219, 'Fiona'), (1011058, 'Flavia'), (89361, 'Florencia'), (359, 'Frances'), (1306087, 'Francesca'), (157, 'Francisca'), (21685, 'Francoise'), (994, 'Franziska'), (9, 'Frederikke'), (6525, 'Freya'), (102623, 'Gabriela'), (468, 'Gabriela Nicole'), (6179, 'Gabriella'), (1093, 'Gabrielle Faith'), (1000, 'Gaelle'), (7998, 'Gaia'), (38651, 'Gail'), (302957, 'Galina'), (30136, 'Ganna'), (412872, 'Garbine'), (143, 'Gebriela'), (440, 'Genevieve'), (9600, 'Georgia'), (1848, 'Georgia Andreea'), (48, 'Georgiana'), (11569, 'Georgina'), (290, 'Ghislaine'), (677, 'Giada'), (31741, 'Gioia'), (2484, 'Giorgia'), (13, 'Giorgie'), (289, 'Giovanna'), (106520, 'Giulia'), (2935, 'Giuliana'), (1297, 'Gloria'), (2864, 'Gozal'), (70613, 'Grace'), (7999, 'Gracia'), (6168, 'Greetje'), (240195, 'Greta'), (14277, 'Guadalupe'), (576, 'Guillermina'), (687, 'Guiomar'), (410, 'Gulben'), (18, 'Gulchekhra'), (39, 'Gulnaz'), (775, 'Guzal'), (238, 'Gyulnara'), (811, 'Habiba'), (8180, 'Hae Sung'), (294, 'Haine'), (413, 'Hana'), (2782, 'Hanna'), (4643, 'Hanyu'), (9631, 'Hao Chen'), (224, 'Hao Ching'), (5944, 'Harmony'), (8608, 'Harriet'), (3633, 'Haruka'), (1873, 'Haruna'), (1679, 'Hayley'), (78, 'Hazal'), (202780, 'Heather'), (88542, 'Heidi'), (1039, 'Helen'), (3928, 'Helene'), (122, 'Hikari'), (10191, 'Hilda'), (3, 'Himari'), (27580, 'Hiroko'), (4368, 'Hirono'), (2371, 'Ho Ching'), (24, 'Hollie'), (1063, 'Hongrui'), (98, 'Hortencia'), (120, 'Hsin Yuan'), (7367, 'Hua Chen'), (118, 'Huijie'), (7797, 'Hulya'), (1222, 'Hye Min'), (870, 'Hyojung'), (8301, 'Hyun Hui'), (511, 'I Hsuan'), (395, 'Iana'), (467, 'Ida'), (45, 'Idia'), (916, 'Iga'), (52, 'Ilay'), (1142, 'Ilka'), (26950, 'Ilona'), (1527, 'Ilze'), (1676, 'Imane Maelle'), (292, 'Ina'), (406, 'Inci'), (762, 'India'), (12633, 'Indire'), (17382, 'Indy'), (1358, 'Ineke'), (40410, 'Ines'), (221, 'Inger'), (3471, 'Ingrid'), (4766, 'Ingrid Alexandra'), (10133, 'Ingrid Esperanza'), (33, 'Intissar'), (1225, 'Ioana'), (2403, 'Ioana Diana'), (5425, 'Ioana Loredana'), (6948, 'Ionela Andreea'), (39352, 'Ipek'), (88369, 'Irena'), (3133, 'Irene'), (299698, 'Irina'), (293366, 'Irina Camelia'), (13843, 'Irina Maria'), (4743, 'Iris'), (87844, 'Iryna'), (6688, 'Isabel'), (714, 'Isabela'), (83476, 'Isabella'), (4777, 'Isabelle'), (74, 'Iulia Maria'), (10322, 'Iva'), (100848, 'Ivana'), (2094, 'Ivania'), (291, 'Ivanka'), (443695, 'Iveta'), (543, 'Ivette'), (253, 'Ivone'), (13010, 'Ivonne'), (27462, 'Jacqueline'), (64, 'Jada'), (26209, 'Jade'), (1375, 'Jaeda'), (5007, 'Jaimee'), (24, 'Jaimy Gayle'), (761, 'Jainy'), (190997, 'Jamie'), (18, 'Jamilya'), (10947, 'Jan'), (268372, 'Jana'), (143422, 'Janette'), (12525, 'Janina'), (72, 'Janja'), (861, 'Janneke'), (5416, 'Jaqueline Adina'), (464, 'Jara'), (333150, 'Jarmila'), (34453, 'Jasmin'), (43862, 'Jasmina'), (14865, 'Jasmine'), (142, 'Jasmine Amber'), (822, 'Jawairiah'), (908, 'Jazmin'), (628, 'Jazzamay'), (3426, 'Jeannine'), (2515436, 'Jelena'), (81222, 'Jennifer'), (1002, 'Jenny'), (17819, 'Jesika'), (154599, 'Jessica'), (4122, 'Jessika'), (923, 'Jessy'), (7179, 'Ji Hee'), (8592, 'Ji Young'), (52, 'Jia'), (48117, 'Jia Jing'), (4612, 'Jia Qi'), (1553, 'Jiahui'), (15, 'Jiakang'), (100, 'Jiatian'), (3002, 'Jiaxi'), (96, 'Jiaxue'), (610820, 'Jie'), (13978, 'Jil Belen'), (611, 'Jil Nora'), (359013, 'Jill'), (1991, 'Jillian'), (15, 'Jin'), (46355, 'Jin A'), (414, 'Jin Ju'), (68925, 'Jing Jing'), (1955, 'Joana'), (472, 'Joanna'), (15, 'Joanne'), (355, 'Jodie Anna'), (40, 'Johana'), (553107, 'Johanna'), (1092, 'Jordana'), (2710, 'Josepha'), (4980, 'Josephine'), (804, 'Josie'), (39270, 'Jovana'), (3453, 'Ju Eun'), (3, 'Judith'), (63, 'Jule'), (891796, 'Julia'), (21, 'Julia Mansano'), (414, 'Juliana'), (129, 'Juliana Rocha'), (156531, 'Julie'), (4093, 'Julieta Lara'), (286, 'Julita'), (1446, 'Julyette Maria Josephine'), (114, 'June'), (128183, 'Junri'), (36, 'Justina'), (39418, 'Justine'), (30304, 'Justyna'), (467, 'Kady'), (172004, 'Kai Chen'), (37817, 'Kai Lin'), (625836, 'Kaia'), (416, 'Kaitlin'), (3905, 'Kaitlyn'), (1176, 'Kaja'), (2280, 'Kajsa'), (12906, 'Kamila'), (249, 'Kamilla'), (5866, 'Kamonwan'), (1536, 'Kana'), (20142, 'Kanae'), (229, 'Kanako'), (3724, 'Kanami'), (919, 'Kanika'), (8406, 'Kaori'), (32169, 'Karen'), (85, 'Kariann'), (254520, 'Karin'), (9355, 'Karina'), (5493, 'Karina Ildor'), (410, 'Karina Kristina'), (1936, 'Karine'), (1003, 'Karis'), (3127, 'Karla'), (3193, 'Karman'), (776, 'Karola Patricia'), (465, 'Karolayne'), (512490, 'Karolina'), (910, 'Karoline'), (330, 'Karyn'), (704, 'Kassandra'), (112562, 'Katalin'), (444303, 'Katarina'), (93730, 'Katarzyna'), (34, 'Kate'), (160945, 'Katerina'), (435038, 'Kateryna'), (24595, 'Katharina'), (363, 'Katharine'), (7843, 'Katherine'), (1894, 'Katherine Gabriela'), (15970, 'Kathinka'), (141281, 'Kathrin'), (30035, 'Katie'), (308, 'Katrine Isabel'), (11572, 'Katy'), (515, 'Katya'), (97, 'Katyarina'), (13697, 'Kayla'), (237, 'Kaylah'), (10107, 'Kazusa'), (294, 'Kei'), (324, 'Kelia'), (4705, 'Kelly'), (5880, 'Kelly S'), (410, 'Kelsey'), (653, 'Kennedy'), (24062, 'Keren'), (894, 'Keri'), (942, 'Kerstin'), (3748, 'Khristina'), (86, 'Ki Ryang'), (214121, 'Kiki'), (4580, 'Kim'), (12388, 'Kim Alice'), (5393, 'Kimberley'), (4831, 'Kimberly'), (272, 'Kimika'), (270102, 'Kimiko'), (15102, 'Kinnie'), (383077, 'Kirsten'), (462, 'Kirsten Andrea'), (5818, 'Klaartje'), (568191, 'Klara'), (4809, 'Klaudia'), (701, 'Komola'), (21417, 'Korina'), (4962, 'Kotomi'), (17577, 'Krista'), (34647, 'Kristie'), (601693, 'Kristina'), (555, 'Kristina N'), (1899, 'Kristy'), (148728, 'Kristyna'), (371140, 'Ksenia'), (298, 'Kseniia'), (625, 'Ksenija'), (56212, 'Kumiko'), (177170, 'Kurumi'), (210101, 'Kveta'), (403, 'Kwan Yau'), (3200, 'Kyle'), (1236, 'Kylie'), (9036, 'Kyoka'), (102022, 'Kyra'), (26059, 'Kyung Mi'), (6078, 'Laetitia'), (595, 'Laili'), (456, 'Lamis'), (177458, 'Lara'), (255, 'Larikah'), (578964, 'Laura'), (281, 'Laura D'), (33822, 'Laura Ioana'), (97, 'Laura Sofia'), (244807, 'Lauren'), (207, 'Lauryn'), (23897, 'Lavinia'), (39, 'Laylo'), (22, 'Layne'), (4197, 'Lea'), (152, 'Leah'), (733, 'Lee'), (27997, 'Lena'), (14942, 'Lena Marie'), (164900, 'Lenka'), (750, 'Leolia'), (672, 'Leonie'), (286, 'Lesedi Sheya'), (225987, 'Lesia'), (42925, 'Lesley'), (173, 'Leslie'), (45115, 'Leticia'), (87, 'Leticia Garcia'), (48, 'Leylah Annie'), (1696, 'Li'), (59997, 'Liana Gabriela'), (2362, 'Libby'), (522, 'Libi'), (169, 'Lidia'), (6809, 'Lidziya'), (39782, 'Liezel'), (23411, 'Liga'), (1960, 'Lilla'), (40341, 'Lin'), (91117, 'Lina'), (4216, 'Linda'), (142454, 'Lindsay'), (500, 'Lindsey'), (64525, 'Ling'), (72, 'Liniques'), (697, 'Linnea'), (594217, 'Lisa'), (7898, 'Lisa Maria'), (1583, 'Lisa Marie'), (8284, 'Lisanne'), (2662, 'Liubov'), (128, 'Livia'), (2216, 'Liz Tatiane'), (135, 'Lizaveta'), (11623, 'Lizette'), (33, 'Lorenza'), (40, 'Lorraine M'), (10167, 'Lou'), (6, 'Loudmilla'), (50700, 'Louisa'), (1633, 'Louise'), (371035, 'Lourdes'), (3445, 'Lu'), (1013, 'Luca'), (17185, 'Lucia'), (8305, 'Luciana'), (1108372, 'Lucie'), (1589, 'Lucrezia'), (6542, 'Lucy'), (645, 'Ludmila'), (1187, 'Ludmilla'), (1671, 'Luisa'), (1822, 'Luisa Marie'), (77519, 'Luksika'), (304, 'Lulu'), (15, 'Luna'), (377, 'Lusine'), (876, 'Lutfiye'), (30, 'Lyann'), (837, 'Lynn'), (54172, 'Lyudmyla'), (12379, 'Macall'), (2133, 'Macarena'), (62938, 'Madalina'), (2434, 'Maddison'), (715, 'Madeleine'), (147, 'Madeline'), (6, 'Madina'), (476768, 'Madison'), (2266, 'Madrie'), (525, 'Maegan'), (163, 'Mafalda'), (54, 'Maftuna'), (1917, 'Magali'), (511, 'Magalie'), (103659, 'Magda'), (401857, 'Magdalena'), (756, 'Magy'), (154, 'Mahak'), (395, 'Mahitha'), (19173, 'Mai'), (1235, 'Maia'), (12, 'Maia A'), (11320, 'Maiko'), (83, 'Maileen'), (39523, 'Mailen'), (1067, 'Maja'), (5592, 'Makiho'), (14129, 'Makoto'), (316, 'Malene'), (323, 'Malika'), (2489, 'Malin'), (688, 'Mallaurie'), (44497, 'Mallory'), (3073, 'Malou'), (96, 'Mami'), (102, 'Man Ying Maggie'), (9593, 'Mana'), (15, 'Mananchaya'), (2070, 'Manca'), (193767, 'Mandy'), (3112, 'Manisha'), (14608, 'Manon'), (93, 'Manya'), (702, 'Mara'), (16790, 'Marcela'), (683, 'Marcela Guimaraes'), (33, 'Marcelina'), (13037, 'Marcella'), (99836, 'Margalita'), (1997, 'Margarida'), (78265, 'Margarita'), (905, 'Margaux'), (4787, 'Margot'), (38086, 'Mari'), (3613355, 'Maria'), (185, 'Maria Agustina'), (323, 'Maria Andrea'), (148, 'Maria Camila'), (1892, 'Maria Constanza De Las Mercedes'), (296, 'Maria Del Rosario'), (296736, 'Maria Elena'), (141257, 'Maria Fernanda'), (294, 'Maria Jesus'), (72682, 'Maria Joao'), (413759, 'Maria Jose'), (156, 'Maria Lourdes'), (1388, 'Maria Paulina'), (106375, 'Maria Teresa'), (4060, 'Mariam'), (201258, 'Mariana'), (10178, 'Marianna'), (1090, 'Marianne'), (226, 'Mariaryeni'), (25496, 'Marie'), (114687, 'Marie Eve'), (206, 'Mariia'), (20481, 'Marija'), (3, 'Marijana'), (362372, 'Marina'), (4314, 'Marine'), (1272285, 'Marion'), (4, 'Mariona'), (1026, 'Marisa'), (154484, 'Mariya'), (18286, 'Marketa'), (1624, 'Marlies'), (1339, 'Marrit'), (267679, 'Marta'), (778, 'Marta Huqi'), (153, 'Martha'), (109192, 'Martina'), (653, 'Mary'), (102, 'Mary Ann'), (85425, 'Maryna'), (117472, 'Masa'), (245139, 'Mathilde'), (3466, 'Matilda'), (210, 'Maud'), (219, 'Maureen'), (138, 'Maurien'), (390, 'Maxine'), (225, 'May'), (23668, 'Maya'), (1788, 'Mayar'), (32445, 'Mayo'), (9064, 'Mayya'), (13254, 'Megan'), (407, 'Megumi'), (40, 'Mei Xu'), (417, 'Meiling'), (96, 'Meiqi'), (385636, 'Melanie'), (97, 'Melany Solange'), (2609, 'Melina'), (290299, 'Melinda'), (20196, 'Melis'), (340, 'Melisa'), (200, 'Melissa'), (171, 'Melissa Ishuan'), (542, 'Meng Ning'), (48, 'Mercedes'), (101, 'Merel'), (284, 'Meritxell'), (102693, 'Mervana'), (24569, 'Mi'), (176, 'Mi Jeong'), (1858, 'Mi Rae'), (72, 'Mi Zhuoma'), (1098, 'Mia Nicole'), (230, 'Micaela'), (76586, 'Michaela'), (242619, 'Michaella'), (90, 'Michela'), (596, 'Michele Alexandra'), (160164, 'Michelle'), (3657, 'Michika'), (69242, 'Mihaela'), (15, 'Mihaela Lorena'), (21205, 'Miharu'), (427, 'Mihika'), (201, 'Mihoki'), (24542, 'Miki'), (107, 'Mila'), (42, 'Milagros'), (14123, 'Milana'), (279, 'Milena'), (63, 'Milica'), (1884, 'Min'), (9938, 'Min Hwa'), (96, 'Minami'), (1626, 'Mira'), (1977, 'Mirabelle'), (180, 'Miranda'), (3825, 'Miriam'), (1458, 'Miriam Bianca'), (1180, 'Miriana'), (272, 'Mirjam'), (331434, 'Mirjana'), (55981, 'Misa'), (203782, 'Misaki'), (309, 'Mitsumi'), (22840, 'Miyabi'), (23968, 'Miyu'), (2927, 'Mizuno'), (565, 'Molly'), (2061, 'Momoko'), (282445, 'Mona'), (587309, 'Monica'), (1240, 'Monika'), (114104, 'Monique'), (23564, 'Montserrat'), (6906, 'Morgane'), (15, 'Moulika'), (12, 'Mouna'), (32, 'Moyuka'), (6, 'Muazzez'), (162, 'Muge'), (43550, 'Myrtille'), (1358928, 'Na'), (26185, 'Na Lae'), (19223, 'Na Ri'), (5027, 'Nadezda'), (1401125, 'Nadia'), (56596, 'Nadiya'), (2661, 'Nadja'), (1535, 'Nagi'), (4380, 'Naiktha'), (440, 'Naima'), (259, 'Nam Yeon'), (3094, 'Nan Nan'), (16494, 'Nanuli'), (59671, 'Nao'), (857, 'Naoko'), (163239, 'Naomi'), (1945, 'Napatsakorn'), (72, 'Nastassia'), (65152, 'Nastassja'), (29250, 'Nastja'), (97400, 'Natalia'), (120995, 'Natalie'), (13686, 'Natalija'), (33, 'Nataliya'), (14212, 'Natasa'), (15365, 'Natasha'), (16303, 'Natela'), (649, 'Natella'), (28098, 'Nathalia'), (13241, 'Nathaly'), (2526, 'Natia'), (37981, 'Natsumi'), (224, 'Nattawadee'), (251, 'Naz'), (980, 'Nazari'), (9536, 'Neda'), (142, 'Nelise'), (279, 'Nermeen'), (170, 'Nevena'), (30972, 'Nicha'), (2531, 'Nicky'), (33550, 'Nicola'), (447434, 'Nicole'), (8146, 'Nicoleta Catalina'), (9627, 'Nicolette'), (5425, 'Nidhi'), (47651, 'Nigina'), (9120, 'Nika'), (22, 'Nikita'), (614, 'Nikki'), (491, 'Nikol'), (78513, 'Nikola'), (201173, 'Nina'), (115, 'Nina Isabella'), (2706, 'Nives'), (1558, 'Noel'), (2025, 'Noelia'), (1795, 'Noelle'), (134, 'Nonna'), (73589, 'Noppawan'), (1082, 'Nora'), (760, 'Nour'), (1333, 'Nozomi'), (63013, 'Nudnida'), (24523, 'Nungnadda'), (259116, 'Nuria'), (1096, 'Oana'), (4294, 'Oana Georgeta'), (56853, 'Oceane'), (5372, 'Ofri'), (58279, 'Oksana'), (3497, 'Ola'), (2, 'Olawaseun'), (40, 'Olaya'), (8700, 'Oleksandra'), (484, 'Olena'), (3811, 'Olesya'), (773929, 'Olga'), (119756, 'Olivia'), (363, 'Oliwia'), (56242, 'Ons'), (2133, 'Ornella'), (382, 'Oyku'), (147, 'Paige Mary'), (241, 'Pamela'), (1446, 'Panna'), (403127, 'Paola'), (209, 'Parris'), (1188, 'Patcharin'), (197904, 'Patricia'), (43755, 'Patricia Maria'), (17514, 'Patrycja'), (7323, 'Patty'), (172431, 'Paula'), (269, 'Paula Andrea'), (3714, 'Paula Catalina'), (37384, 'Paula Cristina'), (3208, 'Paulina'), (313187, 'Pauline'), (4128, 'Pavla'), (26280, 'Peangtarn'), (1016, 'Peggy'), (8900, 'Pei Chi'), (24, 'Pei Hsuan'), (181, 'Pei Ju'), (60908, 'Pemra'), (6573, 'Pernilla'), (1832, 'Petia'), (1958404, 'Petra'), (3, 'Phenomena'), (664, 'Phillis'), (10859, 'Pia'), (21340, 'Piia'), (6404, 'Pilar'), (243, 'Pippa'), (934, 'Plobrung'), (76747, 'Polina'), (325216, 'Polona'), (13006, 'Poojashree'), (1214, 'Pranjala'), (5687, 'Prarthana G'), (9318, 'Prerna'), (510, 'Priscila'), (8203, 'Priscilla'), (116857, 'Qiang'), (683, 'Qianhui'), (641, 'Qianqian'), (2034, 'Qiu Yu'), (646, 'Quinn'), (22978, 'Quirine'), (2592, 'Rachael'), (469, 'Rachel'), (699, 'Radina'), (228, 'Rafaela'), (40, 'Ralina'), (148701, 'Raluca'), (9202, 'Raluca Elena'), (4258, 'Raluca Georgiana'), (443, 'Ramu'), (161, 'Ramya'), (14709, 'Ran'), (9, 'Rana'), (30401, 'Raquel'), (741, 'Rashmi'), (957, 'Ratnika'), (5387, 'Raveena'), (168, 'Rebeca'), (165013, 'Rebecca'), (5803, 'Rebeka'), (122331, 'Regina'), (64, 'Reina'), (66271, 'Reka Luca'), (38116, 'Remi'), (201856, 'Renata'), (5566, 'Ria'), (984, 'Rianna'), (84184, 'Richel'), (141257, 'Rika'), (23195, 'Riko'), (556, 'Rio'), (62252, 'Risa'), (8448, 'Rishika'), (1401, 'Rita'), (2634, 'Riya'), (809611, 'Roberta'), (12295, 'Robin'), (1103, 'Robyn'), (16886, 'Rocio'), (29214, 'Romana'), (17020, 'Romana Caroline'), (253471, 'Romina'), (911, 'Romy'), (308, 'Rona'), (3165, 'Ronit'), (49, 'Ronke'), (28, 'Roosh'), (111, 'Rosa'), (803, 'Rosalia'), (880, 'Rosalie'), (336, 'Rosie'), (38793, 'Roxane'), (24, 'Rui'), (27452, 'Rushmi'), (3642, 'Rutuja'), (597, 'Ryann'), (195, 'Saana'), (780, 'Sabastiani'), (49784, 'Sabina'), (27, 'Sabina Elena'), (590911, 'Sabine'), (6810, 'Sabrina'), (78204, 'Sacha'), (49767, 'Sachia'), (42676, 'Sachie'), (2275, 'Sadafmoh'), (1034, 'Sai Samhitha'), (113359, 'Saisai'), (9338, 'Sakiko'), (53480, 'Sally'), (66, 'Salma'), (1437656, 'Samantha'), (2020, 'Samira'), (354, 'Sanae'), (17975, 'Sanaz'), (266197, 'Sandra'), (224, 'Sandy'), (1277, 'Sang Hee'), (272889, 'Sania'), (914981, 'Sara'), (78461, 'Sarah'), (1270, 'Sarah Beth'), (13064, 'Sarah Rebecca'), (461, 'Sarahi'), (148, 'Sarai Delfina'), (2061, 'Saray'), (464, 'Sari'), (27, 'Sarlota'), (178, 'Sarvinoz'), (316, 'Sasa'), (2641, 'Saska'), (906, 'Satsuki'), (70, 'Savannah'), (148, 'Schena'), (143, 'Se Hyun'), (681, 'Se Jin'), (75, 'Sean'), (1469, 'Seda'), (144, 'Seira'), (169, 'Selin'), (6564, 'Seo Kyung'), (1312, 'Seone'), (4232828, 'Serena'), (208108, 'Sesil'), (6650, 'Seung Yeon'), (192296, 'Severine'), (662926, 'Shahar'), (2122, 'Shakhlo'), (198, 'Shakhnoza'), (111, 'Shangqing'), (2378, 'Shanshan'), (1363, 'Shao Yuan'), (4106, 'Sharmada'), (117825, 'Sharon'), (522, 'Sharon Sanchana'), (102140, 'Shelby'), (142, 'Shelly'), (53610, 'Sheng Nan'), (22977, 'Sherazad'), (801, 'Sherry'), (39960, 'Shiho'), (9634, 'Shilin'), (18, 'Shiori'), (117, 'Shir'), (236, 'Shiran'), (4611, 'Shivika'), (105, 'Shou Na'), (6, 'Shreya'), (1483, 'Shu Ying'), (913829, 'Shuai'), (46124, 'Shuko'), (597, 'Shuo'), (336, 'Shuyue'), (3255, 'Shweta'), (531, 'Si Qi'), (221695, 'Silvia'), (724638, 'Simona'), (1149, 'Simone'), (467, 'Simran Kaur'), (10360, 'Sina'), (688, 'Sinead'), (95, 'Sing Le'), (716, 'Siqi'), (276, 'Sirui'), (87, 'Siyu'), (352458, 'Sloane'), (96, 'Smriti'), (134, 'Sneha'), (2820, 'Snehadevi S'), (47282, 'So Jung'), (18210, 'So Ra'), (484140, 'Sofia'), (336, 'Sofico'), (10539, 'Sofie'), (18371, 'Sofiya'), (9180, 'Sofya'), (108, 'Sohyun'), (480, 'Sonia'), (4499, 'Sonja'), (96, 'Sophia'), (39307, 'Sophie'), (457043, 'Sorana'), (2961, 'Sowjanya'), (159, 'Spurti'), (1744, 'Sri Vaishnavi'), (8072, 'Stamatia'), (49412, 'Stanislava'), (497, 'Stefana'), (126, 'Stefani'), (24897, 'Stefania'), (247237, 'Stefanie'), (3085, 'Steffi'), (608309, 'Stephanie'), (1397, 'Stephanie Mariel'), (21152, 'Storm'), (33672, 'Su Jeong'), (274936, 'Su Wei'), (320, 'Suellen'), (1544, 'Sultan'), (6591, 'Sun Jung'), (15, 'Sunae'), (3594, 'Sunam'), (29852, 'Sung Hee'), (502, 'Susan'), (16276, 'Susanne'), (344, 'Suzan'), (324, 'Suzuho'), (1054, 'Suzy'), (6341, 'Svenja'), (1906587, 'Svetlana'), (11201, 'Sviatlana'), (581, 'Sybille'), (1626, 'Sylvia'), (8268, 'Sylwia'), (9001, 'Syna'), (2127, 'Szabina'), (83659, 'Tadeja'), (1050, 'Taisiya'), (45, 'Talya'), (843, 'Tamachan'), (60, 'Tamar'), (54140, 'Tamara'), (304, 'Tamari'), (594281, 'Tamarine'), (40060, 'Tamaryn'), (322202, 'Tamira'), (26077, 'Tammi'), (764, 'Tanaporn'), (1229, 'Tanya'), (54798, 'Tara'), (42, 'Tatia'), (34795, 'Tatiana'), (230262, 'Tatjana'), (1289, 'Tatsiana'), (5051, 'Tayisiya'), (38850, 'Taylor'), (2127, 'Tea'), (112570, 'Teliana'), (12402, 'Tena'), (41792, 'Teodora'), (193362, 'Tereza'), (18, 'Terri'), (7165, 'Tess'), (9116, 'Tessah'), (75337, 'Tetiana'), (43020, 'Tetyana'), (706, 'Thai Sa Grana'), (2249, 'Theo'), (377, 'Theresa'), (333, 'Tijana'), (612072, 'Timea'), (57585, 'Tina'), (476, 'Tinatin'), (8145, 'Ting Fei'), (8676, 'Ting Jr'), (151, 'Tingting'), (3361, 'Tjasa'), (7431, 'Tomoko'), (10630, 'Tori'), (1864, 'Tornado Alicia'), (1884, 'Trang'), (736, 'Treta'), (456422, 'Tsvetana'), (4543, 'Tyra'), (27118, 'Ulrikke'), (2400, 'Ulyana'), (275255, 'Urszula'), (413, 'Ushna'), (7874, 'Usue Maitane'), (338, 'Valentina'), (9926, 'Valentine'), (15198, 'Valentini'), (47854, 'Valentyna'), (159155, 'Valeria'), (6146, 'Valerie'), (16621, 'Valeriya'), (10087, 'Vanda'), (30669, 'Vanesa'), (71645, 'Vanessa'), (299530, 'Vania'), (255, 'Vaniya'), (291, 'Vanja'), (54340, 'Varatchaya'), (3623, 'Varunya'), (401409, 'Varvara'), (42527, 'Vasilisa'), (3763, 'Vaszilisza'), (2221, 'Vendula'), (2875425, 'Venus'), (1929137, 'Vera'), (3018, 'Verena'), (84543, 'Veronica'), (1678, 'Veronica M'), (73192, 'Veronika'), (169500, 'Vesna'), (77, 'Vicky'), (454, 'Victoire'), (2142854, 'Victoria'), (106, 'Victoria Ariadna'), (30191, 'Viktoria'), (90, 'Viktoriia'), (79511, 'Viktorija'), (26226, 'Viktoriya'), (1987, 'Viktoryia'), (27, 'Vilma Y'), (105, 'Vincenza'), (37, 'Vinciane'), (298, 'Violetta'), (519208, 'Virginie'), (71, 'Vishesh'), (64, 'Vita'), (106927, 'Vitalia'), (36714, 'Vivian'), (13041, 'Vivien'), (8918, 'Vivienne'), (22578, 'Vlada'), (997, 'Vladica'), (6470, 'Vladimira'), (1254, 'Vladislava'), (2570, 'Vladyslava'), (18781, 'Vojislava'), (1036, 'Voni'), (11653, 'Wan Ting'), (42, 'Wan Yi'), (9, 'Warona'), (40633, 'Wen Hsin'), (120, 'Wen Ling'), (613, 'Wendy Qi Wen'), (179, 'Weronika Jasmina'), (5604, 'Whitney'), (363, 'Wiktoria'), (11694, 'Wing Yau Venise'), (879, 'Wushuang'), (14578, 'Xenia'), (1445, 'Xi Yao'), (4789, 'Xiao'), (5057, 'Xiaodi'), (717, 'Xiaorong'), (1352, 'Xiaoxi'), (19495, 'Ximena'), (8744, 'Xin'), (187, 'Xin Yu'), (10705, 'Xinyu'), (109256, 'Xinyun'), (315, 'Xiyu'), (4535, 'Xu Liu'), (24, 'Ya'), (17078, 'Ya Hsuan'), (39687, 'Yafan'), (4196, 'Yan'), (39102, 'Yana'), (73, 'Yang'), (602453, 'Yanina'), (275, 'Yanni'), (32, 'Yarden'), (404915, 'Yaroslava'), (11251, 'Yasmin'), (27, 'Yasmina'), (1748, 'Yasmine'), (71, 'Yasmyn'), (648, 'Yawna'), (128509, 'Yayuk'), (47867, 'Ye Ra'), (281, 'Ye Xin'), (376, 'Yekaterina'), (1856, 'Yelena'), (966, 'Yeong Won'), (6288, 'Yevgeniya'), (19989, 'Yi'), (60646, 'Yi Fan'), (22443, 'Yi Jing'), (61839, 'Yi Miao'), (136, 'Yidi'), (24, 'Yihong'), (366, 'Yijia'), (3783, 'Ying'), (107595, 'Ying Ying'), (1380, 'Yixuan'), (1546, 'Ylena'), (1453, 'Ylona Georgiana'), (285, 'Yoko'), (1381, 'Yolande'), (182, 'Yoo Ri'), (3592, 'Yoon Young'), (677, 'Yoshimi'), (75, 'Yosr'), (242, 'You Na'), (27804, 'Ysaline'), (452, 'Yu Jin'), (9, 'Yu Tong'), (281, 'Yuan'), (772, 'Yuanyi'), (1259, 'Yue'), (21360, 'Yue Yue'), (682, 'Yuenu'), (184, 'Yujia'), (12474, 'Yuka'), (84, 'Yukako'), (505, 'Yuki'), (2191, 'Yuki Kristina'), (998, 'Yukina'), (1828, 'Yukun'), (155143, 'Yulia'), (15248, 'Yuliana'), (206375, 'Yuliya'), (20269, 'Yumi'), (229391, 'Yung Jan'), (559, 'Yuqi'), (101816, 'Yurika'), (1728, 'Yuriko'), (12693, 'Yurina'), (15071, 'Yuuki'), (45, 'Yuval'), (24279, 'Yuxuan'), (254491, 'Yvonne'), (87, 'Zaineb'), (2052, 'Zalina'), (3809, 'Zarah'), (123243, 'Zarina'), (702, 'Zeel'), (21, 'Zeynep  Sena'), (2166, 'Zhanlan'), (20236, 'Zhaoxuan'), (7, 'Zhibek'), (99, 'Zhima'), (30, 'Zhou'), (121, 'Zhuoma'), (110290, 'Zi'), (74, 'Zinovia'), (1420, 'Ziyue'), (2772, 'Zoe'), (2877, 'Zoe Gwen'), (1501, 'Zsofia'), (266251, 'Zuzana'), (2258, 'Zuzanna')]

===== Eval Round 473 =====
Database         : wta_1
Prediction SQL   : SELECT first_name, SUM(ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name
Gold SQL         : SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Aastha', 68), ('Abbi', 304), ('Abbie', 5214), ('Abigail', 115293), ('Abiodun', 120), ('Abir', 72), ('Adeliya', 490), ('Adnya', 219), ('Adriana', 28045), ('Adrienn', 107), ('Adrijana', 4619), ('Adva', 9), ('Afroditi', 156), ('Agata', 1901), ('Agata Jadwiga', 219), ('Agne', 110), ('Agnes', 390148), ('Agnese', 13717), ('Agni', 2929), ('Agnieszka', 1801033), ('Agustina', 21728), ('Agustina Elena', 158), ('Ah', 141), ('Ahlam', 85), ('Ahsha', 52), ('Ai', 10751), ('Ai Wen', 2217), ('Aida', 703), ('Aiko', 140108), ('Ailen', 288), ('Aimee', 226), ('Aina', 92), ('Ainhoa', 2433), ('Aishwarya', 96), ('Ajla', 116548), ('Akari', 11873), ('Akgul', 228538), ('Aki', 14838), ('Akiho', 83), ('Akiko', 84446), ('Akilah', 742), ('Akvile', 640), ('Alana', 385), ('Alba', 1424), ('Alberta', 238803), ('Albina', 10507), ('Aldana', 71), ('Alejandra', 1578), ('Aleksandra', 451414), ('Aleksandrina', 35957), ('Alena', 8832), ('Alessandra', 235), ('Alessia', 2524), ('Alessondra', 265), ('Alexa', 138782), ('Alexandra', 955267), ('Alexandria', 191), ('Alexia', 12829), ('Alexis', 13389), ('Aliaksandra', 61196), ('Alice', 57745), ('Alice Andrada', 2358), ('Alicia', 993), ('Alicja', 5216), ('Alina', 11393), ('Aliona', 2369), ('Alisa', 369810), ('Alison', 323527), ('Alix', 5422), ('Alize', 596901), ('Alla', 253320), ('Allie', 33054), ('Almudena', 206), ('Alona', 4052), ('Alory Regina Elorriaga', 155), ('Alyona', 25183), ('Amanda', 68207), ('Amandine', 41575), ('Amelie', 887), ('Amina', 1990), ('Aminat', 12708), ('Amira', 157), ('Amra', 60702), ('Amrita', 159), ('Amy', 10616), ('An Sophie', 51803), ('Ana', 1589674), ('Ana Bianca', 2421), ('Ana Clara', 36696), ('Ana Gabriela', 288), ('Ana Luisa', 21), ('Ana Paula', 2141), ('Ana Sofia', 15955), ('Ana Victoria', 1367), ('Anabel', 678793), ('Anaeve', 1962), ('Anais', 46908), ('Anamika', 2338), ('Anastasia', 1433335), ('Anastasia Evgenyevna', 1235), ('Anastasiia', 12), ('Anastasija', 268277), ('Anastasiya', 75850), ('Anca', 101), ('Anda', 160), ('Andie K', 605), ('Andjela', 228), ('Andra Maria', 51), ('Andrea', 920433), ('Andrea Renee', 464), ('Andreea', 1484), ('Andreea Amalia', 1365), ('Andreea Roxana', 12727), ('Andreja', 74453), ('Andressa Cristina', 72), ('Andrina', 159), ('Aneta', 202), ('Anett', 71072), ('Anette', 1657), ('Ange Oby', 36), ('Angela', 245), ('Angelica', 13643), ('Angeliki', 677), ('Angelina', 19048), ('Angelique', 1132514), ('Anhelina', 17967), ('Anhzelika', 836), ('Ani', 48811), ('Anita', 2177), ('Anja', 11596), ('Anke', 54), ('Ankita', 21599), ('Ann', 62), ('Anna', 1017069), ('Anna Arina', 6650), ('Anna Giulia', 49207), ('Anna Karolina', 107880), ('Anna Katalina', 907), ('Anna Lena', 359374), ('Anna Maria', 1427), ('Annalisa', 29442), ('Anne', 647811), ('Anne Liz', 5269), ('Anne Marie', 99), ('Anne Sophie', 33), ('Annie', 172), ('Annika', 169371), ('Anouk', 3621), ('Antonela', 280), ('Antonia', 21624), ('Antonina', 484), ('Anushka', 480), ('Ao', 4941), ('Apichaya', 126), ('Arabela', 11608), ('Arantxa', 434692), ('Aranza', 24184), ('Aravane', 383495), ('Ariadna', 980), ('Arina', 96852), ('Arina Gabriela', 3), ('Arlinda', 154), ('Arthi', 39), ('Aryna', 19446), ('Aselya', 238), ('Asha', 99), ('Ashleigh', 58741), ('Ashley', 49980), ('Ashling', 5155), ('Ashmitha', 648), ('Ashvarya', 2321), ('Asia', 48788), ('Asiya', 802), ('Assia', 141), ('Astra', 1083), ('Astrid Wanja', 269), ('Audrey', 33624), ('Avgusta', 21), ('Axana', 7), ('Ayaka', 7996), ('Ayan', 571), ('Ayano', 5173), ('Ayla', 7444), ('Aymet', 791), ('Ayu Fani', 38501), ('Ayumi', 309990), ('Azra', 11721), ('Barbara', 53401), ('Barbora', 515957), ('Basak', 26624), ('Beatrice', 27061), ('Beatriz', 98798), ('Beatriz Magdalena', 75), ('Beatriz Maria', 1920), ('Beauty', 26), ('Belen', 351), ('Belinda', 137327), ('Benedetta', 11032), ('Berfu', 2850), ('Bermet', 8441), ('Bernarda', 19092), ('Bernice', 3894), ('Berta', 814), ('Bethanie', 371662), ('Betina', 21), ('Bhuvana', 1152), ('Bianca', 63998), ('Bianka', 1213), ('Bibiane', 50184), ('Blair', 905), ('Blanca', 312), ('Blessing', 662), ('Boba', 123), ('Bojana', 283166), ('Borislava', 3470), ('Boyan', 1465), ('Brandy', 725), ('Breaunna', 676), ('Brenda', 166760), ('Brianna', 2922), ('Brienne', 12), ('Brindtha', 30), ('Britt', 2487), ('Brittany', 1119), ('Brooke', 7062), ('Brynn', 1344), ('Bunyawi', 3187), ('Busra', 537), ('Cagla', 119797), ('Caitlin', 15218), ('Camelia Elena', 9147), ('Cameron', 38), ('Camila', 202172), ('Camila Vital', 136), ('Camilla', 11714), ('Camille', 574), ('Cara', 240762), ('Carina', 90451), ('Carla', 669546), ('Carlota', 27), ('Carlotta', 562), ('Carly', 67459), ('Carmen', 8174), ('Carmen Raluca', 1077), ('Carol', 14213), ('Carolin', 9093), ('Carolina', 36889), ('Carolina Meligeni Rodrigues', 3627), ('Caroline', 2076949), ('Caroline B', 111), ('Carolyn', 72), ('Carson', 289), ('Casey', 202697), ('Catalina', 250056), ('Catherine', 4987), ('Catherine Cartan', 45884), ('Caty', 22), ('Cecilia', 11954), ('Cecilie Lundgaard', 95), ('Celine', 18824), ('Cemre', 958), ('Chalena', 4914), ('Chanel', 62861), ('Chanelle', 275364), ('Chang', 26585), ('Chanikarn', 39), ('Chantal', 15001), ('Chantelle', 187), ('Chaoyi', 15), ('Charlene', 5683), ('Charlotte', 4356), ('Chayenne', 20132), ('Chelsea', 5), ('Chelsey', 6777), ('Chen', 26779), ('Chengyiyi', 277), ('Chi Chi', 49122), ('Chi Fan', 667), ('Chia Hsien', 679), ('Chia Jung', 33301), ('Chiaki', 42773), ('Chiara', 6159), ('Chieh Yu', 34796), ('Chihiro', 15401), ('Chin Wei', 70504), ('Chinami', 13141), ('Ching Wen', 7975), ('Chiraz', 1726), ('Chisa', 358), ('Chloe', 15190), ('Chompoothip', 276), ('Christie', 24), ('Christina', 310215), ('Christine', 2438), ('Chun Mei', 12519), ('Chun Yan', 3374), ('Cindy', 31620), ('Claire', 141876), ('Clara', 116), ('Claudia', 32581), ('Claudia Antonia', 1227), ('Claudia Gianina', 934), ('Claudine', 106762), ('Clelia', 2221), ('Clemence', 1622), ('Clementina Eugenia', 538), ('Clothilde', 12304), ('Coco', 235721), ('Colomba', 129), ('Conny', 52274), ('Constance', 25166), ('Constanza', 907), ('Constanze', 18), ('Corina', 1002), ('Corinna', 102260), ('Cornelia', 4053), ('Cory Ann', 20869), ('Costanza', 1236), ('Cristiana', 7486), ('Cristina', 59412), ('Cristina Andreea', 75414), ('Cristina Madalina', 317), ('Csilla', 6256), ('Cynthia', 1034), ('Da Hye', 1417), ('Dabin', 1261), ('Dagmara', 160), ('Daiana', 8589), ('Dajana', 150), ('Dalia', 8939), ('Dalila', 48857), ('Dalma', 15935), ('Damilola', 0), ('Damini', 12), ('Damira', 30), ('Dan Ni', 639), ('Dana', 3121), ('Daneika', 1607), ('Danica', 17597), ('Daniela', 1165205), ('Daniella', 16663), ('Danielle', 40823), ('Danielle Rose', 8507), ('Danijela', 545), ('Danka', 87958), ('Daphne', 33), ('Daria', 170617), ('Darija', 41925), ('Dariya', 857), ('Darya', 163036), ('Dasha', 1923), ('Dayana', 5619), ('Dea', 7027), ('Deborah', 7605), ('Deeon', 141), ('Dejana', 9846), ('Demi', 1192), ('Denisa', 65522), ('Denise', 3298), ('Denise Antonela', 168), ('Deniz', 23620), ('Deria', 215), ('Desirae', 354), ('Desiree', 709), ('Despina', 19065), ('Despoina', 3942), ('Destanee', 9227), ('Dewi', 134), ('Dhruthi', 2738), ('Di', 9780), ('Dia', 79958), ('Diana', 119279), ('Diana Maria', 99), ('Dianne', 6369), ('Dijana', 7353), ('Dilara', 85), ('Dina', 149), ('Dinah', 67017), ('Doga Selen', 117), ('Domenica', 1614), ('Dominika', 918746), ('Dominique', 455), ('Donika', 164), ('Donna', 114098), ('Dorien', 109), ('Doroteja', 23976), ('Draginja', 392), ('Dunja', 4703), ('Ebony', 713), ('Eden', 1978), ('Edina', 249446), ('Eduarda', 11216), ('Eetee', 2446), ('Ege', 50), ('Ekaterina', 1005319), ('Ekaterine', 26897), ('Elaine', 103), ('Eleanor', 2287), ('Elena', 1247887), ('Elena Gabriela', 7772), ('Elena Teodora', 6547), ('Eleni', 439179), ('Eleonora', 405), ('Eleonore', 567), ('Eliessa', 882), ('Elina', 314747), ('Elisabeth', 4709), ('Elise', 43779), ('Elitsa', 87263), ('Elixane', 18211), ('Eliza', 480), ('Elizabeta', 536), ('Elizabeth', 20368), ('Elizabeth Anita Alexandria', 1103), ('Elizaveta', 62977), ('Elizaveta Anna', 636), ('Elke', 960), ('Ella', 526), ('Ellen', 13761), ('Ellie', 8079), ('Elodie', 90), ('Elyne', 12554), ('Ema', 11218), ('Emelyn', 12728), ('Emi', 3880), ('Emilia', 43), ('Emiliana', 1258), ('Emilie', 1440), ('Emilija', 24), ('Emiliya', 541), ('Emily', 52889), ('Emily J', 964), ('Emina', 3029), ('Emma', 85022), ('Emma Christine', 65), ('Emmanuelle', 1609), ('En Pei', 52), ('Ena', 823), ('Eri', 34570), ('Erica', 472), ('Erika', 165477), ('Erin', 5356), ('Erina', 1225), ('Esen', 69), ('Estela', 376), ('Estelle', 39989), ('Ester', 3908), ('Estrella', 126811), ('Etsuko', 7147), ('Eudice Wong', 976), ('Eugenia', 36), ('Eugenie', 204801), ('Eugeniya', 20989), ('Eva', 320083), ('Eva Marie', 41), ('Eveliina', 744), ('Evelyn', 27011), ('Evgenia', 59775), ('Evgeniya', 206981), ('Fang Ying', 7755), ('Fangzhou', 33388), ('Fanny', 11260), ('Farah', 167), ('Fatima', 10865), ('Fatimah', 898), ('Fatma', 21261), ('Fatyha', 80), ('Federica', 56817), ('Federica Joe', 44), ('Fernanda', 17587), ('Ferny', 78), ('Fiona', 18219), ('Flavia', 1011058), ('Florencia', 89361), ('Frances', 359), ('Francesca', 1306087), ('Francisca', 157), ('Francoise', 21685), ('Franziska', 994), ('Frederikke', 9), ('Freya', 6525), ('Gabriela', 102623), ('Gabriela Nicole', 468), ('Gabriella', 6179), ('Gabrielle Faith', 1093), ('Gaelle', 1000), ('Gaia', 7998), ('Gail', 38651), ('Galina', 302957), ('Ganna', 30136), ('Garbine', 412872), ('Gebriela', 143), ('Genevieve', 440), ('Georgia', 9600), ('Georgia Andreea', 1848), ('Georgiana', 48), ('Georgina', 11569), ('Ghislaine', 290), ('Giada', 677), ('Gioia', 31741), ('Giorgia', 2484), ('Giorgie', 13), ('Giovanna', 289), ('Giulia', 106520), ('Giuliana', 2935), ('Gloria', 1297), ('Gozal', 2864), ('Grace', 70613), ('Gracia', 7999), ('Greetje', 6168), ('Greta', 240195), ('Guadalupe', 14277), ('Guillermina', 576), ('Guiomar', 687), ('Gulben', 410), ('Gulchekhra', 18), ('Gulnaz', 39), ('Guzal', 775), ('Gyulnara', 238), ('Habiba', 811), ('Hae Sung', 8180), ('Haine', 294), ('Hana', 413), ('Hanna', 2782), ('Hanyu', 4643), ('Hao Chen', 9631), ('Hao Ching', 224), ('Harmony', 5944), ('Harriet', 8608), ('Haruka', 3633), ('Haruna', 1873), ('Hayley', 1679), ('Hazal', 78), ('Heather', 202780), ('Heidi', 88542), ('Helen', 1039), ('Helene', 3928), ('Hikari', 122), ('Hilda', 10191), ('Himari', 3), ('Hiroko', 27580), ('Hirono', 4368), ('Ho Ching', 2371), ('Hollie', 24), ('Hongrui', 1063), ('Hortencia', 98), ('Hsin Yuan', 120), ('Hua Chen', 7367), ('Huijie', 118), ('Hulya', 7797), ('Hye Min', 1222), ('Hyojung', 870), ('Hyun Hui', 8301), ('I Hsuan', 511), ('Iana', 395), ('Ida', 467), ('Idia', 45), ('Iga', 916), ('Ilay', 52), ('Ilka', 1142), ('Ilona', 26950), ('Ilze', 1527), ('Imane Maelle', 1676), ('Ina', 292), ('Inci', 406), ('India', 762), ('Indire', 12633), ('Indy', 17382), ('Ineke', 1358), ('Ines', 40410), ('Inger', 221), ('Ingrid', 3471), ('Ingrid Alexandra', 4766), ('Ingrid Esperanza', 10133), ('Intissar', 33), ('Ioana', 1225), ('Ioana Diana', 2403), ('Ioana Loredana', 5425), ('Ionela Andreea', 6948), ('Ipek', 39352), ('Irena', 88369), ('Irene', 3133), ('Irina', 299698), ('Irina Camelia', 293366), ('Irina Maria', 13843), ('Iris', 4743), ('Iryna', 87844), ('Isabel', 6688), ('Isabela', 714), ('Isabella', 83476), ('Isabelle', 4777), ('Iulia Maria', 74), ('Iva', 10322), ('Ivana', 100848), ('Ivania', 2094), ('Ivanka', 291), ('Iveta', 443695), ('Ivette', 543), ('Ivone', 253), ('Ivonne', 13010), ('Jacqueline', 27462), ('Jada', 64), ('Jade', 26209), ('Jaeda', 1375), ('Jaimee', 5007), ('Jaimy Gayle', 24), ('Jainy', 761), ('Jamie', 190997), ('Jamilya', 18), ('Jan', 10947), ('Jana', 268372), ('Janette', 143422), ('Janina', 12525), ('Janja', 72), ('Janneke', 861), ('Jaqueline Adina', 5416), ('Jara', 464), ('Jarmila', 333150), ('Jasmin', 34453), ('Jasmina', 43862), ('Jasmine', 14865), ('Jasmine Amber', 142), ('Jawairiah', 822), ('Jazmin', 908), ('Jazzamay', 628), ('Jeannine', 3426), ('Jelena', 2515436), ('Jennifer', 81222), ('Jenny', 1002), ('Jesika', 17819), ('Jessica', 154599), ('Jessika', 4122), ('Jessy', 923), ('Ji Hee', 7179), ('Ji Young', 8592), ('Jia', 52), ('Jia Jing', 48117), ('Jia Qi', 4612), ('Jiahui', 1553), ('Jiakang', 15), ('Jiatian', 100), ('Jiaxi', 3002), ('Jiaxue', 96), ('Jie', 610820), ('Jil Belen', 13978), ('Jil Nora', 611), ('Jill', 359013), ('Jillian', 1991), ('Jin', 15), ('Jin A', 46355), ('Jin Ju', 414), ('Jing Jing', 68925), ('Joana', 1955), ('Joanna', 472), ('Joanne', 15), ('Jodie Anna', 355), ('Johana', 40), ('Johanna', 553107), ('Jordana', 1092), ('Josepha', 2710), ('Josephine', 4980), ('Josie', 804), ('Jovana', 39270), ('Ju Eun', 3453), ('Judith', 3), ('Jule', 63), ('Julia', 891796), ('Julia Mansano', 21), ('Juliana', 414), ('Juliana Rocha', 129), ('Julie', 156531), ('Julieta Lara', 4093), ('Julita', 286), ('Julyette Maria Josephine', 1446), ('June', 114), ('Junri', 128183), ('Justina', 36), ('Justine', 39418), ('Justyna', 30304), ('Kady', 467), ('Kai Chen', 172004), ('Kai Lin', 37817), ('Kaia', 625836), ('Kaitlin', 416), ('Kaitlyn', 3905), ('Kaja', 1176), ('Kajsa', 2280), ('Kamila', 12906), ('Kamilla', 249), ('Kamonwan', 5866), ('Kana', 1536), ('Kanae', 20142), ('Kanako', 229), ('Kanami', 3724), ('Kanika', 919), ('Kaori', 8406), ('Karen', 32169), ('Kariann', 85), ('Karin', 254520), ('Karina', 9355), ('Karina Ildor', 5493), ('Karina Kristina', 410), ('Karine', 1936), ('Karis', 1003), ('Karla', 3127), ('Karman', 3193), ('Karola Patricia', 776), ('Karolayne', 465), ('Karolina', 512490), ('Karoline', 910), ('Karyn', 330), ('Kassandra', 704), ('Katalin', 112562), ('Katarina', 444303), ('Katarzyna', 93730), ('Kate', 34), ('Katerina', 160945), ('Kateryna', 435038), ('Katharina', 24595), ('Katharine', 363), ('Katherine', 7843), ('Katherine Gabriela', 1894), ('Kathinka', 15970), ('Kathrin', 141281), ('Katie', 30035), ('Katrine Isabel', 308), ('Katy', 11572), ('Katya', 515), ('Katyarina', 97), ('Kayla', 13697), ('Kaylah', 237), ('Kazusa', 10107), ('Kei', 294), ('Kelia', 324), ('Kelly', 4705), ('Kelly S', 5880), ('Kelsey', 410), ('Kennedy', 653), ('Keren', 24062), ('Keri', 894), ('Kerstin', 942), ('Khristina', 3748), ('Ki Ryang', 86), ('Kiki', 214121), ('Kim', 4580), ('Kim Alice', 12388), ('Kimberley', 5393), ('Kimberly', 4831), ('Kimika', 272), ('Kimiko', 270102), ('Kinnie', 15102), ('Kirsten', 383077), ('Kirsten Andrea', 462), ('Klaartje', 5818), ('Klara', 568191), ('Klaudia', 4809), ('Komola', 701), ('Korina', 21417), ('Kotomi', 4962), ('Krista', 17577), ('Kristie', 34647), ('Kristina', 601693), ('Kristina N', 555), ('Kristy', 1899), ('Kristyna', 148728), ('Ksenia', 371140), ('Kseniia', 298), ('Ksenija', 625), ('Kumiko', 56212), ('Kurumi', 177170), ('Kveta', 210101), ('Kwan Yau', 403), ('Kyle', 3200), ('Kylie', 1236), ('Kyoka', 9036), ('Kyra', 102022), ('Kyung Mi', 26059), ('Laetitia', 6078), ('Laili', 595), ('Lamis', 456), ('Lara', 177458), ('Larikah', 255), ('Laura', 578964), ('Laura D', 281), ('Laura Ioana', 33822), ('Laura Sofia', 97), ('Lauren', 244807), ('Lauryn', 207), ('Lavinia', 23897), ('Laylo', 39), ('Layne', 22), ('Lea', 4197), ('Leah', 152), ('Lee', 733), ('Lena', 27997), ('Lena Marie', 14942), ('Lenka', 164900), ('Leolia', 750), ('Leonie', 672), ('Lesedi Sheya', 286), ('Lesia', 225987), ('Lesley', 42925), ('Leslie', 173), ('Leticia', 45115), ('Leticia Garcia', 87), ('Leylah Annie', 48), ('Li', 1696), ('Liana Gabriela', 59997), ('Libby', 2362), ('Libi', 522), ('Lidia', 169), ('Lidziya', 6809), ('Liezel', 39782), ('Liga', 23411), ('Lilla', 1960), ('Lin', 40341), ('Lina', 91117), ('Linda', 4216), ('Lindsay', 142454), ('Lindsey', 500), ('Ling', 64525), ('Liniques', 72), ('Linnea', 697), ('Lisa', 594217), ('Lisa Maria', 7898), ('Lisa Marie', 1583), ('Lisanne', 8284), ('Liubov', 2662), ('Livia', 128), ('Liz Tatiane', 2216), ('Lizaveta', 135), ('Lizette', 11623), ('Lorenza', 33), ('Lorraine M', 40), ('Lou', 10167), ('Loudmilla', 6), ('Louisa', 50700), ('Louise', 1633), ('Lourdes', 371035), ('Lu', 3445), ('Luca', 1013), ('Lucia', 17185), ('Luciana', 8305), ('Lucie', 1108372), ('Lucrezia', 1589), ('Lucy', 6542), ('Ludmila', 645), ('Ludmilla', 1187), ('Luisa', 1671), ('Luisa Marie', 1822), ('Luksika', 77519), ('Lulu', 304), ('Luna', 15), ('Lusine', 377), ('Lutfiye', 876), ('Lyann', 30), ('Lynn', 837), ('Lyudmyla', 54172), ('Macall', 12379), ('Macarena', 2133), ('Madalina', 62938), ('Maddison', 2434), ('Madeleine', 715), ('Madeline', 147), ('Madina', 6), ('Madison', 476768), ('Madrie', 2266), ('Maegan', 525), ('Mafalda', 163), ('Maftuna', 54), ('Magali', 1917), ('Magalie', 511), ('Magda', 103659), ('Magdalena', 401857), ('Magy', 756), ('Mahak', 154), ('Mahitha', 395), ('Mai', 19173), ('Maia', 1235), ('Maia A', 12), ('Maiko', 11320), ('Maileen', 83), ('Mailen', 39523), ('Maja', 1067), ('Makiho', 5592), ('Makoto', 14129), ('Malene', 316), ('Malika', 323), ('Malin', 2489), ('Mallaurie', 688), ('Mallory', 44497), ('Malou', 3073), ('Mami', 96), ('Man Ying Maggie', 102), ('Mana', 9593), ('Mananchaya', 15), ('Manca', 2070), ('Mandy', 193767), ('Manisha', 3112), ('Manon', 14608), ('Manya', 93), ('Mara', 702), ('Marcela', 16790), ('Marcela Guimaraes', 683), ('Marcelina', 33), ('Marcella', 13037), ('Margalita', 99836), ('Margarida', 1997), ('Margarita', 78265), ('Margaux', 905), ('Margot', 4787), ('Mari', 38086), ('Maria', 3613355), ('Maria Agustina', 185), ('Maria Andrea', 323), ('Maria Camila', 148), ('Maria Constanza De Las Mercedes', 1892), ('Maria Del Rosario', 296), ('Maria Elena', 296736), ('Maria Fernanda', 141257), ('Maria Jesus', 294), ('Maria Joao', 72682), ('Maria Jose', 413759), ('Maria Lourdes', 156), ('Maria Paulina', 1388), ('Maria Teresa', 106375), ('Mariam', 4060), ('Mariana', 201258), ('Marianna', 10178), ('Marianne', 1090), ('Mariaryeni', 226), ('Marie', 25496), ('Marie Eve', 114687), ('Mariia', 206), ('Marija', 20481), ('Marijana', 3), ('Marina', 362372), ('Marine', 4314), ('Marion', 1272285), ('Mariona', 4), ('Marisa', 1026), ('Mariya', 154484), ('Marketa', 18286), ('Marlies', 1624), ('Marrit', 1339), ('Marta', 267679), ('Marta Huqi', 778), ('Martha', 153), ('Martina', 109192), ('Mary', 653), ('Mary Ann', 102), ('Maryna', 85425), ('Masa', 117472), ('Mathilde', 245139), ('Matilda', 3466), ('Maud', 210), ('Maureen', 219), ('Maurien', 138), ('Maxine', 390), ('May', 225), ('Maya', 23668), ('Mayar', 1788), ('Mayo', 32445), ('Mayya', 9064), ('Megan', 13254), ('Megumi', 407), ('Mei Xu', 40), ('Meiling', 417), ('Meiqi', 96), ('Melanie', 385636), ('Melany Solange', 97), ('Melina', 2609), ('Melinda', 290299), ('Melis', 20196), ('Melisa', 340), ('Melissa', 200), ('Melissa Ishuan', 171), ('Meng Ning', 542), ('Mercedes', 48), ('Merel', 101), ('Meritxell', 284), ('Mervana', 102693), ('Mi', 24569), ('Mi Jeong', 176), ('Mi Rae', 1858), ('Mi Zhuoma', 72), ('Mia Nicole', 1098), ('Micaela', 230), ('Michaela', 76586), ('Michaella', 242619), ('Michela', 90), ('Michele Alexandra', 596), ('Michelle', 160164), ('Michika', 3657), ('Mihaela', 69242), ('Mihaela Lorena', 15), ('Miharu', 21205), ('Mihika', 427), ('Mihoki', 201), ('Miki', 24542), ('Mila', 107), ('Milagros', 42), ('Milana', 14123), ('Milena', 279), ('Milica', 63), ('Min', 1884), ('Min Hwa', 9938), ('Minami', 96), ('Mira', 1626), ('Mirabelle', 1977), ('Miranda', 180), ('Miriam', 3825), ('Miriam Bianca', 1458), ('Miriana', 1180), ('Mirjam', 272), ('Mirjana', 331434), ('Misa', 55981), ('Misaki', 203782), ('Mitsumi', 309), ('Miyabi', 22840), ('Miyu', 23968), ('Mizuno', 2927), ('Molly', 565), ('Momoko', 2061), ('Mona', 282445), ('Monica', 587309), ('Monika', 1240), ('Monique', 114104), ('Montserrat', 23564), ('Morgane', 6906), ('Moulika', 15), ('Mouna', 12), ('Moyuka', 32), ('Muazzez', 6), ('Muge', 162), ('Myrtille', 43550), ('Na', 1358928), ('Na Lae', 26185), ('Na Ri', 19223), ('Nadezda', 5027), ('Nadia', 1401125), ('Nadiya', 56596), ('Nadja', 2661), ('Nagi', 1535), ('Naiktha', 4380), ('Naima', 440), ('Nam Yeon', 259), ('Nan Nan', 3094), ('Nanuli', 16494), ('Nao', 59671), ('Naoko', 857), ('Naomi', 163239), ('Napatsakorn', 1945), ('Nastassia', 72), ('Nastassja', 65152), ('Nastja', 29250), ('Natalia', 97400), ('Natalie', 120995), ('Natalija', 13686), ('Nataliya', 33), ('Natasa', 14212), ('Natasha', 15365), ('Natela', 16303), ('Natella', 649), ('Nathalia', 28098), ('Nathaly', 13241), ('Natia', 2526), ('Natsumi', 37981), ('Nattawadee', 224), ('Naz', 251), ('Nazari', 980), ('Neda', 9536), ('Nelise', 142), ('Nermeen', 279), ('Nevena', 170), ('Nicha', 30972), ('Nicky', 2531), ('Nicola', 33550), ('Nicole', 447434), ('Nicoleta Catalina', 8146), ('Nicolette', 9627), ('Nidhi', 5425), ('Nigina', 47651), ('Nika', 9120), ('Nikita', 22), ('Nikki', 614), ('Nikol', 491), ('Nikola', 78513), ('Nina', 201173), ('Nina Isabella', 115), ('Nives', 2706), ('Noel', 1558), ('Noelia', 2025), ('Noelle', 1795), ('Nonna', 134), ('Noppawan', 73589), ('Nora', 1082), ('Nour', 760), ('Nozomi', 1333), ('Nudnida', 63013), ('Nungnadda', 24523), ('Nuria', 259116), ('Oana', 1096), ('Oana Georgeta', 4294), ('Oceane', 56853), ('Ofri', 5372), ('Oksana', 58279), ('Ola', 3497), ('Olawaseun', 2), ('Olaya', 40), ('Oleksandra', 8700), ('Olena', 484), ('Olesya', 3811), ('Olga', 773929), ('Olivia', 119756), ('Oliwia', 363), ('Ons', 56242), ('Ornella', 2133), ('Oyku', 382), ('Paige Mary', 147), ('Pamela', 241), ('Panna', 1446), ('Paola', 403127), ('Parris', 209), ('Patcharin', 1188), ('Patricia', 197904), ('Patricia Maria', 43755), ('Patrycja', 17514), ('Patty', 7323), ('Paula', 172431), ('Paula Andrea', 269), ('Paula Catalina', 3714), ('Paula Cristina', 37384), ('Paulina', 3208), ('Pauline', 313187), ('Pavla', 4128), ('Peangtarn', 26280), ('Peggy', 1016), ('Pei Chi', 8900), ('Pei Hsuan', 24), ('Pei Ju', 181), ('Pemra', 60908), ('Pernilla', 6573), ('Petia', 1832), ('Petra', 1958404), ('Phenomena', 3), ('Phillis', 664), ('Pia', 10859), ('Piia', 21340), ('Pilar', 6404), ('Pippa', 243), ('Plobrung', 934), ('Polina', 76747), ('Polona', 325216), ('Poojashree', 13006), ('Pranjala', 1214), ('Prarthana G', 5687), ('Prerna', 9318), ('Priscila', 510), ('Priscilla', 8203), ('Qiang', 116857), ('Qianhui', 683), ('Qianqian', 641), ('Qiu Yu', 2034), ('Quinn', 646), ('Quirine', 22978), ('Rachael', 2592), ('Rachel', 469), ('Radina', 699), ('Rafaela', 228), ('Ralina', 40), ('Raluca', 148701), ('Raluca Elena', 9202), ('Raluca Georgiana', 4258), ('Ramu', 443), ('Ramya', 161), ('Ran', 14709), ('Rana', 9), ('Raquel', 30401), ('Rashmi', 741), ('Ratnika', 957), ('Raveena', 5387), ('Rebeca', 168), ('Rebecca', 165013), ('Rebeka', 5803), ('Regina', 122331), ('Reina', 64), ('Reka Luca', 66271), ('Remi', 38116), ('Renata', 201856), ('Ria', 5566), ('Rianna', 984), ('Richel', 84184), ('Rika', 141257), ('Riko', 23195), ('Rio', 556), ('Risa', 62252), ('Rishika', 8448), ('Rita', 1401), ('Riya', 2634), ('Roberta', 809611), ('Robin', 12295), ('Robyn', 1103), ('Rocio', 16886), ('Romana', 29214), ('Romana Caroline', 17020), ('Romina', 253471), ('Romy', 911), ('Rona', 308), ('Ronit', 3165), ('Ronke', 49), ('Roosh', 28), ('Rosa', 111), ('Rosalia', 803), ('Rosalie', 880), ('Rosie', 336), ('Roxane', 38793), ('Rui', 24), ('Rushmi', 27452), ('Rutuja', 3642), ('Ryann', 597), ('Saana', 195), ('Sabastiani', 780), ('Sabina', 49784), ('Sabina Elena', 27), ('Sabine', 590911), ('Sabrina', 6810), ('Sacha', 78204), ('Sachia', 49767), ('Sachie', 42676), ('Sadafmoh', 2275), ('Sai Samhitha', 1034), ('Saisai', 113359), ('Sakiko', 9338), ('Sally', 53480), ('Salma', 66), ('Samantha', 1437656), ('Samira', 2020), ('Sanae', 354), ('Sanaz', 17975), ('Sandra', 266197), ('Sandy', 224), ('Sang Hee', 1277), ('Sania', 272889), ('Sara', 914981), ('Sarah', 78461), ('Sarah Beth', 1270), ('Sarah Rebecca', 13064), ('Sarahi', 461), ('Sarai Delfina', 148), ('Saray', 2061), ('Sari', 464), ('Sarlota', 27), ('Sarvinoz', 178), ('Sasa', 316), ('Saska', 2641), ('Satsuki', 906), ('Savannah', 70), ('Schena', 148), ('Se Hyun', 143), ('Se Jin', 681), ('Sean', 75), ('Seda', 1469), ('Seira', 144), ('Selin', 169), ('Seo Kyung', 6564), ('Seone', 1312), ('Serena', 4232828), ('Sesil', 208108), ('Seung Yeon', 6650), ('Severine', 192296), ('Shahar', 662926), ('Shakhlo', 2122), ('Shakhnoza', 198), ('Shangqing', 111), ('Shanshan', 2378), ('Shao Yuan', 1363), ('Sharmada', 4106), ('Sharon', 117825), ('Sharon Sanchana', 522), ('Shelby', 102140), ('Shelly', 142), ('Sheng Nan', 53610), ('Sherazad', 22977), ('Sherry', 801), ('Shiho', 39960), ('Shilin', 9634), ('Shiori', 18), ('Shir', 117), ('Shiran', 236), ('Shivika', 4611), ('Shou Na', 105), ('Shreya', 6), ('Shu Ying', 1483), ('Shuai', 913829), ('Shuko', 46124), ('Shuo', 597), ('Shuyue', 336), ('Shweta', 3255), ('Si Qi', 531), ('Silvia', 221695), ('Simona', 724638), ('Simone', 1149), ('Simran Kaur', 467), ('Sina', 10360), ('Sinead', 688), ('Sing Le', 95), ('Siqi', 716), ('Sirui', 276), ('Siyu', 87), ('Sloane', 352458), ('Smriti', 96), ('Sneha', 134), ('Snehadevi S', 2820), ('So Jung', 47282), ('So Ra', 18210), ('Sofia', 484140), ('Sofico', 336), ('Sofie', 10539), ('Sofiya', 18371), ('Sofya', 9180), ('Sohyun', 108), ('Sonia', 480), ('Sonja', 4499), ('Sophia', 96), ('Sophie', 39307), ('Sorana', 457043), ('Sowjanya', 2961), ('Spurti', 159), ('Sri Vaishnavi', 1744), ('Stamatia', 8072), ('Stanislava', 49412), ('Stefana', 497), ('Stefani', 126), ('Stefania', 24897), ('Stefanie', 247237), ('Steffi', 3085), ('Stephanie', 608309), ('Stephanie Mariel', 1397), ('Storm', 21152), ('Su Jeong', 33672), ('Su Wei', 274936), ('Suellen', 320), ('Sultan', 1544), ('Sun Jung', 6591), ('Sunae', 15), ('Sunam', 3594), ('Sung Hee', 29852), ('Susan', 502), ('Susanne', 16276), ('Suzan', 344), ('Suzuho', 324), ('Suzy', 1054), ('Svenja', 6341), ('Svetlana', 1906587), ('Sviatlana', 11201), ('Sybille', 581), ('Sylvia', 1626), ('Sylwia', 8268), ('Syna', 9001), ('Szabina', 2127), ('Tadeja', 83659), ('Taisiya', 1050), ('Talya', 45), ('Tamachan', 843), ('Tamar', 60), ('Tamara', 54140), ('Tamari', 304), ('Tamarine', 594281), ('Tamaryn', 40060), ('Tamira', 322202), ('Tammi', 26077), ('Tanaporn', 764), ('Tanya', 1229), ('Tara', 54798), ('Tatia', 42), ('Tatiana', 34795), ('Tatjana', 230262), ('Tatsiana', 1289), ('Tayisiya', 5051), ('Taylor', 38850), ('Tea', 2127), ('Teliana', 112570), ('Tena', 12402), ('Teodora', 41792), ('Tereza', 193362), ('Terri', 18), ('Tess', 7165), ('Tessah', 9116), ('Tetiana', 75337), ('Tetyana', 43020), ('Thai Sa Grana', 706), ('Theo', 2249), ('Theresa', 377), ('Tijana', 333), ('Timea', 612072), ('Tina', 57585), ('Tinatin', 476), ('Ting Fei', 8145), ('Ting Jr', 8676), ('Tingting', 151), ('Tjasa', 3361), ('Tomoko', 7431), ('Tori', 10630), ('Tornado Alicia', 1864), ('Trang', 1884), ('Treta', 736), ('Tsvetana', 456422), ('Tyra', 4543), ('Ulrikke', 27118), ('Ulyana', 2400), ('Urszula', 275255), ('Ushna', 413), ('Usue Maitane', 7874), ('Valentina', 338), ('Valentine', 9926), ('Valentini', 15198), ('Valentyna', 47854), ('Valeria', 159155), ('Valerie', 6146), ('Valeriya', 16621), ('Vanda', 10087), ('Vanesa', 30669), ('Vanessa', 71645), ('Vania', 299530), ('Vaniya', 255), ('Vanja', 291), ('Varatchaya', 54340), ('Varunya', 3623), ('Varvara', 401409), ('Vasilisa', 42527), ('Vaszilisza', 3763), ('Vendula', 2221), ('Venus', 2875425), ('Vera', 1929137), ('Verena', 3018), ('Veronica', 84543), ('Veronica M', 1678), ('Veronika', 73192), ('Vesna', 169500), ('Vicky', 77), ('Victoire', 454), ('Victoria', 2142854), ('Victoria Ariadna', 106), ('Viktoria', 30191), ('Viktoriia', 90), ('Viktorija', 79511), ('Viktoriya', 26226), ('Viktoryia', 1987), ('Vilma Y', 27), ('Vincenza', 105), ('Vinciane', 37), ('Violetta', 298), ('Virginie', 519208), ('Vishesh', 71), ('Vita', 64), ('Vitalia', 106927), ('Vivian', 36714), ('Vivien', 13041), ('Vivienne', 8918), ('Vlada', 22578), ('Vladica', 997), ('Vladimira', 6470), ('Vladislava', 1254), ('Vladyslava', 2570), ('Vojislava', 18781), ('Voni', 1036), ('Wan Ting', 11653), ('Wan Yi', 42), ('Warona', 9), ('Wen Hsin', 40633), ('Wen Ling', 120), ('Wendy Qi Wen', 613), ('Weronika Jasmina', 179), ('Whitney', 5604), ('Wiktoria', 363), ('Wing Yau Venise', 11694), ('Wushuang', 879), ('Xenia', 14578), ('Xi Yao', 1445), ('Xiao', 4789), ('Xiaodi', 5057), ('Xiaorong', 717), ('Xiaoxi', 1352), ('Ximena', 19495), ('Xin', 8744), ('Xin Yu', 187), ('Xinyu', 10705), ('Xinyun', 109256), ('Xiyu', 315), ('Xu Liu', 4535), ('Ya', 24), ('Ya Hsuan', 17078), ('Yafan', 39687), ('Yan', 4196), ('Yana', 39102), ('Yang', 73), ('Yanina', 602453), ('Yanni', 275), ('Yarden', 32), ('Yaroslava', 404915), ('Yasmin', 11251), ('Yasmina', 27), ('Yasmine', 1748), ('Yasmyn', 71), ('Yawna', 648), ('Yayuk', 128509), ('Ye Ra', 47867), ('Ye Xin', 281), ('Yekaterina', 376), ('Yelena', 1856), ('Yeong Won', 966), ('Yevgeniya', 6288), ('Yi', 19989), ('Yi Fan', 60646), ('Yi Jing', 22443), ('Yi Miao', 61839), ('Yidi', 136), ('Yihong', 24), ('Yijia', 366), ('Ying', 3783), ('Ying Ying', 107595), ('Yixuan', 1380), ('Ylena', 1546), ('Ylona Georgiana', 1453), ('Yoko', 285), ('Yolande', 1381), ('Yoo Ri', 182), ('Yoon Young', 3592), ('Yoshimi', 677), ('Yosr', 75), ('You Na', 242), ('Ysaline', 27804), ('Yu Jin', 452), ('Yu Tong', 9), ('Yuan', 281), ('Yuanyi', 772), ('Yue', 1259), ('Yue Yue', 21360), ('Yuenu', 682), ('Yujia', 184), ('Yuka', 12474), ('Yukako', 84), ('Yuki', 505), ('Yuki Kristina', 2191), ('Yukina', 998), ('Yukun', 1828), ('Yulia', 155143), ('Yuliana', 15248), ('Yuliya', 206375), ('Yumi', 20269), ('Yung Jan', 229391), ('Yuqi', 559), ('Yurika', 101816), ('Yuriko', 1728), ('Yurina', 12693), ('Yuuki', 15071), ('Yuval', 45), ('Yuxuan', 24279), ('Yvonne', 254491), ('Zaineb', 87), ('Zalina', 2052), ('Zarah', 3809), ('Zarina', 123243), ('Zeel', 702), ('Zeynep  Sena', 21), ('Zhanlan', 2166), ('Zhaoxuan', 20236), ('Zhibek', 7), ('Zhima', 99), ('Zhou', 30), ('Zhuoma', 121), ('Zi', 110290), ('Zinovia', 74), ('Ziyue', 1420), ('Zoe', 2772), ('Zoe Gwen', 2877), ('Zsofia', 1501), ('Zuzana', 266251), ('Zuzanna', 2258)]
Gold Output      : [(68, 'Aastha'), (304, 'Abbi'), (5214, 'Abbie'), (115293, 'Abigail'), (120, 'Abiodun'), (72, 'Abir'), (490, 'Adeliya'), (219, 'Adnya'), (28045, 'Adriana'), (107, 'Adrienn'), (4619, 'Adrijana'), (9, 'Adva'), (156, 'Afroditi'), (1901, 'Agata'), (219, 'Agata Jadwiga'), (110, 'Agne'), (390148, 'Agnes'), (13717, 'Agnese'), (2929, 'Agni'), (1801033, 'Agnieszka'), (21728, 'Agustina'), (158, 'Agustina Elena'), (141, 'Ah'), (85, 'Ahlam'), (52, 'Ahsha'), (10751, 'Ai'), (2217, 'Ai Wen'), (703, 'Aida'), (140108, 'Aiko'), (288, 'Ailen'), (226, 'Aimee'), (92, 'Aina'), (2433, 'Ainhoa'), (96, 'Aishwarya'), (116548, 'Ajla'), (11873, 'Akari'), (228538, 'Akgul'), (14838, 'Aki'), (83, 'Akiho'), (84446, 'Akiko'), (742, 'Akilah'), (640, 'Akvile'), (385, 'Alana'), (1424, 'Alba'), (238803, 'Alberta'), (10507, 'Albina'), (71, 'Aldana'), (1578, 'Alejandra'), (451414, 'Aleksandra'), (35957, 'Aleksandrina'), (8832, 'Alena'), (235, 'Alessandra'), (2524, 'Alessia'), (265, 'Alessondra'), (138782, 'Alexa'), (955267, 'Alexandra'), (191, 'Alexandria'), (12829, 'Alexia'), (13389, 'Alexis'), (61196, 'Aliaksandra'), (57745, 'Alice'), (2358, 'Alice Andrada'), (993, 'Alicia'), (5216, 'Alicja'), (11393, 'Alina'), (2369, 'Aliona'), (369810, 'Alisa'), (323527, 'Alison'), (5422, 'Alix'), (596901, 'Alize'), (253320, 'Alla'), (33054, 'Allie'), (206, 'Almudena'), (4052, 'Alona'), (155, 'Alory Regina Elorriaga'), (25183, 'Alyona'), (68207, 'Amanda'), (41575, 'Amandine'), (887, 'Amelie'), (1990, 'Amina'), (12708, 'Aminat'), (157, 'Amira'), (60702, 'Amra'), (159, 'Amrita'), (10616, 'Amy'), (51803, 'An Sophie'), (1589674, 'Ana'), (2421, 'Ana Bianca'), (36696, 'Ana Clara'), (288, 'Ana Gabriela'), (21, 'Ana Luisa'), (2141, 'Ana Paula'), (15955, 'Ana Sofia'), (1367, 'Ana Victoria'), (678793, 'Anabel'), (1962, 'Anaeve'), (46908, 'Anais'), (2338, 'Anamika'), (1433335, 'Anastasia'), (1235, 'Anastasia Evgenyevna'), (12, 'Anastasiia'), (268277, 'Anastasija'), (75850, 'Anastasiya'), (101, 'Anca'), (160, 'Anda'), (605, 'Andie K'), (228, 'Andjela'), (51, 'Andra Maria'), (920433, 'Andrea'), (464, 'Andrea Renee'), (1484, 'Andreea'), (1365, 'Andreea Amalia'), (12727, 'Andreea Roxana'), (74453, 'Andreja'), (72, 'Andressa Cristina'), (159, 'Andrina'), (202, 'Aneta'), (71072, 'Anett'), (1657, 'Anette'), (36, 'Ange Oby'), (245, 'Angela'), (13643, 'Angelica'), (677, 'Angeliki'), (19048, 'Angelina'), (1132514, 'Angelique'), (17967, 'Anhelina'), (836, 'Anhzelika'), (48811, 'Ani'), (2177, 'Anita'), (11596, 'Anja'), (54, 'Anke'), (21599, 'Ankita'), (62, 'Ann'), (1017069, 'Anna'), (6650, 'Anna Arina'), (49207, 'Anna Giulia'), (107880, 'Anna Karolina'), (907, 'Anna Katalina'), (359374, 'Anna Lena'), (1427, 'Anna Maria'), (29442, 'Annalisa'), (647811, 'Anne'), (5269, 'Anne Liz'), (99, 'Anne Marie'), (33, 'Anne Sophie'), (172, 'Annie'), (169371, 'Annika'), (3621, 'Anouk'), (280, 'Antonela'), (21624, 'Antonia'), (484, 'Antonina'), (480, 'Anushka'), (4941, 'Ao'), (126, 'Apichaya'), (11608, 'Arabela'), (434692, 'Arantxa'), (24184, 'Aranza'), (383495, 'Aravane'), (980, 'Ariadna'), (96852, 'Arina'), (3, 'Arina Gabriela'), (154, 'Arlinda'), (39, 'Arthi'), (19446, 'Aryna'), (238, 'Aselya'), (99, 'Asha'), (58741, 'Ashleigh'), (49980, 'Ashley'), (5155, 'Ashling'), (648, 'Ashmitha'), (2321, 'Ashvarya'), (48788, 'Asia'), (802, 'Asiya'), (141, 'Assia'), (1083, 'Astra'), (269, 'Astrid Wanja'), (33624, 'Audrey'), (21, 'Avgusta'), (7, 'Axana'), (7996, 'Ayaka'), (571, 'Ayan'), (5173, 'Ayano'), (7444, 'Ayla'), (791, 'Aymet'), (38501, 'Ayu Fani'), (309990, 'Ayumi'), (11721, 'Azra'), (53401, 'Barbara'), (515957, 'Barbora'), (26624, 'Basak'), (27061, 'Beatrice'), (98798, 'Beatriz'), (75, 'Beatriz Magdalena'), (1920, 'Beatriz Maria'), (26, 'Beauty'), (351, 'Belen'), (137327, 'Belinda'), (11032, 'Benedetta'), (2850, 'Berfu'), (8441, 'Bermet'), (19092, 'Bernarda'), (3894, 'Bernice'), (814, 'Berta'), (371662, 'Bethanie'), (21, 'Betina'), (1152, 'Bhuvana'), (63998, 'Bianca'), (1213, 'Bianka'), (50184, 'Bibiane'), (905, 'Blair'), (312, 'Blanca'), (662, 'Blessing'), (123, 'Boba'), (283166, 'Bojana'), (3470, 'Borislava'), (1465, 'Boyan'), (725, 'Brandy'), (676, 'Breaunna'), (166760, 'Brenda'), (2922, 'Brianna'), (12, 'Brienne'), (30, 'Brindtha'), (2487, 'Britt'), (1119, 'Brittany'), (7062, 'Brooke'), (1344, 'Brynn'), (3187, 'Bunyawi'), (537, 'Busra'), (119797, 'Cagla'), (15218, 'Caitlin'), (9147, 'Camelia Elena'), (38, 'Cameron'), (202172, 'Camila'), (136, 'Camila Vital'), (11714, 'Camilla'), (574, 'Camille'), (240762, 'Cara'), (90451, 'Carina'), (669546, 'Carla'), (27, 'Carlota'), (562, 'Carlotta'), (67459, 'Carly'), (8174, 'Carmen'), (1077, 'Carmen Raluca'), (14213, 'Carol'), (9093, 'Carolin'), (36889, 'Carolina'), (3627, 'Carolina Meligeni Rodrigues'), (2076949, 'Caroline'), (111, 'Caroline B'), (72, 'Carolyn'), (289, 'Carson'), (202697, 'Casey'), (250056, 'Catalina'), (4987, 'Catherine'), (45884, 'Catherine Cartan'), (22, 'Caty'), (11954, 'Cecilia'), (95, 'Cecilie Lundgaard'), (18824, 'Celine'), (958, 'Cemre'), (4914, 'Chalena'), (62861, 'Chanel'), (275364, 'Chanelle'), (26585, 'Chang'), (39, 'Chanikarn'), (15001, 'Chantal'), (187, 'Chantelle'), (15, 'Chaoyi'), (5683, 'Charlene'), (4356, 'Charlotte'), (20132, 'Chayenne'), (5, 'Chelsea'), (6777, 'Chelsey'), (26779, 'Chen'), (277, 'Chengyiyi'), (49122, 'Chi Chi'), (667, 'Chi Fan'), (679, 'Chia Hsien'), (33301, 'Chia Jung'), (42773, 'Chiaki'), (6159, 'Chiara'), (34796, 'Chieh Yu'), (15401, 'Chihiro'), (70504, 'Chin Wei'), (13141, 'Chinami'), (7975, 'Ching Wen'), (1726, 'Chiraz'), (358, 'Chisa'), (15190, 'Chloe'), (276, 'Chompoothip'), (24, 'Christie'), (310215, 'Christina'), (2438, 'Christine'), (12519, 'Chun Mei'), (3374, 'Chun Yan'), (31620, 'Cindy'), (141876, 'Claire'), (116, 'Clara'), (32581, 'Claudia'), (1227, 'Claudia Antonia'), (934, 'Claudia Gianina'), (106762, 'Claudine'), (2221, 'Clelia'), (1622, 'Clemence'), (538, 'Clementina Eugenia'), (12304, 'Clothilde'), (235721, 'Coco'), (129, 'Colomba'), (52274, 'Conny'), (25166, 'Constance'), (907, 'Constanza'), (18, 'Constanze'), (1002, 'Corina'), (102260, 'Corinna'), (4053, 'Cornelia'), (20869, 'Cory Ann'), (1236, 'Costanza'), (7486, 'Cristiana'), (59412, 'Cristina'), (75414, 'Cristina Andreea'), (317, 'Cristina Madalina'), (6256, 'Csilla'), (1034, 'Cynthia'), (1417, 'Da Hye'), (1261, 'Dabin'), (160, 'Dagmara'), (8589, 'Daiana'), (150, 'Dajana'), (8939, 'Dalia'), (48857, 'Dalila'), (15935, 'Dalma'), (0, 'Damilola'), (12, 'Damini'), (30, 'Damira'), (639, 'Dan Ni'), (3121, 'Dana'), (1607, 'Daneika'), (17597, 'Danica'), (1165205, 'Daniela'), (16663, 'Daniella'), (40823, 'Danielle'), (8507, 'Danielle Rose'), (545, 'Danijela'), (87958, 'Danka'), (33, 'Daphne'), (170617, 'Daria'), (41925, 'Darija'), (857, 'Dariya'), (163036, 'Darya'), (1923, 'Dasha'), (5619, 'Dayana'), (7027, 'Dea'), (7605, 'Deborah'), (141, 'Deeon'), (9846, 'Dejana'), (1192, 'Demi'), (65522, 'Denisa'), (3298, 'Denise'), (168, 'Denise Antonela'), (23620, 'Deniz'), (215, 'Deria'), (354, 'Desirae'), (709, 'Desiree'), (19065, 'Despina'), (3942, 'Despoina'), (9227, 'Destanee'), (134, 'Dewi'), (2738, 'Dhruthi'), (9780, 'Di'), (79958, 'Dia'), (119279, 'Diana'), (99, 'Diana Maria'), (6369, 'Dianne'), (7353, 'Dijana'), (85, 'Dilara'), (149, 'Dina'), (67017, 'Dinah'), (117, 'Doga Selen'), (1614, 'Domenica'), (918746, 'Dominika'), (455, 'Dominique'), (164, 'Donika'), (114098, 'Donna'), (109, 'Dorien'), (23976, 'Doroteja'), (392, 'Draginja'), (4703, 'Dunja'), (713, 'Ebony'), (1978, 'Eden'), (249446, 'Edina'), (11216, 'Eduarda'), (2446, 'Eetee'), (50, 'Ege'), (1005319, 'Ekaterina'), (26897, 'Ekaterine'), (103, 'Elaine'), (2287, 'Eleanor'), (1247887, 'Elena'), (7772, 'Elena Gabriela'), (6547, 'Elena Teodora'), (439179, 'Eleni'), (405, 'Eleonora'), (567, 'Eleonore'), (882, 'Eliessa'), (314747, 'Elina'), (4709, 'Elisabeth'), (43779, 'Elise'), (87263, 'Elitsa'), (18211, 'Elixane'), (480, 'Eliza'), (536, 'Elizabeta'), (20368, 'Elizabeth'), (1103, 'Elizabeth Anita Alexandria'), (62977, 'Elizaveta'), (636, 'Elizaveta Anna'), (960, 'Elke'), (526, 'Ella'), (13761, 'Ellen'), (8079, 'Ellie'), (90, 'Elodie'), (12554, 'Elyne'), (11218, 'Ema'), (12728, 'Emelyn'), (3880, 'Emi'), (43, 'Emilia'), (1258, 'Emiliana'), (1440, 'Emilie'), (24, 'Emilija'), (541, 'Emiliya'), (52889, 'Emily'), (964, 'Emily J'), (3029, 'Emina'), (85022, 'Emma'), (65, 'Emma Christine'), (1609, 'Emmanuelle'), (52, 'En Pei'), (823, 'Ena'), (34570, 'Eri'), (472, 'Erica'), (165477, 'Erika'), (5356, 'Erin'), (1225, 'Erina'), (69, 'Esen'), (376, 'Estela'), (39989, 'Estelle'), (3908, 'Ester'), (126811, 'Estrella'), (7147, 'Etsuko'), (976, 'Eudice Wong'), (36, 'Eugenia'), (204801, 'Eugenie'), (20989, 'Eugeniya'), (320083, 'Eva'), (41, 'Eva Marie'), (744, 'Eveliina'), (27011, 'Evelyn'), (59775, 'Evgenia'), (206981, 'Evgeniya'), (7755, 'Fang Ying'), (33388, 'Fangzhou'), (11260, 'Fanny'), (167, 'Farah'), (10865, 'Fatima'), (898, 'Fatimah'), (21261, 'Fatma'), (80, 'Fatyha'), (56817, 'Federica'), (44, 'Federica Joe'), (17587, 'Fernanda'), (78, 'Ferny'), (18219, 'Fiona'), (1011058, 'Flavia'), (89361, 'Florencia'), (359, 'Frances'), (1306087, 'Francesca'), (157, 'Francisca'), (21685, 'Francoise'), (994, 'Franziska'), (9, 'Frederikke'), (6525, 'Freya'), (102623, 'Gabriela'), (468, 'Gabriela Nicole'), (6179, 'Gabriella'), (1093, 'Gabrielle Faith'), (1000, 'Gaelle'), (7998, 'Gaia'), (38651, 'Gail'), (302957, 'Galina'), (30136, 'Ganna'), (412872, 'Garbine'), (143, 'Gebriela'), (440, 'Genevieve'), (9600, 'Georgia'), (1848, 'Georgia Andreea'), (48, 'Georgiana'), (11569, 'Georgina'), (290, 'Ghislaine'), (677, 'Giada'), (31741, 'Gioia'), (2484, 'Giorgia'), (13, 'Giorgie'), (289, 'Giovanna'), (106520, 'Giulia'), (2935, 'Giuliana'), (1297, 'Gloria'), (2864, 'Gozal'), (70613, 'Grace'), (7999, 'Gracia'), (6168, 'Greetje'), (240195, 'Greta'), (14277, 'Guadalupe'), (576, 'Guillermina'), (687, 'Guiomar'), (410, 'Gulben'), (18, 'Gulchekhra'), (39, 'Gulnaz'), (775, 'Guzal'), (238, 'Gyulnara'), (811, 'Habiba'), (8180, 'Hae Sung'), (294, 'Haine'), (413, 'Hana'), (2782, 'Hanna'), (4643, 'Hanyu'), (9631, 'Hao Chen'), (224, 'Hao Ching'), (5944, 'Harmony'), (8608, 'Harriet'), (3633, 'Haruka'), (1873, 'Haruna'), (1679, 'Hayley'), (78, 'Hazal'), (202780, 'Heather'), (88542, 'Heidi'), (1039, 'Helen'), (3928, 'Helene'), (122, 'Hikari'), (10191, 'Hilda'), (3, 'Himari'), (27580, 'Hiroko'), (4368, 'Hirono'), (2371, 'Ho Ching'), (24, 'Hollie'), (1063, 'Hongrui'), (98, 'Hortencia'), (120, 'Hsin Yuan'), (7367, 'Hua Chen'), (118, 'Huijie'), (7797, 'Hulya'), (1222, 'Hye Min'), (870, 'Hyojung'), (8301, 'Hyun Hui'), (511, 'I Hsuan'), (395, 'Iana'), (467, 'Ida'), (45, 'Idia'), (916, 'Iga'), (52, 'Ilay'), (1142, 'Ilka'), (26950, 'Ilona'), (1527, 'Ilze'), (1676, 'Imane Maelle'), (292, 'Ina'), (406, 'Inci'), (762, 'India'), (12633, 'Indire'), (17382, 'Indy'), (1358, 'Ineke'), (40410, 'Ines'), (221, 'Inger'), (3471, 'Ingrid'), (4766, 'Ingrid Alexandra'), (10133, 'Ingrid Esperanza'), (33, 'Intissar'), (1225, 'Ioana'), (2403, 'Ioana Diana'), (5425, 'Ioana Loredana'), (6948, 'Ionela Andreea'), (39352, 'Ipek'), (88369, 'Irena'), (3133, 'Irene'), (299698, 'Irina'), (293366, 'Irina Camelia'), (13843, 'Irina Maria'), (4743, 'Iris'), (87844, 'Iryna'), (6688, 'Isabel'), (714, 'Isabela'), (83476, 'Isabella'), (4777, 'Isabelle'), (74, 'Iulia Maria'), (10322, 'Iva'), (100848, 'Ivana'), (2094, 'Ivania'), (291, 'Ivanka'), (443695, 'Iveta'), (543, 'Ivette'), (253, 'Ivone'), (13010, 'Ivonne'), (27462, 'Jacqueline'), (64, 'Jada'), (26209, 'Jade'), (1375, 'Jaeda'), (5007, 'Jaimee'), (24, 'Jaimy Gayle'), (761, 'Jainy'), (190997, 'Jamie'), (18, 'Jamilya'), (10947, 'Jan'), (268372, 'Jana'), (143422, 'Janette'), (12525, 'Janina'), (72, 'Janja'), (861, 'Janneke'), (5416, 'Jaqueline Adina'), (464, 'Jara'), (333150, 'Jarmila'), (34453, 'Jasmin'), (43862, 'Jasmina'), (14865, 'Jasmine'), (142, 'Jasmine Amber'), (822, 'Jawairiah'), (908, 'Jazmin'), (628, 'Jazzamay'), (3426, 'Jeannine'), (2515436, 'Jelena'), (81222, 'Jennifer'), (1002, 'Jenny'), (17819, 'Jesika'), (154599, 'Jessica'), (4122, 'Jessika'), (923, 'Jessy'), (7179, 'Ji Hee'), (8592, 'Ji Young'), (52, 'Jia'), (48117, 'Jia Jing'), (4612, 'Jia Qi'), (1553, 'Jiahui'), (15, 'Jiakang'), (100, 'Jiatian'), (3002, 'Jiaxi'), (96, 'Jiaxue'), (610820, 'Jie'), (13978, 'Jil Belen'), (611, 'Jil Nora'), (359013, 'Jill'), (1991, 'Jillian'), (15, 'Jin'), (46355, 'Jin A'), (414, 'Jin Ju'), (68925, 'Jing Jing'), (1955, 'Joana'), (472, 'Joanna'), (15, 'Joanne'), (355, 'Jodie Anna'), (40, 'Johana'), (553107, 'Johanna'), (1092, 'Jordana'), (2710, 'Josepha'), (4980, 'Josephine'), (804, 'Josie'), (39270, 'Jovana'), (3453, 'Ju Eun'), (3, 'Judith'), (63, 'Jule'), (891796, 'Julia'), (21, 'Julia Mansano'), (414, 'Juliana'), (129, 'Juliana Rocha'), (156531, 'Julie'), (4093, 'Julieta Lara'), (286, 'Julita'), (1446, 'Julyette Maria Josephine'), (114, 'June'), (128183, 'Junri'), (36, 'Justina'), (39418, 'Justine'), (30304, 'Justyna'), (467, 'Kady'), (172004, 'Kai Chen'), (37817, 'Kai Lin'), (625836, 'Kaia'), (416, 'Kaitlin'), (3905, 'Kaitlyn'), (1176, 'Kaja'), (2280, 'Kajsa'), (12906, 'Kamila'), (249, 'Kamilla'), (5866, 'Kamonwan'), (1536, 'Kana'), (20142, 'Kanae'), (229, 'Kanako'), (3724, 'Kanami'), (919, 'Kanika'), (8406, 'Kaori'), (32169, 'Karen'), (85, 'Kariann'), (254520, 'Karin'), (9355, 'Karina'), (5493, 'Karina Ildor'), (410, 'Karina Kristina'), (1936, 'Karine'), (1003, 'Karis'), (3127, 'Karla'), (3193, 'Karman'), (776, 'Karola Patricia'), (465, 'Karolayne'), (512490, 'Karolina'), (910, 'Karoline'), (330, 'Karyn'), (704, 'Kassandra'), (112562, 'Katalin'), (444303, 'Katarina'), (93730, 'Katarzyna'), (34, 'Kate'), (160945, 'Katerina'), (435038, 'Kateryna'), (24595, 'Katharina'), (363, 'Katharine'), (7843, 'Katherine'), (1894, 'Katherine Gabriela'), (15970, 'Kathinka'), (141281, 'Kathrin'), (30035, 'Katie'), (308, 'Katrine Isabel'), (11572, 'Katy'), (515, 'Katya'), (97, 'Katyarina'), (13697, 'Kayla'), (237, 'Kaylah'), (10107, 'Kazusa'), (294, 'Kei'), (324, 'Kelia'), (4705, 'Kelly'), (5880, 'Kelly S'), (410, 'Kelsey'), (653, 'Kennedy'), (24062, 'Keren'), (894, 'Keri'), (942, 'Kerstin'), (3748, 'Khristina'), (86, 'Ki Ryang'), (214121, 'Kiki'), (4580, 'Kim'), (12388, 'Kim Alice'), (5393, 'Kimberley'), (4831, 'Kimberly'), (272, 'Kimika'), (270102, 'Kimiko'), (15102, 'Kinnie'), (383077, 'Kirsten'), (462, 'Kirsten Andrea'), (5818, 'Klaartje'), (568191, 'Klara'), (4809, 'Klaudia'), (701, 'Komola'), (21417, 'Korina'), (4962, 'Kotomi'), (17577, 'Krista'), (34647, 'Kristie'), (601693, 'Kristina'), (555, 'Kristina N'), (1899, 'Kristy'), (148728, 'Kristyna'), (371140, 'Ksenia'), (298, 'Kseniia'), (625, 'Ksenija'), (56212, 'Kumiko'), (177170, 'Kurumi'), (210101, 'Kveta'), (403, 'Kwan Yau'), (3200, 'Kyle'), (1236, 'Kylie'), (9036, 'Kyoka'), (102022, 'Kyra'), (26059, 'Kyung Mi'), (6078, 'Laetitia'), (595, 'Laili'), (456, 'Lamis'), (177458, 'Lara'), (255, 'Larikah'), (578964, 'Laura'), (281, 'Laura D'), (33822, 'Laura Ioana'), (97, 'Laura Sofia'), (244807, 'Lauren'), (207, 'Lauryn'), (23897, 'Lavinia'), (39, 'Laylo'), (22, 'Layne'), (4197, 'Lea'), (152, 'Leah'), (733, 'Lee'), (27997, 'Lena'), (14942, 'Lena Marie'), (164900, 'Lenka'), (750, 'Leolia'), (672, 'Leonie'), (286, 'Lesedi Sheya'), (225987, 'Lesia'), (42925, 'Lesley'), (173, 'Leslie'), (45115, 'Leticia'), (87, 'Leticia Garcia'), (48, 'Leylah Annie'), (1696, 'Li'), (59997, 'Liana Gabriela'), (2362, 'Libby'), (522, 'Libi'), (169, 'Lidia'), (6809, 'Lidziya'), (39782, 'Liezel'), (23411, 'Liga'), (1960, 'Lilla'), (40341, 'Lin'), (91117, 'Lina'), (4216, 'Linda'), (142454, 'Lindsay'), (500, 'Lindsey'), (64525, 'Ling'), (72, 'Liniques'), (697, 'Linnea'), (594217, 'Lisa'), (7898, 'Lisa Maria'), (1583, 'Lisa Marie'), (8284, 'Lisanne'), (2662, 'Liubov'), (128, 'Livia'), (2216, 'Liz Tatiane'), (135, 'Lizaveta'), (11623, 'Lizette'), (33, 'Lorenza'), (40, 'Lorraine M'), (10167, 'Lou'), (6, 'Loudmilla'), (50700, 'Louisa'), (1633, 'Louise'), (371035, 'Lourdes'), (3445, 'Lu'), (1013, 'Luca'), (17185, 'Lucia'), (8305, 'Luciana'), (1108372, 'Lucie'), (1589, 'Lucrezia'), (6542, 'Lucy'), (645, 'Ludmila'), (1187, 'Ludmilla'), (1671, 'Luisa'), (1822, 'Luisa Marie'), (77519, 'Luksika'), (304, 'Lulu'), (15, 'Luna'), (377, 'Lusine'), (876, 'Lutfiye'), (30, 'Lyann'), (837, 'Lynn'), (54172, 'Lyudmyla'), (12379, 'Macall'), (2133, 'Macarena'), (62938, 'Madalina'), (2434, 'Maddison'), (715, 'Madeleine'), (147, 'Madeline'), (6, 'Madina'), (476768, 'Madison'), (2266, 'Madrie'), (525, 'Maegan'), (163, 'Mafalda'), (54, 'Maftuna'), (1917, 'Magali'), (511, 'Magalie'), (103659, 'Magda'), (401857, 'Magdalena'), (756, 'Magy'), (154, 'Mahak'), (395, 'Mahitha'), (19173, 'Mai'), (1235, 'Maia'), (12, 'Maia A'), (11320, 'Maiko'), (83, 'Maileen'), (39523, 'Mailen'), (1067, 'Maja'), (5592, 'Makiho'), (14129, 'Makoto'), (316, 'Malene'), (323, 'Malika'), (2489, 'Malin'), (688, 'Mallaurie'), (44497, 'Mallory'), (3073, 'Malou'), (96, 'Mami'), (102, 'Man Ying Maggie'), (9593, 'Mana'), (15, 'Mananchaya'), (2070, 'Manca'), (193767, 'Mandy'), (3112, 'Manisha'), (14608, 'Manon'), (93, 'Manya'), (702, 'Mara'), (16790, 'Marcela'), (683, 'Marcela Guimaraes'), (33, 'Marcelina'), (13037, 'Marcella'), (99836, 'Margalita'), (1997, 'Margarida'), (78265, 'Margarita'), (905, 'Margaux'), (4787, 'Margot'), (38086, 'Mari'), (3613355, 'Maria'), (185, 'Maria Agustina'), (323, 'Maria Andrea'), (148, 'Maria Camila'), (1892, 'Maria Constanza De Las Mercedes'), (296, 'Maria Del Rosario'), (296736, 'Maria Elena'), (141257, 'Maria Fernanda'), (294, 'Maria Jesus'), (72682, 'Maria Joao'), (413759, 'Maria Jose'), (156, 'Maria Lourdes'), (1388, 'Maria Paulina'), (106375, 'Maria Teresa'), (4060, 'Mariam'), (201258, 'Mariana'), (10178, 'Marianna'), (1090, 'Marianne'), (226, 'Mariaryeni'), (25496, 'Marie'), (114687, 'Marie Eve'), (206, 'Mariia'), (20481, 'Marija'), (3, 'Marijana'), (362372, 'Marina'), (4314, 'Marine'), (1272285, 'Marion'), (4, 'Mariona'), (1026, 'Marisa'), (154484, 'Mariya'), (18286, 'Marketa'), (1624, 'Marlies'), (1339, 'Marrit'), (267679, 'Marta'), (778, 'Marta Huqi'), (153, 'Martha'), (109192, 'Martina'), (653, 'Mary'), (102, 'Mary Ann'), (85425, 'Maryna'), (117472, 'Masa'), (245139, 'Mathilde'), (3466, 'Matilda'), (210, 'Maud'), (219, 'Maureen'), (138, 'Maurien'), (390, 'Maxine'), (225, 'May'), (23668, 'Maya'), (1788, 'Mayar'), (32445, 'Mayo'), (9064, 'Mayya'), (13254, 'Megan'), (407, 'Megumi'), (40, 'Mei Xu'), (417, 'Meiling'), (96, 'Meiqi'), (385636, 'Melanie'), (97, 'Melany Solange'), (2609, 'Melina'), (290299, 'Melinda'), (20196, 'Melis'), (340, 'Melisa'), (200, 'Melissa'), (171, 'Melissa Ishuan'), (542, 'Meng Ning'), (48, 'Mercedes'), (101, 'Merel'), (284, 'Meritxell'), (102693, 'Mervana'), (24569, 'Mi'), (176, 'Mi Jeong'), (1858, 'Mi Rae'), (72, 'Mi Zhuoma'), (1098, 'Mia Nicole'), (230, 'Micaela'), (76586, 'Michaela'), (242619, 'Michaella'), (90, 'Michela'), (596, 'Michele Alexandra'), (160164, 'Michelle'), (3657, 'Michika'), (69242, 'Mihaela'), (15, 'Mihaela Lorena'), (21205, 'Miharu'), (427, 'Mihika'), (201, 'Mihoki'), (24542, 'Miki'), (107, 'Mila'), (42, 'Milagros'), (14123, 'Milana'), (279, 'Milena'), (63, 'Milica'), (1884, 'Min'), (9938, 'Min Hwa'), (96, 'Minami'), (1626, 'Mira'), (1977, 'Mirabelle'), (180, 'Miranda'), (3825, 'Miriam'), (1458, 'Miriam Bianca'), (1180, 'Miriana'), (272, 'Mirjam'), (331434, 'Mirjana'), (55981, 'Misa'), (203782, 'Misaki'), (309, 'Mitsumi'), (22840, 'Miyabi'), (23968, 'Miyu'), (2927, 'Mizuno'), (565, 'Molly'), (2061, 'Momoko'), (282445, 'Mona'), (587309, 'Monica'), (1240, 'Monika'), (114104, 'Monique'), (23564, 'Montserrat'), (6906, 'Morgane'), (15, 'Moulika'), (12, 'Mouna'), (32, 'Moyuka'), (6, 'Muazzez'), (162, 'Muge'), (43550, 'Myrtille'), (1358928, 'Na'), (26185, 'Na Lae'), (19223, 'Na Ri'), (5027, 'Nadezda'), (1401125, 'Nadia'), (56596, 'Nadiya'), (2661, 'Nadja'), (1535, 'Nagi'), (4380, 'Naiktha'), (440, 'Naima'), (259, 'Nam Yeon'), (3094, 'Nan Nan'), (16494, 'Nanuli'), (59671, 'Nao'), (857, 'Naoko'), (163239, 'Naomi'), (1945, 'Napatsakorn'), (72, 'Nastassia'), (65152, 'Nastassja'), (29250, 'Nastja'), (97400, 'Natalia'), (120995, 'Natalie'), (13686, 'Natalija'), (33, 'Nataliya'), (14212, 'Natasa'), (15365, 'Natasha'), (16303, 'Natela'), (649, 'Natella'), (28098, 'Nathalia'), (13241, 'Nathaly'), (2526, 'Natia'), (37981, 'Natsumi'), (224, 'Nattawadee'), (251, 'Naz'), (980, 'Nazari'), (9536, 'Neda'), (142, 'Nelise'), (279, 'Nermeen'), (170, 'Nevena'), (30972, 'Nicha'), (2531, 'Nicky'), (33550, 'Nicola'), (447434, 'Nicole'), (8146, 'Nicoleta Catalina'), (9627, 'Nicolette'), (5425, 'Nidhi'), (47651, 'Nigina'), (9120, 'Nika'), (22, 'Nikita'), (614, 'Nikki'), (491, 'Nikol'), (78513, 'Nikola'), (201173, 'Nina'), (115, 'Nina Isabella'), (2706, 'Nives'), (1558, 'Noel'), (2025, 'Noelia'), (1795, 'Noelle'), (134, 'Nonna'), (73589, 'Noppawan'), (1082, 'Nora'), (760, 'Nour'), (1333, 'Nozomi'), (63013, 'Nudnida'), (24523, 'Nungnadda'), (259116, 'Nuria'), (1096, 'Oana'), (4294, 'Oana Georgeta'), (56853, 'Oceane'), (5372, 'Ofri'), (58279, 'Oksana'), (3497, 'Ola'), (2, 'Olawaseun'), (40, 'Olaya'), (8700, 'Oleksandra'), (484, 'Olena'), (3811, 'Olesya'), (773929, 'Olga'), (119756, 'Olivia'), (363, 'Oliwia'), (56242, 'Ons'), (2133, 'Ornella'), (382, 'Oyku'), (147, 'Paige Mary'), (241, 'Pamela'), (1446, 'Panna'), (403127, 'Paola'), (209, 'Parris'), (1188, 'Patcharin'), (197904, 'Patricia'), (43755, 'Patricia Maria'), (17514, 'Patrycja'), (7323, 'Patty'), (172431, 'Paula'), (269, 'Paula Andrea'), (3714, 'Paula Catalina'), (37384, 'Paula Cristina'), (3208, 'Paulina'), (313187, 'Pauline'), (4128, 'Pavla'), (26280, 'Peangtarn'), (1016, 'Peggy'), (8900, 'Pei Chi'), (24, 'Pei Hsuan'), (181, 'Pei Ju'), (60908, 'Pemra'), (6573, 'Pernilla'), (1832, 'Petia'), (1958404, 'Petra'), (3, 'Phenomena'), (664, 'Phillis'), (10859, 'Pia'), (21340, 'Piia'), (6404, 'Pilar'), (243, 'Pippa'), (934, 'Plobrung'), (76747, 'Polina'), (325216, 'Polona'), (13006, 'Poojashree'), (1214, 'Pranjala'), (5687, 'Prarthana G'), (9318, 'Prerna'), (510, 'Priscila'), (8203, 'Priscilla'), (116857, 'Qiang'), (683, 'Qianhui'), (641, 'Qianqian'), (2034, 'Qiu Yu'), (646, 'Quinn'), (22978, 'Quirine'), (2592, 'Rachael'), (469, 'Rachel'), (699, 'Radina'), (228, 'Rafaela'), (40, 'Ralina'), (148701, 'Raluca'), (9202, 'Raluca Elena'), (4258, 'Raluca Georgiana'), (443, 'Ramu'), (161, 'Ramya'), (14709, 'Ran'), (9, 'Rana'), (30401, 'Raquel'), (741, 'Rashmi'), (957, 'Ratnika'), (5387, 'Raveena'), (168, 'Rebeca'), (165013, 'Rebecca'), (5803, 'Rebeka'), (122331, 'Regina'), (64, 'Reina'), (66271, 'Reka Luca'), (38116, 'Remi'), (201856, 'Renata'), (5566, 'Ria'), (984, 'Rianna'), (84184, 'Richel'), (141257, 'Rika'), (23195, 'Riko'), (556, 'Rio'), (62252, 'Risa'), (8448, 'Rishika'), (1401, 'Rita'), (2634, 'Riya'), (809611, 'Roberta'), (12295, 'Robin'), (1103, 'Robyn'), (16886, 'Rocio'), (29214, 'Romana'), (17020, 'Romana Caroline'), (253471, 'Romina'), (911, 'Romy'), (308, 'Rona'), (3165, 'Ronit'), (49, 'Ronke'), (28, 'Roosh'), (111, 'Rosa'), (803, 'Rosalia'), (880, 'Rosalie'), (336, 'Rosie'), (38793, 'Roxane'), (24, 'Rui'), (27452, 'Rushmi'), (3642, 'Rutuja'), (597, 'Ryann'), (195, 'Saana'), (780, 'Sabastiani'), (49784, 'Sabina'), (27, 'Sabina Elena'), (590911, 'Sabine'), (6810, 'Sabrina'), (78204, 'Sacha'), (49767, 'Sachia'), (42676, 'Sachie'), (2275, 'Sadafmoh'), (1034, 'Sai Samhitha'), (113359, 'Saisai'), (9338, 'Sakiko'), (53480, 'Sally'), (66, 'Salma'), (1437656, 'Samantha'), (2020, 'Samira'), (354, 'Sanae'), (17975, 'Sanaz'), (266197, 'Sandra'), (224, 'Sandy'), (1277, 'Sang Hee'), (272889, 'Sania'), (914981, 'Sara'), (78461, 'Sarah'), (1270, 'Sarah Beth'), (13064, 'Sarah Rebecca'), (461, 'Sarahi'), (148, 'Sarai Delfina'), (2061, 'Saray'), (464, 'Sari'), (27, 'Sarlota'), (178, 'Sarvinoz'), (316, 'Sasa'), (2641, 'Saska'), (906, 'Satsuki'), (70, 'Savannah'), (148, 'Schena'), (143, 'Se Hyun'), (681, 'Se Jin'), (75, 'Sean'), (1469, 'Seda'), (144, 'Seira'), (169, 'Selin'), (6564, 'Seo Kyung'), (1312, 'Seone'), (4232828, 'Serena'), (208108, 'Sesil'), (6650, 'Seung Yeon'), (192296, 'Severine'), (662926, 'Shahar'), (2122, 'Shakhlo'), (198, 'Shakhnoza'), (111, 'Shangqing'), (2378, 'Shanshan'), (1363, 'Shao Yuan'), (4106, 'Sharmada'), (117825, 'Sharon'), (522, 'Sharon Sanchana'), (102140, 'Shelby'), (142, 'Shelly'), (53610, 'Sheng Nan'), (22977, 'Sherazad'), (801, 'Sherry'), (39960, 'Shiho'), (9634, 'Shilin'), (18, 'Shiori'), (117, 'Shir'), (236, 'Shiran'), (4611, 'Shivika'), (105, 'Shou Na'), (6, 'Shreya'), (1483, 'Shu Ying'), (913829, 'Shuai'), (46124, 'Shuko'), (597, 'Shuo'), (336, 'Shuyue'), (3255, 'Shweta'), (531, 'Si Qi'), (221695, 'Silvia'), (724638, 'Simona'), (1149, 'Simone'), (467, 'Simran Kaur'), (10360, 'Sina'), (688, 'Sinead'), (95, 'Sing Le'), (716, 'Siqi'), (276, 'Sirui'), (87, 'Siyu'), (352458, 'Sloane'), (96, 'Smriti'), (134, 'Sneha'), (2820, 'Snehadevi S'), (47282, 'So Jung'), (18210, 'So Ra'), (484140, 'Sofia'), (336, 'Sofico'), (10539, 'Sofie'), (18371, 'Sofiya'), (9180, 'Sofya'), (108, 'Sohyun'), (480, 'Sonia'), (4499, 'Sonja'), (96, 'Sophia'), (39307, 'Sophie'), (457043, 'Sorana'), (2961, 'Sowjanya'), (159, 'Spurti'), (1744, 'Sri Vaishnavi'), (8072, 'Stamatia'), (49412, 'Stanislava'), (497, 'Stefana'), (126, 'Stefani'), (24897, 'Stefania'), (247237, 'Stefanie'), (3085, 'Steffi'), (608309, 'Stephanie'), (1397, 'Stephanie Mariel'), (21152, 'Storm'), (33672, 'Su Jeong'), (274936, 'Su Wei'), (320, 'Suellen'), (1544, 'Sultan'), (6591, 'Sun Jung'), (15, 'Sunae'), (3594, 'Sunam'), (29852, 'Sung Hee'), (502, 'Susan'), (16276, 'Susanne'), (344, 'Suzan'), (324, 'Suzuho'), (1054, 'Suzy'), (6341, 'Svenja'), (1906587, 'Svetlana'), (11201, 'Sviatlana'), (581, 'Sybille'), (1626, 'Sylvia'), (8268, 'Sylwia'), (9001, 'Syna'), (2127, 'Szabina'), (83659, 'Tadeja'), (1050, 'Taisiya'), (45, 'Talya'), (843, 'Tamachan'), (60, 'Tamar'), (54140, 'Tamara'), (304, 'Tamari'), (594281, 'Tamarine'), (40060, 'Tamaryn'), (322202, 'Tamira'), (26077, 'Tammi'), (764, 'Tanaporn'), (1229, 'Tanya'), (54798, 'Tara'), (42, 'Tatia'), (34795, 'Tatiana'), (230262, 'Tatjana'), (1289, 'Tatsiana'), (5051, 'Tayisiya'), (38850, 'Taylor'), (2127, 'Tea'), (112570, 'Teliana'), (12402, 'Tena'), (41792, 'Teodora'), (193362, 'Tereza'), (18, 'Terri'), (7165, 'Tess'), (9116, 'Tessah'), (75337, 'Tetiana'), (43020, 'Tetyana'), (706, 'Thai Sa Grana'), (2249, 'Theo'), (377, 'Theresa'), (333, 'Tijana'), (612072, 'Timea'), (57585, 'Tina'), (476, 'Tinatin'), (8145, 'Ting Fei'), (8676, 'Ting Jr'), (151, 'Tingting'), (3361, 'Tjasa'), (7431, 'Tomoko'), (10630, 'Tori'), (1864, 'Tornado Alicia'), (1884, 'Trang'), (736, 'Treta'), (456422, 'Tsvetana'), (4543, 'Tyra'), (27118, 'Ulrikke'), (2400, 'Ulyana'), (275255, 'Urszula'), (413, 'Ushna'), (7874, 'Usue Maitane'), (338, 'Valentina'), (9926, 'Valentine'), (15198, 'Valentini'), (47854, 'Valentyna'), (159155, 'Valeria'), (6146, 'Valerie'), (16621, 'Valeriya'), (10087, 'Vanda'), (30669, 'Vanesa'), (71645, 'Vanessa'), (299530, 'Vania'), (255, 'Vaniya'), (291, 'Vanja'), (54340, 'Varatchaya'), (3623, 'Varunya'), (401409, 'Varvara'), (42527, 'Vasilisa'), (3763, 'Vaszilisza'), (2221, 'Vendula'), (2875425, 'Venus'), (1929137, 'Vera'), (3018, 'Verena'), (84543, 'Veronica'), (1678, 'Veronica M'), (73192, 'Veronika'), (169500, 'Vesna'), (77, 'Vicky'), (454, 'Victoire'), (2142854, 'Victoria'), (106, 'Victoria Ariadna'), (30191, 'Viktoria'), (90, 'Viktoriia'), (79511, 'Viktorija'), (26226, 'Viktoriya'), (1987, 'Viktoryia'), (27, 'Vilma Y'), (105, 'Vincenza'), (37, 'Vinciane'), (298, 'Violetta'), (519208, 'Virginie'), (71, 'Vishesh'), (64, 'Vita'), (106927, 'Vitalia'), (36714, 'Vivian'), (13041, 'Vivien'), (8918, 'Vivienne'), (22578, 'Vlada'), (997, 'Vladica'), (6470, 'Vladimira'), (1254, 'Vladislava'), (2570, 'Vladyslava'), (18781, 'Vojislava'), (1036, 'Voni'), (11653, 'Wan Ting'), (42, 'Wan Yi'), (9, 'Warona'), (40633, 'Wen Hsin'), (120, 'Wen Ling'), (613, 'Wendy Qi Wen'), (179, 'Weronika Jasmina'), (5604, 'Whitney'), (363, 'Wiktoria'), (11694, 'Wing Yau Venise'), (879, 'Wushuang'), (14578, 'Xenia'), (1445, 'Xi Yao'), (4789, 'Xiao'), (5057, 'Xiaodi'), (717, 'Xiaorong'), (1352, 'Xiaoxi'), (19495, 'Ximena'), (8744, 'Xin'), (187, 'Xin Yu'), (10705, 'Xinyu'), (109256, 'Xinyun'), (315, 'Xiyu'), (4535, 'Xu Liu'), (24, 'Ya'), (17078, 'Ya Hsuan'), (39687, 'Yafan'), (4196, 'Yan'), (39102, 'Yana'), (73, 'Yang'), (602453, 'Yanina'), (275, 'Yanni'), (32, 'Yarden'), (404915, 'Yaroslava'), (11251, 'Yasmin'), (27, 'Yasmina'), (1748, 'Yasmine'), (71, 'Yasmyn'), (648, 'Yawna'), (128509, 'Yayuk'), (47867, 'Ye Ra'), (281, 'Ye Xin'), (376, 'Yekaterina'), (1856, 'Yelena'), (966, 'Yeong Won'), (6288, 'Yevgeniya'), (19989, 'Yi'), (60646, 'Yi Fan'), (22443, 'Yi Jing'), (61839, 'Yi Miao'), (136, 'Yidi'), (24, 'Yihong'), (366, 'Yijia'), (3783, 'Ying'), (107595, 'Ying Ying'), (1380, 'Yixuan'), (1546, 'Ylena'), (1453, 'Ylona Georgiana'), (285, 'Yoko'), (1381, 'Yolande'), (182, 'Yoo Ri'), (3592, 'Yoon Young'), (677, 'Yoshimi'), (75, 'Yosr'), (242, 'You Na'), (27804, 'Ysaline'), (452, 'Yu Jin'), (9, 'Yu Tong'), (281, 'Yuan'), (772, 'Yuanyi'), (1259, 'Yue'), (21360, 'Yue Yue'), (682, 'Yuenu'), (184, 'Yujia'), (12474, 'Yuka'), (84, 'Yukako'), (505, 'Yuki'), (2191, 'Yuki Kristina'), (998, 'Yukina'), (1828, 'Yukun'), (155143, 'Yulia'), (15248, 'Yuliana'), (206375, 'Yuliya'), (20269, 'Yumi'), (229391, 'Yung Jan'), (559, 'Yuqi'), (101816, 'Yurika'), (1728, 'Yuriko'), (12693, 'Yurina'), (15071, 'Yuuki'), (45, 'Yuval'), (24279, 'Yuxuan'), (254491, 'Yvonne'), (87, 'Zaineb'), (2052, 'Zalina'), (3809, 'Zarah'), (123243, 'Zarina'), (702, 'Zeel'), (21, 'Zeynep  Sena'), (2166, 'Zhanlan'), (20236, 'Zhaoxuan'), (7, 'Zhibek'), (99, 'Zhima'), (30, 'Zhou'), (121, 'Zhuoma'), (110290, 'Zi'), (74, 'Zinovia'), (1420, 'Ziyue'), (2772, 'Zoe'), (2877, 'Zoe Gwen'), (1501, 'Zsofia'), (266251, 'Zuzana'), (2258, 'Zuzanna')]

===== Eval Round 474 =====
Database         : wta_1
Prediction SQL   : SELECT country_code, COUNT(*) FROM players GROUP BY country_code
Gold SQL         : SELECT count(*) ,  country_code FROM players GROUP BY country_code
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('AHO', 6), ('ALB', 2), ('ALG', 63), ('AND', 1), ('ANG', 1), ('ANT', 8), ('ARG', 456), ('ARM', 27), ('AUS', 742), ('AUT', 236), ('AZE', 10), ('BAH', 22), ('BAR', 20), ('BDI', 5), ('BEL', 247), ('BEN', 2), ('BER', 20), ('BIH', 75), ('BLR', 144), ('BOL', 97), ('BOT', 17), ('BRA', 456), ('BRN', 5), ('BRU', 4), ('BUL', 181), ('CAN', 331), ('CGO', 2), ('CHI', 114), ('CHN', 391), ('CMR', 8), ('COL', 240), ('CRC', 24), ('CRO', 240), ('CUB', 39), ('CYP', 22), ('CZE', 456), ('DEN', 79), ('DOM', 38), ('ECA', 3), ('ECU', 90), ('EGY', 112), ('ESA', 33), ('ESP', 853), ('EST', 48), ('ETH', 8), ('FIJ', 5), ('FIN', 103), ('FRA', 736), ('FRG', 22), ('GBR', 660), ('GEO', 91), ('GER', 833), ('GHA', 4), ('GRE', 163), ('GRN', 1), ('GUA', 29), ('GUD', 8), ('HAI', 5), ('HKG', 56), ('HON', 8), ('HUN', 169), ('INA', 181), ('IND', 478), ('IRI', 15), ('IRL', 68), ('IRQ', 7), ('ISL', 18), ('ISR', 232), ('ITA', 866), ('JAM', 19), ('JOR', 6), ('JPN', 823), ('KAZ', 99), ('KEN', 23), ('KGZ', 23), ('KOR', 274), ('KUW', 3), ('LAT', 56), ('LES', 3), ('LIB', 11), ('LIE', 15), ('LTU', 31), ('LUX', 37), ('MAD', 21), ('MAR', 97), ('MAS', 35), ('MDA', 45), ('MEX', 416), ('MGL', 1), ('MKD', 23), ('MLT', 17), ('MNE', 25), ('MON', 2), ('MRI', 15), ('MRN', 4), ('NAM', 13), ('NCA', 3), ('NED', 342), ('NGR', 80), ('NOR', 68), ('NZL', 104), ('OMA', 3), ('PAK', 18), ('PAN', 22), ('PAR', 56), ('PER', 76), ('PHI', 70), ('PNG', 1), ('POC', 12), ('POL', 266), ('POR', 142), ('PUR', 43), ('QAT', 1), ('REU', 17), ('RHO', 3), ('ROU', 422), ('RSA', 283), ('RUS', 810), ('SAM', 3), ('SCG', 16), ('SEN', 7), ('SIN', 44), ('SLO', 145), ('SMR', 4), ('SRB', 224), ('SRI', 32), ('SUI', 243), ('SVK', 247), ('SWE', 324), ('SYR', 21), ('TCH', 21), ('THA', 171), ('TJK', 6), ('TKM', 12), ('TOG', 2), ('TPE', 146), ('TRI', 29), ('TTO', 1), ('TUN', 57), ('TUR', 203), ('UAE', 1), ('UKR', 311), ('UNK', 11), ('URS', 22), ('URU', 56), ('USA', 2217), ('UZB', 123), ('VEN', 150), ('VIE', 19), ('YUG', 48), ('ZAM', 1), ('ZIM', 26), ('rc=', 4)]
Gold Output      : [(6, 'AHO'), (2, 'ALB'), (63, 'ALG'), (1, 'AND'), (1, 'ANG'), (8, 'ANT'), (456, 'ARG'), (27, 'ARM'), (742, 'AUS'), (236, 'AUT'), (10, 'AZE'), (22, 'BAH'), (20, 'BAR'), (5, 'BDI'), (247, 'BEL'), (2, 'BEN'), (20, 'BER'), (75, 'BIH'), (144, 'BLR'), (97, 'BOL'), (17, 'BOT'), (456, 'BRA'), (5, 'BRN'), (4, 'BRU'), (181, 'BUL'), (331, 'CAN'), (2, 'CGO'), (114, 'CHI'), (391, 'CHN'), (8, 'CMR'), (240, 'COL'), (24, 'CRC'), (240, 'CRO'), (39, 'CUB'), (22, 'CYP'), (456, 'CZE'), (79, 'DEN'), (38, 'DOM'), (3, 'ECA'), (90, 'ECU'), (112, 'EGY'), (33, 'ESA'), (853, 'ESP'), (48, 'EST'), (8, 'ETH'), (5, 'FIJ'), (103, 'FIN'), (736, 'FRA'), (22, 'FRG'), (660, 'GBR'), (91, 'GEO'), (833, 'GER'), (4, 'GHA'), (163, 'GRE'), (1, 'GRN'), (29, 'GUA'), (8, 'GUD'), (5, 'HAI'), (56, 'HKG'), (8, 'HON'), (169, 'HUN'), (181, 'INA'), (478, 'IND'), (15, 'IRI'), (68, 'IRL'), (7, 'IRQ'), (18, 'ISL'), (232, 'ISR'), (866, 'ITA'), (19, 'JAM'), (6, 'JOR'), (823, 'JPN'), (99, 'KAZ'), (23, 'KEN'), (23, 'KGZ'), (274, 'KOR'), (3, 'KUW'), (56, 'LAT'), (3, 'LES'), (11, 'LIB'), (15, 'LIE'), (31, 'LTU'), (37, 'LUX'), (21, 'MAD'), (97, 'MAR'), (35, 'MAS'), (45, 'MDA'), (416, 'MEX'), (1, 'MGL'), (23, 'MKD'), (17, 'MLT'), (25, 'MNE'), (2, 'MON'), (15, 'MRI'), (4, 'MRN'), (13, 'NAM'), (3, 'NCA'), (342, 'NED'), (80, 'NGR'), (68, 'NOR'), (104, 'NZL'), (3, 'OMA'), (18, 'PAK'), (22, 'PAN'), (56, 'PAR'), (76, 'PER'), (70, 'PHI'), (1, 'PNG'), (12, 'POC'), (266, 'POL'), (142, 'POR'), (43, 'PUR'), (1, 'QAT'), (17, 'REU'), (3, 'RHO'), (422, 'ROU'), (283, 'RSA'), (810, 'RUS'), (3, 'SAM'), (16, 'SCG'), (7, 'SEN'), (44, 'SIN'), (145, 'SLO'), (4, 'SMR'), (224, 'SRB'), (32, 'SRI'), (243, 'SUI'), (247, 'SVK'), (324, 'SWE'), (21, 'SYR'), (21, 'TCH'), (171, 'THA'), (6, 'TJK'), (12, 'TKM'), (2, 'TOG'), (146, 'TPE'), (29, 'TRI'), (1, 'TTO'), (57, 'TUN'), (203, 'TUR'), (1, 'UAE'), (311, 'UKR'), (11, 'UNK'), (22, 'URS'), (56, 'URU'), (2217, 'USA'), (123, 'UZB'), (150, 'VEN'), (19, 'VIE'), (48, 'YUG'), (1, 'ZAM'), (26, 'ZIM'), (4, 'rc=')]

===== Eval Round 475 =====
Database         : wta_1
Prediction SQL   : SELECT country_code, count(*) FROM players GROUP BY country_code
Gold SQL         : SELECT count(*) ,  country_code FROM players GROUP BY country_code
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('AHO', 6), ('ALB', 2), ('ALG', 63), ('AND', 1), ('ANG', 1), ('ANT', 8), ('ARG', 456), ('ARM', 27), ('AUS', 742), ('AUT', 236), ('AZE', 10), ('BAH', 22), ('BAR', 20), ('BDI', 5), ('BEL', 247), ('BEN', 2), ('BER', 20), ('BIH', 75), ('BLR', 144), ('BOL', 97), ('BOT', 17), ('BRA', 456), ('BRN', 5), ('BRU', 4), ('BUL', 181), ('CAN', 331), ('CGO', 2), ('CHI', 114), ('CHN', 391), ('CMR', 8), ('COL', 240), ('CRC', 24), ('CRO', 240), ('CUB', 39), ('CYP', 22), ('CZE', 456), ('DEN', 79), ('DOM', 38), ('ECA', 3), ('ECU', 90), ('EGY', 112), ('ESA', 33), ('ESP', 853), ('EST', 48), ('ETH', 8), ('FIJ', 5), ('FIN', 103), ('FRA', 736), ('FRG', 22), ('GBR', 660), ('GEO', 91), ('GER', 833), ('GHA', 4), ('GRE', 163), ('GRN', 1), ('GUA', 29), ('GUD', 8), ('HAI', 5), ('HKG', 56), ('HON', 8), ('HUN', 169), ('INA', 181), ('IND', 478), ('IRI', 15), ('IRL', 68), ('IRQ', 7), ('ISL', 18), ('ISR', 232), ('ITA', 866), ('JAM', 19), ('JOR', 6), ('JPN', 823), ('KAZ', 99), ('KEN', 23), ('KGZ', 23), ('KOR', 274), ('KUW', 3), ('LAT', 56), ('LES', 3), ('LIB', 11), ('LIE', 15), ('LTU', 31), ('LUX', 37), ('MAD', 21), ('MAR', 97), ('MAS', 35), ('MDA', 45), ('MEX', 416), ('MGL', 1), ('MKD', 23), ('MLT', 17), ('MNE', 25), ('MON', 2), ('MRI', 15), ('MRN', 4), ('NAM', 13), ('NCA', 3), ('NED', 342), ('NGR', 80), ('NOR', 68), ('NZL', 104), ('OMA', 3), ('PAK', 18), ('PAN', 22), ('PAR', 56), ('PER', 76), ('PHI', 70), ('PNG', 1), ('POC', 12), ('POL', 266), ('POR', 142), ('PUR', 43), ('QAT', 1), ('REU', 17), ('RHO', 3), ('ROU', 422), ('RSA', 283), ('RUS', 810), ('SAM', 3), ('SCG', 16), ('SEN', 7), ('SIN', 44), ('SLO', 145), ('SMR', 4), ('SRB', 224), ('SRI', 32), ('SUI', 243), ('SVK', 247), ('SWE', 324), ('SYR', 21), ('TCH', 21), ('THA', 171), ('TJK', 6), ('TKM', 12), ('TOG', 2), ('TPE', 146), ('TRI', 29), ('TTO', 1), ('TUN', 57), ('TUR', 203), ('UAE', 1), ('UKR', 311), ('UNK', 11), ('URS', 22), ('URU', 56), ('USA', 2217), ('UZB', 123), ('VEN', 150), ('VIE', 19), ('YUG', 48), ('ZAM', 1), ('ZIM', 26), ('rc=', 4)]
Gold Output      : [(6, 'AHO'), (2, 'ALB'), (63, 'ALG'), (1, 'AND'), (1, 'ANG'), (8, 'ANT'), (456, 'ARG'), (27, 'ARM'), (742, 'AUS'), (236, 'AUT'), (10, 'AZE'), (22, 'BAH'), (20, 'BAR'), (5, 'BDI'), (247, 'BEL'), (2, 'BEN'), (20, 'BER'), (75, 'BIH'), (144, 'BLR'), (97, 'BOL'), (17, 'BOT'), (456, 'BRA'), (5, 'BRN'), (4, 'BRU'), (181, 'BUL'), (331, 'CAN'), (2, 'CGO'), (114, 'CHI'), (391, 'CHN'), (8, 'CMR'), (240, 'COL'), (24, 'CRC'), (240, 'CRO'), (39, 'CUB'), (22, 'CYP'), (456, 'CZE'), (79, 'DEN'), (38, 'DOM'), (3, 'ECA'), (90, 'ECU'), (112, 'EGY'), (33, 'ESA'), (853, 'ESP'), (48, 'EST'), (8, 'ETH'), (5, 'FIJ'), (103, 'FIN'), (736, 'FRA'), (22, 'FRG'), (660, 'GBR'), (91, 'GEO'), (833, 'GER'), (4, 'GHA'), (163, 'GRE'), (1, 'GRN'), (29, 'GUA'), (8, 'GUD'), (5, 'HAI'), (56, 'HKG'), (8, 'HON'), (169, 'HUN'), (181, 'INA'), (478, 'IND'), (15, 'IRI'), (68, 'IRL'), (7, 'IRQ'), (18, 'ISL'), (232, 'ISR'), (866, 'ITA'), (19, 'JAM'), (6, 'JOR'), (823, 'JPN'), (99, 'KAZ'), (23, 'KEN'), (23, 'KGZ'), (274, 'KOR'), (3, 'KUW'), (56, 'LAT'), (3, 'LES'), (11, 'LIB'), (15, 'LIE'), (31, 'LTU'), (37, 'LUX'), (21, 'MAD'), (97, 'MAR'), (35, 'MAS'), (45, 'MDA'), (416, 'MEX'), (1, 'MGL'), (23, 'MKD'), (17, 'MLT'), (25, 'MNE'), (2, 'MON'), (15, 'MRI'), (4, 'MRN'), (13, 'NAM'), (3, 'NCA'), (342, 'NED'), (80, 'NGR'), (68, 'NOR'), (104, 'NZL'), (3, 'OMA'), (18, 'PAK'), (22, 'PAN'), (56, 'PAR'), (76, 'PER'), (70, 'PHI'), (1, 'PNG'), (12, 'POC'), (266, 'POL'), (142, 'POR'), (43, 'PUR'), (1, 'QAT'), (17, 'REU'), (3, 'RHO'), (422, 'ROU'), (283, 'RSA'), (810, 'RUS'), (3, 'SAM'), (16, 'SCG'), (7, 'SEN'), (44, 'SIN'), (145, 'SLO'), (4, 'SMR'), (224, 'SRB'), (32, 'SRI'), (243, 'SUI'), (247, 'SVK'), (324, 'SWE'), (21, 'SYR'), (21, 'TCH'), (171, 'THA'), (6, 'TJK'), (12, 'TKM'), (2, 'TOG'), (146, 'TPE'), (29, 'TRI'), (1, 'TTO'), (57, 'TUN'), (203, 'TUR'), (1, 'UAE'), (311, 'UKR'), (11, 'UNK'), (22, 'URS'), (56, 'URU'), (2217, 'USA'), (123, 'UZB'), (150, 'VEN'), (19, 'VIE'), (48, 'YUG'), (1, 'ZAM'), (26, 'ZIM'), (4, 'rc=')]

===== Eval Round 476 =====
Database         : wta_1
Prediction SQL   : SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('USA',)]
Gold Output      : [('USA',)]

===== Eval Round 477 =====
Database         : wta_1
Prediction SQL   : SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('USA',)]
Gold Output      : [('USA',)]

===== Eval Round 478 =====
Database         : wta_1
Prediction SQL   : SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50
Gold SQL         : SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('ALG',), ('ARG',), ('AUS',), ('AUT',), ('BEL',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BUL',), ('CAN',), ('CHI',), ('CHN',), ('COL',), ('CRO',), ('CZE',), ('DEN',), ('ECU',), ('EGY',), ('ESP',), ('FIN',), ('FRA',), ('GBR',), ('GEO',), ('GER',), ('GRE',), ('HKG',), ('HUN',), ('INA',), ('IND',), ('IRL',), ('ISR',), ('ITA',), ('JPN',), ('KAZ',), ('KOR',), ('LAT',), ('MAR',), ('MEX',), ('NED',), ('NGR',), ('NOR',), ('NZL',), ('PAR',), ('PER',), ('PHI',), ('POL',), ('POR',), ('ROU',), ('RSA',), ('RUS',), ('SLO',), ('SRB',), ('SUI',), ('SVK',), ('SWE',), ('THA',), ('TPE',), ('TUN',), ('TUR',), ('UKR',), ('URU',), ('USA',), ('UZB',), ('VEN',)]
Gold Output      : [('ALG',), ('ARG',), ('AUS',), ('AUT',), ('BEL',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BUL',), ('CAN',), ('CHI',), ('CHN',), ('COL',), ('CRO',), ('CZE',), ('DEN',), ('ECU',), ('EGY',), ('ESP',), ('FIN',), ('FRA',), ('GBR',), ('GEO',), ('GER',), ('GRE',), ('HKG',), ('HUN',), ('INA',), ('IND',), ('IRL',), ('ISR',), ('ITA',), ('JPN',), ('KAZ',), ('KOR',), ('LAT',), ('MAR',), ('MEX',), ('NED',), ('NGR',), ('NOR',), ('NZL',), ('PAR',), ('PER',), ('PHI',), ('POL',), ('POR',), ('ROU',), ('RSA',), ('RUS',), ('SLO',), ('SRB',), ('SUI',), ('SVK',), ('SWE',), ('THA',), ('TPE',), ('TUN',), ('TUR',), ('UKR',), ('URU',), ('USA',), ('UZB',), ('VEN',)]

===== Eval Round 479 =====
Database         : wta_1
Prediction SQL   : SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50
Gold SQL         : SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('ALG',), ('ARG',), ('AUS',), ('AUT',), ('BEL',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BUL',), ('CAN',), ('CHI',), ('CHN',), ('COL',), ('CRO',), ('CZE',), ('DEN',), ('ECU',), ('EGY',), ('ESP',), ('FIN',), ('FRA',), ('GBR',), ('GEO',), ('GER',), ('GRE',), ('HKG',), ('HUN',), ('INA',), ('IND',), ('IRL',), ('ISR',), ('ITA',), ('JPN',), ('KAZ',), ('KOR',), ('LAT',), ('MAR',), ('MEX',), ('NED',), ('NGR',), ('NOR',), ('NZL',), ('PAR',), ('PER',), ('PHI',), ('POL',), ('POR',), ('ROU',), ('RSA',), ('RUS',), ('SLO',), ('SRB',), ('SUI',), ('SVK',), ('SWE',), ('THA',), ('TPE',), ('TUN',), ('TUR',), ('UKR',), ('URU',), ('USA',), ('UZB',), ('VEN',)]
Gold Output      : [('ALG',), ('ARG',), ('AUS',), ('AUT',), ('BEL',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BUL',), ('CAN',), ('CHI',), ('CHN',), ('COL',), ('CRO',), ('CZE',), ('DEN',), ('ECU',), ('EGY',), ('ESP',), ('FIN',), ('FRA',), ('GBR',), ('GEO',), ('GER',), ('GRE',), ('HKG',), ('HUN',), ('INA',), ('IND',), ('IRL',), ('ISR',), ('ITA',), ('JPN',), ('KAZ',), ('KOR',), ('LAT',), ('MAR',), ('MEX',), ('NED',), ('NGR',), ('NOR',), ('NZL',), ('PAR',), ('PER',), ('PHI',), ('POL',), ('POR',), ('ROU',), ('RSA',), ('RUS',), ('SLO',), ('SRB',), ('SUI',), ('SVK',), ('SWE',), ('THA',), ('TPE',), ('TUN',), ('TUR',), ('UKR',), ('URU',), ('USA',), ('UZB',), ('VEN',)]

===== Eval Round 480 =====
Database         : wta_1
Prediction SQL   : SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date
Gold SQL         : SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(19870119, 0), (19870126, 0), (19870202, 0), (19870209, 0), (19870302, 0), (19870330, 0), (19870406, 0), (19870413, 0), (19870420, 0), (19870427, 0), (19870504, 0), (19870511, 0), (19870518, 0), (19870525, 0), (19870601, 0), (19870608, 0), (19870615, 0), (19870622, 0), (19870629, 0), (19870706, 0), (19870713, 0), (19870720, 0), (19870727, 0), (19870803, 0), (19870810, 0), (19870817, 0), (19870824, 0), (19870831, 0), (19870907, 0), (19870914, 0), (19870921, 0), (19870928, 0), (19871005, 0), (19871012, 0), (19871019, 0), (19871026, 0), (19871102, 0), (19871109, 0), (19871116, 0), (19871123, 0), (19871130, 0), (19871207, 0), (19871214, 0), (19871221, 0), (19871228, 0), (19880101, 0), (19880104, 0), (19880111, 0), (19880118, 0), (19880125, 0), (19880201, 0), (19880208, 0), (19880215, 0), (19880222, 0), (19880229, 0), (19880307, 0), (19880314, 0), (19880321, 0), (19880328, 0), (19880404, 0), (19880411, 0), (19880418, 0), (19880425, 0), (19880502, 0), (19880509, 0), (19880516, 0), (19880523, 0), (19880530, 0), (19880606, 0), (19880613, 0), (19880620, 0), (19880627, 0), (19880704, 0), (19880711, 0), (19880718, 0), (19880725, 0), (19880801, 0), (19880808, 0), (19880815, 0), (19880822, 0), (19880829, 0), (19880905, 0), (19880912, 0), (19880919, 0), (19880926, 0), (19881003, 0), (19881010, 0), (19881017, 0), (19881024, 0), (19881031, 0), (19881107, 0), (19881114, 0), (19881121, 29), (19881128, 29), (19881205, 29), (19881212, 29), (19881219, 29), (19881226, 29), (19890101, 28), (19890102, 29), (19890109, 29), (19890116, 29), (19890123, 29), (19890130, 29), (19890206, 29), (19890213, 0), (19890220, 0), (19890227, 0), (19890306, 0), (19890313, 29), (19890320, 29), (19890327, 0), (19890403, 0), (19890410, 29), (19890417, 29), (19890424, 29), (19890501, 29), (19890508, 29), (19890515, 29), (19890522, 29), (19890529, 29), (19890605, 29), (19890612, 29), (19890619, 29), (19890626, 29), (19890703, 29), (19890710, 29), (19890717, 29), (19890724, 29), (19890731, 29), (19890807, 29), (19890814, 29), (19890821, 29), (19890828, 29), (19890904, 29), (19890911, 29), (19890918, 29), (19890925, 29), (19891002, 29), (19891009, 29), (19891016, 29), (19891023, 29), (19891030, 29), (19891106, 29), (19891113, 29), (19891120, 29), (19891127, 29), (19891204, 29), (19891211, 29), (19891218, 29), (19891225, 29), (19900101, 28), (19900108, 29), (19900115, 29), (19900122, 29), (19900129, 29), (19900205, 29), (19900212, 29), (19900219, 29), (19900226, 29), (19900305, 29), (19900312, 29), (19900319, 29), (19900326, 29), (19900402, 29), (19900409, 29), (19900416, 29), (19900423, 29), (19900430, 29), (19900507, 29), (19900514, 29), (19900521, 29), (19900528, 29), (19900604, 29), (19900611, 29), (19900618, 30), (19900625, 30), (19900702, 30), (19900709, 30), (19900716, 30), (19900723, 30), (19900730, 30), (19900806, 30), (19900813, 30), (19900820, 30), (19900827, 30), (19900903, 30), (19900910, 30), (19900917, 30), (19900924, 30), (19901001, 30), (19901008, 30), (19901015, 30), (19901022, 30), (19901029, 30), (19901105, 30), (19901112, 30), (19901119, 30), (19901126, 30), (19901203, 30), (19901210, 30), (19901217, 30), (19901224, 30), (19901231, 30), (19910101, 29), (19910107, 30), (19910114, 30), (19910121, 30), (19910128, 30), (19910204, 30), (19910211, 30), (19910218, 30), (19910225, 30), (19910304, 30), (19910311, 29), (19910318, 29), (19910325, 29), (19910401, 29), (19910408, 29), (19910415, 29), (19910422, 29), (19910429, 29), (19910506, 29), (19910513, 29), (19910520, 29), (19910527, 29), (19910603, 29), (19910610, 29), (19910617, 29), (19910624, 29), (19910701, 29), (19910708, 30), (19910715, 29), (19910722, 29), (19910729, 29), (19910805, 29), (19910812, 29), (19910819, 29), (19910826, 30), (19910902, 30), (19910909, 30), (19910916, 30), (19910923, 30), (19910930, 30), (19911007, 31), (19911014, 31), (19911021, 31), (19911028, 31), (19911104, 44), (19911111, 44), (19911118, 44), (19911125, 44), (19911202, 31), (19911209, 44), (19911216, 45), (19911223, 45), (19911230, 45), (19920101, 44), (19920106, 45), (19920113, 45), (19920120, 45), (19920127, 45), (19920203, 45), (19920210, 29), (19920217, 45), (19920224, 45), (19920302, 45), (19920309, 45), (19920316, 45), (19920323, 45), (19920330, 45), (19920406, 45), (19920413, 45), (19920420, 45), (19920427, 45), (19920504, 45), (19920511, 45), (19920518, 45), (19920525, 45), (19920601, 45), (19920608, 45), (19920615, 45), (19920622, 45), (19920629, 45), (19920706, 45), (19920713, 46), (19920720, 46), (19920727, 45), (19920803, 73), (19920810, 73), (19920817, 73), (19920824, 119), (19920831, 90), (19920907, 90), (19920914, 90), (19920921, 90), (19920928, 90), (19921005, 62), (19921012, 62), (19921019, 62), (19921026, 62), (19921102, 62), (19921109, 62), (19921116, 62), (19921123, 62), (19921130, 62), (19921207, 62), (19921214, 62), (19921221, 62), (19921228, 45), (19930101, 44), (19930104, 45), (19930111, 45), (19930118, 45), (19930125, 45), (19930201, 45), (19930208, 32), (19930215, 45), (19930222, 45), (19930301, 45), (19930308, 45), (19930315, 45), (19930322, 45), (19930329, 45), (19930405, 45), (19930412, 62), (19930419, 62), (19930426, 62), (19930503, 62), (19930510, 62), (19930517, 44), (19930524, 44), (19930531, 44), (19930607, 44), (19930614, 44), (19930621, 44), (19930628, 44), (19930705, 62), (19930712, 62), (19930719, 62), (19930726, 62), (19930802, 43), (19930809, 43), (19930816, 43), (19930823, 43), (19930830, 43), (19930906, 43), (19930913, 43), (19930920, 76), (19930927, 75), (19931004, 58), (19931011, 58), (19931018, 58), (19931025, 58), (19931101, 58), (19931108, 58), (19931115, 75), (19931122, 75), (19931129, 75), (19931206, 75), (19931213, 75), (19931220, 75), (19931227, 75), (19940101, 73), (19940103, 75), (19940110, 75), (19940117, 75), (19940124, 75), (19940131, 62), (19940207, 63), (19940214, 63), (19940221, 63), (19940228, 62), (19940307, 62), (19940314, 62), (19940321, 62), (19940328, 61), (19940404, 62), (19940411, 61), (19940418, 44), (19940425, 57), (19940502, 57), (19940509, 57), (19940516, 57), (19940523, 57), (19940530, 57), (19940606, 65), (19940613, 65), (19940620, 65), (19940627, 65), (19940704, 67), (19940711, 67), (19940718, 60), (19940725, 60), (19940801, 60), (19940808, 60), (19940815, 60), (19940822, 60), (19940829, 60), (19940905, 60), (19940912, 68), (19940919, 68), (19940926, 69), (19941003, 69), (19941010, 69), (19941017, 69), (19941024, 59), (19941031, 59), (19941107, 69), (19941114, 69), (19941121, 69), (19941128, 69), (19941205, 69), (19941212, 69), (19941219, 69), (19941226, 69), (19950101, 69), (19950102, 69), (19950109, 69), (19950116, 69), (19950123, 69), (19950130, 69), (19950206, 69), (19950213, 69), (19950220, 69), (19950227, 69), (19950306, 69), (19950313, 69), (19950320, 69), (19950327, 69), (19950403, 69), (19950410, 69), (19950417, 69), (19950424, 69), (19950501, 69), (19950508, 69), (19950515, 69), (19950522, 69), (19950529, 69), (19950605, 69), (19950612, 96), (19950619, 96), (19950626, 96), (19950703, 96), (19950710, 97), (19950717, 118), (19950724, 118), (19950731, 118), (19950807, 118), (19950814, 118), (19950821, 131), (19950828, 131), (19950904, 131), (19950911, 131), (19950918, 131), (19950925, 131), (19951002, 131), (19951009, 131), (19951016, 131), (19951023, 131), (19951030, 131), (19951106, 131), (19951113, 138), (19951120, 138), (19951127, 138), (19951204, 138), (19951211, 138), (19951218, 138), (19951225, 138), (19960101, 138), (19960108, 125), (19960115, 125), (19960122, 125), (19960129, 125), (19960205, 125), (19960212, 125), (19960219, 125), (19960226, 147), (19960304, 147), (19960311, 147), (19960318, 147), (19960325, 147), (19960401, 147), (19960408, 147), (19960415, 147), (19960422, 147), (19960429, 147), (19960506, 147), (19960513, 147), (19960520, 147), (19960527, 147), (19960603, 147), (19960610, 147), (19960617, 147), (19960624, 147), (19960701, 147), (19960708, 171), (19960715, 171), (19960722, 171), (19960729, 171), (19960805, 171), (19960812, 171), (19960819, 171), (19960826, 171), (19960902, 171), (19960909, 194), (19960916, 172), (19960923, 172), (19960930, 172), (19961007, 172), (19961014, 175), (19961021, 175), (19961028, 191), (19961104, 191), (19961111, 213), (19961118, 213), (19961125, 213), (19961202, 213), (19961209, 213), (19961216, 213), (19961223, 185), (19961230, 185), (19970101, 185), (19970106, 185), (19970113, 185), (19970120, 185), (19970127, 209), (19970203, 209), (19970210, 209), (19970217, 209), (19970224, 223), (19970303, 223), (19970310, 223), (19970317, 223), (19970324, 223), (19970331, 223), (19970407, 223), (19970414, 225), (19970421, 225), (19970428, 225), (19970505, 225), (19970512, 225), (19970519, 225), (19970526, 225), (19970602, 225), (19970609, 225), (19970616, 225), (19970623, 225), (19970630, 225), (19970707, 164), (19970714, 257), (19970721, 257), (19970728, 257), (19970804, 273), (19970811, 273), (19970818, 273), (19970825, 273), (19970901, 273), (19970908, 273), (19970915, 273), (19970922, 273), (19970929, 273), (19971006, 273), (19971013, 299), (19971020, 314), (19971027, 314), (19971103, 337), (19971110, 337), (19971117, 363), (19971124, 363), (19971201, 363), (19971208, 394), (19971215, 394), (19971222, 394), (19971229, 394), (19980101, 394), (19980105, 394), (19980112, 394), (19980119, 394), (19980126, 394), (19980202, 394), (19980209, 394), (19980216, 394), (19980223, 394), (19980302, 394), (19980309, 394), (19980316, 394), (19980323, 394), (19980330, 426), (19980406, 426), (19980413, 459), (19980420, 459), (19980427, 459), (19980504, 459), (19980511, 459), (19980518, 459), (19980525, 459), (19980601, 459), (19980608, 543), (19980615, 569), (19980622, 590), (19980629, 590), (19980706, 633), (19980713, 633), (19980720, 633), (19980727, 634), (19980803, 634), (19980810, 634), (19980817, 631), (19980824, 631), (19980831, 660), (19980907, 660), (19980914, 663), (19980921, 663), (19980928, 683), (19981005, 688), (19981012, 688), (19981019, 696), (19981026, 693), (19981102, 693), (19981109, 692), (19981116, 692), (19981123, 692), (19981130, 709), (19981207, 703), (19981214, 703), (19981221, 703), (19981228, 703), (19990101, 703), (19990104, 722), (19990111, 722), (19990118, 722), (19990125, 722), (19990201, 728), (19990208, 723), (19990215, 723), (19990222, 723), (19990301, 723), (19990308, 723), (19990315, 728), (19990322, 728), (19990329, 728), (19990405, 728), (19990412, 728), (19990419, 728), (19990426, 752), (19990503, 761), (19990510, 761), (19990517, 777), (19990524, 777), (19990531, 777), (19990607, 804), (19990614, 804), (19990621, 804), (19990628, 804), (19990705, 804), (19990712, 829), (19990719, 829), (19990726, 829), (19990802, 829), (19990809, 870), (19990816, 873), (19990823, 853), (19990830, 861), (19990906, 861), (19990913, 879), (19990920, 879), (19990927, 899), (19991004, 927), (19991011, 941), (19991018, 964), (19991025, 941), (19991101, 941), (19991108, 941), (19991115, 941), (19991122, 941), (19991129, 966), (19991206, 966), (19991213, 989), (19991220, 989), (19991227, 989), (20000101, 989), (20000103, 989), (20000110, 989), (20000117, 989), (20000124, 989), (20000131, 1013), (20000207, 1038), (20000214, 1038), (20000221, 1038), (20000228, 1038), (20000306, 1065), (20000313, 1065), (20000320, 1065), (20000327, 1065), (20000403, 1065), (20000410, 1093), (20000417, 1093), (20000424, 1093), (20000501, 1122), (20000508, 1122), (20000515, 1106), (20000522, 1106), (20000529, 1106), (20000605, 1106), (20000612, 1160), (20000619, 1160), (20000626, 1188), (20000703, 1188), (20000710, 1204), (20000717, 1205), (20000724, 1212), (20000731, 1276), (20000807, 1276), (20000814, 1224), (20000821, 1224), (20000828, 1224), (20000904, 1224), (20000911, 1241), (20000918, 1265), (20000925, 1231), (20001002, 1223), (20001009, 1232), (20001016, 1253), (20001023, 1245), (20001030, 1247), (20001106, 1173), (20001113, 964), (20001120, 961), (20001127, 961), (20001204, 961), (20001211, 964), (20001218, 964), (20001225, 964), (20010101, 964), (20010108, 964), (20010115, 964), (20010122, 964), (20010129, 977), (20010205, 977), (20010212, 1004), (20010219, 1027), (20010226, 1027), (20010305, 1027), (20010312, 1027), (20010319, 1101), (20010326, 1101), (20010402, 914), (20010409, 930), (20010416, 952), (20010423, 961), (20010430, 988), (20010507, 1011), (20010514, 1011), (20010521, 1029), (20010528, 1067), (20010604, 1067), (20010611, 1094), (20010618, 1094), (20010625, 1073), (20010702, 1073), (20010709, 1113), (20010716, 1135), (20010723, 1149), (20010730, 1149), (20010806, 1175), (20010813, 1175), (20010820, 1175), (20010827, 1201), (20010903, 1201), (20010910, 1228), (20010917, 1231), (20010924, 1263), (20011001, 1287), (20011008, 1267), (20011015, 1288), (20011022, 1291), (20011029, 1312), (20011105, 1312), (20011112, 1412), (20011119, 1412), (20011126, 1437), (20011203, 1437), (20011210, 1437), (20011217, 1430), (20011224, 1430), (20011231, 1430), (20020101, 1430), (20020107, 1430), (20020114, 1430), (20020121, 1430), (20020128, 1430), (20020204, 1422), (20020211, 1422), (20020218, 1422), (20020225, 1424), (20020304, 1424), (20020311, 1424), (20020318, 1448), (20020325, 1448), (20020401, 1573), (20020408, 1574), (20020415, 1574), (20020422, 1574), (20020429, 1577), (20020506, 1730), (20020513, 1577), (20020520, 1577), (20020527, 1577), (20020603, 1577), (20020610, 1783), (20020617, 1803), (20020624, 1783), (20020701, 1783), (20020708, 1834), (20020715, 1835), (20020722, 1828), (20020729, 1853), (20020805, 1853), (20020812, 1925), (20020819, 1915), (20020826, 2111), (20020902, 2111), (20020909, 2451), (20020916, 2457), (20020923, 2462), (20020930, 2496), (20021007, 2526), (20021014, 2520), (20021021, 2505), (20021028, 2505), (20021104, 2498), (20021111, 2497), (20021118, 2497), (20021125, 2497), (20021202, 2497), (20021209, 2497), (20021216, 2497), (20021223, 2497), (20021230, 2497), (20030101, 2497), (20030106, 2497), (20030113, 2497), (20030120, 2497), (20030127, 2497), (20030203, 2517), (20030210, 2507), (20030217, 2490), (20030224, 2528), (20030303, 2549), (20030310, 2549), (20030317, 2571), (20030324, 2571), (20030331, 2614), (20030407, 2587), (20030414, 2587), (20030421, 2608), (20030428, 2719), (20030505, 2652), (20030512, 2671), (20030519, 2728), (20030526, 1860), (20030602, 2728), (20030609, 2753), (20030616, 2753), (20030623, 2731), (20030630, 2731), (20030707, 2730), (20030714, 2755), (20030721, 2759), (20030728, 2777), (20030804, 2732), (20030811, 2734), (20030818, 2755), (20030825, 2801), (20030901, 2801), (20030908, 2798), (20030915, 2847), (20030922, 2862), (20030929, 2930), (20031006, 2961), (20031013, 2966), (20031020, 3035), (20031027, 3020), (20031103, 3038), (20031110, 3052), (20031117, 3065), (20031124, 3092), (20031201, 3120), (20031208, 3190), (20031215, 3211), (20031222, 3211), (20031229, 3214), (20040101, 3214), (20040105, 3206), (20040112, 3206), (20040119, 3206), (20040126, 3206), (20040202, 3257), (20040209, 3265), (20040216, 3282), (20040223, 3282), (20040301, 3279), (20040308, 3286), (20040315, 3286), (20040322, 3286), (20040329, 3286), (20040405, 3277), (20040412, 3286), (20040419, 1489), (20040426, 3379), (20040503, 2613), (20040510, 1187), (20040517, 2361), (20040524, 2955), (20040531, 2535), (20040607, 3433), (20040614, 3456), (20040621, 3492), (20040628, 3492), (20040705, 3498), (20040712, 3516), (20040719, 3587), (20040726, 3592), (20040802, 3592), (20040809, 3645), (20040816, 3647), (20040823, 3661), (20040830, 3705), (20040906, 3705), (20040913, 3785), (20040920, 3831), (20040927, 3913), (20041004, 3957), (20041011, 3986), (20041018, 3987), (20041025, 3968), (20041101, 4011), (20041108, 4071), (20041115, 4124), (20041122, 4145), (20041129, 4147), (20041206, 4160), (20041213, 4160), (20041220, 4160), (20041227, 4160), (20050101, 4160), (20050103, 4160), (20050110, 4160), (20050117, 4160), (20050124, 4160), (20050131, 4198), (20050207, 4198), (20050214, 4211), (20050221, 4286), (20050228, 4286), (20050307, 4313), (20050314, 4313), (20050321, 4333), (20050328, 4333), (20050404, 4362), (20050411, 4371), (20050418, 4379), (20050425, 4379), (20050502, 4379), (20050509, 4470), (20050516, 4489), (20050523, 4522), (20050530, 4522), (20050606, 4682), (20050613, 4705), (20050620, 4727), (20050627, 4727), (20050704, 4792), (20050711, 4816), (20050718, 4847), (20050725, 4859), (20050801, 4926), (20050808, 4982), (20050815, 5020), (20050822, 5090), (20050829, 5100), (20050905, 5100), (20050912, 5187), (20050919, 5173), (20050926, 5175), (20051003, 5215), (20051010, 5249), (20051017, 5237), (20051024, 5257), (20051031, 5331), (20051107, 5362), (20051114, 5357), (20051121, 5391), (20051128, 5401), (20051205, 5452), (20051212, 5452), (20051219, 5452), (20051226, 5452), (20060101, 5452), (20060102, 5452), (20060109, 5452), (20060116, 5452), (20060123, 5452), (20060130, 5441), (20060206, 5425), (20060213, 5441), (20060220, 5478), (20060227, 5528), (20060306, 5548), (20060313, 5548), (20060320, 5559), (20060327, 5559), (20060403, 5626), (20060410, 5626), (20060417, 5644), (20060424, 5658), (20060501, 5656), (20060508, 5654), (20060515, 5683), (20060522, 5721), (20060529, 5798), (20060605, 5798), (20060612, 5862), (20060619, 5897), (20060626, 5944), (20060703, 5944), (20060710, 5983), (20060717, 6026), (20060724, 6065), (20060731, 6133), (20060807, 6151), (20060814, 6226), (20060821, 6289), (20060828, 6284), (20060904, 6284), (20060911, 6304), (20060918, 6347), (20060925, 6376), (20061002, 6436), (20061009, 6520), (20061016, 6629), (20061023, 6730), (20061030, 6808), (20061106, 6816), (20061113, 6807), (20061120, 6893), (20061127, 6896), (20061204, 6931), (20061211, 6953), (20061218, 6953), (20061225, 6953), (20070101, 6953), (20070108, 6926), (20070115, 6926), (20070122, 6926), (20070129, 6925), (20070205, 6925), (20070212, 6930), (20070219, 6942), (20070226, 6988), (20070305, 7017), (20070312, 7017), (20070319, 7058), (20070326, 7058), (20070402, 7139), (20070409, 7175), (20070416, 7197), (20070423, 7197), (20070430, 7197), (20070507, 7233), (20070514, 7317), (20070521, 7341), (20070528, 7365), (20070604, 7365), (20070611, 7448), (20070618, 7448), (20070625, 7473), (20070702, 7473), (20070709, 7495), (20070716, 7478), (20070723, 7470), (20070730, 7528), (20070806, 7522), (20070813, 7527), (20070820, 7503), (20070827, 7504), (20070903, 7504), (20070910, 7602), (20070917, 7643), (20070924, 7686), (20071001, 7697), (20071008, 7707), (20071015, 7687), (20071022, 7638), (20071029, 7711), (20071105, 7677), (20071112, 7664), (20071119, 7666), (20071126, 7674), (20071203, 7650), (20071210, 7659), (20071217, 7659), (20071224, 7682), (20071231, 7682), (20080101, 7682), (20080107, 7682), (20080114, 7711), (20080121, 7711), (20080128, 7691), (20080204, 7716), (20080211, 7743), (20080218, 7742), (20080225, 7731), (20080303, 7761), (20080310, 7790), (20080317, 7790), (20080324, 7832), (20080331, 7832), (20080407, 7873), (20080414, 7889), (20080421, 7917), (20080428, 7917), (20080505, 7929), (20080512, 8002), (20080519, 8022), (20080526, 8090), (20080602, 8090), (20080609, 8030), (20080616, 7970), (20080623, 7966), (20080630, 7966), (20080707, 8089), (20080714, 8113), (20080721, 8235), (20080728, 8280), (20080804, 8325), (20080811, 8372), (20080818, 8387), (20080825, 8417), (20080901, 8417), (20080908, 8527), (20080915, 8639), (20080922, 8690), (20080929, 8731), (20081006, 8762), (20081013, 8794), (20081020, 8836), (20081027, 8898), (20081103, 8956), (20081110, 8996), (20081117, 9003), (20081124, 9019), (20081201, 9050), (20081208, 9076), (20081215, 9077), (20081222, 9070), (20081229, 9070), (20090101, 9070), (20090105, 9064), (20090112, 9064), (20090119, 9064), (20090126, 9064), (20090202, 9087), (20090209, 9087), (20090216, 9059), (20090223, 9063), (20090302, 9063), (20090309, 9053), (20090316, 9053), (20090323, 9057), (20090330, 9057), (20090406, 9066), (20090413, 9121), (20090420, 9110), (20090427, 9111), (20090504, 9094), (20090511, 9143), (20090518, 9140), (20090525, 9153), (20090601, 9153), (20090608, 9203), (20090615, 9239), (20090622, 9255), (20090629, 9255), (20090706, 9310), (20090713, 9376), (20090720, 9474), (20090727, 9589), (20090803, 9611), (20090810, 9598), (20090817, 9642), (20090824, 9682), (20090831, 9682), (20090907, 9682), (20090914, 9808), (20090921, 9856), (20090928, 9918), (20091005, 9929), (20091012, 9925), (20091019, 10003), (20091026, 10025), (20091102, 10061), (20091109, 10116), (20091116, 10137), (20091123, 10204), (20091130, 10238), (20091207, 10221), (20091214, 10272), (20091221, 10272), (20091228, 10318), (20100101, 10318), (20100104, 10318), (20100111, 10320), (20100118, 10329), (20100125, 10329), (20100201, 10373), (20100208, 10372), (20100215, 10389), (20100222, 10404), (20100301, 10430), (20100308, 10442), (20100315, 10442), (20100322, 10412), (20100329, 10412), (20100405, 10481), (20100412, 10515), (20100419, 10543), (20100426, 10580), (20100503, 10590), (20100510, 10576), (20100517, 10593), (20100524, 10634), (20100531, 10634), (20100607, 10613), (20100614, 10630), (20100621, 10634), (20100628, 10634), (20100705, 10685), (20100712, 10726), (20100719, 10756), (20100726, 10817), (20100802, 10835), (20100809, 10937), (20100816, 10999), (20100823, 11026), (20100830, 11125), (20100906, 11125), (20100913, 11256), (20100920, 11290), (20100927, 11339), (20101004, 11460), (20101011, 11566), (20101018, 11594), (20101025, 11617), (20101101, 11687), (20101108, 11735), (20101115, 11814), (20101122, 11845), (20101129, 11877), (20101206, 11888), (20101213, 11907), (20101220, 11913), (20101227, 11904), (20110101, 11904), (20110103, 12060), (20110110, 12067), (20110117, 12094), (20110124, 12094), (20110131, 12143), (20110207, 12181), (20110214, 12204), (20110221, 12201), (20110228, 12254), (20110307, 12267), (20110314, 12267), (20110321, 12303), (20110328, 12303), (20110404, 12343), (20110411, 12398), (20110418, 12434), (20110425, 12422), (20110502, 12438), (20110509, 12482), (20110516, 12467), (20110523, 12522), (20110530, 12522), (20110606, 12659), (20110613, 12682), (20110620, 12686), (20110627, 12686), (20110704, 12867), (20110711, 12895), (20110718, 12927), (20110725, 13006), (20110801, 12999), (20110808, 13081), (20110815, 13129), (20110822, 13140), (20110829, 13174), (20110905, 13174), (20110912, 13299), (20110919, 13342), (20110926, 13382), (20111003, 13372), (20111010, 13382), (20111017, 13411), (20111024, 13443), (20111031, 13465), (20111107, 13443), (20111114, 13482), (20111121, 13518), (20111128, 13517), (20111205, 13542), (20111212, 13536), (20111219, 13565), (20111226, 13603), (20120101, 13603), (20120102, 13610), (20120109, 13628), (20120116, 13618), (20120123, 13618), (20120130, 13667), (20120206, 13666), (20120213, 13674), (20120220, 13719), (20120227, 13788), (20120305, 13791), (20120312, 13791), (20120319, 13818), (20120326, 13818), (20120402, 13881), (20120409, 13902), (20120416, 13938), (20120423, 13964), (20120430, 13983), (20120507, 14016), (20120514, 14015), (20120521, 14034), (20120528, 14087), (20120604, 14087), (20120611, 14072), (20120618, 14138), (20120625, 14172), (20120702, 14172), (20120709, 14180), (20120716, 14223), (20120723, 14250), (20120730, 14264), (20120806, 14286), (20120813, 14331), (20120820, 14361), (20120827, 14389), (20120903, 14389), (20120910, 14389), (20120917, 14402), (20120924, 14438), (20121001, 14472), (20121008, 14480), (20121015, 14513), (20121022, 14525), (20121029, 14547), (20121105, 14585), (20121112, 14621), (20121119, 14624), (20121126, 14612), (20121203, 14610), (20121210, 14639), (20121217, 14633), (20121224, 14649), (20121231, 13949), (20130101, 14648), (20130107, 13966), (20130114, 14667), (20130121, 14667), (20130128, 14667), (20130204, 14652), (20130211, 14651), (20130218, 14649), (20130225, 14554), (20130304, 14695), (20130311, 14727), (20130318, 13048), (20130401, 6790), (20130408, 14591), (20130415, 14449), (20130422, 14451), (20130429, 14462), (20130506, 14487), (20130513, 14516), (20130520, 14531), (20130527, 14545), (20130603, 14545), (20130610, 14553), (20130617, 14569), (20130624, 14650), (20130708, 14651), (20130715, 14689), (20130722, 14751), (20130729, 14766), (20130805, 14679), (20130812, 14599), (20130819, 14740), (20130826, 14714), (20130902, 14796), (20130909, 14820), (20130916, 14866), (20130923, 14878), (20130930, 14885), (20131007, 15028), (20131014, 15072), (20131021, 15025), (20131028, 15071), (20131104, 15098), (20131111, 15101), (20131118, 15151), (20131125, 15337), (20131202, 15334), (20131209, 15512), (20131216, 15540), (20131223, 15701), (20131230, 15708), (20140106, 15703), (20140113, 15637), (20140120, 8585), (20140127, 15646), (20140203, 15632), (20140210, 15637), (20140217, 8565), (20140224, 15659), (20150302, 15557), (20150406, 15578), (20150413, 15545), (20150420, 15568), (20150427, 15475), (20150511, 15710), (20150518, 15623), (20150525, 15741), (20150608, 15741), (20150622, 15810), (20150803, 15761), (20150810, 15776), (20150824, 15908), (20150831, 16184), (20150914, 15832), (20150921, 15800), (20151005, 16178), (20151012, 16191), (20151019, 16138), (20151102, 16293), (20160111, 4812), (20160118, 16518), (20160201, 16629), (20160208, 16586), (20160215, 16529), (20160222, 16454), (20160229, 16515), (20160307, 16517), (20160411, 16446), (20160418, 16454), (20160425, 16489), (20160502, 16388), (20160509, 16374), (20160523, 16351), (20160606, 16361), (20160620, 16314), (20160627, 16293), (20160815, 16325), (20160919, 16316), (20160926, 16305), (20161010, 16233), (20161031, 16349), (20161107, 16364), (20161114, 16249), (20161121, 16345), (20161128, 16294), (20161205, 16336), (20161212, 16387), (20170102, 16372), (20170109, 16406), (20170116, 16379), (20170213, 16305), (20170220, 16207), (20170306, 16111), (20170320, 16230), (20170417, 16270), (20170424, 16226), (20170501, 16303), (20170508, 16124), (20170515, 16204), (20170522, 16290), (20170529, 16649), (20170612, 16157), (20170619, 16189), (20170626, 16184), (20170703, 16597), (20170717, 15983), (20170724, 16138), (20170731, 16145), (20170807, 16147), (20170814, 16268), (20170821, 16279), (20170828, 16301), (20170911, 16161)]
Gold Output      : [(0, 19870119), (0, 19870126), (0, 19870202), (0, 19870209), (0, 19870302), (0, 19870330), (0, 19870406), (0, 19870413), (0, 19870420), (0, 19870427), (0, 19870504), (0, 19870511), (0, 19870518), (0, 19870525), (0, 19870601), (0, 19870608), (0, 19870615), (0, 19870622), (0, 19870629), (0, 19870706), (0, 19870713), (0, 19870720), (0, 19870727), (0, 19870803), (0, 19870810), (0, 19870817), (0, 19870824), (0, 19870831), (0, 19870907), (0, 19870914), (0, 19870921), (0, 19870928), (0, 19871005), (0, 19871012), (0, 19871019), (0, 19871026), (0, 19871102), (0, 19871109), (0, 19871116), (0, 19871123), (0, 19871130), (0, 19871207), (0, 19871214), (0, 19871221), (0, 19871228), (0, 19880101), (0, 19880104), (0, 19880111), (0, 19880118), (0, 19880125), (0, 19880201), (0, 19880208), (0, 19880215), (0, 19880222), (0, 19880229), (0, 19880307), (0, 19880314), (0, 19880321), (0, 19880328), (0, 19880404), (0, 19880411), (0, 19880418), (0, 19880425), (0, 19880502), (0, 19880509), (0, 19880516), (0, 19880523), (0, 19880530), (0, 19880606), (0, 19880613), (0, 19880620), (0, 19880627), (0, 19880704), (0, 19880711), (0, 19880718), (0, 19880725), (0, 19880801), (0, 19880808), (0, 19880815), (0, 19880822), (0, 19880829), (0, 19880905), (0, 19880912), (0, 19880919), (0, 19880926), (0, 19881003), (0, 19881010), (0, 19881017), (0, 19881024), (0, 19881031), (0, 19881107), (0, 19881114), (29, 19881121), (29, 19881128), (29, 19881205), (29, 19881212), (29, 19881219), (29, 19881226), (28, 19890101), (29, 19890102), (29, 19890109), (29, 19890116), (29, 19890123), (29, 19890130), (29, 19890206), (0, 19890213), (0, 19890220), (0, 19890227), (0, 19890306), (29, 19890313), (29, 19890320), (0, 19890327), (0, 19890403), (29, 19890410), (29, 19890417), (29, 19890424), (29, 19890501), (29, 19890508), (29, 19890515), (29, 19890522), (29, 19890529), (29, 19890605), (29, 19890612), (29, 19890619), (29, 19890626), (29, 19890703), (29, 19890710), (29, 19890717), (29, 19890724), (29, 19890731), (29, 19890807), (29, 19890814), (29, 19890821), (29, 19890828), (29, 19890904), (29, 19890911), (29, 19890918), (29, 19890925), (29, 19891002), (29, 19891009), (29, 19891016), (29, 19891023), (29, 19891030), (29, 19891106), (29, 19891113), (29, 19891120), (29, 19891127), (29, 19891204), (29, 19891211), (29, 19891218), (29, 19891225), (28, 19900101), (29, 19900108), (29, 19900115), (29, 19900122), (29, 19900129), (29, 19900205), (29, 19900212), (29, 19900219), (29, 19900226), (29, 19900305), (29, 19900312), (29, 19900319), (29, 19900326), (29, 19900402), (29, 19900409), (29, 19900416), (29, 19900423), (29, 19900430), (29, 19900507), (29, 19900514), (29, 19900521), (29, 19900528), (29, 19900604), (29, 19900611), (30, 19900618), (30, 19900625), (30, 19900702), (30, 19900709), (30, 19900716), (30, 19900723), (30, 19900730), (30, 19900806), (30, 19900813), (30, 19900820), (30, 19900827), (30, 19900903), (30, 19900910), (30, 19900917), (30, 19900924), (30, 19901001), (30, 19901008), (30, 19901015), (30, 19901022), (30, 19901029), (30, 19901105), (30, 19901112), (30, 19901119), (30, 19901126), (30, 19901203), (30, 19901210), (30, 19901217), (30, 19901224), (30, 19901231), (29, 19910101), (30, 19910107), (30, 19910114), (30, 19910121), (30, 19910128), (30, 19910204), (30, 19910211), (30, 19910218), (30, 19910225), (30, 19910304), (29, 19910311), (29, 19910318), (29, 19910325), (29, 19910401), (29, 19910408), (29, 19910415), (29, 19910422), (29, 19910429), (29, 19910506), (29, 19910513), (29, 19910520), (29, 19910527), (29, 19910603), (29, 19910610), (29, 19910617), (29, 19910624), (29, 19910701), (30, 19910708), (29, 19910715), (29, 19910722), (29, 19910729), (29, 19910805), (29, 19910812), (29, 19910819), (30, 19910826), (30, 19910902), (30, 19910909), (30, 19910916), (30, 19910923), (30, 19910930), (31, 19911007), (31, 19911014), (31, 19911021), (31, 19911028), (44, 19911104), (44, 19911111), (44, 19911118), (44, 19911125), (31, 19911202), (44, 19911209), (45, 19911216), (45, 19911223), (45, 19911230), (44, 19920101), (45, 19920106), (45, 19920113), (45, 19920120), (45, 19920127), (45, 19920203), (29, 19920210), (45, 19920217), (45, 19920224), (45, 19920302), (45, 19920309), (45, 19920316), (45, 19920323), (45, 19920330), (45, 19920406), (45, 19920413), (45, 19920420), (45, 19920427), (45, 19920504), (45, 19920511), (45, 19920518), (45, 19920525), (45, 19920601), (45, 19920608), (45, 19920615), (45, 19920622), (45, 19920629), (45, 19920706), (46, 19920713), (46, 19920720), (45, 19920727), (73, 19920803), (73, 19920810), (73, 19920817), (119, 19920824), (90, 19920831), (90, 19920907), (90, 19920914), (90, 19920921), (90, 19920928), (62, 19921005), (62, 19921012), (62, 19921019), (62, 19921026), (62, 19921102), (62, 19921109), (62, 19921116), (62, 19921123), (62, 19921130), (62, 19921207), (62, 19921214), (62, 19921221), (45, 19921228), (44, 19930101), (45, 19930104), (45, 19930111), (45, 19930118), (45, 19930125), (45, 19930201), (32, 19930208), (45, 19930215), (45, 19930222), (45, 19930301), (45, 19930308), (45, 19930315), (45, 19930322), (45, 19930329), (45, 19930405), (62, 19930412), (62, 19930419), (62, 19930426), (62, 19930503), (62, 19930510), (44, 19930517), (44, 19930524), (44, 19930531), (44, 19930607), (44, 19930614), (44, 19930621), (44, 19930628), (62, 19930705), (62, 19930712), (62, 19930719), (62, 19930726), (43, 19930802), (43, 19930809), (43, 19930816), (43, 19930823), (43, 19930830), (43, 19930906), (43, 19930913), (76, 19930920), (75, 19930927), (58, 19931004), (58, 19931011), (58, 19931018), (58, 19931025), (58, 19931101), (58, 19931108), (75, 19931115), (75, 19931122), (75, 19931129), (75, 19931206), (75, 19931213), (75, 19931220), (75, 19931227), (73, 19940101), (75, 19940103), (75, 19940110), (75, 19940117), (75, 19940124), (62, 19940131), (63, 19940207), (63, 19940214), (63, 19940221), (62, 19940228), (62, 19940307), (62, 19940314), (62, 19940321), (61, 19940328), (62, 19940404), (61, 19940411), (44, 19940418), (57, 19940425), (57, 19940502), (57, 19940509), (57, 19940516), (57, 19940523), (57, 19940530), (65, 19940606), (65, 19940613), (65, 19940620), (65, 19940627), (67, 19940704), (67, 19940711), (60, 19940718), (60, 19940725), (60, 19940801), (60, 19940808), (60, 19940815), (60, 19940822), (60, 19940829), (60, 19940905), (68, 19940912), (68, 19940919), (69, 19940926), (69, 19941003), (69, 19941010), (69, 19941017), (59, 19941024), (59, 19941031), (69, 19941107), (69, 19941114), (69, 19941121), (69, 19941128), (69, 19941205), (69, 19941212), (69, 19941219), (69, 19941226), (69, 19950101), (69, 19950102), (69, 19950109), (69, 19950116), (69, 19950123), (69, 19950130), (69, 19950206), (69, 19950213), (69, 19950220), (69, 19950227), (69, 19950306), (69, 19950313), (69, 19950320), (69, 19950327), (69, 19950403), (69, 19950410), (69, 19950417), (69, 19950424), (69, 19950501), (69, 19950508), (69, 19950515), (69, 19950522), (69, 19950529), (69, 19950605), (96, 19950612), (96, 19950619), (96, 19950626), (96, 19950703), (97, 19950710), (118, 19950717), (118, 19950724), (118, 19950731), (118, 19950807), (118, 19950814), (131, 19950821), (131, 19950828), (131, 19950904), (131, 19950911), (131, 19950918), (131, 19950925), (131, 19951002), (131, 19951009), (131, 19951016), (131, 19951023), (131, 19951030), (131, 19951106), (138, 19951113), (138, 19951120), (138, 19951127), (138, 19951204), (138, 19951211), (138, 19951218), (138, 19951225), (138, 19960101), (125, 19960108), (125, 19960115), (125, 19960122), (125, 19960129), (125, 19960205), (125, 19960212), (125, 19960219), (147, 19960226), (147, 19960304), (147, 19960311), (147, 19960318), (147, 19960325), (147, 19960401), (147, 19960408), (147, 19960415), (147, 19960422), (147, 19960429), (147, 19960506), (147, 19960513), (147, 19960520), (147, 19960527), (147, 19960603), (147, 19960610), (147, 19960617), (147, 19960624), (147, 19960701), (171, 19960708), (171, 19960715), (171, 19960722), (171, 19960729), (171, 19960805), (171, 19960812), (171, 19960819), (171, 19960826), (171, 19960902), (194, 19960909), (172, 19960916), (172, 19960923), (172, 19960930), (172, 19961007), (175, 19961014), (175, 19961021), (191, 19961028), (191, 19961104), (213, 19961111), (213, 19961118), (213, 19961125), (213, 19961202), (213, 19961209), (213, 19961216), (185, 19961223), (185, 19961230), (185, 19970101), (185, 19970106), (185, 19970113), (185, 19970120), (209, 19970127), (209, 19970203), (209, 19970210), (209, 19970217), (223, 19970224), (223, 19970303), (223, 19970310), (223, 19970317), (223, 19970324), (223, 19970331), (223, 19970407), (225, 19970414), (225, 19970421), (225, 19970428), (225, 19970505), (225, 19970512), (225, 19970519), (225, 19970526), (225, 19970602), (225, 19970609), (225, 19970616), (225, 19970623), (225, 19970630), (164, 19970707), (257, 19970714), (257, 19970721), (257, 19970728), (273, 19970804), (273, 19970811), (273, 19970818), (273, 19970825), (273, 19970901), (273, 19970908), (273, 19970915), (273, 19970922), (273, 19970929), (273, 19971006), (299, 19971013), (314, 19971020), (314, 19971027), (337, 19971103), (337, 19971110), (363, 19971117), (363, 19971124), (363, 19971201), (394, 19971208), (394, 19971215), (394, 19971222), (394, 19971229), (394, 19980101), (394, 19980105), (394, 19980112), (394, 19980119), (394, 19980126), (394, 19980202), (394, 19980209), (394, 19980216), (394, 19980223), (394, 19980302), (394, 19980309), (394, 19980316), (394, 19980323), (426, 19980330), (426, 19980406), (459, 19980413), (459, 19980420), (459, 19980427), (459, 19980504), (459, 19980511), (459, 19980518), (459, 19980525), (459, 19980601), (543, 19980608), (569, 19980615), (590, 19980622), (590, 19980629), (633, 19980706), (633, 19980713), (633, 19980720), (634, 19980727), (634, 19980803), (634, 19980810), (631, 19980817), (631, 19980824), (660, 19980831), (660, 19980907), (663, 19980914), (663, 19980921), (683, 19980928), (688, 19981005), (688, 19981012), (696, 19981019), (693, 19981026), (693, 19981102), (692, 19981109), (692, 19981116), (692, 19981123), (709, 19981130), (703, 19981207), (703, 19981214), (703, 19981221), (703, 19981228), (703, 19990101), (722, 19990104), (722, 19990111), (722, 19990118), (722, 19990125), (728, 19990201), (723, 19990208), (723, 19990215), (723, 19990222), (723, 19990301), (723, 19990308), (728, 19990315), (728, 19990322), (728, 19990329), (728, 19990405), (728, 19990412), (728, 19990419), (752, 19990426), (761, 19990503), (761, 19990510), (777, 19990517), (777, 19990524), (777, 19990531), (804, 19990607), (804, 19990614), (804, 19990621), (804, 19990628), (804, 19990705), (829, 19990712), (829, 19990719), (829, 19990726), (829, 19990802), (870, 19990809), (873, 19990816), (853, 19990823), (861, 19990830), (861, 19990906), (879, 19990913), (879, 19990920), (899, 19990927), (927, 19991004), (941, 19991011), (964, 19991018), (941, 19991025), (941, 19991101), (941, 19991108), (941, 19991115), (941, 19991122), (966, 19991129), (966, 19991206), (989, 19991213), (989, 19991220), (989, 19991227), (989, 20000101), (989, 20000103), (989, 20000110), (989, 20000117), (989, 20000124), (1013, 20000131), (1038, 20000207), (1038, 20000214), (1038, 20000221), (1038, 20000228), (1065, 20000306), (1065, 20000313), (1065, 20000320), (1065, 20000327), (1065, 20000403), (1093, 20000410), (1093, 20000417), (1093, 20000424), (1122, 20000501), (1122, 20000508), (1106, 20000515), (1106, 20000522), (1106, 20000529), (1106, 20000605), (1160, 20000612), (1160, 20000619), (1188, 20000626), (1188, 20000703), (1204, 20000710), (1205, 20000717), (1212, 20000724), (1276, 20000731), (1276, 20000807), (1224, 20000814), (1224, 20000821), (1224, 20000828), (1224, 20000904), (1241, 20000911), (1265, 20000918), (1231, 20000925), (1223, 20001002), (1232, 20001009), (1253, 20001016), (1245, 20001023), (1247, 20001030), (1173, 20001106), (964, 20001113), (961, 20001120), (961, 20001127), (961, 20001204), (964, 20001211), (964, 20001218), (964, 20001225), (964, 20010101), (964, 20010108), (964, 20010115), (964, 20010122), (977, 20010129), (977, 20010205), (1004, 20010212), (1027, 20010219), (1027, 20010226), (1027, 20010305), (1027, 20010312), (1101, 20010319), (1101, 20010326), (914, 20010402), (930, 20010409), (952, 20010416), (961, 20010423), (988, 20010430), (1011, 20010507), (1011, 20010514), (1029, 20010521), (1067, 20010528), (1067, 20010604), (1094, 20010611), (1094, 20010618), (1073, 20010625), (1073, 20010702), (1113, 20010709), (1135, 20010716), (1149, 20010723), (1149, 20010730), (1175, 20010806), (1175, 20010813), (1175, 20010820), (1201, 20010827), (1201, 20010903), (1228, 20010910), (1231, 20010917), (1263, 20010924), (1287, 20011001), (1267, 20011008), (1288, 20011015), (1291, 20011022), (1312, 20011029), (1312, 20011105), (1412, 20011112), (1412, 20011119), (1437, 20011126), (1437, 20011203), (1437, 20011210), (1430, 20011217), (1430, 20011224), (1430, 20011231), (1430, 20020101), (1430, 20020107), (1430, 20020114), (1430, 20020121), (1430, 20020128), (1422, 20020204), (1422, 20020211), (1422, 20020218), (1424, 20020225), (1424, 20020304), (1424, 20020311), (1448, 20020318), (1448, 20020325), (1573, 20020401), (1574, 20020408), (1574, 20020415), (1574, 20020422), (1577, 20020429), (1730, 20020506), (1577, 20020513), (1577, 20020520), (1577, 20020527), (1577, 20020603), (1783, 20020610), (1803, 20020617), (1783, 20020624), (1783, 20020701), (1834, 20020708), (1835, 20020715), (1828, 20020722), (1853, 20020729), (1853, 20020805), (1925, 20020812), (1915, 20020819), (2111, 20020826), (2111, 20020902), (2451, 20020909), (2457, 20020916), (2462, 20020923), (2496, 20020930), (2526, 20021007), (2520, 20021014), (2505, 20021021), (2505, 20021028), (2498, 20021104), (2497, 20021111), (2497, 20021118), (2497, 20021125), (2497, 20021202), (2497, 20021209), (2497, 20021216), (2497, 20021223), (2497, 20021230), (2497, 20030101), (2497, 20030106), (2497, 20030113), (2497, 20030120), (2497, 20030127), (2517, 20030203), (2507, 20030210), (2490, 20030217), (2528, 20030224), (2549, 20030303), (2549, 20030310), (2571, 20030317), (2571, 20030324), (2614, 20030331), (2587, 20030407), (2587, 20030414), (2608, 20030421), (2719, 20030428), (2652, 20030505), (2671, 20030512), (2728, 20030519), (1860, 20030526), (2728, 20030602), (2753, 20030609), (2753, 20030616), (2731, 20030623), (2731, 20030630), (2730, 20030707), (2755, 20030714), (2759, 20030721), (2777, 20030728), (2732, 20030804), (2734, 20030811), (2755, 20030818), (2801, 20030825), (2801, 20030901), (2798, 20030908), (2847, 20030915), (2862, 20030922), (2930, 20030929), (2961, 20031006), (2966, 20031013), (3035, 20031020), (3020, 20031027), (3038, 20031103), (3052, 20031110), (3065, 20031117), (3092, 20031124), (3120, 20031201), (3190, 20031208), (3211, 20031215), (3211, 20031222), (3214, 20031229), (3214, 20040101), (3206, 20040105), (3206, 20040112), (3206, 20040119), (3206, 20040126), (3257, 20040202), (3265, 20040209), (3282, 20040216), (3282, 20040223), (3279, 20040301), (3286, 20040308), (3286, 20040315), (3286, 20040322), (3286, 20040329), (3277, 20040405), (3286, 20040412), (1489, 20040419), (3379, 20040426), (2613, 20040503), (1187, 20040510), (2361, 20040517), (2955, 20040524), (2535, 20040531), (3433, 20040607), (3456, 20040614), (3492, 20040621), (3492, 20040628), (3498, 20040705), (3516, 20040712), (3587, 20040719), (3592, 20040726), (3592, 20040802), (3645, 20040809), (3647, 20040816), (3661, 20040823), (3705, 20040830), (3705, 20040906), (3785, 20040913), (3831, 20040920), (3913, 20040927), (3957, 20041004), (3986, 20041011), (3987, 20041018), (3968, 20041025), (4011, 20041101), (4071, 20041108), (4124, 20041115), (4145, 20041122), (4147, 20041129), (4160, 20041206), (4160, 20041213), (4160, 20041220), (4160, 20041227), (4160, 20050101), (4160, 20050103), (4160, 20050110), (4160, 20050117), (4160, 20050124), (4198, 20050131), (4198, 20050207), (4211, 20050214), (4286, 20050221), (4286, 20050228), (4313, 20050307), (4313, 20050314), (4333, 20050321), (4333, 20050328), (4362, 20050404), (4371, 20050411), (4379, 20050418), (4379, 20050425), (4379, 20050502), (4470, 20050509), (4489, 20050516), (4522, 20050523), (4522, 20050530), (4682, 20050606), (4705, 20050613), (4727, 20050620), (4727, 20050627), (4792, 20050704), (4816, 20050711), (4847, 20050718), (4859, 20050725), (4926, 20050801), (4982, 20050808), (5020, 20050815), (5090, 20050822), (5100, 20050829), (5100, 20050905), (5187, 20050912), (5173, 20050919), (5175, 20050926), (5215, 20051003), (5249, 20051010), (5237, 20051017), (5257, 20051024), (5331, 20051031), (5362, 20051107), (5357, 20051114), (5391, 20051121), (5401, 20051128), (5452, 20051205), (5452, 20051212), (5452, 20051219), (5452, 20051226), (5452, 20060101), (5452, 20060102), (5452, 20060109), (5452, 20060116), (5452, 20060123), (5441, 20060130), (5425, 20060206), (5441, 20060213), (5478, 20060220), (5528, 20060227), (5548, 20060306), (5548, 20060313), (5559, 20060320), (5559, 20060327), (5626, 20060403), (5626, 20060410), (5644, 20060417), (5658, 20060424), (5656, 20060501), (5654, 20060508), (5683, 20060515), (5721, 20060522), (5798, 20060529), (5798, 20060605), (5862, 20060612), (5897, 20060619), (5944, 20060626), (5944, 20060703), (5983, 20060710), (6026, 20060717), (6065, 20060724), (6133, 20060731), (6151, 20060807), (6226, 20060814), (6289, 20060821), (6284, 20060828), (6284, 20060904), (6304, 20060911), (6347, 20060918), (6376, 20060925), (6436, 20061002), (6520, 20061009), (6629, 20061016), (6730, 20061023), (6808, 20061030), (6816, 20061106), (6807, 20061113), (6893, 20061120), (6896, 20061127), (6931, 20061204), (6953, 20061211), (6953, 20061218), (6953, 20061225), (6953, 20070101), (6926, 20070108), (6926, 20070115), (6926, 20070122), (6925, 20070129), (6925, 20070205), (6930, 20070212), (6942, 20070219), (6988, 20070226), (7017, 20070305), (7017, 20070312), (7058, 20070319), (7058, 20070326), (7139, 20070402), (7175, 20070409), (7197, 20070416), (7197, 20070423), (7197, 20070430), (7233, 20070507), (7317, 20070514), (7341, 20070521), (7365, 20070528), (7365, 20070604), (7448, 20070611), (7448, 20070618), (7473, 20070625), (7473, 20070702), (7495, 20070709), (7478, 20070716), (7470, 20070723), (7528, 20070730), (7522, 20070806), (7527, 20070813), (7503, 20070820), (7504, 20070827), (7504, 20070903), (7602, 20070910), (7643, 20070917), (7686, 20070924), (7697, 20071001), (7707, 20071008), (7687, 20071015), (7638, 20071022), (7711, 20071029), (7677, 20071105), (7664, 20071112), (7666, 20071119), (7674, 20071126), (7650, 20071203), (7659, 20071210), (7659, 20071217), (7682, 20071224), (7682, 20071231), (7682, 20080101), (7682, 20080107), (7711, 20080114), (7711, 20080121), (7691, 20080128), (7716, 20080204), (7743, 20080211), (7742, 20080218), (7731, 20080225), (7761, 20080303), (7790, 20080310), (7790, 20080317), (7832, 20080324), (7832, 20080331), (7873, 20080407), (7889, 20080414), (7917, 20080421), (7917, 20080428), (7929, 20080505), (8002, 20080512), (8022, 20080519), (8090, 20080526), (8090, 20080602), (8030, 20080609), (7970, 20080616), (7966, 20080623), (7966, 20080630), (8089, 20080707), (8113, 20080714), (8235, 20080721), (8280, 20080728), (8325, 20080804), (8372, 20080811), (8387, 20080818), (8417, 20080825), (8417, 20080901), (8527, 20080908), (8639, 20080915), (8690, 20080922), (8731, 20080929), (8762, 20081006), (8794, 20081013), (8836, 20081020), (8898, 20081027), (8956, 20081103), (8996, 20081110), (9003, 20081117), (9019, 20081124), (9050, 20081201), (9076, 20081208), (9077, 20081215), (9070, 20081222), (9070, 20081229), (9070, 20090101), (9064, 20090105), (9064, 20090112), (9064, 20090119), (9064, 20090126), (9087, 20090202), (9087, 20090209), (9059, 20090216), (9063, 20090223), (9063, 20090302), (9053, 20090309), (9053, 20090316), (9057, 20090323), (9057, 20090330), (9066, 20090406), (9121, 20090413), (9110, 20090420), (9111, 20090427), (9094, 20090504), (9143, 20090511), (9140, 20090518), (9153, 20090525), (9153, 20090601), (9203, 20090608), (9239, 20090615), (9255, 20090622), (9255, 20090629), (9310, 20090706), (9376, 20090713), (9474, 20090720), (9589, 20090727), (9611, 20090803), (9598, 20090810), (9642, 20090817), (9682, 20090824), (9682, 20090831), (9682, 20090907), (9808, 20090914), (9856, 20090921), (9918, 20090928), (9929, 20091005), (9925, 20091012), (10003, 20091019), (10025, 20091026), (10061, 20091102), (10116, 20091109), (10137, 20091116), (10204, 20091123), (10238, 20091130), (10221, 20091207), (10272, 20091214), (10272, 20091221), (10318, 20091228), (10318, 20100101), (10318, 20100104), (10320, 20100111), (10329, 20100118), (10329, 20100125), (10373, 20100201), (10372, 20100208), (10389, 20100215), (10404, 20100222), (10430, 20100301), (10442, 20100308), (10442, 20100315), (10412, 20100322), (10412, 20100329), (10481, 20100405), (10515, 20100412), (10543, 20100419), (10580, 20100426), (10590, 20100503), (10576, 20100510), (10593, 20100517), (10634, 20100524), (10634, 20100531), (10613, 20100607), (10630, 20100614), (10634, 20100621), (10634, 20100628), (10685, 20100705), (10726, 20100712), (10756, 20100719), (10817, 20100726), (10835, 20100802), (10937, 20100809), (10999, 20100816), (11026, 20100823), (11125, 20100830), (11125, 20100906), (11256, 20100913), (11290, 20100920), (11339, 20100927), (11460, 20101004), (11566, 20101011), (11594, 20101018), (11617, 20101025), (11687, 20101101), (11735, 20101108), (11814, 20101115), (11845, 20101122), (11877, 20101129), (11888, 20101206), (11907, 20101213), (11913, 20101220), (11904, 20101227), (11904, 20110101), (12060, 20110103), (12067, 20110110), (12094, 20110117), (12094, 20110124), (12143, 20110131), (12181, 20110207), (12204, 20110214), (12201, 20110221), (12254, 20110228), (12267, 20110307), (12267, 20110314), (12303, 20110321), (12303, 20110328), (12343, 20110404), (12398, 20110411), (12434, 20110418), (12422, 20110425), (12438, 20110502), (12482, 20110509), (12467, 20110516), (12522, 20110523), (12522, 20110530), (12659, 20110606), (12682, 20110613), (12686, 20110620), (12686, 20110627), (12867, 20110704), (12895, 20110711), (12927, 20110718), (13006, 20110725), (12999, 20110801), (13081, 20110808), (13129, 20110815), (13140, 20110822), (13174, 20110829), (13174, 20110905), (13299, 20110912), (13342, 20110919), (13382, 20110926), (13372, 20111003), (13382, 20111010), (13411, 20111017), (13443, 20111024), (13465, 20111031), (13443, 20111107), (13482, 20111114), (13518, 20111121), (13517, 20111128), (13542, 20111205), (13536, 20111212), (13565, 20111219), (13603, 20111226), (13603, 20120101), (13610, 20120102), (13628, 20120109), (13618, 20120116), (13618, 20120123), (13667, 20120130), (13666, 20120206), (13674, 20120213), (13719, 20120220), (13788, 20120227), (13791, 20120305), (13791, 20120312), (13818, 20120319), (13818, 20120326), (13881, 20120402), (13902, 20120409), (13938, 20120416), (13964, 20120423), (13983, 20120430), (14016, 20120507), (14015, 20120514), (14034, 20120521), (14087, 20120528), (14087, 20120604), (14072, 20120611), (14138, 20120618), (14172, 20120625), (14172, 20120702), (14180, 20120709), (14223, 20120716), (14250, 20120723), (14264, 20120730), (14286, 20120806), (14331, 20120813), (14361, 20120820), (14389, 20120827), (14389, 20120903), (14389, 20120910), (14402, 20120917), (14438, 20120924), (14472, 20121001), (14480, 20121008), (14513, 20121015), (14525, 20121022), (14547, 20121029), (14585, 20121105), (14621, 20121112), (14624, 20121119), (14612, 20121126), (14610, 20121203), (14639, 20121210), (14633, 20121217), (14649, 20121224), (13949, 20121231), (14648, 20130101), (13966, 20130107), (14667, 20130114), (14667, 20130121), (14667, 20130128), (14652, 20130204), (14651, 20130211), (14649, 20130218), (14554, 20130225), (14695, 20130304), (14727, 20130311), (13048, 20130318), (6790, 20130401), (14591, 20130408), (14449, 20130415), (14451, 20130422), (14462, 20130429), (14487, 20130506), (14516, 20130513), (14531, 20130520), (14545, 20130527), (14545, 20130603), (14553, 20130610), (14569, 20130617), (14650, 20130624), (14651, 20130708), (14689, 20130715), (14751, 20130722), (14766, 20130729), (14679, 20130805), (14599, 20130812), (14740, 20130819), (14714, 20130826), (14796, 20130902), (14820, 20130909), (14866, 20130916), (14878, 20130923), (14885, 20130930), (15028, 20131007), (15072, 20131014), (15025, 20131021), (15071, 20131028), (15098, 20131104), (15101, 20131111), (15151, 20131118), (15337, 20131125), (15334, 20131202), (15512, 20131209), (15540, 20131216), (15701, 20131223), (15708, 20131230), (15703, 20140106), (15637, 20140113), (8585, 20140120), (15646, 20140127), (15632, 20140203), (15637, 20140210), (8565, 20140217), (15659, 20140224), (15557, 20150302), (15578, 20150406), (15545, 20150413), (15568, 20150420), (15475, 20150427), (15710, 20150511), (15623, 20150518), (15741, 20150525), (15741, 20150608), (15810, 20150622), (15761, 20150803), (15776, 20150810), (15908, 20150824), (16184, 20150831), (15832, 20150914), (15800, 20150921), (16178, 20151005), (16191, 20151012), (16138, 20151019), (16293, 20151102), (4812, 20160111), (16518, 20160118), (16629, 20160201), (16586, 20160208), (16529, 20160215), (16454, 20160222), (16515, 20160229), (16517, 20160307), (16446, 20160411), (16454, 20160418), (16489, 20160425), (16388, 20160502), (16374, 20160509), (16351, 20160523), (16361, 20160606), (16314, 20160620), (16293, 20160627), (16325, 20160815), (16316, 20160919), (16305, 20160926), (16233, 20161010), (16349, 20161031), (16364, 20161107), (16249, 20161114), (16345, 20161121), (16294, 20161128), (16336, 20161205), (16387, 20161212), (16372, 20170102), (16406, 20170109), (16379, 20170116), (16305, 20170213), (16207, 20170220), (16111, 20170306), (16230, 20170320), (16270, 20170417), (16226, 20170424), (16303, 20170501), (16124, 20170508), (16204, 20170515), (16290, 20170522), (16649, 20170529), (16157, 20170612), (16189, 20170619), (16184, 20170626), (16597, 20170703), (15983, 20170717), (16138, 20170724), (16145, 20170731), (16147, 20170807), (16268, 20170814), (16279, 20170821), (16301, 20170828), (16161, 20170911)]

===== Eval Round 481 =====
Database         : wta_1
Prediction SQL   : SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date
Gold SQL         : SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(19870119, 0), (19870126, 0), (19870202, 0), (19870209, 0), (19870302, 0), (19870330, 0), (19870406, 0), (19870413, 0), (19870420, 0), (19870427, 0), (19870504, 0), (19870511, 0), (19870518, 0), (19870525, 0), (19870601, 0), (19870608, 0), (19870615, 0), (19870622, 0), (19870629, 0), (19870706, 0), (19870713, 0), (19870720, 0), (19870727, 0), (19870803, 0), (19870810, 0), (19870817, 0), (19870824, 0), (19870831, 0), (19870907, 0), (19870914, 0), (19870921, 0), (19870928, 0), (19871005, 0), (19871012, 0), (19871019, 0), (19871026, 0), (19871102, 0), (19871109, 0), (19871116, 0), (19871123, 0), (19871130, 0), (19871207, 0), (19871214, 0), (19871221, 0), (19871228, 0), (19880101, 0), (19880104, 0), (19880111, 0), (19880118, 0), (19880125, 0), (19880201, 0), (19880208, 0), (19880215, 0), (19880222, 0), (19880229, 0), (19880307, 0), (19880314, 0), (19880321, 0), (19880328, 0), (19880404, 0), (19880411, 0), (19880418, 0), (19880425, 0), (19880502, 0), (19880509, 0), (19880516, 0), (19880523, 0), (19880530, 0), (19880606, 0), (19880613, 0), (19880620, 0), (19880627, 0), (19880704, 0), (19880711, 0), (19880718, 0), (19880725, 0), (19880801, 0), (19880808, 0), (19880815, 0), (19880822, 0), (19880829, 0), (19880905, 0), (19880912, 0), (19880919, 0), (19880926, 0), (19881003, 0), (19881010, 0), (19881017, 0), (19881024, 0), (19881031, 0), (19881107, 0), (19881114, 0), (19881121, 29), (19881128, 29), (19881205, 29), (19881212, 29), (19881219, 29), (19881226, 29), (19890101, 28), (19890102, 29), (19890109, 29), (19890116, 29), (19890123, 29), (19890130, 29), (19890206, 29), (19890213, 0), (19890220, 0), (19890227, 0), (19890306, 0), (19890313, 29), (19890320, 29), (19890327, 0), (19890403, 0), (19890410, 29), (19890417, 29), (19890424, 29), (19890501, 29), (19890508, 29), (19890515, 29), (19890522, 29), (19890529, 29), (19890605, 29), (19890612, 29), (19890619, 29), (19890626, 29), (19890703, 29), (19890710, 29), (19890717, 29), (19890724, 29), (19890731, 29), (19890807, 29), (19890814, 29), (19890821, 29), (19890828, 29), (19890904, 29), (19890911, 29), (19890918, 29), (19890925, 29), (19891002, 29), (19891009, 29), (19891016, 29), (19891023, 29), (19891030, 29), (19891106, 29), (19891113, 29), (19891120, 29), (19891127, 29), (19891204, 29), (19891211, 29), (19891218, 29), (19891225, 29), (19900101, 28), (19900108, 29), (19900115, 29), (19900122, 29), (19900129, 29), (19900205, 29), (19900212, 29), (19900219, 29), (19900226, 29), (19900305, 29), (19900312, 29), (19900319, 29), (19900326, 29), (19900402, 29), (19900409, 29), (19900416, 29), (19900423, 29), (19900430, 29), (19900507, 29), (19900514, 29), (19900521, 29), (19900528, 29), (19900604, 29), (19900611, 29), (19900618, 30), (19900625, 30), (19900702, 30), (19900709, 30), (19900716, 30), (19900723, 30), (19900730, 30), (19900806, 30), (19900813, 30), (19900820, 30), (19900827, 30), (19900903, 30), (19900910, 30), (19900917, 30), (19900924, 30), (19901001, 30), (19901008, 30), (19901015, 30), (19901022, 30), (19901029, 30), (19901105, 30), (19901112, 30), (19901119, 30), (19901126, 30), (19901203, 30), (19901210, 30), (19901217, 30), (19901224, 30), (19901231, 30), (19910101, 29), (19910107, 30), (19910114, 30), (19910121, 30), (19910128, 30), (19910204, 30), (19910211, 30), (19910218, 30), (19910225, 30), (19910304, 30), (19910311, 29), (19910318, 29), (19910325, 29), (19910401, 29), (19910408, 29), (19910415, 29), (19910422, 29), (19910429, 29), (19910506, 29), (19910513, 29), (19910520, 29), (19910527, 29), (19910603, 29), (19910610, 29), (19910617, 29), (19910624, 29), (19910701, 29), (19910708, 30), (19910715, 29), (19910722, 29), (19910729, 29), (19910805, 29), (19910812, 29), (19910819, 29), (19910826, 30), (19910902, 30), (19910909, 30), (19910916, 30), (19910923, 30), (19910930, 30), (19911007, 31), (19911014, 31), (19911021, 31), (19911028, 31), (19911104, 44), (19911111, 44), (19911118, 44), (19911125, 44), (19911202, 31), (19911209, 44), (19911216, 45), (19911223, 45), (19911230, 45), (19920101, 44), (19920106, 45), (19920113, 45), (19920120, 45), (19920127, 45), (19920203, 45), (19920210, 29), (19920217, 45), (19920224, 45), (19920302, 45), (19920309, 45), (19920316, 45), (19920323, 45), (19920330, 45), (19920406, 45), (19920413, 45), (19920420, 45), (19920427, 45), (19920504, 45), (19920511, 45), (19920518, 45), (19920525, 45), (19920601, 45), (19920608, 45), (19920615, 45), (19920622, 45), (19920629, 45), (19920706, 45), (19920713, 46), (19920720, 46), (19920727, 45), (19920803, 73), (19920810, 73), (19920817, 73), (19920824, 119), (19920831, 90), (19920907, 90), (19920914, 90), (19920921, 90), (19920928, 90), (19921005, 62), (19921012, 62), (19921019, 62), (19921026, 62), (19921102, 62), (19921109, 62), (19921116, 62), (19921123, 62), (19921130, 62), (19921207, 62), (19921214, 62), (19921221, 62), (19921228, 45), (19930101, 44), (19930104, 45), (19930111, 45), (19930118, 45), (19930125, 45), (19930201, 45), (19930208, 32), (19930215, 45), (19930222, 45), (19930301, 45), (19930308, 45), (19930315, 45), (19930322, 45), (19930329, 45), (19930405, 45), (19930412, 62), (19930419, 62), (19930426, 62), (19930503, 62), (19930510, 62), (19930517, 44), (19930524, 44), (19930531, 44), (19930607, 44), (19930614, 44), (19930621, 44), (19930628, 44), (19930705, 62), (19930712, 62), (19930719, 62), (19930726, 62), (19930802, 43), (19930809, 43), (19930816, 43), (19930823, 43), (19930830, 43), (19930906, 43), (19930913, 43), (19930920, 76), (19930927, 75), (19931004, 58), (19931011, 58), (19931018, 58), (19931025, 58), (19931101, 58), (19931108, 58), (19931115, 75), (19931122, 75), (19931129, 75), (19931206, 75), (19931213, 75), (19931220, 75), (19931227, 75), (19940101, 73), (19940103, 75), (19940110, 75), (19940117, 75), (19940124, 75), (19940131, 62), (19940207, 63), (19940214, 63), (19940221, 63), (19940228, 62), (19940307, 62), (19940314, 62), (19940321, 62), (19940328, 61), (19940404, 62), (19940411, 61), (19940418, 44), (19940425, 57), (19940502, 57), (19940509, 57), (19940516, 57), (19940523, 57), (19940530, 57), (19940606, 65), (19940613, 65), (19940620, 65), (19940627, 65), (19940704, 67), (19940711, 67), (19940718, 60), (19940725, 60), (19940801, 60), (19940808, 60), (19940815, 60), (19940822, 60), (19940829, 60), (19940905, 60), (19940912, 68), (19940919, 68), (19940926, 69), (19941003, 69), (19941010, 69), (19941017, 69), (19941024, 59), (19941031, 59), (19941107, 69), (19941114, 69), (19941121, 69), (19941128, 69), (19941205, 69), (19941212, 69), (19941219, 69), (19941226, 69), (19950101, 69), (19950102, 69), (19950109, 69), (19950116, 69), (19950123, 69), (19950130, 69), (19950206, 69), (19950213, 69), (19950220, 69), (19950227, 69), (19950306, 69), (19950313, 69), (19950320, 69), (19950327, 69), (19950403, 69), (19950410, 69), (19950417, 69), (19950424, 69), (19950501, 69), (19950508, 69), (19950515, 69), (19950522, 69), (19950529, 69), (19950605, 69), (19950612, 96), (19950619, 96), (19950626, 96), (19950703, 96), (19950710, 97), (19950717, 118), (19950724, 118), (19950731, 118), (19950807, 118), (19950814, 118), (19950821, 131), (19950828, 131), (19950904, 131), (19950911, 131), (19950918, 131), (19950925, 131), (19951002, 131), (19951009, 131), (19951016, 131), (19951023, 131), (19951030, 131), (19951106, 131), (19951113, 138), (19951120, 138), (19951127, 138), (19951204, 138), (19951211, 138), (19951218, 138), (19951225, 138), (19960101, 138), (19960108, 125), (19960115, 125), (19960122, 125), (19960129, 125), (19960205, 125), (19960212, 125), (19960219, 125), (19960226, 147), (19960304, 147), (19960311, 147), (19960318, 147), (19960325, 147), (19960401, 147), (19960408, 147), (19960415, 147), (19960422, 147), (19960429, 147), (19960506, 147), (19960513, 147), (19960520, 147), (19960527, 147), (19960603, 147), (19960610, 147), (19960617, 147), (19960624, 147), (19960701, 147), (19960708, 171), (19960715, 171), (19960722, 171), (19960729, 171), (19960805, 171), (19960812, 171), (19960819, 171), (19960826, 171), (19960902, 171), (19960909, 194), (19960916, 172), (19960923, 172), (19960930, 172), (19961007, 172), (19961014, 175), (19961021, 175), (19961028, 191), (19961104, 191), (19961111, 213), (19961118, 213), (19961125, 213), (19961202, 213), (19961209, 213), (19961216, 213), (19961223, 185), (19961230, 185), (19970101, 185), (19970106, 185), (19970113, 185), (19970120, 185), (19970127, 209), (19970203, 209), (19970210, 209), (19970217, 209), (19970224, 223), (19970303, 223), (19970310, 223), (19970317, 223), (19970324, 223), (19970331, 223), (19970407, 223), (19970414, 225), (19970421, 225), (19970428, 225), (19970505, 225), (19970512, 225), (19970519, 225), (19970526, 225), (19970602, 225), (19970609, 225), (19970616, 225), (19970623, 225), (19970630, 225), (19970707, 164), (19970714, 257), (19970721, 257), (19970728, 257), (19970804, 273), (19970811, 273), (19970818, 273), (19970825, 273), (19970901, 273), (19970908, 273), (19970915, 273), (19970922, 273), (19970929, 273), (19971006, 273), (19971013, 299), (19971020, 314), (19971027, 314), (19971103, 337), (19971110, 337), (19971117, 363), (19971124, 363), (19971201, 363), (19971208, 394), (19971215, 394), (19971222, 394), (19971229, 394), (19980101, 394), (19980105, 394), (19980112, 394), (19980119, 394), (19980126, 394), (19980202, 394), (19980209, 394), (19980216, 394), (19980223, 394), (19980302, 394), (19980309, 394), (19980316, 394), (19980323, 394), (19980330, 426), (19980406, 426), (19980413, 459), (19980420, 459), (19980427, 459), (19980504, 459), (19980511, 459), (19980518, 459), (19980525, 459), (19980601, 459), (19980608, 543), (19980615, 569), (19980622, 590), (19980629, 590), (19980706, 633), (19980713, 633), (19980720, 633), (19980727, 634), (19980803, 634), (19980810, 634), (19980817, 631), (19980824, 631), (19980831, 660), (19980907, 660), (19980914, 663), (19980921, 663), (19980928, 683), (19981005, 688), (19981012, 688), (19981019, 696), (19981026, 693), (19981102, 693), (19981109, 692), (19981116, 692), (19981123, 692), (19981130, 709), (19981207, 703), (19981214, 703), (19981221, 703), (19981228, 703), (19990101, 703), (19990104, 722), (19990111, 722), (19990118, 722), (19990125, 722), (19990201, 728), (19990208, 723), (19990215, 723), (19990222, 723), (19990301, 723), (19990308, 723), (19990315, 728), (19990322, 728), (19990329, 728), (19990405, 728), (19990412, 728), (19990419, 728), (19990426, 752), (19990503, 761), (19990510, 761), (19990517, 777), (19990524, 777), (19990531, 777), (19990607, 804), (19990614, 804), (19990621, 804), (19990628, 804), (19990705, 804), (19990712, 829), (19990719, 829), (19990726, 829), (19990802, 829), (19990809, 870), (19990816, 873), (19990823, 853), (19990830, 861), (19990906, 861), (19990913, 879), (19990920, 879), (19990927, 899), (19991004, 927), (19991011, 941), (19991018, 964), (19991025, 941), (19991101, 941), (19991108, 941), (19991115, 941), (19991122, 941), (19991129, 966), (19991206, 966), (19991213, 989), (19991220, 989), (19991227, 989), (20000101, 989), (20000103, 989), (20000110, 989), (20000117, 989), (20000124, 989), (20000131, 1013), (20000207, 1038), (20000214, 1038), (20000221, 1038), (20000228, 1038), (20000306, 1065), (20000313, 1065), (20000320, 1065), (20000327, 1065), (20000403, 1065), (20000410, 1093), (20000417, 1093), (20000424, 1093), (20000501, 1122), (20000508, 1122), (20000515, 1106), (20000522, 1106), (20000529, 1106), (20000605, 1106), (20000612, 1160), (20000619, 1160), (20000626, 1188), (20000703, 1188), (20000710, 1204), (20000717, 1205), (20000724, 1212), (20000731, 1276), (20000807, 1276), (20000814, 1224), (20000821, 1224), (20000828, 1224), (20000904, 1224), (20000911, 1241), (20000918, 1265), (20000925, 1231), (20001002, 1223), (20001009, 1232), (20001016, 1253), (20001023, 1245), (20001030, 1247), (20001106, 1173), (20001113, 964), (20001120, 961), (20001127, 961), (20001204, 961), (20001211, 964), (20001218, 964), (20001225, 964), (20010101, 964), (20010108, 964), (20010115, 964), (20010122, 964), (20010129, 977), (20010205, 977), (20010212, 1004), (20010219, 1027), (20010226, 1027), (20010305, 1027), (20010312, 1027), (20010319, 1101), (20010326, 1101), (20010402, 914), (20010409, 930), (20010416, 952), (20010423, 961), (20010430, 988), (20010507, 1011), (20010514, 1011), (20010521, 1029), (20010528, 1067), (20010604, 1067), (20010611, 1094), (20010618, 1094), (20010625, 1073), (20010702, 1073), (20010709, 1113), (20010716, 1135), (20010723, 1149), (20010730, 1149), (20010806, 1175), (20010813, 1175), (20010820, 1175), (20010827, 1201), (20010903, 1201), (20010910, 1228), (20010917, 1231), (20010924, 1263), (20011001, 1287), (20011008, 1267), (20011015, 1288), (20011022, 1291), (20011029, 1312), (20011105, 1312), (20011112, 1412), (20011119, 1412), (20011126, 1437), (20011203, 1437), (20011210, 1437), (20011217, 1430), (20011224, 1430), (20011231, 1430), (20020101, 1430), (20020107, 1430), (20020114, 1430), (20020121, 1430), (20020128, 1430), (20020204, 1422), (20020211, 1422), (20020218, 1422), (20020225, 1424), (20020304, 1424), (20020311, 1424), (20020318, 1448), (20020325, 1448), (20020401, 1573), (20020408, 1574), (20020415, 1574), (20020422, 1574), (20020429, 1577), (20020506, 1730), (20020513, 1577), (20020520, 1577), (20020527, 1577), (20020603, 1577), (20020610, 1783), (20020617, 1803), (20020624, 1783), (20020701, 1783), (20020708, 1834), (20020715, 1835), (20020722, 1828), (20020729, 1853), (20020805, 1853), (20020812, 1925), (20020819, 1915), (20020826, 2111), (20020902, 2111), (20020909, 2451), (20020916, 2457), (20020923, 2462), (20020930, 2496), (20021007, 2526), (20021014, 2520), (20021021, 2505), (20021028, 2505), (20021104, 2498), (20021111, 2497), (20021118, 2497), (20021125, 2497), (20021202, 2497), (20021209, 2497), (20021216, 2497), (20021223, 2497), (20021230, 2497), (20030101, 2497), (20030106, 2497), (20030113, 2497), (20030120, 2497), (20030127, 2497), (20030203, 2517), (20030210, 2507), (20030217, 2490), (20030224, 2528), (20030303, 2549), (20030310, 2549), (20030317, 2571), (20030324, 2571), (20030331, 2614), (20030407, 2587), (20030414, 2587), (20030421, 2608), (20030428, 2719), (20030505, 2652), (20030512, 2671), (20030519, 2728), (20030526, 1860), (20030602, 2728), (20030609, 2753), (20030616, 2753), (20030623, 2731), (20030630, 2731), (20030707, 2730), (20030714, 2755), (20030721, 2759), (20030728, 2777), (20030804, 2732), (20030811, 2734), (20030818, 2755), (20030825, 2801), (20030901, 2801), (20030908, 2798), (20030915, 2847), (20030922, 2862), (20030929, 2930), (20031006, 2961), (20031013, 2966), (20031020, 3035), (20031027, 3020), (20031103, 3038), (20031110, 3052), (20031117, 3065), (20031124, 3092), (20031201, 3120), (20031208, 3190), (20031215, 3211), (20031222, 3211), (20031229, 3214), (20040101, 3214), (20040105, 3206), (20040112, 3206), (20040119, 3206), (20040126, 3206), (20040202, 3257), (20040209, 3265), (20040216, 3282), (20040223, 3282), (20040301, 3279), (20040308, 3286), (20040315, 3286), (20040322, 3286), (20040329, 3286), (20040405, 3277), (20040412, 3286), (20040419, 1489), (20040426, 3379), (20040503, 2613), (20040510, 1187), (20040517, 2361), (20040524, 2955), (20040531, 2535), (20040607, 3433), (20040614, 3456), (20040621, 3492), (20040628, 3492), (20040705, 3498), (20040712, 3516), (20040719, 3587), (20040726, 3592), (20040802, 3592), (20040809, 3645), (20040816, 3647), (20040823, 3661), (20040830, 3705), (20040906, 3705), (20040913, 3785), (20040920, 3831), (20040927, 3913), (20041004, 3957), (20041011, 3986), (20041018, 3987), (20041025, 3968), (20041101, 4011), (20041108, 4071), (20041115, 4124), (20041122, 4145), (20041129, 4147), (20041206, 4160), (20041213, 4160), (20041220, 4160), (20041227, 4160), (20050101, 4160), (20050103, 4160), (20050110, 4160), (20050117, 4160), (20050124, 4160), (20050131, 4198), (20050207, 4198), (20050214, 4211), (20050221, 4286), (20050228, 4286), (20050307, 4313), (20050314, 4313), (20050321, 4333), (20050328, 4333), (20050404, 4362), (20050411, 4371), (20050418, 4379), (20050425, 4379), (20050502, 4379), (20050509, 4470), (20050516, 4489), (20050523, 4522), (20050530, 4522), (20050606, 4682), (20050613, 4705), (20050620, 4727), (20050627, 4727), (20050704, 4792), (20050711, 4816), (20050718, 4847), (20050725, 4859), (20050801, 4926), (20050808, 4982), (20050815, 5020), (20050822, 5090), (20050829, 5100), (20050905, 5100), (20050912, 5187), (20050919, 5173), (20050926, 5175), (20051003, 5215), (20051010, 5249), (20051017, 5237), (20051024, 5257), (20051031, 5331), (20051107, 5362), (20051114, 5357), (20051121, 5391), (20051128, 5401), (20051205, 5452), (20051212, 5452), (20051219, 5452), (20051226, 5452), (20060101, 5452), (20060102, 5452), (20060109, 5452), (20060116, 5452), (20060123, 5452), (20060130, 5441), (20060206, 5425), (20060213, 5441), (20060220, 5478), (20060227, 5528), (20060306, 5548), (20060313, 5548), (20060320, 5559), (20060327, 5559), (20060403, 5626), (20060410, 5626), (20060417, 5644), (20060424, 5658), (20060501, 5656), (20060508, 5654), (20060515, 5683), (20060522, 5721), (20060529, 5798), (20060605, 5798), (20060612, 5862), (20060619, 5897), (20060626, 5944), (20060703, 5944), (20060710, 5983), (20060717, 6026), (20060724, 6065), (20060731, 6133), (20060807, 6151), (20060814, 6226), (20060821, 6289), (20060828, 6284), (20060904, 6284), (20060911, 6304), (20060918, 6347), (20060925, 6376), (20061002, 6436), (20061009, 6520), (20061016, 6629), (20061023, 6730), (20061030, 6808), (20061106, 6816), (20061113, 6807), (20061120, 6893), (20061127, 6896), (20061204, 6931), (20061211, 6953), (20061218, 6953), (20061225, 6953), (20070101, 6953), (20070108, 6926), (20070115, 6926), (20070122, 6926), (20070129, 6925), (20070205, 6925), (20070212, 6930), (20070219, 6942), (20070226, 6988), (20070305, 7017), (20070312, 7017), (20070319, 7058), (20070326, 7058), (20070402, 7139), (20070409, 7175), (20070416, 7197), (20070423, 7197), (20070430, 7197), (20070507, 7233), (20070514, 7317), (20070521, 7341), (20070528, 7365), (20070604, 7365), (20070611, 7448), (20070618, 7448), (20070625, 7473), (20070702, 7473), (20070709, 7495), (20070716, 7478), (20070723, 7470), (20070730, 7528), (20070806, 7522), (20070813, 7527), (20070820, 7503), (20070827, 7504), (20070903, 7504), (20070910, 7602), (20070917, 7643), (20070924, 7686), (20071001, 7697), (20071008, 7707), (20071015, 7687), (20071022, 7638), (20071029, 7711), (20071105, 7677), (20071112, 7664), (20071119, 7666), (20071126, 7674), (20071203, 7650), (20071210, 7659), (20071217, 7659), (20071224, 7682), (20071231, 7682), (20080101, 7682), (20080107, 7682), (20080114, 7711), (20080121, 7711), (20080128, 7691), (20080204, 7716), (20080211, 7743), (20080218, 7742), (20080225, 7731), (20080303, 7761), (20080310, 7790), (20080317, 7790), (20080324, 7832), (20080331, 7832), (20080407, 7873), (20080414, 7889), (20080421, 7917), (20080428, 7917), (20080505, 7929), (20080512, 8002), (20080519, 8022), (20080526, 8090), (20080602, 8090), (20080609, 8030), (20080616, 7970), (20080623, 7966), (20080630, 7966), (20080707, 8089), (20080714, 8113), (20080721, 8235), (20080728, 8280), (20080804, 8325), (20080811, 8372), (20080818, 8387), (20080825, 8417), (20080901, 8417), (20080908, 8527), (20080915, 8639), (20080922, 8690), (20080929, 8731), (20081006, 8762), (20081013, 8794), (20081020, 8836), (20081027, 8898), (20081103, 8956), (20081110, 8996), (20081117, 9003), (20081124, 9019), (20081201, 9050), (20081208, 9076), (20081215, 9077), (20081222, 9070), (20081229, 9070), (20090101, 9070), (20090105, 9064), (20090112, 9064), (20090119, 9064), (20090126, 9064), (20090202, 9087), (20090209, 9087), (20090216, 9059), (20090223, 9063), (20090302, 9063), (20090309, 9053), (20090316, 9053), (20090323, 9057), (20090330, 9057), (20090406, 9066), (20090413, 9121), (20090420, 9110), (20090427, 9111), (20090504, 9094), (20090511, 9143), (20090518, 9140), (20090525, 9153), (20090601, 9153), (20090608, 9203), (20090615, 9239), (20090622, 9255), (20090629, 9255), (20090706, 9310), (20090713, 9376), (20090720, 9474), (20090727, 9589), (20090803, 9611), (20090810, 9598), (20090817, 9642), (20090824, 9682), (20090831, 9682), (20090907, 9682), (20090914, 9808), (20090921, 9856), (20090928, 9918), (20091005, 9929), (20091012, 9925), (20091019, 10003), (20091026, 10025), (20091102, 10061), (20091109, 10116), (20091116, 10137), (20091123, 10204), (20091130, 10238), (20091207, 10221), (20091214, 10272), (20091221, 10272), (20091228, 10318), (20100101, 10318), (20100104, 10318), (20100111, 10320), (20100118, 10329), (20100125, 10329), (20100201, 10373), (20100208, 10372), (20100215, 10389), (20100222, 10404), (20100301, 10430), (20100308, 10442), (20100315, 10442), (20100322, 10412), (20100329, 10412), (20100405, 10481), (20100412, 10515), (20100419, 10543), (20100426, 10580), (20100503, 10590), (20100510, 10576), (20100517, 10593), (20100524, 10634), (20100531, 10634), (20100607, 10613), (20100614, 10630), (20100621, 10634), (20100628, 10634), (20100705, 10685), (20100712, 10726), (20100719, 10756), (20100726, 10817), (20100802, 10835), (20100809, 10937), (20100816, 10999), (20100823, 11026), (20100830, 11125), (20100906, 11125), (20100913, 11256), (20100920, 11290), (20100927, 11339), (20101004, 11460), (20101011, 11566), (20101018, 11594), (20101025, 11617), (20101101, 11687), (20101108, 11735), (20101115, 11814), (20101122, 11845), (20101129, 11877), (20101206, 11888), (20101213, 11907), (20101220, 11913), (20101227, 11904), (20110101, 11904), (20110103, 12060), (20110110, 12067), (20110117, 12094), (20110124, 12094), (20110131, 12143), (20110207, 12181), (20110214, 12204), (20110221, 12201), (20110228, 12254), (20110307, 12267), (20110314, 12267), (20110321, 12303), (20110328, 12303), (20110404, 12343), (20110411, 12398), (20110418, 12434), (20110425, 12422), (20110502, 12438), (20110509, 12482), (20110516, 12467), (20110523, 12522), (20110530, 12522), (20110606, 12659), (20110613, 12682), (20110620, 12686), (20110627, 12686), (20110704, 12867), (20110711, 12895), (20110718, 12927), (20110725, 13006), (20110801, 12999), (20110808, 13081), (20110815, 13129), (20110822, 13140), (20110829, 13174), (20110905, 13174), (20110912, 13299), (20110919, 13342), (20110926, 13382), (20111003, 13372), (20111010, 13382), (20111017, 13411), (20111024, 13443), (20111031, 13465), (20111107, 13443), (20111114, 13482), (20111121, 13518), (20111128, 13517), (20111205, 13542), (20111212, 13536), (20111219, 13565), (20111226, 13603), (20120101, 13603), (20120102, 13610), (20120109, 13628), (20120116, 13618), (20120123, 13618), (20120130, 13667), (20120206, 13666), (20120213, 13674), (20120220, 13719), (20120227, 13788), (20120305, 13791), (20120312, 13791), (20120319, 13818), (20120326, 13818), (20120402, 13881), (20120409, 13902), (20120416, 13938), (20120423, 13964), (20120430, 13983), (20120507, 14016), (20120514, 14015), (20120521, 14034), (20120528, 14087), (20120604, 14087), (20120611, 14072), (20120618, 14138), (20120625, 14172), (20120702, 14172), (20120709, 14180), (20120716, 14223), (20120723, 14250), (20120730, 14264), (20120806, 14286), (20120813, 14331), (20120820, 14361), (20120827, 14389), (20120903, 14389), (20120910, 14389), (20120917, 14402), (20120924, 14438), (20121001, 14472), (20121008, 14480), (20121015, 14513), (20121022, 14525), (20121029, 14547), (20121105, 14585), (20121112, 14621), (20121119, 14624), (20121126, 14612), (20121203, 14610), (20121210, 14639), (20121217, 14633), (20121224, 14649), (20121231, 13949), (20130101, 14648), (20130107, 13966), (20130114, 14667), (20130121, 14667), (20130128, 14667), (20130204, 14652), (20130211, 14651), (20130218, 14649), (20130225, 14554), (20130304, 14695), (20130311, 14727), (20130318, 13048), (20130401, 6790), (20130408, 14591), (20130415, 14449), (20130422, 14451), (20130429, 14462), (20130506, 14487), (20130513, 14516), (20130520, 14531), (20130527, 14545), (20130603, 14545), (20130610, 14553), (20130617, 14569), (20130624, 14650), (20130708, 14651), (20130715, 14689), (20130722, 14751), (20130729, 14766), (20130805, 14679), (20130812, 14599), (20130819, 14740), (20130826, 14714), (20130902, 14796), (20130909, 14820), (20130916, 14866), (20130923, 14878), (20130930, 14885), (20131007, 15028), (20131014, 15072), (20131021, 15025), (20131028, 15071), (20131104, 15098), (20131111, 15101), (20131118, 15151), (20131125, 15337), (20131202, 15334), (20131209, 15512), (20131216, 15540), (20131223, 15701), (20131230, 15708), (20140106, 15703), (20140113, 15637), (20140120, 8585), (20140127, 15646), (20140203, 15632), (20140210, 15637), (20140217, 8565), (20140224, 15659), (20150302, 15557), (20150406, 15578), (20150413, 15545), (20150420, 15568), (20150427, 15475), (20150511, 15710), (20150518, 15623), (20150525, 15741), (20150608, 15741), (20150622, 15810), (20150803, 15761), (20150810, 15776), (20150824, 15908), (20150831, 16184), (20150914, 15832), (20150921, 15800), (20151005, 16178), (20151012, 16191), (20151019, 16138), (20151102, 16293), (20160111, 4812), (20160118, 16518), (20160201, 16629), (20160208, 16586), (20160215, 16529), (20160222, 16454), (20160229, 16515), (20160307, 16517), (20160411, 16446), (20160418, 16454), (20160425, 16489), (20160502, 16388), (20160509, 16374), (20160523, 16351), (20160606, 16361), (20160620, 16314), (20160627, 16293), (20160815, 16325), (20160919, 16316), (20160926, 16305), (20161010, 16233), (20161031, 16349), (20161107, 16364), (20161114, 16249), (20161121, 16345), (20161128, 16294), (20161205, 16336), (20161212, 16387), (20170102, 16372), (20170109, 16406), (20170116, 16379), (20170213, 16305), (20170220, 16207), (20170306, 16111), (20170320, 16230), (20170417, 16270), (20170424, 16226), (20170501, 16303), (20170508, 16124), (20170515, 16204), (20170522, 16290), (20170529, 16649), (20170612, 16157), (20170619, 16189), (20170626, 16184), (20170703, 16597), (20170717, 15983), (20170724, 16138), (20170731, 16145), (20170807, 16147), (20170814, 16268), (20170821, 16279), (20170828, 16301), (20170911, 16161)]
Gold Output      : [(0, 19870119), (0, 19870126), (0, 19870202), (0, 19870209), (0, 19870302), (0, 19870330), (0, 19870406), (0, 19870413), (0, 19870420), (0, 19870427), (0, 19870504), (0, 19870511), (0, 19870518), (0, 19870525), (0, 19870601), (0, 19870608), (0, 19870615), (0, 19870622), (0, 19870629), (0, 19870706), (0, 19870713), (0, 19870720), (0, 19870727), (0, 19870803), (0, 19870810), (0, 19870817), (0, 19870824), (0, 19870831), (0, 19870907), (0, 19870914), (0, 19870921), (0, 19870928), (0, 19871005), (0, 19871012), (0, 19871019), (0, 19871026), (0, 19871102), (0, 19871109), (0, 19871116), (0, 19871123), (0, 19871130), (0, 19871207), (0, 19871214), (0, 19871221), (0, 19871228), (0, 19880101), (0, 19880104), (0, 19880111), (0, 19880118), (0, 19880125), (0, 19880201), (0, 19880208), (0, 19880215), (0, 19880222), (0, 19880229), (0, 19880307), (0, 19880314), (0, 19880321), (0, 19880328), (0, 19880404), (0, 19880411), (0, 19880418), (0, 19880425), (0, 19880502), (0, 19880509), (0, 19880516), (0, 19880523), (0, 19880530), (0, 19880606), (0, 19880613), (0, 19880620), (0, 19880627), (0, 19880704), (0, 19880711), (0, 19880718), (0, 19880725), (0, 19880801), (0, 19880808), (0, 19880815), (0, 19880822), (0, 19880829), (0, 19880905), (0, 19880912), (0, 19880919), (0, 19880926), (0, 19881003), (0, 19881010), (0, 19881017), (0, 19881024), (0, 19881031), (0, 19881107), (0, 19881114), (29, 19881121), (29, 19881128), (29, 19881205), (29, 19881212), (29, 19881219), (29, 19881226), (28, 19890101), (29, 19890102), (29, 19890109), (29, 19890116), (29, 19890123), (29, 19890130), (29, 19890206), (0, 19890213), (0, 19890220), (0, 19890227), (0, 19890306), (29, 19890313), (29, 19890320), (0, 19890327), (0, 19890403), (29, 19890410), (29, 19890417), (29, 19890424), (29, 19890501), (29, 19890508), (29, 19890515), (29, 19890522), (29, 19890529), (29, 19890605), (29, 19890612), (29, 19890619), (29, 19890626), (29, 19890703), (29, 19890710), (29, 19890717), (29, 19890724), (29, 19890731), (29, 19890807), (29, 19890814), (29, 19890821), (29, 19890828), (29, 19890904), (29, 19890911), (29, 19890918), (29, 19890925), (29, 19891002), (29, 19891009), (29, 19891016), (29, 19891023), (29, 19891030), (29, 19891106), (29, 19891113), (29, 19891120), (29, 19891127), (29, 19891204), (29, 19891211), (29, 19891218), (29, 19891225), (28, 19900101), (29, 19900108), (29, 19900115), (29, 19900122), (29, 19900129), (29, 19900205), (29, 19900212), (29, 19900219), (29, 19900226), (29, 19900305), (29, 19900312), (29, 19900319), (29, 19900326), (29, 19900402), (29, 19900409), (29, 19900416), (29, 19900423), (29, 19900430), (29, 19900507), (29, 19900514), (29, 19900521), (29, 19900528), (29, 19900604), (29, 19900611), (30, 19900618), (30, 19900625), (30, 19900702), (30, 19900709), (30, 19900716), (30, 19900723), (30, 19900730), (30, 19900806), (30, 19900813), (30, 19900820), (30, 19900827), (30, 19900903), (30, 19900910), (30, 19900917), (30, 19900924), (30, 19901001), (30, 19901008), (30, 19901015), (30, 19901022), (30, 19901029), (30, 19901105), (30, 19901112), (30, 19901119), (30, 19901126), (30, 19901203), (30, 19901210), (30, 19901217), (30, 19901224), (30, 19901231), (29, 19910101), (30, 19910107), (30, 19910114), (30, 19910121), (30, 19910128), (30, 19910204), (30, 19910211), (30, 19910218), (30, 19910225), (30, 19910304), (29, 19910311), (29, 19910318), (29, 19910325), (29, 19910401), (29, 19910408), (29, 19910415), (29, 19910422), (29, 19910429), (29, 19910506), (29, 19910513), (29, 19910520), (29, 19910527), (29, 19910603), (29, 19910610), (29, 19910617), (29, 19910624), (29, 19910701), (30, 19910708), (29, 19910715), (29, 19910722), (29, 19910729), (29, 19910805), (29, 19910812), (29, 19910819), (30, 19910826), (30, 19910902), (30, 19910909), (30, 19910916), (30, 19910923), (30, 19910930), (31, 19911007), (31, 19911014), (31, 19911021), (31, 19911028), (44, 19911104), (44, 19911111), (44, 19911118), (44, 19911125), (31, 19911202), (44, 19911209), (45, 19911216), (45, 19911223), (45, 19911230), (44, 19920101), (45, 19920106), (45, 19920113), (45, 19920120), (45, 19920127), (45, 19920203), (29, 19920210), (45, 19920217), (45, 19920224), (45, 19920302), (45, 19920309), (45, 19920316), (45, 19920323), (45, 19920330), (45, 19920406), (45, 19920413), (45, 19920420), (45, 19920427), (45, 19920504), (45, 19920511), (45, 19920518), (45, 19920525), (45, 19920601), (45, 19920608), (45, 19920615), (45, 19920622), (45, 19920629), (45, 19920706), (46, 19920713), (46, 19920720), (45, 19920727), (73, 19920803), (73, 19920810), (73, 19920817), (119, 19920824), (90, 19920831), (90, 19920907), (90, 19920914), (90, 19920921), (90, 19920928), (62, 19921005), (62, 19921012), (62, 19921019), (62, 19921026), (62, 19921102), (62, 19921109), (62, 19921116), (62, 19921123), (62, 19921130), (62, 19921207), (62, 19921214), (62, 19921221), (45, 19921228), (44, 19930101), (45, 19930104), (45, 19930111), (45, 19930118), (45, 19930125), (45, 19930201), (32, 19930208), (45, 19930215), (45, 19930222), (45, 19930301), (45, 19930308), (45, 19930315), (45, 19930322), (45, 19930329), (45, 19930405), (62, 19930412), (62, 19930419), (62, 19930426), (62, 19930503), (62, 19930510), (44, 19930517), (44, 19930524), (44, 19930531), (44, 19930607), (44, 19930614), (44, 19930621), (44, 19930628), (62, 19930705), (62, 19930712), (62, 19930719), (62, 19930726), (43, 19930802), (43, 19930809), (43, 19930816), (43, 19930823), (43, 19930830), (43, 19930906), (43, 19930913), (76, 19930920), (75, 19930927), (58, 19931004), (58, 19931011), (58, 19931018), (58, 19931025), (58, 19931101), (58, 19931108), (75, 19931115), (75, 19931122), (75, 19931129), (75, 19931206), (75, 19931213), (75, 19931220), (75, 19931227), (73, 19940101), (75, 19940103), (75, 19940110), (75, 19940117), (75, 19940124), (62, 19940131), (63, 19940207), (63, 19940214), (63, 19940221), (62, 19940228), (62, 19940307), (62, 19940314), (62, 19940321), (61, 19940328), (62, 19940404), (61, 19940411), (44, 19940418), (57, 19940425), (57, 19940502), (57, 19940509), (57, 19940516), (57, 19940523), (57, 19940530), (65, 19940606), (65, 19940613), (65, 19940620), (65, 19940627), (67, 19940704), (67, 19940711), (60, 19940718), (60, 19940725), (60, 19940801), (60, 19940808), (60, 19940815), (60, 19940822), (60, 19940829), (60, 19940905), (68, 19940912), (68, 19940919), (69, 19940926), (69, 19941003), (69, 19941010), (69, 19941017), (59, 19941024), (59, 19941031), (69, 19941107), (69, 19941114), (69, 19941121), (69, 19941128), (69, 19941205), (69, 19941212), (69, 19941219), (69, 19941226), (69, 19950101), (69, 19950102), (69, 19950109), (69, 19950116), (69, 19950123), (69, 19950130), (69, 19950206), (69, 19950213), (69, 19950220), (69, 19950227), (69, 19950306), (69, 19950313), (69, 19950320), (69, 19950327), (69, 19950403), (69, 19950410), (69, 19950417), (69, 19950424), (69, 19950501), (69, 19950508), (69, 19950515), (69, 19950522), (69, 19950529), (69, 19950605), (96, 19950612), (96, 19950619), (96, 19950626), (96, 19950703), (97, 19950710), (118, 19950717), (118, 19950724), (118, 19950731), (118, 19950807), (118, 19950814), (131, 19950821), (131, 19950828), (131, 19950904), (131, 19950911), (131, 19950918), (131, 19950925), (131, 19951002), (131, 19951009), (131, 19951016), (131, 19951023), (131, 19951030), (131, 19951106), (138, 19951113), (138, 19951120), (138, 19951127), (138, 19951204), (138, 19951211), (138, 19951218), (138, 19951225), (138, 19960101), (125, 19960108), (125, 19960115), (125, 19960122), (125, 19960129), (125, 19960205), (125, 19960212), (125, 19960219), (147, 19960226), (147, 19960304), (147, 19960311), (147, 19960318), (147, 19960325), (147, 19960401), (147, 19960408), (147, 19960415), (147, 19960422), (147, 19960429), (147, 19960506), (147, 19960513), (147, 19960520), (147, 19960527), (147, 19960603), (147, 19960610), (147, 19960617), (147, 19960624), (147, 19960701), (171, 19960708), (171, 19960715), (171, 19960722), (171, 19960729), (171, 19960805), (171, 19960812), (171, 19960819), (171, 19960826), (171, 19960902), (194, 19960909), (172, 19960916), (172, 19960923), (172, 19960930), (172, 19961007), (175, 19961014), (175, 19961021), (191, 19961028), (191, 19961104), (213, 19961111), (213, 19961118), (213, 19961125), (213, 19961202), (213, 19961209), (213, 19961216), (185, 19961223), (185, 19961230), (185, 19970101), (185, 19970106), (185, 19970113), (185, 19970120), (209, 19970127), (209, 19970203), (209, 19970210), (209, 19970217), (223, 19970224), (223, 19970303), (223, 19970310), (223, 19970317), (223, 19970324), (223, 19970331), (223, 19970407), (225, 19970414), (225, 19970421), (225, 19970428), (225, 19970505), (225, 19970512), (225, 19970519), (225, 19970526), (225, 19970602), (225, 19970609), (225, 19970616), (225, 19970623), (225, 19970630), (164, 19970707), (257, 19970714), (257, 19970721), (257, 19970728), (273, 19970804), (273, 19970811), (273, 19970818), (273, 19970825), (273, 19970901), (273, 19970908), (273, 19970915), (273, 19970922), (273, 19970929), (273, 19971006), (299, 19971013), (314, 19971020), (314, 19971027), (337, 19971103), (337, 19971110), (363, 19971117), (363, 19971124), (363, 19971201), (394, 19971208), (394, 19971215), (394, 19971222), (394, 19971229), (394, 19980101), (394, 19980105), (394, 19980112), (394, 19980119), (394, 19980126), (394, 19980202), (394, 19980209), (394, 19980216), (394, 19980223), (394, 19980302), (394, 19980309), (394, 19980316), (394, 19980323), (426, 19980330), (426, 19980406), (459, 19980413), (459, 19980420), (459, 19980427), (459, 19980504), (459, 19980511), (459, 19980518), (459, 19980525), (459, 19980601), (543, 19980608), (569, 19980615), (590, 19980622), (590, 19980629), (633, 19980706), (633, 19980713), (633, 19980720), (634, 19980727), (634, 19980803), (634, 19980810), (631, 19980817), (631, 19980824), (660, 19980831), (660, 19980907), (663, 19980914), (663, 19980921), (683, 19980928), (688, 19981005), (688, 19981012), (696, 19981019), (693, 19981026), (693, 19981102), (692, 19981109), (692, 19981116), (692, 19981123), (709, 19981130), (703, 19981207), (703, 19981214), (703, 19981221), (703, 19981228), (703, 19990101), (722, 19990104), (722, 19990111), (722, 19990118), (722, 19990125), (728, 19990201), (723, 19990208), (723, 19990215), (723, 19990222), (723, 19990301), (723, 19990308), (728, 19990315), (728, 19990322), (728, 19990329), (728, 19990405), (728, 19990412), (728, 19990419), (752, 19990426), (761, 19990503), (761, 19990510), (777, 19990517), (777, 19990524), (777, 19990531), (804, 19990607), (804, 19990614), (804, 19990621), (804, 19990628), (804, 19990705), (829, 19990712), (829, 19990719), (829, 19990726), (829, 19990802), (870, 19990809), (873, 19990816), (853, 19990823), (861, 19990830), (861, 19990906), (879, 19990913), (879, 19990920), (899, 19990927), (927, 19991004), (941, 19991011), (964, 19991018), (941, 19991025), (941, 19991101), (941, 19991108), (941, 19991115), (941, 19991122), (966, 19991129), (966, 19991206), (989, 19991213), (989, 19991220), (989, 19991227), (989, 20000101), (989, 20000103), (989, 20000110), (989, 20000117), (989, 20000124), (1013, 20000131), (1038, 20000207), (1038, 20000214), (1038, 20000221), (1038, 20000228), (1065, 20000306), (1065, 20000313), (1065, 20000320), (1065, 20000327), (1065, 20000403), (1093, 20000410), (1093, 20000417), (1093, 20000424), (1122, 20000501), (1122, 20000508), (1106, 20000515), (1106, 20000522), (1106, 20000529), (1106, 20000605), (1160, 20000612), (1160, 20000619), (1188, 20000626), (1188, 20000703), (1204, 20000710), (1205, 20000717), (1212, 20000724), (1276, 20000731), (1276, 20000807), (1224, 20000814), (1224, 20000821), (1224, 20000828), (1224, 20000904), (1241, 20000911), (1265, 20000918), (1231, 20000925), (1223, 20001002), (1232, 20001009), (1253, 20001016), (1245, 20001023), (1247, 20001030), (1173, 20001106), (964, 20001113), (961, 20001120), (961, 20001127), (961, 20001204), (964, 20001211), (964, 20001218), (964, 20001225), (964, 20010101), (964, 20010108), (964, 20010115), (964, 20010122), (977, 20010129), (977, 20010205), (1004, 20010212), (1027, 20010219), (1027, 20010226), (1027, 20010305), (1027, 20010312), (1101, 20010319), (1101, 20010326), (914, 20010402), (930, 20010409), (952, 20010416), (961, 20010423), (988, 20010430), (1011, 20010507), (1011, 20010514), (1029, 20010521), (1067, 20010528), (1067, 20010604), (1094, 20010611), (1094, 20010618), (1073, 20010625), (1073, 20010702), (1113, 20010709), (1135, 20010716), (1149, 20010723), (1149, 20010730), (1175, 20010806), (1175, 20010813), (1175, 20010820), (1201, 20010827), (1201, 20010903), (1228, 20010910), (1231, 20010917), (1263, 20010924), (1287, 20011001), (1267, 20011008), (1288, 20011015), (1291, 20011022), (1312, 20011029), (1312, 20011105), (1412, 20011112), (1412, 20011119), (1437, 20011126), (1437, 20011203), (1437, 20011210), (1430, 20011217), (1430, 20011224), (1430, 20011231), (1430, 20020101), (1430, 20020107), (1430, 20020114), (1430, 20020121), (1430, 20020128), (1422, 20020204), (1422, 20020211), (1422, 20020218), (1424, 20020225), (1424, 20020304), (1424, 20020311), (1448, 20020318), (1448, 20020325), (1573, 20020401), (1574, 20020408), (1574, 20020415), (1574, 20020422), (1577, 20020429), (1730, 20020506), (1577, 20020513), (1577, 20020520), (1577, 20020527), (1577, 20020603), (1783, 20020610), (1803, 20020617), (1783, 20020624), (1783, 20020701), (1834, 20020708), (1835, 20020715), (1828, 20020722), (1853, 20020729), (1853, 20020805), (1925, 20020812), (1915, 20020819), (2111, 20020826), (2111, 20020902), (2451, 20020909), (2457, 20020916), (2462, 20020923), (2496, 20020930), (2526, 20021007), (2520, 20021014), (2505, 20021021), (2505, 20021028), (2498, 20021104), (2497, 20021111), (2497, 20021118), (2497, 20021125), (2497, 20021202), (2497, 20021209), (2497, 20021216), (2497, 20021223), (2497, 20021230), (2497, 20030101), (2497, 20030106), (2497, 20030113), (2497, 20030120), (2497, 20030127), (2517, 20030203), (2507, 20030210), (2490, 20030217), (2528, 20030224), (2549, 20030303), (2549, 20030310), (2571, 20030317), (2571, 20030324), (2614, 20030331), (2587, 20030407), (2587, 20030414), (2608, 20030421), (2719, 20030428), (2652, 20030505), (2671, 20030512), (2728, 20030519), (1860, 20030526), (2728, 20030602), (2753, 20030609), (2753, 20030616), (2731, 20030623), (2731, 20030630), (2730, 20030707), (2755, 20030714), (2759, 20030721), (2777, 20030728), (2732, 20030804), (2734, 20030811), (2755, 20030818), (2801, 20030825), (2801, 20030901), (2798, 20030908), (2847, 20030915), (2862, 20030922), (2930, 20030929), (2961, 20031006), (2966, 20031013), (3035, 20031020), (3020, 20031027), (3038, 20031103), (3052, 20031110), (3065, 20031117), (3092, 20031124), (3120, 20031201), (3190, 20031208), (3211, 20031215), (3211, 20031222), (3214, 20031229), (3214, 20040101), (3206, 20040105), (3206, 20040112), (3206, 20040119), (3206, 20040126), (3257, 20040202), (3265, 20040209), (3282, 20040216), (3282, 20040223), (3279, 20040301), (3286, 20040308), (3286, 20040315), (3286, 20040322), (3286, 20040329), (3277, 20040405), (3286, 20040412), (1489, 20040419), (3379, 20040426), (2613, 20040503), (1187, 20040510), (2361, 20040517), (2955, 20040524), (2535, 20040531), (3433, 20040607), (3456, 20040614), (3492, 20040621), (3492, 20040628), (3498, 20040705), (3516, 20040712), (3587, 20040719), (3592, 20040726), (3592, 20040802), (3645, 20040809), (3647, 20040816), (3661, 20040823), (3705, 20040830), (3705, 20040906), (3785, 20040913), (3831, 20040920), (3913, 20040927), (3957, 20041004), (3986, 20041011), (3987, 20041018), (3968, 20041025), (4011, 20041101), (4071, 20041108), (4124, 20041115), (4145, 20041122), (4147, 20041129), (4160, 20041206), (4160, 20041213), (4160, 20041220), (4160, 20041227), (4160, 20050101), (4160, 20050103), (4160, 20050110), (4160, 20050117), (4160, 20050124), (4198, 20050131), (4198, 20050207), (4211, 20050214), (4286, 20050221), (4286, 20050228), (4313, 20050307), (4313, 20050314), (4333, 20050321), (4333, 20050328), (4362, 20050404), (4371, 20050411), (4379, 20050418), (4379, 20050425), (4379, 20050502), (4470, 20050509), (4489, 20050516), (4522, 20050523), (4522, 20050530), (4682, 20050606), (4705, 20050613), (4727, 20050620), (4727, 20050627), (4792, 20050704), (4816, 20050711), (4847, 20050718), (4859, 20050725), (4926, 20050801), (4982, 20050808), (5020, 20050815), (5090, 20050822), (5100, 20050829), (5100, 20050905), (5187, 20050912), (5173, 20050919), (5175, 20050926), (5215, 20051003), (5249, 20051010), (5237, 20051017), (5257, 20051024), (5331, 20051031), (5362, 20051107), (5357, 20051114), (5391, 20051121), (5401, 20051128), (5452, 20051205), (5452, 20051212), (5452, 20051219), (5452, 20051226), (5452, 20060101), (5452, 20060102), (5452, 20060109), (5452, 20060116), (5452, 20060123), (5441, 20060130), (5425, 20060206), (5441, 20060213), (5478, 20060220), (5528, 20060227), (5548, 20060306), (5548, 20060313), (5559, 20060320), (5559, 20060327), (5626, 20060403), (5626, 20060410), (5644, 20060417), (5658, 20060424), (5656, 20060501), (5654, 20060508), (5683, 20060515), (5721, 20060522), (5798, 20060529), (5798, 20060605), (5862, 20060612), (5897, 20060619), (5944, 20060626), (5944, 20060703), (5983, 20060710), (6026, 20060717), (6065, 20060724), (6133, 20060731), (6151, 20060807), (6226, 20060814), (6289, 20060821), (6284, 20060828), (6284, 20060904), (6304, 20060911), (6347, 20060918), (6376, 20060925), (6436, 20061002), (6520, 20061009), (6629, 20061016), (6730, 20061023), (6808, 20061030), (6816, 20061106), (6807, 20061113), (6893, 20061120), (6896, 20061127), (6931, 20061204), (6953, 20061211), (6953, 20061218), (6953, 20061225), (6953, 20070101), (6926, 20070108), (6926, 20070115), (6926, 20070122), (6925, 20070129), (6925, 20070205), (6930, 20070212), (6942, 20070219), (6988, 20070226), (7017, 20070305), (7017, 20070312), (7058, 20070319), (7058, 20070326), (7139, 20070402), (7175, 20070409), (7197, 20070416), (7197, 20070423), (7197, 20070430), (7233, 20070507), (7317, 20070514), (7341, 20070521), (7365, 20070528), (7365, 20070604), (7448, 20070611), (7448, 20070618), (7473, 20070625), (7473, 20070702), (7495, 20070709), (7478, 20070716), (7470, 20070723), (7528, 20070730), (7522, 20070806), (7527, 20070813), (7503, 20070820), (7504, 20070827), (7504, 20070903), (7602, 20070910), (7643, 20070917), (7686, 20070924), (7697, 20071001), (7707, 20071008), (7687, 20071015), (7638, 20071022), (7711, 20071029), (7677, 20071105), (7664, 20071112), (7666, 20071119), (7674, 20071126), (7650, 20071203), (7659, 20071210), (7659, 20071217), (7682, 20071224), (7682, 20071231), (7682, 20080101), (7682, 20080107), (7711, 20080114), (7711, 20080121), (7691, 20080128), (7716, 20080204), (7743, 20080211), (7742, 20080218), (7731, 20080225), (7761, 20080303), (7790, 20080310), (7790, 20080317), (7832, 20080324), (7832, 20080331), (7873, 20080407), (7889, 20080414), (7917, 20080421), (7917, 20080428), (7929, 20080505), (8002, 20080512), (8022, 20080519), (8090, 20080526), (8090, 20080602), (8030, 20080609), (7970, 20080616), (7966, 20080623), (7966, 20080630), (8089, 20080707), (8113, 20080714), (8235, 20080721), (8280, 20080728), (8325, 20080804), (8372, 20080811), (8387, 20080818), (8417, 20080825), (8417, 20080901), (8527, 20080908), (8639, 20080915), (8690, 20080922), (8731, 20080929), (8762, 20081006), (8794, 20081013), (8836, 20081020), (8898, 20081027), (8956, 20081103), (8996, 20081110), (9003, 20081117), (9019, 20081124), (9050, 20081201), (9076, 20081208), (9077, 20081215), (9070, 20081222), (9070, 20081229), (9070, 20090101), (9064, 20090105), (9064, 20090112), (9064, 20090119), (9064, 20090126), (9087, 20090202), (9087, 20090209), (9059, 20090216), (9063, 20090223), (9063, 20090302), (9053, 20090309), (9053, 20090316), (9057, 20090323), (9057, 20090330), (9066, 20090406), (9121, 20090413), (9110, 20090420), (9111, 20090427), (9094, 20090504), (9143, 20090511), (9140, 20090518), (9153, 20090525), (9153, 20090601), (9203, 20090608), (9239, 20090615), (9255, 20090622), (9255, 20090629), (9310, 20090706), (9376, 20090713), (9474, 20090720), (9589, 20090727), (9611, 20090803), (9598, 20090810), (9642, 20090817), (9682, 20090824), (9682, 20090831), (9682, 20090907), (9808, 20090914), (9856, 20090921), (9918, 20090928), (9929, 20091005), (9925, 20091012), (10003, 20091019), (10025, 20091026), (10061, 20091102), (10116, 20091109), (10137, 20091116), (10204, 20091123), (10238, 20091130), (10221, 20091207), (10272, 20091214), (10272, 20091221), (10318, 20091228), (10318, 20100101), (10318, 20100104), (10320, 20100111), (10329, 20100118), (10329, 20100125), (10373, 20100201), (10372, 20100208), (10389, 20100215), (10404, 20100222), (10430, 20100301), (10442, 20100308), (10442, 20100315), (10412, 20100322), (10412, 20100329), (10481, 20100405), (10515, 20100412), (10543, 20100419), (10580, 20100426), (10590, 20100503), (10576, 20100510), (10593, 20100517), (10634, 20100524), (10634, 20100531), (10613, 20100607), (10630, 20100614), (10634, 20100621), (10634, 20100628), (10685, 20100705), (10726, 20100712), (10756, 20100719), (10817, 20100726), (10835, 20100802), (10937, 20100809), (10999, 20100816), (11026, 20100823), (11125, 20100830), (11125, 20100906), (11256, 20100913), (11290, 20100920), (11339, 20100927), (11460, 20101004), (11566, 20101011), (11594, 20101018), (11617, 20101025), (11687, 20101101), (11735, 20101108), (11814, 20101115), (11845, 20101122), (11877, 20101129), (11888, 20101206), (11907, 20101213), (11913, 20101220), (11904, 20101227), (11904, 20110101), (12060, 20110103), (12067, 20110110), (12094, 20110117), (12094, 20110124), (12143, 20110131), (12181, 20110207), (12204, 20110214), (12201, 20110221), (12254, 20110228), (12267, 20110307), (12267, 20110314), (12303, 20110321), (12303, 20110328), (12343, 20110404), (12398, 20110411), (12434, 20110418), (12422, 20110425), (12438, 20110502), (12482, 20110509), (12467, 20110516), (12522, 20110523), (12522, 20110530), (12659, 20110606), (12682, 20110613), (12686, 20110620), (12686, 20110627), (12867, 20110704), (12895, 20110711), (12927, 20110718), (13006, 20110725), (12999, 20110801), (13081, 20110808), (13129, 20110815), (13140, 20110822), (13174, 20110829), (13174, 20110905), (13299, 20110912), (13342, 20110919), (13382, 20110926), (13372, 20111003), (13382, 20111010), (13411, 20111017), (13443, 20111024), (13465, 20111031), (13443, 20111107), (13482, 20111114), (13518, 20111121), (13517, 20111128), (13542, 20111205), (13536, 20111212), (13565, 20111219), (13603, 20111226), (13603, 20120101), (13610, 20120102), (13628, 20120109), (13618, 20120116), (13618, 20120123), (13667, 20120130), (13666, 20120206), (13674, 20120213), (13719, 20120220), (13788, 20120227), (13791, 20120305), (13791, 20120312), (13818, 20120319), (13818, 20120326), (13881, 20120402), (13902, 20120409), (13938, 20120416), (13964, 20120423), (13983, 20120430), (14016, 20120507), (14015, 20120514), (14034, 20120521), (14087, 20120528), (14087, 20120604), (14072, 20120611), (14138, 20120618), (14172, 20120625), (14172, 20120702), (14180, 20120709), (14223, 20120716), (14250, 20120723), (14264, 20120730), (14286, 20120806), (14331, 20120813), (14361, 20120820), (14389, 20120827), (14389, 20120903), (14389, 20120910), (14402, 20120917), (14438, 20120924), (14472, 20121001), (14480, 20121008), (14513, 20121015), (14525, 20121022), (14547, 20121029), (14585, 20121105), (14621, 20121112), (14624, 20121119), (14612, 20121126), (14610, 20121203), (14639, 20121210), (14633, 20121217), (14649, 20121224), (13949, 20121231), (14648, 20130101), (13966, 20130107), (14667, 20130114), (14667, 20130121), (14667, 20130128), (14652, 20130204), (14651, 20130211), (14649, 20130218), (14554, 20130225), (14695, 20130304), (14727, 20130311), (13048, 20130318), (6790, 20130401), (14591, 20130408), (14449, 20130415), (14451, 20130422), (14462, 20130429), (14487, 20130506), (14516, 20130513), (14531, 20130520), (14545, 20130527), (14545, 20130603), (14553, 20130610), (14569, 20130617), (14650, 20130624), (14651, 20130708), (14689, 20130715), (14751, 20130722), (14766, 20130729), (14679, 20130805), (14599, 20130812), (14740, 20130819), (14714, 20130826), (14796, 20130902), (14820, 20130909), (14866, 20130916), (14878, 20130923), (14885, 20130930), (15028, 20131007), (15072, 20131014), (15025, 20131021), (15071, 20131028), (15098, 20131104), (15101, 20131111), (15151, 20131118), (15337, 20131125), (15334, 20131202), (15512, 20131209), (15540, 20131216), (15701, 20131223), (15708, 20131230), (15703, 20140106), (15637, 20140113), (8585, 20140120), (15646, 20140127), (15632, 20140203), (15637, 20140210), (8565, 20140217), (15659, 20140224), (15557, 20150302), (15578, 20150406), (15545, 20150413), (15568, 20150420), (15475, 20150427), (15710, 20150511), (15623, 20150518), (15741, 20150525), (15741, 20150608), (15810, 20150622), (15761, 20150803), (15776, 20150810), (15908, 20150824), (16184, 20150831), (15832, 20150914), (15800, 20150921), (16178, 20151005), (16191, 20151012), (16138, 20151019), (16293, 20151102), (4812, 20160111), (16518, 20160118), (16629, 20160201), (16586, 20160208), (16529, 20160215), (16454, 20160222), (16515, 20160229), (16517, 20160307), (16446, 20160411), (16454, 20160418), (16489, 20160425), (16388, 20160502), (16374, 20160509), (16351, 20160523), (16361, 20160606), (16314, 20160620), (16293, 20160627), (16325, 20160815), (16316, 20160919), (16305, 20160926), (16233, 20161010), (16349, 20161031), (16364, 20161107), (16249, 20161114), (16345, 20161121), (16294, 20161128), (16336, 20161205), (16387, 20161212), (16372, 20170102), (16406, 20170109), (16379, 20170116), (16305, 20170213), (16207, 20170220), (16111, 20170306), (16230, 20170320), (16270, 20170417), (16226, 20170424), (16303, 20170501), (16124, 20170508), (16204, 20170515), (16290, 20170522), (16649, 20170529), (16157, 20170612), (16189, 20170619), (16184, 20170626), (16597, 20170703), (15983, 20170717), (16138, 20170724), (16145, 20170731), (16147, 20170807), (16268, 20170814), (16279, 20170821), (16301, 20170828), (16161, 20170911)]

===== Eval Round 482 =====
Database         : wta_1
Prediction SQL   : SELECT year, count(*) FROM matches GROUP BY year
Gold SQL         : SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(2013, 12), (2016, 158), (2017, 108)]
Gold Output      : [(12, 2013), (158, 2016), (108, 2017)]

===== Eval Round 483 =====
Database         : wta_1
Prediction SQL   : SELECT year, count(*) FROM matches GROUP BY year
Gold SQL         : SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(2013, 12), (2016, 158), (2017, 108)]
Gold Output      : [(12, 2013), (158, 2016), (108, 2017)]

===== Eval Round 484 =====
Database         : wta_1
Prediction SQL   : SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3
Gold SQL         : SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Madison Keys', 17), ('Madison Keys', 24), ('Madison Keys', 16)]
Gold Output      : [('Madison Keys', 17), ('Madison Keys', 24), ('Madison Keys', 16)]

===== Eval Round 485 =====
Database         : wta_1
Prediction SQL   : SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3
Gold SQL         : SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Madison Keys', 17), ('Madison Keys', 24), ('Madison Keys', 16)]
Gold Output      : [('Madison Keys', 17), ('Madison Keys', 24), ('Madison Keys', 16)]

===== Eval Round 486 =====
Database         : wta_1
Prediction SQL   : SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
Gold SQL         : SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(2,)]
Gold Output      : [(2,)]

===== Eval Round 487 =====
Database         : wta_1
Prediction SQL   : SELECT count(*) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships'
Gold SQL         : SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(3,)]
Gold Output      : [(2,)]

===== Eval Round 488 =====
Database         : wta_1
Prediction SQL   : SELECT first_name, country_code, birth_date FROM players WHERE player_id IN (SELECT winner_id FROM matches ORDER BY winner_rank_points DESC LIMIT 1)
Gold SQL         : SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Serena', 'USA', 19810926)]
Gold Output      : [('Serena', 'USA', 19810926)]

===== Eval Round 489 =====
Database         : wta_1
Prediction SQL   : SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
Gold SQL         : SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Serena', 'USA', 19810926)]
Gold Output      : [('Serena', 'USA', 19810926)]

===== Eval Round 490 =====
Database         : wta_1
Prediction SQL   : SELECT hand, count(*) FROM players GROUP BY hand
Gold SQL         : SELECT count(*) ,  hand FROM players GROUP BY hand
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('', 954), ('L', 487), ('R', 5028), ('U', 14193)]
Gold Output      : [(954, ''), (487, 'L'), (5028, 'R'), (14193, 'U')]

===== Eval Round 491 =====
Database         : wta_1
Prediction SQL   : SELECT hand, count(*) FROM players GROUP BY hand
Gold SQL         : SELECT count(*) ,  hand FROM players GROUP BY hand
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('', 954), ('L', 487), ('R', 5028), ('U', 14193)]
Gold Output      : [(954, ''), (487, 'L'), (5028, 'R'), (14193, 'U')]

===== Eval Round 492 =====
Database         : battle_death
Prediction SQL   : SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'
Gold SQL         : SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(4,)]
Gold Output      : [(4,)]

===== Eval Round 493 =====
Database         : battle_death
Prediction SQL   : SELECT name, tonnage FROM ship ORDER BY name DESC
Gold SQL         : SELECT name ,  tonnage FROM ship ORDER BY name DESC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Three Brothers', 't'), ('Mary', 't'), ('Lettice', 't'), ('HMS Avon', '391'), ('HMS Atalanta', '225'), ('Bon Accord', 't'), ('Bacchus', 't')]
Gold Output      : [('Three Brothers', 't'), ('Mary', 't'), ('Lettice', 't'), ('HMS Avon', '391'), ('HMS Atalanta', '225'), ('Bon Accord', 't'), ('Bacchus', 't')]

===== Eval Round 494 =====
Database         : battle_death
Prediction SQL   : SELECT name, date, result FROM battle
Gold SQL         : SELECT name ,  date FROM battle
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Battle of Adrianople', '14 April 1205', 'Bulgarian victory'), ('Battle of Serres', 'June 1205', 'Bulgarian victory'), ('Battle of Rusion', '31 January 1206', 'Bulgarian victory'), ('Battle of Rodosto', 'February 1206', 'Bulgarian victory'), ('Battle of Messinopolis', '4 September 1207', 'Bulgarian victory'), ('Battle of Boruy', 'June 1205', 'Bulgarian victory'), ('Battle of Philippopolis', '31 June 1208', 'Latin victory'), ('Siege of Constantinople', '1235', 'Two Year Truce')]
Gold Output      : [('Battle of Adrianople', '14 April 1205'), ('Battle of Serres', 'June 1205'), ('Battle of Rusion', '31 January 1206'), ('Battle of Rodosto', 'February 1206'), ('Battle of Messinopolis', '4 September 1207'), ('Battle of Boruy', 'June 1205'), ('Battle of Philippopolis', '31 June 1208'), ('Siege of Constantinople', '1235')]

===== Eval Round 495 =====
Database         : battle_death
Prediction SQL   : SELECT MAX(killed), MIN(killed) FROM death
Gold SQL         : SELECT max(killed) ,  min(killed) FROM death
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(29, 0)]
Gold Output      : [(29, 0)]

===== Eval Round 496 =====
Database         : battle_death
Prediction SQL   : SELECT AVG(injured) FROM death
Gold SQL         : SELECT avg(injured) FROM death
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1.0769230769230769,)]
Gold Output      : [(1.0769230769230769,)]

===== Eval Round 497 =====
Database         : battle_death
Prediction SQL   : SELECT death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'
Gold SQL         : SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(8, 0), (3, 0), (25, 0), (2, 0), (0, 0), (4, 5), (0, 0), (29, 0), (0, 0), (0, 0), (14, 0)]
Gold Output      : [(8, 0), (3, 0), (25, 0), (2, 0), (0, 0), (4, 5), (0, 0), (29, 0), (0, 0), (0, 0), (14, 0)]

===== Eval Round 498 =====
Database         : battle_death
Prediction SQL   : SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'
Gold SQL         : SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Battle of Adrianople', 'Bulgarian victory'), ('Battle of Serres', 'Bulgarian victory'), ('Battle of Rusion', 'Bulgarian victory'), ('Battle of Rodosto', 'Bulgarian victory'), ('Battle of Messinopolis', 'Bulgarian victory'), ('Siege of Constantinople', 'Two Year Truce')]
Gold Output      : [('Battle of Adrianople', 'Bulgarian victory'), ('Battle of Serres', 'Bulgarian victory'), ('Battle of Rusion', 'Bulgarian victory'), ('Battle of Rodosto', 'Bulgarian victory'), ('Battle of Messinopolis', 'Bulgarian victory'), ('Siege of Constantinople', 'Two Year Truce')]

===== Eval Round 499 =====
Database         : battle_death
Prediction SQL   : SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig'
Gold SQL         : SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(8, 'Siege of Constantinople'), (7, 'Battle of Philippopolis'), (6, 'Battle of Boruy'), (5, 'Battle of Messinopolis'), (4, 'Battle of Rodosto')]
Gold Output      : [(8, 'Siege of Constantinople'), (7, 'Battle of Philippopolis'), (6, 'Battle of Boruy'), (5, 'Battle of Messinopolis'), (4, 'Battle of Rodosto')]

===== Eval Round 500 =====
Database         : battle_death
Prediction SQL   : SELECT battle.id, battle.name FROM battle JOIN death ON battle.id = death.caused_by_ship_id WHERE death.killed > 10
Gold SQL         : SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(3, 'Battle of Rusion'), (1, 'Battle of Adrianople'), (5, 'Battle of Messinopolis')]
Gold Output      : [(5, 'Battle of Messinopolis'), (6, 'Battle of Boruy'), (8, 'Siege of Constantinople')]

===== Eval Round 501 =====
Database         : battle_death
Prediction SQL   : SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id ORDER BY SUM(death.injured) DESC LIMIT 1
Gold SQL         : SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(4, 'HMS Avon')]
Gold Output      : [(5, 'Three Brothers')]

===== Eval Round 502 =====
Database         : battle_death
Prediction SQL   : SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
Gold SQL         : SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Battle of Adrianople',)]
Gold Output      : [('Battle of Adrianople',)]

===== Eval Round 503 =====
Database         : battle_death
Prediction SQL   : SELECT count(DISTINCT result) FROM battle
Gold SQL         : SELECT count(DISTINCT RESULT) FROM battle
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(3,)]
Gold Output      : [(3,)]

===== Eval Round 504 =====
Database         : battle_death
Prediction SQL   : SELECT COUNT(b.id) FROM battle AS b WHERE NOT EXISTS (SELECT 1 FROM ship AS s WHERE s.lost_in_battle = b.id AND s.tonnage = '225')
Gold SQL         : SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(7,)]
Gold Output      : [(7,)]

===== Eval Round 505 =====
Database         : battle_death
Prediction SQL   : SELECT T1.name, T1.date FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' AND EXISTS (SELECT 1 FROM ship AS T3 WHERE T3.name = 'HMS Atalanta' AND T3.lost_in_battle = T1.id)
Gold SQL         : SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Siege of Constantinople', '1235')]
Gold Output      : [('Siege of Constantinople', '1235')]

===== Eval Round 506 =====
Database         : battle_death
Prediction SQL   : SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.location = 'English Channel' AND ship.lost_in_battle IS NULL
Gold SQL         : SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('Battle of Adrianople', 'Bulgarian victory', 'Kaloyan'), ('Battle of Rusion', 'Bulgarian victory', 'Kaloyan'), ('Battle of Serres', 'Bulgarian victory', 'Kaloyan')]

===== Eval Round 507 =====
Database         : battle_death
Prediction SQL   : SELECT note FROM death WHERE note LIKE '%East%'
Gold SQL         : SELECT note FROM death WHERE note LIKE '%East%'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('East Champaran, Bihar',)]
Gold Output      : [('East Champaran, Bihar',)]

===== Eval Round 508 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT line_1, line_2 FROM Addresses
Gold SQL         : SELECT line_1 ,  line_2 FROM addresses
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('2294 Grant Square Apt. 235', 'Apt. 370'), ('3999 Aufderhar Ways Suite 593', 'Apt. 388'), ('67942 Carlotta Ferry Apt. 686', 'Apt. 583'), ('0144 Lamar Plaza Apt. 346', 'Suite 703'), ('858 Peggie Bypass Suite 212', 'Apt. 335'), ('16998 Mraz Lodge', 'Apt. 689'), ('193 Marlin Brook', 'Apt. 406'), ('202 Hessel Views Apt. 468', 'Apt. 305'), ('0643 Muller Vista', 'Suite 383'), ('7081 Eda Center', 'Suite 830'), ('9283 Schulist Falls Apt. 037', 'Suite 239'), ('979 Haag Shores Suite 656', 'Apt. 468'), ('492 Wilkinson Route', 'Suite 865'), ('186 Evan Motorway Apt. 409', 'Suite 079'), ('74046 Metz Walk Apt. 113', 'Suite 674')]
Gold Output      : [('2294 Grant Square Apt. 235', 'Apt. 370'), ('3999 Aufderhar Ways Suite 593', 'Apt. 388'), ('67942 Carlotta Ferry Apt. 686', 'Apt. 583'), ('0144 Lamar Plaza Apt. 346', 'Suite 703'), ('858 Peggie Bypass Suite 212', 'Apt. 335'), ('16998 Mraz Lodge', 'Apt. 689'), ('193 Marlin Brook', 'Apt. 406'), ('202 Hessel Views Apt. 468', 'Apt. 305'), ('0643 Muller Vista', 'Suite 383'), ('7081 Eda Center', 'Suite 830'), ('9283 Schulist Falls Apt. 037', 'Suite 239'), ('979 Haag Shores Suite 656', 'Apt. 468'), ('492 Wilkinson Route', 'Suite 865'), ('186 Evan Motorway Apt. 409', 'Suite 079'), ('74046 Metz Walk Apt. 113', 'Suite 674')]

===== Eval Round 509 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT line_1, line_2 FROM Addresses
Gold SQL         : SELECT line_1 ,  line_2 FROM addresses
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('2294 Grant Square Apt. 235', 'Apt. 370'), ('3999 Aufderhar Ways Suite 593', 'Apt. 388'), ('67942 Carlotta Ferry Apt. 686', 'Apt. 583'), ('0144 Lamar Plaza Apt. 346', 'Suite 703'), ('858 Peggie Bypass Suite 212', 'Apt. 335'), ('16998 Mraz Lodge', 'Apt. 689'), ('193 Marlin Brook', 'Apt. 406'), ('202 Hessel Views Apt. 468', 'Apt. 305'), ('0643 Muller Vista', 'Suite 383'), ('7081 Eda Center', 'Suite 830'), ('9283 Schulist Falls Apt. 037', 'Suite 239'), ('979 Haag Shores Suite 656', 'Apt. 468'), ('492 Wilkinson Route', 'Suite 865'), ('186 Evan Motorway Apt. 409', 'Suite 079'), ('74046 Metz Walk Apt. 113', 'Suite 674')]
Gold Output      : [('2294 Grant Square Apt. 235', 'Apt. 370'), ('3999 Aufderhar Ways Suite 593', 'Apt. 388'), ('67942 Carlotta Ferry Apt. 686', 'Apt. 583'), ('0144 Lamar Plaza Apt. 346', 'Suite 703'), ('858 Peggie Bypass Suite 212', 'Apt. 335'), ('16998 Mraz Lodge', 'Apt. 689'), ('193 Marlin Brook', 'Apt. 406'), ('202 Hessel Views Apt. 468', 'Apt. 305'), ('0643 Muller Vista', 'Suite 383'), ('7081 Eda Center', 'Suite 830'), ('9283 Schulist Falls Apt. 037', 'Suite 239'), ('979 Haag Shores Suite 656', 'Apt. 468'), ('492 Wilkinson Route', 'Suite 865'), ('186 Evan Motorway Apt. 409', 'Suite 079'), ('74046 Metz Walk Apt. 113', 'Suite 674')]

===== Eval Round 510 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT count(*) FROM Courses
Gold SQL         : SELECT count(*) FROM Courses
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(15,)]
Gold Output      : [(15,)]

===== Eval Round 511 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT COUNT(*) FROM Courses
Gold SQL         : SELECT count(*) FROM Courses
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(15,)]
Gold Output      : [(15,)]

===== Eval Round 512 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT course_description FROM Courses WHERE course_name = 'Math'
Gold SQL         : SELECT course_description FROM Courses WHERE course_name  =  'math'
Exec Accuracy(EX): 0
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : [('q',)]

===== Eval Round 513 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT course_description FROM Courses WHERE course_name LIKE '%Math%'
Gold SQL         : SELECT course_description FROM Courses WHERE course_name  =  'math'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('q',)]
Gold Output      : [('q',)]

===== Eval Round 514 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
Gold SQL         : SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('148',)]
Gold Output      : [('148',)]

===== Eval Round 515 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
Gold SQL         : SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('148',)]
Gold Output      : [('148',)]

===== Eval Round 516 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT d.department_id, d.department_name FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1
Gold SQL         : SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(8, 'statistics')]
Gold Output      : [('statistics', 8)]

===== Eval Round 517 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT d.department_name, d.department_id FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1
Gold SQL         : select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('statistics', 8)]
Gold Output      : [('statistics', 8)]

===== Eval Round 518 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT COUNT(DISTINCT department_id) FROM Degree_Programs
Gold SQL         : SELECT count(DISTINCT department_id) FROM Degree_Programs
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(10,)]
Gold Output      : [(10,)]

===== Eval Round 519 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT COUNT(DISTINCT department_id) FROM Degree_Programs
Gold SQL         : SELECT count(DISTINCT department_id) FROM Degree_Programs
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(10,)]
Gold Output      : [(10,)]

===== Eval Round 520 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs
Gold SQL         : SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(3,)]
Gold Output      : [(3,)]

===== Eval Round 521 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT count(DISTINCT degree_program_id) FROM Degree_Programs
Gold SQL         : SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(15,)]
Gold Output      : [(3,)]

===== Eval Round 522 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT COUNT(degree_program_id) FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'Engineering')
Gold SQL         : SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 523 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT COUNT(degree_program_id) FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'Engineering')
Gold SQL         : SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(0,)]
Gold Output      : [(0,)]

===== Eval Round 524 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT section_name, section_description FROM Sections
Gold SQL         : SELECT section_name ,  section_description FROM Sections
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('a', 'non'), ('b', 'voluptatem'), ('c', 'qui'), ('d', 'voluptas'), ('e', 'ex'), ('f', 'doloremque'), ('g', 'provident'), ('h', 'et'), ('j', 'quis'), ('k', 'nesciunt'), ('l', 'ad'), ('o', 'et'), ('p', 'facilis'), ('u', 'reprehenderit'), ('y', 'qui')]
Gold Output      : [('a', 'non'), ('b', 'voluptatem'), ('c', 'qui'), ('d', 'voluptas'), ('e', 'ex'), ('f', 'doloremque'), ('g', 'provident'), ('h', 'et'), ('j', 'quis'), ('k', 'nesciunt'), ('l', 'ad'), ('o', 'et'), ('p', 'facilis'), ('u', 'reprehenderit'), ('y', 'qui')]

===== Eval Round 525 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT section_name, section_description FROM Sections
Gold SQL         : SELECT section_name ,  section_description FROM Sections
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('a', 'non'), ('b', 'voluptatem'), ('c', 'qui'), ('d', 'voluptas'), ('e', 'ex'), ('f', 'doloremque'), ('g', 'provident'), ('h', 'et'), ('j', 'quis'), ('k', 'nesciunt'), ('l', 'ad'), ('o', 'et'), ('p', 'facilis'), ('u', 'reprehenderit'), ('y', 'qui')]
Gold Output      : [('a', 'non'), ('b', 'voluptatem'), ('c', 'qui'), ('d', 'voluptas'), ('e', 'ex'), ('f', 'doloremque'), ('g', 'provident'), ('h', 'et'), ('j', 'quis'), ('k', 'nesciunt'), ('l', 'ad'), ('o', 'et'), ('p', 'facilis'), ('u', 'reprehenderit'), ('y', 'qui')]

===== Eval Round 526 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT c.course_name, c.course_id FROM Courses c JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id HAVING COUNT(s.section_id) <= 2
Gold SQL         : SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('ds', 1), ('math', 2), ('en', 4), ('fr', 5), ('la', 6), ('cal', 7), ('nlp', 8), ('dl', 9), ('ml', 10), ('db', 12), ('pl', 14)]
Gold Output      : [('ds', 1), ('math', 2), ('en', 4), ('fr', 5), ('la', 6), ('cal', 7), ('nlp', 8), ('dl', 9), ('ml', 10), ('db', 12), ('pl', 14)]

===== Eval Round 527 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT course_name, course_id FROM Courses WHERE course_id NOT IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) >= 2)
Gold SQL         : SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('math', 2), ('os', 3), ('en', 4), ('la', 6), ('cal', 7), ('dl', 9), ('ml', 10), ('ai', 11), ('db', 12), ('rs', 13), ('oop', 15)]
Gold Output      : [('ds', 1), ('math', 2), ('en', 4), ('fr', 5), ('la', 6), ('cal', 7), ('nlp', 8), ('dl', 9), ('ml', 10), ('db', 12), ('pl', 14)]

===== Eval Round 528 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT section_name FROM Sections ORDER BY section_name DESC
Gold SQL         : SELECT section_name FROM Sections ORDER BY section_name DESC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('y',), ('u',), ('p',), ('o',), ('l',), ('k',), ('j',), ('h',), ('g',), ('f',), ('e',), ('d',), ('c',), ('b',), ('a',)]
Gold Output      : [('y',), ('u',), ('p',), ('o',), ('l',), ('k',), ('j',), ('h',), ('g',), ('f',), ('e',), ('d',), ('c',), ('b',), ('a',)]

===== Eval Round 529 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT section_name FROM Sections ORDER BY section_name DESC
Gold SQL         : SELECT section_name FROM Sections ORDER BY section_name DESC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('y',), ('u',), ('p',), ('o',), ('l',), ('k',), ('j',), ('h',), ('g',), ('f',), ('e',), ('d',), ('c',), ('b',), ('a',)]
Gold Output      : [('y',), ('u',), ('p',), ('o',), ('l',), ('k',), ('j',), ('h',), ('g',), ('f',), ('e',), ('d',), ('c',), ('b',), ('a',)]

===== Eval Round 530 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT semester_name, semester_id FROM Semesters ORDER BY (SELECT COUNT(*) FROM Student_Enrolment WHERE semester_id = Semesters.semester_id) DESC LIMIT 1
Gold SQL         : SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('summer 2010', 2)]
Gold Output      : [('summer 2010', 2)]

===== Eval Round 531 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT semester_name, semester_id FROM Semesters ORDER BY (SELECT COUNT(*) FROM Student_Enrolment WHERE semester_id = Semesters.semester_id) DESC LIMIT 1
Gold SQL         : SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('summer 2010', 2)]
Gold Output      : [('summer 2010', 2)]

===== Eval Round 532 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%'
Gold SQL         : SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
Exec Accuracy(EX): 0
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : [('error',)]

===== Eval Round 533 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
Gold SQL         : SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('error',)]
Gold Output      : [('error',)]

===== Eval Round 534 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE (SELECT COUNT(degree_program_id) FROM Student_Enrolment WHERE student_id = s.student_id) = 2 GROUP BY s.student_id
Gold SQL         : SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Jarvis', 'Aaliyah', 'Carroll', 4), ('Reva', 'Golda', 'Osinski', 9), ('Jordy', 'Osborne', 'Rempel', 14)]
Gold Output      : [('Jarvis', 'Aaliyah', 'Carroll', 4), ('Reva', 'Golda', 'Osinski', 9), ('Jordy', 'Osborne', 'Rempel', 14)]

===== Eval Round 535 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE EXISTS (SELECT 1 FROM Student_Enrolment se2 WHERE se2.student_id = s.student_id GROUP BY degree_program_id, semester_id HAVING COUNT(*) = 2)
Gold SQL         : SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('Jarvis', 'Aaliyah', 'Carroll', 4), ('Reva', 'Golda', 'Osinski', 9), ('Jordy', 'Osborne', 'Rempel', 14)]

===== Eval Round 536 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelor%'
Gold SQL         : SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Reva', 'Golda', 'Osinski'), ('Frida', 'Aisha', 'Huel'), ('Reva', 'Golda', 'Osinski'), ('Jarvis', 'Aaliyah', 'Carroll'), ('Frida', 'Aisha', 'Huel'), ('Jarvis', 'Aaliyah', 'Carroll'), ('Milton', 'Vaughn', 'Christiansen'), ('Stanford', 'Mona', 'Rogahn')]
Gold Output      : [('Reva', 'Golda', 'Osinski'), ('Frida', 'Aisha', 'Huel'), ('Jarvis', 'Aaliyah', 'Carroll'), ('Milton', 'Vaughn', 'Christiansen'), ('Stanford', 'Mona', 'Rogahn')]

===== Eval Round 537 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelors%'
Gold SQL         : SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('Reva', 'Golda', 'Osinski'), ('Frida', 'Aisha', 'Huel'), ('Jarvis', 'Aaliyah', 'Carroll'), ('Milton', 'Vaughn', 'Christiansen'), ('Stanford', 'Mona', 'Rogahn')]

===== Eval Round 538 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Bachelor',)]
Gold Output      : [('Bachelor',)]

===== Eval Round 539 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1
Gold SQL         : SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: ambiguous column name: degree_program_id
Gold Output      : [('Bachelor',)]

===== Eval Round 540 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT degree_program_id, degree_summary_name FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: degree_summary_name
Gold Output      : [(9, 'Bachelor')]

===== Eval Round 541 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1)
Gold SQL         : SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(9, 'Bachelor')]
Gold Output      : [(9, 'Bachelor')]

===== Eval Round 542 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT S.student_id, S.first_name, S.middle_name, S.last_name, COUNT(SE.degree_program_id) AS number_of_enrollments FROM Student_Enrolment SE JOIN Students S ON SE.student_id = S.student_id GROUP BY S.student_id ORDER BY number_of_enrollments DESC LIMIT 1
Gold SQL         : SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(7, 'Frida', 'Aisha', 'Huel', 3)]
Gold Output      : [(7, 'Frida', 'Aisha', 'Huel', 3, 7)]

===== Eval Round 543 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(se.student_enrolment_id) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1
Gold SQL         : SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Frida', 'Aisha', 'Huel', 7, 3)]
Gold Output      : [(7, 'Frida', 'Aisha', 'Huel', 3, 7)]

===== Eval Round 544 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
Gold SQL         : SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('fall 2010',), ('spring 2013',), ('spring 2014',), ('spring 2016',), ('spring 2017',), ('winter 2018',)]
Gold Output      : [('fall 2010',), ('spring 2013',), ('spring 2014',), ('spring 2016',), ('spring 2017',), ('winter 2018',)]

===== Eval Round 545 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
Gold SQL         : SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('fall 2010',), ('spring 2013',), ('spring 2014',), ('spring 2016',), ('spring 2017',), ('winter 2018',)]
Gold Output      : [('fall 2010',), ('spring 2013',), ('spring 2014',), ('spring 2016',), ('spring 2017',), ('winter 2018',)]

===== Eval Round 546 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id
Gold SQL         : SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('la',), ('pl',), ('ai',), ('math',), ('ml',), ('os',), ('en',), ('nlp',), ('rs',), ('db',)]
Gold Output      : [('la',), ('pl',), ('ai',), ('math',), ('ml',), ('os',), ('en',), ('nlp',), ('rs',), ('db',)]

===== Eval Round 547 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id
Gold SQL         : SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('la',), ('pl',), ('ai',), ('math',), ('ml',), ('os',), ('en',), ('nlp',), ('rs',), ('db',)]
Gold Output      : [('la',), ('pl',), ('ai',), ('math',), ('ml',), ('os',), ('en',), ('nlp',), ('rs',), ('db',)]

===== Eval Round 548 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT c.course_name FROM Courses c JOIN Student_Course_Enrolment sce ON c.course_id = sce.course_id GROUP BY c.course_id ORDER BY COUNT(sce.student_course_id) DESC LIMIT 1
Gold SQL         : SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such table: Student_Course_Enrolment
Gold Output      : [('rs',)]

===== Eval Round 549 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_id ORDER BY COUNT(sec.student_course_id) DESC LIMIT 1
Gold SQL         : SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('pl',)]
Gold Output      : [('rs',)]

===== Eval Round 550 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' AND NOT EXISTS (SELECT 1 FROM Student_Enrolment AS T3 WHERE T3.student_id = T1.student_id)
Gold SQL         : SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('Gleichner',), ('Weimann',)]

===== Eval Round 551 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' AND NOT EXISTS (SELECT 1 FROM Student_Enrolment WHERE Student_Enrolment.student_id = T1.student_id)
Gold SQL         : SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('Gleichner',), ('Weimann',)]

===== Eval Round 552 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT T1.transcript_date, T1.transcript_id FROM Transcripts T1 JOIN Transcript_Contents T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(T2.student_course_id) >= 2
Gold SQL         : SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('2013-06-30 13:01:40', 5), ('2010-12-13 10:55:15', 6), ('1975-05-06 12:04:47', 8), ('1998-11-22 12:18:29', 15)]
Gold Output      : [('2013-06-30 13:01:40', 5), ('2010-12-13 10:55:15', 6), ('1975-05-06 12:04:47', 8), ('1998-11-22 12:18:29', 15)]

===== Eval Round 553 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT T1.transcript_date, T1.transcript_id FROM Transcripts T1 JOIN Transcript_Contents T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(T2.student_course_id) >= 2
Gold SQL         : SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('2013-06-30 13:01:40', 5), ('2010-12-13 10:55:15', 6), ('1975-05-06 12:04:47', 8), ('1998-11-22 12:18:29', 15)]
Gold Output      : [('2013-06-30 13:01:40', 5), ('2010-12-13 10:55:15', 6), ('1975-05-06 12:04:47', 8), ('1998-11-22 12:18:29', 15)]

===== Eval Round 554 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
Gold SQL         : SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('(096)889-8954x524',)]
Gold Output      : [('(096)889-8954x524',)]

===== Eval Round 555 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
Gold SQL         : select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'
Exec Accuracy(EX): 0
Exact Match(EM)  : True
Pred Output      : [('(096)889-8954x524',)]
Gold Output      : []

===== Eval Round 556 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
Gold SQL         : SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Timmothy', 'Anna', 'Ward')]
Gold Output      : [('Timmothy', 'Anna', 'Ward')]

===== Eval Round 557 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
Gold SQL         : SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Timmothy', 'Anna', 'Ward')]
Gold Output      : [('Timmothy', 'Anna', 'Ward')]

===== Eval Round 558 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id ORDER BY s.date_left ASC LIMIT 1
Gold SQL         : SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Timmothy', 'Anna', 'Ward')]
Gold Output      : [('Timmothy', 'Anna', 'Ward')]

===== Eval Round 559 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left ASC LIMIT 1
Gold SQL         : SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Timmothy', 'Anna', 'Ward')]
Gold Output      : [('Timmothy', 'Anna', 'Ward')]

===== Eval Round 560 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT s.first_name FROM Students s WHERE s.current_address_id <> s.permanent_address_id
Gold SQL         : SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Timmothy',), ('Hobart',), ('Warren',), ('Jarvis',), ('Stanford',), ('Frida',), ('Delaney',), ('Reva',), ('Helga',), ('Gregg',), ('Orrin',), ('Deon',), ('Jordy',), ('Jett',)]
Gold Output      : [('Timmothy',), ('Hobart',), ('Warren',), ('Jarvis',), ('Stanford',), ('Frida',), ('Delaney',), ('Reva',), ('Helga',), ('Gregg',), ('Orrin',), ('Deon',), ('Jordy',), ('Jett',)]

===== Eval Round 561 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT s.first_name FROM Students s WHERE s.current_address_id != s.permanent_address_id
Gold SQL         : SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Timmothy',), ('Hobart',), ('Warren',), ('Jarvis',), ('Stanford',), ('Frida',), ('Delaney',), ('Reva',), ('Helga',), ('Gregg',), ('Orrin',), ('Deon',), ('Jordy',), ('Jett',)]
Gold Output      : [('Timmothy',), ('Hobart',), ('Warren',), ('Jarvis',), ('Stanford',), ('Frida',), ('Delaney',), ('Reva',), ('Helga',), ('Gregg',), ('Orrin',), ('Deon',), ('Jordy',), ('Jett',)]

===== Eval Round 562 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id ORDER BY COUNT(s.student_id) DESC LIMIT 1
Gold SQL         : SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(9, '0643 Muller Vista', 'Suite 383', None)]
Gold Output      : [(9, '0643 Muller Vista', 'Suite 383')]

===== Eval Round 563 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT A.address_id, A.line_1, A.line_2 FROM Addresses A JOIN Students S ON A.address_id = S.current_address_id GROUP BY A.address_id ORDER BY COUNT(S.student_id) DESC LIMIT 1
Gold SQL         : SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(9, '0643 Muller Vista', 'Suite 383')]
Gold Output      : [(9, '0643 Muller Vista', 'Suite 383')]

===== Eval Round 564 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT AVG(transcript_date) FROM Transcripts
Gold SQL         : SELECT avg(transcript_date) FROM Transcripts
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1989.9333333333334,)]
Gold Output      : [(1989.9333333333334,)]

===== Eval Round 565 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT AVG(transcript_date) FROM Transcripts
Gold SQL         : SELECT avg(transcript_date) FROM Transcripts
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1989.9333333333334,)]
Gold Output      : [(1989.9333333333334,)]

===== Eval Round 566 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT MIN(transcript_date) AS first_transcript_date FROM Transcripts
Gold SQL         : SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('1975-05-06 12:04:47',)]
Gold Output      : [('1975-05-06 12:04:47', None)]

===== Eval Round 567 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT MIN(transcript_date) AS earliest_transcript_date FROM Transcripts
Gold SQL         : SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('1975-05-06 12:04:47',)]
Gold Output      : [('1975-05-06 12:04:47', None)]

===== Eval Round 568 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT COUNT(*) FROM Transcripts
Gold SQL         : SELECT count(*) FROM Transcripts
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(15,)]
Gold Output      : [(15,)]

===== Eval Round 569 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT COUNT(*) FROM Transcripts
Gold SQL         : SELECT count(*) FROM Transcripts
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(15,)]
Gold Output      : [(15,)]

===== Eval Round 570 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT MAX(transcript_date) FROM Transcripts
Gold SQL         : SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('2013-06-30 13:01:40',)]
Gold Output      : [('2013-06-30 13:01:40',)]

===== Eval Round 571 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
Gold SQL         : SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('2013-06-30 13:01:40',)]
Gold Output      : [('2013-06-30 13:01:40',)]

===== Eval Round 572 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT COUNT(*) AS max_transcript_appearances, student_course_id FROM Transcript_Contents GROUP BY student_course_id
Gold SQL         : SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(4, 0), (1, 2), (1, 7), (1, 8), (3, 76), (2, 96), (1, 28982908), (1, 45105806), (1, 70882679)]
Gold Output      : [(4, 0)]

===== Eval Round 573 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT course_id, COUNT(student_course_id) AS transcript_count FROM Transcript_Contents JOIN Student_Enrolment_Courses USING (student_course_id) GROUP BY course_id ORDER BY transcript_count DESC LIMIT 1
Gold SQL         : SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(6, 4)]
Gold Output      : [(4, 0)]

===== Eval Round 574 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) LIMIT 1)
Gold SQL         : SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('1975-10-28 15:16:51', 2)]
Gold Output      : [('1975-10-28 15:16:51', 2)]

===== Eval Round 575 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT transcript_date, transcript_id FROM Transcripts ORDER BY (SELECT COUNT(*) FROM Transcript_Contents WHERE Transcript_Contents.transcript_id = Transcripts.transcript_id) LIMIT 1
Gold SQL         : SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('1988-04-30 01:19:47', 1)]
Gold Output      : [('1975-10-28 15:16:51', 2)]

===== Eval Round 576 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT DISTINCT T1.semester_name FROM Semesters AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id INNER JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name LIKE '%Master%' UNION SELECT DISTINCT T1.semester_name FROM Semesters AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id INNER JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name LIKE '%Bachelor%'
Gold SQL         : SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('fall 2018',), ('spring 2010',), ('spring 2012',), ('spring 2015',), ('spring 2018',), ('spring 2019',), ('summer 2010',), ('winter 2010',)]
Gold Output      : [(13,)]

===== Eval Round 577 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT DISTINCT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Masters%' UNION SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Bachelors%')
Gold SQL         : SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [(13,)]

===== Eval Round 578 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT count(DISTINCT current_address_id) FROM Students
Gold SQL         : SELECT count(DISTINCT current_address_id) FROM Students
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(9,)]
Gold Output      : [(9,)]

===== Eval Round 579 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT DISTINCT A.* FROM Addresses A JOIN Students S ON A.address_id = S.current_address_id OR A.address_id = S.permanent_address_id
Gold SQL         : SELECT count(DISTINCT current_address_id) FROM Students
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(10, '7081 Eda Center', 'Suite 830', None, 'Rutherfordtown', '839', 'Delaware', 'Kyrgyz Republic', None), (15, '74046 Metz Walk Apt. 113', 'Suite 674', None, 'Port Oceane', '669', 'Wyoming', 'Norfolk Island', None), (5, '858 Peggie Bypass Suite 212', 'Apt. 335', None, 'Michelleburgh', '446', 'Hawaii', 'Haiti', None), (12, '979 Haag Shores Suite 656', 'Apt. 468', None, 'Prohaskafort', '590', 'SouthDakota', 'Lesotho', None), (9, '0643 Muller Vista', 'Suite 383', None, 'Port Elvisfurt', '777', 'NorthCarolina', 'Gabon', None), (7, '193 Marlin Brook', 'Apt. 406', None, 'Herzoghaven', '068', 'Arkansas', 'Cook Islands', None), (11, '9283 Schulist Falls Apt. 037', 'Suite 239', None, 'South Palma', '400', 'WestVirginia', 'Bermuda', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None), (6, '16998 Mraz Lodge', 'Apt. 689', None, 'North Omer', '902', 'Kentucky', 'Gibraltar', None), (1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (14, '186 Evan Motorway Apt. 409', 'Suite 079', None, 'Lake Careyberg', '895', 'Kentucky', 'New Caledonia', None), (4, '0144 Lamar Plaza Apt. 346', 'Suite 703', None, 'Port Evanston', '847', 'Washington', 'Angola', None), (8, '202 Hessel Views Apt. 468', 'Apt. 305', None, 'Mariliehaven', '638', 'Idaho', 'Croatia', None)]
Gold Output      : [(9,)]

===== Eval Round 580 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT student_id, first_name, middle_name, last_name FROM Students ORDER BY last_name DESC, first_name DESC
Gold SQL         : SELECT other_student_details FROM Students ORDER BY other_student_details DESC
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(13, 'Deon', 'Brooklyn', 'Weimann'), (1, 'Timmothy', 'Anna', 'Ward'), (11, 'Gregg', 'Mossie', 'Schuppe'), (6, 'Stanford', 'Mona', 'Rogahn'), (14, 'Jordy', 'Osborne', 'Rempel'), (9, 'Reva', 'Golda', 'Osinski'), (10, 'Helga', 'Cleve', 'Mohr'), (12, 'Orrin', 'Neal', 'Kemmer'), (15, 'Jett', 'Alberta', 'Jaskolski'), (7, 'Frida', 'Aisha', 'Huel'), (3, 'Warren', 'Violet', 'Gleichner'), (5, 'Milton', 'Vaughn', 'Christiansen'), (4, 'Jarvis', 'Aaliyah', 'Carroll'), (2, 'Hobart', 'Lorenz', 'Balistreri'), (8, 'Delaney', 'Judd', 'Ankunding')]
Gold Output      : [('voluptatem',), ('rerum',), ('quia',), ('qui',), ('omnis',), ('omnis',), ('non',), ('nesciunt',), ('laborum',), ('facilis',), ('et',), ('dolorum',), ('autem',), ('atque',), ('assumenda',)]

===== Eval Round 581 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT other_student_details FROM Students ORDER BY last_name DESC
Gold SQL         : SELECT other_student_details FROM Students ORDER BY other_student_details DESC
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('assumenda',), ('quia',), ('omnis',), ('qui',), ('et',), ('nesciunt',), ('rerum',), ('non',), ('omnis',), ('dolorum',), ('facilis',), ('laborum',), ('atque',), ('autem',), ('voluptatem',)]
Gold Output      : [('voluptatem',), ('rerum',), ('quia',), ('qui',), ('omnis',), ('omnis',), ('non',), ('nesciunt',), ('laborum',), ('facilis',), ('et',), ('dolorum',), ('autem',), ('atque',), ('assumenda',)]

===== Eval Round 582 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT * FROM Sections WHERE section_name = 'h'
Gold SQL         : SELECT section_description FROM Sections WHERE section_name  =  'h'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(8, 14, 'h', 'et', None)]
Gold Output      : [('et',)]

===== Eval Round 583 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT section_description FROM Sections WHERE section_name = 'h'
Gold SQL         : SELECT section_description FROM Sections WHERE section_name  =  'h'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('et',)]
Gold Output      : [('et',)]

===== Eval Round 584 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT s.first_name FROM Students s WHERE s.permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR s.cell_mobile_number = '09700166582'
Gold SQL         : select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Hobart',), ('Warren',), ('Jarvis',), ('Delaney',)]
Gold Output      : [('Jarvis',)]

===== Eval Round 585 =====
Database         : student_transcripts_tracking
Prediction SQL   : SELECT DISTINCT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'
Gold SQL         : select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Hobart',), ('Warren',), ('Jarvis',), ('Delaney',)]
Gold Output      : [('Jarvis',)]

===== Eval Round 586 =====
Database         : tvshow
Prediction SQL   : SELECT Title FROM Cartoon ORDER BY Title
Gold SQL         : SELECT Title FROM Cartoon ORDER BY title
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Dawn of the Dead Man!',), ('Day of the Dark Knight!',), ('Deep Cover for Batman!',), ('Enter the Outsiders!',), ('Evil Under the Sea!',), ('Fall of the Blue Beetle!',), ('Invasion of the Secret Santas!',), ('Journey to the Center of the Bat!',), ('Return of the Fearsome Fangs!',), ('Terror on Dinosaur Island!',), ('The Eyes of Despero!',), ('The Rise of the Blue Beetle!',)]
Gold Output      : [('Dawn of the Dead Man!',), ('Day of the Dark Knight!',), ('Deep Cover for Batman!',), ('Enter the Outsiders!',), ('Evil Under the Sea!',), ('Fall of the Blue Beetle!',), ('Invasion of the Secret Santas!',), ('Journey to the Center of the Bat!',), ('Return of the Fearsome Fangs!',), ('Terror on Dinosaur Island!',), ('The Eyes of Despero!',), ('The Rise of the Blue Beetle!',)]

===== Eval Round 587 =====
Database         : tvshow
Prediction SQL   : SELECT Title FROM Cartoon ORDER BY Title
Gold SQL         : SELECT Title FROM Cartoon ORDER BY title
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Dawn of the Dead Man!',), ('Day of the Dark Knight!',), ('Deep Cover for Batman!',), ('Enter the Outsiders!',), ('Evil Under the Sea!',), ('Fall of the Blue Beetle!',), ('Invasion of the Secret Santas!',), ('Journey to the Center of the Bat!',), ('Return of the Fearsome Fangs!',), ('Terror on Dinosaur Island!',), ('The Eyes of Despero!',), ('The Rise of the Blue Beetle!',)]
Gold Output      : [('Dawn of the Dead Man!',), ('Day of the Dark Knight!',), ('Deep Cover for Batman!',), ('Enter the Outsiders!',), ('Evil Under the Sea!',), ('Fall of the Blue Beetle!',), ('Invasion of the Secret Santas!',), ('Journey to the Center of the Bat!',), ('Return of the Fearsome Fangs!',), ('Terror on Dinosaur Island!',), ('The Eyes of Despero!',), ('The Rise of the Blue Beetle!',)]

===== Eval Round 588 =====
Database         : tvshow
Prediction SQL   : SELECT * FROM Cartoon WHERE Directed_by = "Ben Jones"
Gold SQL         : SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (4.0, 'Day of the Dark Knight!', 'Ben Jones', 'J. M. DeMatteis', 'January2,2009', 104.0, '704'), (7.0, 'Dawn of the Dead Man!', 'Ben Jones', 'Steven Melching', 'January16,2009', 107.0, '707'), (10.0, 'The Eyes of Despero!', 'Ben Jones', 'J. M. DeMatteis', 'February6,2009', 110.0, '728')]
Gold Output      : [('The Rise of the Blue Beetle!',), ('Day of the Dark Knight!',), ('Dawn of the Dead Man!',), ('The Eyes of Despero!',)]

===== Eval Round 589 =====
Database         : tvshow
Prediction SQL   : SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'
Gold SQL         : SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('The Rise of the Blue Beetle!',), ('Day of the Dark Knight!',), ('Dawn of the Dead Man!',), ('The Eyes of Despero!',)]
Gold Output      : [('The Rise of the Blue Beetle!',), ('Day of the Dark Knight!',), ('Dawn of the Dead Man!',), ('The Eyes of Despero!',)]

===== Eval Round 590 =====
Database         : tvshow
Prediction SQL   : SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr"
Gold SQL         : SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(2,)]
Gold Output      : [(2,)]

===== Eval Round 591 =====
Database         : tvshow
Prediction SQL   : SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
Gold SQL         : SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(2,)]
Gold Output      : [(2,)]

===== Eval Round 592 =====
Database         : tvshow
Prediction SQL   : SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date
Gold SQL         : SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Invasion of the Secret Santas!', 'Brandon Vietti'), ('Evil Under the Sea!', 'Michael Chang'), ('Return of the Fearsome Fangs!', 'Brandon Vietti'), ('Deep Cover for Batman!', 'Michael Chang'), ('The Eyes of Despero!', 'Ben Jones'), ('Dawn of the Dead Man!', 'Ben Jones'), ('Day of the Dark Knight!', 'Ben Jones'), ('Fall of the Blue Beetle!', 'Brandon Vietti'), ('Journey to the Center of the Bat!', 'Michael Chang'), ('Enter the Outsiders!', 'Michael Chang'), ('The Rise of the Blue Beetle!', 'Ben Jones'), ('Terror on Dinosaur Island!', 'Brandon Vietti')]
Gold Output      : [('Invasion of the Secret Santas!', 'Brandon Vietti'), ('Evil Under the Sea!', 'Michael Chang'), ('Return of the Fearsome Fangs!', 'Brandon Vietti'), ('Deep Cover for Batman!', 'Michael Chang'), ('The Eyes of Despero!', 'Ben Jones'), ('Dawn of the Dead Man!', 'Ben Jones'), ('Day of the Dark Knight!', 'Ben Jones'), ('Fall of the Blue Beetle!', 'Brandon Vietti'), ('Journey to the Center of the Bat!', 'Michael Chang'), ('Enter the Outsiders!', 'Michael Chang'), ('The Rise of the Blue Beetle!', 'Ben Jones'), ('Terror on Dinosaur Island!', 'Brandon Vietti')]

===== Eval Round 593 =====
Database         : tvshow
Prediction SQL   : SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date
Gold SQL         : SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Invasion of the Secret Santas!', 'Brandon Vietti'), ('Evil Under the Sea!', 'Michael Chang'), ('Return of the Fearsome Fangs!', 'Brandon Vietti'), ('Deep Cover for Batman!', 'Michael Chang'), ('The Eyes of Despero!', 'Ben Jones'), ('Dawn of the Dead Man!', 'Ben Jones'), ('Day of the Dark Knight!', 'Ben Jones'), ('Fall of the Blue Beetle!', 'Brandon Vietti'), ('Journey to the Center of the Bat!', 'Michael Chang'), ('Enter the Outsiders!', 'Michael Chang'), ('The Rise of the Blue Beetle!', 'Ben Jones'), ('Terror on Dinosaur Island!', 'Brandon Vietti')]
Gold Output      : [('Invasion of the Secret Santas!', 'Brandon Vietti'), ('Evil Under the Sea!', 'Michael Chang'), ('Return of the Fearsome Fangs!', 'Brandon Vietti'), ('Deep Cover for Batman!', 'Michael Chang'), ('The Eyes of Despero!', 'Ben Jones'), ('Dawn of the Dead Man!', 'Ben Jones'), ('Day of the Dark Knight!', 'Ben Jones'), ('Fall of the Blue Beetle!', 'Brandon Vietti'), ('Journey to the Center of the Bat!', 'Michael Chang'), ('Enter the Outsiders!', 'Michael Chang'), ('The Rise of the Blue Beetle!', 'Ben Jones'), ('Terror on Dinosaur Island!', 'Brandon Vietti')]

===== Eval Round 594 =====
Database         : tvshow
Prediction SQL   : SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')
Gold SQL         : SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('The Rise of the Blue Beetle!',), ('Terror on Dinosaur Island!',), ('Day of the Dark Knight!',), ('Invasion of the Secret Santas!',), ('Dawn of the Dead Man!',), ('Fall of the Blue Beetle!',), ('The Eyes of Despero!',), ('Return of the Fearsome Fangs!',)]
Gold Output      : [('The Rise of the Blue Beetle!',), ('Terror on Dinosaur Island!',), ('Day of the Dark Knight!',), ('Invasion of the Secret Santas!',), ('Dawn of the Dead Man!',), ('Fall of the Blue Beetle!',), ('The Eyes of Despero!',), ('Return of the Fearsome Fangs!',)]

===== Eval Round 595 =====
Database         : tvshow
Prediction SQL   : SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')
Gold SQL         : SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('The Rise of the Blue Beetle!',), ('Terror on Dinosaur Island!',), ('Day of the Dark Knight!',), ('Invasion of the Secret Santas!',), ('Dawn of the Dead Man!',), ('Fall of the Blue Beetle!',), ('The Eyes of Despero!',), ('Return of the Fearsome Fangs!',)]
Gold Output      : [('The Rise of the Blue Beetle!',), ('Terror on Dinosaur Island!',), ('Day of the Dark Knight!',), ('Invasion of the Secret Santas!',), ('Dawn of the Dead Man!',), ('Fall of the Blue Beetle!',), ('The Eyes of Despero!',), ('Return of the Fearsome Fangs!',)]

===== Eval Round 596 =====
Database         : tvshow
Prediction SQL   : SELECT Country, COUNT(*) AS NumberOfChannels FROM TV_Channel GROUP BY Country ORDER BY NumberOfChannels DESC LIMIT 1
Gold SQL         : SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Italy', 12)]
Gold Output      : [('Italy', 12)]

===== Eval Round 597 =====
Database         : tvshow
Prediction SQL   : SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Italy', 12)]
Gold Output      : [('Italy', 12)]

===== Eval Round 598 =====
Database         : tvshow
Prediction SQL   : SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel
Gold SQL         : SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(15, 1)]
Gold Output      : [(15, 1)]

===== Eval Round 599 =====
Database         : tvshow
Prediction SQL   : SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel
Gold SQL         : SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(15, 1)]
Gold Output      : [(15, 1)]

===== Eval Round 600 =====
Database         : tvshow
Prediction SQL   : SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio"
Gold SQL         : SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('music',)]
Gold Output      : [('music',)]

===== Eval Round 601 =====
Database         : tvshow
Prediction SQL   : SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
Gold SQL         : SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('music',)]
Gold Output      : [('music',)]

===== Eval Round 602 =====
Database         : tvshow
Prediction SQL   : SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio"
Gold SQL         : SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Sky Famiglia',)]
Gold Output      : [('Sky Famiglia',)]

===== Eval Round 603 =====
Database         : tvshow
Prediction SQL   : SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
Gold SQL         : SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Sky Famiglia',)]
Gold Output      : [('Sky Famiglia',)]

===== Eval Round 604 =====
Database         : tvshow
Prediction SQL   : SELECT count(*) FROM TV_Channel WHERE Language = 'English'
Gold SQL         : SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(3,)]
Gold Output      : [(3,)]

===== Eval Round 605 =====
Database         : tvshow
Prediction SQL   : SELECT count(*) FROM TV_Channel WHERE Language = 'English'
Gold SQL         : SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(3,)]
Gold Output      : [(3,)]

===== Eval Round 606 =====
Database         : tvshow
Prediction SQL   : SELECT Language, COUNT(*) AS ChannelCount FROM TV_Channel GROUP BY Language ORDER BY ChannelCount ASC LIMIT 1
Gold SQL         : SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('English', 3)]
Gold Output      : [('English', 3)]

===== Eval Round 607 =====
Database         : tvshow
Prediction SQL   : SELECT Language, COUNT(id) AS ChannelCount FROM TV_Channel GROUP BY Language HAVING COUNT(id) = (SELECT MIN(ChannelCount) FROM (SELECT COUNT(id) AS ChannelCount FROM TV_Channel GROUP BY Language) AS Subquery)
Gold SQL         : SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('English', 3)]
Gold Output      : [('English', 3)]

===== Eval Round 608 =====
Database         : tvshow
Prediction SQL   : SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language
Gold SQL         : SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('English', 3), ('Italian', 12)]
Gold Output      : [('English', 3), ('Italian', 12)]

===== Eval Round 609 =====
Database         : tvshow
Prediction SQL   : SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language
Gold SQL         : SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('English', 3), ('Italian', 12)]
Gold Output      : [('English', 3), ('Italian', 12)]

===== Eval Round 610 =====
Database         : tvshow
Prediction SQL   : SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = "The Rise of the Blue Beetle!"
Gold SQL         : SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Sky Radio',)]
Gold Output      : [('Sky Radio',)]

===== Eval Round 611 =====
Database         : tvshow
Prediction SQL   : SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle"
Gold SQL         : SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
Exec Accuracy(EX): 0
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : [('Sky Radio',)]

===== Eval Round 612 =====
Database         : tvshow
Prediction SQL   : SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = "Sky Radio"
Gold SQL         : SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('The Rise of the Blue Beetle!',), ('Return of the Fearsome Fangs!',)]
Gold Output      : [('The Rise of the Blue Beetle!',), ('Return of the Fearsome Fangs!',)]

===== Eval Round 613 =====
Database         : tvshow
Prediction SQL   : SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = "Sky Radio"
Gold SQL         : SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('The Rise of the Blue Beetle!',), ('Return of the Fearsome Fangs!',)]
Gold Output      : [('The Rise of the Blue Beetle!',), ('Return of the Fearsome Fangs!',)]

===== Eval Round 614 =====
Database         : tvshow
Prediction SQL   : SELECT Episode FROM TV_series ORDER BY Rating
Gold SQL         : SELECT Episode FROM TV_series ORDER BY rating
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('The Hanged Man',), ('Double Down',), ('Home By Another Way',), ('Keepers',), ('Emily',), ('Blowback',), ('The Legend of Dylan McCleen',), ('Winterland',), ('The Year of the Rabbit',), ('Game Three',), ('Friendly Skies',), ('A Love of a Lifetime',)]
Gold Output      : [('The Hanged Man',), ('Double Down',), ('Home By Another Way',), ('Keepers',), ('Emily',), ('Blowback',), ('The Legend of Dylan McCleen',), ('Winterland',), ('The Year of the Rabbit',), ('Game Three',), ('Friendly Skies',), ('A Love of a Lifetime',)]

===== Eval Round 615 =====
Database         : tvshow
Prediction SQL   : SELECT Episode FROM TV_series ORDER BY Rating DESC
Gold SQL         : SELECT Episode FROM TV_series ORDER BY rating
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('A Love of a Lifetime',), ('Friendly Skies',), ('Game Three',), ('The Year of the Rabbit',), ('Winterland',), ('The Legend of Dylan McCleen',), ('Keepers',), ('Emily',), ('Blowback',), ('Home By Another Way',), ('Double Down',), ('The Hanged Man',)]
Gold Output      : [('The Hanged Man',), ('Double Down',), ('Home By Another Way',), ('Keepers',), ('Emily',), ('Blowback',), ('The Legend of Dylan McCleen',), ('Winterland',), ('The Year of the Rabbit',), ('Game Three',), ('Friendly Skies',), ('A Love of a Lifetime',)]

===== Eval Round 616 =====
Database         : tvshow
Prediction SQL   : SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3
Gold SQL         : SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('A Love of a Lifetime', '5.8'), ('Friendly Skies', '5.3'), ('Game Three', '4.4')]
Gold Output      : [('A Love of a Lifetime', '5.8'), ('Friendly Skies', '5.3'), ('Game Three', '4.4')]

===== Eval Round 617 =====
Database         : tvshow
Prediction SQL   : SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3
Gold SQL         : SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('A Love of a Lifetime', '5.8'), ('Friendly Skies', '5.3'), ('Game Three', '4.4')]
Gold Output      : [('A Love of a Lifetime', '5.8'), ('Friendly Skies', '5.3'), ('Game Three', '4.4')]

===== Eval Round 618 =====
Database         : tvshow
Prediction SQL   : SELECT min(Share), max(Share) FROM TV_series
Gold SQL         : SELECT max(SHARE) , min(SHARE) FROM TV_series;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(5.0, 9.0)]
Gold Output      : [(9.0, 5.0)]

===== Eval Round 619 =====
Database         : tvshow
Prediction SQL   : SELECT MAX(Share), MIN(Share) FROM TV_series
Gold SQL         : SELECT max(SHARE) , min(SHARE) FROM TV_series;
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(9.0, 5.0)]
Gold Output      : [(9.0, 5.0)]

===== Eval Round 620 =====
Database         : tvshow
Prediction SQL   : SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"
Gold SQL         : SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('September 24, 2007',)]
Gold Output      : [('September 24, 2007',)]

===== Eval Round 621 =====
Database         : tvshow
Prediction SQL   : SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"
Gold SQL         : SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('September 24, 2007',)]
Gold Output      : [('September 24, 2007',)]

===== Eval Round 622 =====
Database         : tvshow
Prediction SQL   : SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"
Gold SQL         : SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(43.0,)]
Gold Output      : [(43.0,)]

===== Eval Round 623 =====
Database         : tvshow
Prediction SQL   : SELECT T1.Weekly_Rank FROM TV_series AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "A Love of a Lifetime"
Gold SQL         : SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [(43.0,)]

===== Eval Round 624 =====
Database         : tvshow
Prediction SQL   : SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime"
Gold SQL         : SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Sky Radio',)]
Gold Output      : [('Sky Radio',)]

===== Eval Round 625 =====
Database         : tvshow
Prediction SQL   : SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime"
Gold SQL         : SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Sky Radio',)]
Gold Output      : [('Sky Radio',)]

===== Eval Round 626 =====
Database         : tvshow
Prediction SQL   : SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = "Sky Radio"
Gold SQL         : SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('A Love of a Lifetime',), ('Keepers',)]
Gold Output      : [('A Love of a Lifetime',), ('Keepers',)]

===== Eval Round 627 =====
Database         : tvshow
Prediction SQL   : SELECT T1.Episode FROM TV_series AS T1 WHERE T1.Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')
Gold SQL         : SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('A Love of a Lifetime',), ('Keepers',)]
Gold Output      : [('A Love of a Lifetime',), ('Keepers',)]

===== Eval Round 628 =====
Database         : tvshow
Prediction SQL   : SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by
Gold SQL         : SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Ben Jones', 4), ('Brandon Vietti', 4), ('Michael Chang', 4)]
Gold Output      : [(4, 'Ben Jones'), (4, 'Brandon Vietti'), (4, 'Michael Chang')]

===== Eval Round 629 =====
Database         : tvshow
Prediction SQL   : SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by
Gold SQL         : SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Ben Jones', 4), ('Brandon Vietti', 4), ('Michael Chang', 4)]
Gold Output      : [(4, 'Ben Jones'), (4, 'Brandon Vietti'), (4, 'Michael Chang')]

===== Eval Round 630 =====
Database         : tvshow
Prediction SQL   : SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1
Gold SQL         : select production_code ,  channel from cartoon order by original_air_date desc limit 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(102.0, '701')]
Gold Output      : [(102.0, '701')]

===== Eval Round 631 =====
Database         : tvshow
Prediction SQL   : SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1
Gold SQL         : select production_code ,  channel from cartoon order by original_air_date desc limit 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(102.0, '701')]
Gold Output      : [(102.0, '701')]

===== Eval Round 632 =====
Database         : tvshow
Prediction SQL   : SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'
Gold SQL         : SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
Exec Accuracy(EX): 0
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : [('Sky Famiglia + Sky HD', 'MTV Live HD')]

===== Eval Round 633 =====
Database         : tvshow
Prediction SQL   : SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'
Gold SQL         : SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
Exec Accuracy(EX): 0
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : [('Sky Famiglia + Sky HD', 'MTV Live HD')]

===== Eval Round 634 =====
Database         : tvshow
Prediction SQL   : SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'
Gold SQL         : SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('United Kingdom',), ('Italy',)]
Gold Output      : [('United Kingdom',), ('Italy',)]

===== Eval Round 635 =====
Database         : tvshow
Prediction SQL   : SELECT DISTINCT T1.Country FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'
Gold SQL         : SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('United Kingdom',), ('Italy',)]
Gold Output      : [('United Kingdom',), ('Italy',)]

===== Eval Round 636 =====
Database         : tvshow
Prediction SQL   : SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')
Gold SQL         : SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Italy',), ('United Kingdom',), ('Poland',)]
Gold Output      : [('Poland',)]

===== Eval Round 637 =====
Database         : tvshow
Prediction SQL   : SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')
Gold SQL         : SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Italy',), ('United Kingdom',), ('Poland',)]
Gold Output      : [('Poland',)]

===== Eval Round 638 =====
Database         : tvshow
Prediction SQL   : SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by IN ('Ben Jones', 'Michael Chang')
Gold SQL         : SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Sky Radio', 'Italy'), ('Music Box Italia', 'Italy'), ('MTV Hits', 'Italy'), ('MTV Rocks', 'United Kingdom'), ('MTV Dance', 'United Kingdom'), ('MTV Dance', 'United Kingdom'), ('Classica', 'Italy'), ('MTV Dance', 'United Kingdom')]
Gold Output      : [('MTV Dance', 'United Kingdom')]

===== Eval Round 639 =====
Database         : tvshow
Prediction SQL   : SELECT DISTINCT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang'
Gold SQL         : SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Sky Radio', 'Italy'), ('Music Box Italia', 'Italy'), ('MTV Hits', 'Italy'), ('MTV Rocks', 'United Kingdom'), ('MTV Dance', 'United Kingdom'), ('Classica', 'Italy')]
Gold Output      : [('MTV Dance', 'United Kingdom')]

===== Eval Round 640 =====
Database         : tvshow
Prediction SQL   : SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'
Gold SQL         : SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('4:3', 'Italy'), ('4:3', 'Italy'), ('4:3 / 16:9', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3', 'Italy'), ('4:3', 'Italy')]
Gold Output      : [('4:3', 'Italy'), ('4:3', 'Italy'), ('4:3 / 16:9', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3', 'Italy'), ('4:3', 'Italy')]

===== Eval Round 641 =====
Database         : tvshow
Prediction SQL   : SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'
Gold SQL         : SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('4:3', 'Italy'), ('4:3', 'Italy'), ('4:3 / 16:9', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3', 'Italy'), ('4:3', 'Italy')]
Gold Output      : [('4:3', 'Italy'), ('4:3', 'Italy'), ('4:3 / 16:9', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3', 'Italy'), ('4:3', 'Italy')]

===== Eval Round 642 =====
Database         : tvshow
Prediction SQL   : SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2)
Gold SQL         : SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('700',), ('701',), ('703',), ('704',), ('705',), ('708',), ('713',), ('714',), ('715',), ('717',), ('719',), ('728',)]
Gold Output      : [('700',)]

===== Eval Round 643 =====
Database         : tvshow
Prediction SQL   : SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2
Gold SQL         : SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('700',)]

===== Eval Round 644 =====
Database         : tvshow
Prediction SQL   : SELECT DISTINCT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' AND Channel NOT IN (SELECT id FROM TV_Channel)
Gold SQL         : SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('701',), ('703',), ('705',), ('706',), ('708',), ('709',), ('713',), ('714',), ('715',), ('717',), ('719',)]

===== Eval Round 645 =====
Database         : tvshow
Prediction SQL   : SELECT DISTINCT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' AND Channel NOT IN (SELECT id FROM TV_Channel)
Gold SQL         : SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('701',), ('703',), ('705',), ('706',), ('708',), ('709',), ('713',), ('714',), ('715',), ('717',), ('719',)]

===== Eval Round 646 =====
Database         : tvshow
Prediction SQL   : SELECT DISTINCT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')
Gold SQL         : SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Sky Famiglia',), ('no ( FTV )',), ('Sky Famiglia + Sky HD',)]
Gold Output      : [('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('no ( FTV )',), ('Sky Famiglia + Sky HD',), ('no ( FTV )',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',)]

===== Eval Round 647 =====
Database         : tvshow
Prediction SQL   : SELECT DISTINCT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')
Gold SQL         : SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Sky Famiglia',), ('no ( FTV )',), ('Sky Famiglia + Sky HD',)]
Gold Output      : [('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('no ( FTV )',), ('Sky Famiglia + Sky HD',), ('no ( FTV )',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',)]

===== Eval Round 648 =====
Database         : poker_player
Prediction SQL   : SELECT COUNT(*) FROM poker_player
Gold SQL         : SELECT count(*) FROM poker_player
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(5,)]
Gold Output      : [(5,)]

===== Eval Round 649 =====
Database         : poker_player
Prediction SQL   : SELECT COUNT(*) FROM poker_player
Gold SQL         : SELECT count(*) FROM poker_player
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(5,)]
Gold Output      : [(5,)]

===== Eval Round 650 =====
Database         : poker_player
Prediction SQL   : SELECT Earnings FROM poker_player ORDER BY Earnings DESC
Gold SQL         : SELECT Earnings FROM poker_player ORDER BY Earnings DESC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(596462.0,), (476090.0,), (189233.0,), (142800.0,), (104871.0,)]
Gold Output      : [(596462.0,), (476090.0,), (189233.0,), (142800.0,), (104871.0,)]

===== Eval Round 651 =====
Database         : poker_player
Prediction SQL   : SELECT Earnings FROM poker_player ORDER BY Earnings DESC
Gold SQL         : SELECT Earnings FROM poker_player ORDER BY Earnings DESC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(596462.0,), (476090.0,), (189233.0,), (142800.0,), (104871.0,)]
Gold Output      : [(596462.0,), (476090.0,), (189233.0,), (142800.0,), (104871.0,)]

===== Eval Round 652 =====
Database         : poker_player
Prediction SQL   : SELECT Final_Table_Made, Best_Finish FROM poker_player
Gold SQL         : SELECT Final_Table_Made ,  Best_Finish FROM poker_player
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(42.0, 1.0), (10.0, 2.0), (21.0, 1.0), (19.0, 2.0), (26.0, 3.0)]
Gold Output      : [(42.0, 1.0), (10.0, 2.0), (21.0, 1.0), (19.0, 2.0), (26.0, 3.0)]

===== Eval Round 653 =====
Database         : poker_player
Prediction SQL   : SELECT Final_Table_Made, Best_Finish FROM poker_player
Gold SQL         : SELECT Final_Table_Made ,  Best_Finish FROM poker_player
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(42.0, 1.0), (10.0, 2.0), (21.0, 1.0), (19.0, 2.0), (26.0, 3.0)]
Gold Output      : [(42.0, 1.0), (10.0, 2.0), (21.0, 1.0), (19.0, 2.0), (26.0, 3.0)]

===== Eval Round 654 =====
Database         : poker_player
Prediction SQL   : SELECT AVG(Earnings) FROM poker_player
Gold SQL         : SELECT avg(Earnings) FROM poker_player
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(301891.2,)]
Gold Output      : [(301891.2,)]

===== Eval Round 655 =====
Database         : poker_player
Prediction SQL   : SELECT AVG(Earnings) FROM poker_player
Gold SQL         : SELECT avg(Earnings) FROM poker_player
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(301891.2,)]
Gold Output      : [(301891.2,)]

===== Eval Round 656 =====
Database         : poker_player
Prediction SQL   : SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
Gold SQL         : SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(58.0,)]
Gold Output      : [(58.0,)]

===== Eval Round 657 =====
Database         : poker_player
Prediction SQL   : SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
Gold SQL         : SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(58.0,)]
Gold Output      : [(58.0,)]

===== Eval Round 658 =====
Database         : poker_player
Prediction SQL   : SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000
Gold SQL         : SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(26.0,)]
Gold Output      : [(26.0,)]

===== Eval Round 659 =====
Database         : poker_player
Prediction SQL   : SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000
Gold SQL         : SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(26.0,)]
Gold Output      : [(26.0,)]

===== Eval Round 660 =====
Database         : poker_player
Prediction SQL   : SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player)
Gold SQL         : SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Aleksey Ostapenko',), ('Teodor Salparov',), ('Yevgeni Sivozhelez',), ('Maksim Botin',), ('Semen Poltavskiy',)]
Gold Output      : [('Aleksey Ostapenko',), ('Teodor Salparov',), ('Yevgeni Sivozhelez',), ('Maksim Botin',), ('Semen Poltavskiy',)]

===== Eval Round 661 =====
Database         : poker_player
Prediction SQL   : SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID
Gold SQL         : SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Aleksey Ostapenko',), ('Teodor Salparov',), ('Yevgeni Sivozhelez',), ('Maksim Botin',), ('Semen Poltavskiy',)]
Gold Output      : [('Aleksey Ostapenko',), ('Teodor Salparov',), ('Yevgeni Sivozhelez',), ('Maksim Botin',), ('Semen Poltavskiy',)]

===== Eval Round 662 =====
Database         : poker_player
Prediction SQL   : SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings > 300000
Gold SQL         : SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Aleksey Ostapenko',), ('Maksim Botin',)]
Gold Output      : [('Aleksey Ostapenko',), ('Maksim Botin',)]

===== Eval Round 663 =====
Database         : poker_player
Prediction SQL   : SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings > 300000
Gold SQL         : SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Aleksey Ostapenko',), ('Maksim Botin',)]
Gold Output      : [('Aleksey Ostapenko',), ('Maksim Botin',)]

===== Eval Round 664 =====
Database         : poker_player
Prediction SQL   : SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY pp.Final_Table_Made ASC
Gold SQL         : SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Teodor Salparov',), ('Maksim Botin',), ('Yevgeni Sivozhelez',), ('Semen Poltavskiy',), ('Aleksey Ostapenko',)]
Gold Output      : [('Teodor Salparov',), ('Maksim Botin',), ('Yevgeni Sivozhelez',), ('Semen Poltavskiy',), ('Aleksey Ostapenko',)]

===== Eval Round 665 =====
Database         : poker_player
Prediction SQL   : SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY pp.Final_Table_Made ASC
Gold SQL         : SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Teodor Salparov',), ('Maksim Botin',), ('Yevgeni Sivozhelez',), ('Semen Poltavskiy',), ('Aleksey Ostapenko',)]
Gold Output      : [('Teodor Salparov',), ('Maksim Botin',), ('Yevgeni Sivozhelez',), ('Semen Poltavskiy',), ('Aleksey Ostapenko',)]

===== Eval Round 666 =====
Database         : poker_player
Prediction SQL   : SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
Gold SQL         : SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('August 8, 1986',)]
Gold Output      : [('August 8, 1986',)]

===== Eval Round 667 =====
Database         : poker_player
Prediction SQL   : SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
Gold SQL         : SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('August 8, 1986',)]
Gold Output      : [('August 8, 1986',)]

===== Eval Round 668 =====
Database         : poker_player
Prediction SQL   : SELECT Money_Rank FROM poker_player WHERE People_ID IN (SELECT People_ID FROM people ORDER BY Height DESC LIMIT 1)
Gold SQL         : SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(68.0,)]
Gold Output      : [(68.0,)]

===== Eval Round 669 =====
Database         : poker_player
Prediction SQL   : SELECT Money_Rank FROM poker_player WHERE People_ID IN (SELECT People_ID FROM people ORDER BY Height DESC LIMIT 1)
Gold SQL         : SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(68.0,)]
Gold Output      : [(68.0,)]

===== Eval Round 670 =====
Database         : poker_player
Prediction SQL   : SELECT AVG(Earnings) FROM poker_player WHERE Height > 200
Gold SQL         : SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: Height
Gold Output      : [(309445.0,)]

===== Eval Round 671 =====
Database         : poker_player
Prediction SQL   : SELECT AVG(Earnings) FROM poker_player WHERE Height > 200
Gold SQL         : SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: Height
Gold Output      : [(309445.0,)]

===== Eval Round 672 =====
Database         : poker_player
Prediction SQL   : SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY pp.Earnings DESC
Gold SQL         : SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Maksim Botin',), ('Aleksey Ostapenko',), ('Teodor Salparov',), ('Semen Poltavskiy',), ('Yevgeni Sivozhelez',)]
Gold Output      : [('Maksim Botin',), ('Aleksey Ostapenko',), ('Teodor Salparov',), ('Semen Poltavskiy',), ('Yevgeni Sivozhelez',)]

===== Eval Round 673 =====
Database         : poker_player
Prediction SQL   : SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC
Gold SQL         : SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Maksim Botin',), ('Aleksey Ostapenko',), ('Teodor Salparov',), ('Semen Poltavskiy',), ('Yevgeni Sivozhelez',)]
Gold Output      : [('Maksim Botin',), ('Aleksey Ostapenko',), ('Teodor Salparov',), ('Semen Poltavskiy',), ('Yevgeni Sivozhelez',)]

===== Eval Round 674 =====
Database         : poker_player
Prediction SQL   : SELECT Nationality, COUNT(People_ID) FROM people GROUP BY Nationality
Gold SQL         : SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Bulgaria', 1), ('Russia', 6)]
Gold Output      : [('Bulgaria', 1), ('Russia', 6)]

===== Eval Round 675 =====
Database         : poker_player
Prediction SQL   : SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality
Gold SQL         : SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Bulgaria', 1), ('Russia', 6)]
Gold Output      : [('Bulgaria', 1), ('Russia', 6)]

===== Eval Round 676 =====
Database         : poker_player
Prediction SQL   : SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Russia',)]
Gold Output      : [('Russia',)]

===== Eval Round 677 =====
Database         : poker_player
Prediction SQL   : SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Russia',)]
Gold Output      : [('Russia',)]

===== Eval Round 678 =====
Database         : poker_player
Prediction SQL   : SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2
Gold SQL         : SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Russia',)]
Gold Output      : [('Russia',)]

===== Eval Round 679 =====
Database         : poker_player
Prediction SQL   : SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2
Gold SQL         : SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Russia',)]
Gold Output      : [('Russia',)]

===== Eval Round 680 =====
Database         : poker_player
Prediction SQL   : SELECT Name, Birth_Date FROM people ORDER BY Name ASC
Gold SQL         : SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Aleksey Ostapenko', 'May 26, 1986'), ('Maksim Botin', 'July 14, 1983'), ('Roman Bragin', 'April 17, 1987'), ('Semen Poltavskiy', 'February 8, 1981'), ('Sergey Grankin', 'January 22, 1987'), ('Teodor Salparov', 'August 16, 1982'), ('Yevgeni Sivozhelez', 'August 8, 1986')]
Gold Output      : [('Aleksey Ostapenko', 'May 26, 1986'), ('Maksim Botin', 'July 14, 1983'), ('Roman Bragin', 'April 17, 1987'), ('Semen Poltavskiy', 'February 8, 1981'), ('Sergey Grankin', 'January 22, 1987'), ('Teodor Salparov', 'August 16, 1982'), ('Yevgeni Sivozhelez', 'August 8, 1986')]

===== Eval Round 681 =====
Database         : poker_player
Prediction SQL   : SELECT Name, Birth_Date FROM people ORDER BY Name
Gold SQL         : SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Aleksey Ostapenko', 'May 26, 1986'), ('Maksim Botin', 'July 14, 1983'), ('Roman Bragin', 'April 17, 1987'), ('Semen Poltavskiy', 'February 8, 1981'), ('Sergey Grankin', 'January 22, 1987'), ('Teodor Salparov', 'August 16, 1982'), ('Yevgeni Sivozhelez', 'August 8, 1986')]
Gold Output      : [('Aleksey Ostapenko', 'May 26, 1986'), ('Maksim Botin', 'July 14, 1983'), ('Roman Bragin', 'April 17, 1987'), ('Semen Poltavskiy', 'February 8, 1981'), ('Sergey Grankin', 'January 22, 1987'), ('Teodor Salparov', 'August 16, 1982'), ('Yevgeni Sivozhelez', 'August 8, 1986')]

===== Eval Round 682 =====
Database         : poker_player
Prediction SQL   : SELECT Name FROM people WHERE Nationality <> "Russia"
Gold SQL         : SELECT Name FROM people WHERE Nationality != "Russia"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Teodor Salparov',)]
Gold Output      : [('Teodor Salparov',)]

===== Eval Round 683 =====
Database         : poker_player
Prediction SQL   : SELECT Name FROM people WHERE Nationality <> 'Russia'
Gold SQL         : SELECT Name FROM people WHERE Nationality != "Russia"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Teodor Salparov',)]
Gold Output      : [('Teodor Salparov',)]

===== Eval Round 684 =====
Database         : poker_player
Prediction SQL   : SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
Gold SQL         : SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Roman Bragin',), ('Sergey Grankin',)]
Gold Output      : [('Roman Bragin',), ('Sergey Grankin',)]

===== Eval Round 685 =====
Database         : poker_player
Prediction SQL   : SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
Gold SQL         : SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Roman Bragin',), ('Sergey Grankin',)]
Gold Output      : [('Roman Bragin',), ('Sergey Grankin',)]

===== Eval Round 686 =====
Database         : poker_player
Prediction SQL   : SELECT count(distinct Nationality) FROM people
Gold SQL         : SELECT count(DISTINCT Nationality) FROM people
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(2,)]
Gold Output      : [(2,)]

===== Eval Round 687 =====
Database         : poker_player
Prediction SQL   : SELECT count(DISTINCT Nationality) FROM people
Gold SQL         : SELECT count(DISTINCT Nationality) FROM people
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(2,)]
Gold Output      : [(2,)]

===== Eval Round 688 =====
Database         : voter_1
Prediction SQL   : SELECT count(DISTINCT state) FROM AREA_CODE_STATE
Gold SQL         : SELECT count(*) FROM area_code_state
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(51,)]
Gold Output      : [(305,)]

===== Eval Round 689 =====
Database         : voter_1
Prediction SQL   : SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC
Gold SQL         : SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(2, 'Tabatha Gehling'), (8, 'Nita Coster'), (11, 'Loraine NygrenTania Mattioli'), (9, 'Kurt Walser'), (3, 'Kelly Clauss'), (6, 'Jessie Eichman'), (4, 'Jessie Alloway'), (10, 'Ericka Dieter'), (1, 'Edwina Burnam'), (7, 'Allie Rogalski'), (5, 'Alana Bregman')]
Gold Output      : [(2, 'Tabatha Gehling'), (8, 'Nita Coster'), (11, 'Loraine NygrenTania Mattioli'), (9, 'Kurt Walser'), (3, 'Kelly Clauss'), (6, 'Jessie Eichman'), (4, 'Jessie Alloway'), (10, 'Ericka Dieter'), (1, 'Edwina Burnam'), (7, 'Allie Rogalski'), (5, 'Alana Bregman')]

===== Eval Round 690 =====
Database         : voter_1
Prediction SQL   : SELECT vote_id, phone_number, state FROM VOTES
Gold SQL         : SELECT vote_id ,  phone_number ,  state FROM votes
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1, 7182887233, 'NY'), (2, 7148407040, 'NY'), (3, 6209222712, 'CA'), (5, 5112677315, 'NJ\n')]
Gold Output      : [(1, 7182887233, 'NY'), (2, 7148407040, 'NY'), (3, 6209222712, 'CA'), (5, 5112677315, 'NJ\n')]

===== Eval Round 691 =====
Database         : voter_1
Prediction SQL   : SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE
Gold SQL         : SELECT max(area_code) ,  min(area_code) FROM area_code_state
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(989, 201)]
Gold Output      : [(989, 201)]

===== Eval Round 692 =====
Database         : voter_1
Prediction SQL   : SELECT max(created) FROM VOTES WHERE state = 'CA'
Gold SQL         : SELECT max(created) FROM votes WHERE state  =  'CA'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('2018-03-09 19:03:39',)]
Gold Output      : [('2018-03-09 19:03:39',)]

===== Eval Round 693 =====
Database         : voter_1
Prediction SQL   : SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'
Gold SQL         : SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Edwina Burnam',), ('Tabatha Gehling',), ('Kelly Clauss',), ('Alana Bregman',), ('Jessie Eichman',), ('Allie Rogalski',), ('Nita Coster',), ('Kurt Walser',), ('Ericka Dieter',), ('Loraine NygrenTania Mattioli',)]
Gold Output      : [('Edwina Burnam',), ('Tabatha Gehling',), ('Kelly Clauss',), ('Alana Bregman',), ('Jessie Eichman',), ('Allie Rogalski',), ('Nita Coster',), ('Kurt Walser',), ('Ericka Dieter',), ('Loraine NygrenTania Mattioli',)]

===== Eval Round 694 =====
Database         : voter_1
Prediction SQL   : SELECT DISTINCT state, created FROM VOTES
Gold SQL         : SELECT DISTINCT state ,  created FROM votes
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('NY', '2018-03-09 19:03:21'), ('NY', '2018-03-09 19:03:36'), ('CA', '2018-03-09 19:03:39'), ('NJ\n', '2018-03-09 19:03:40')]
Gold Output      : [('NY', '2018-03-09 19:03:21'), ('NY', '2018-03-09 19:03:36'), ('CA', '2018-03-09 19:03:39'), ('NJ\n', '2018-03-09 19:03:40')]

===== Eval Round 695 =====
Database         : voter_1
Prediction SQL   : SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(*) >= 2)
Gold SQL         : SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(3, 'Kelly Clauss')]
Gold Output      : [(3, 'Kelly Clauss')]

===== Eval Round 696 =====
Database         : voter_1
Prediction SQL   : SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number ORDER BY COUNT(*) ASC LIMIT 1)
Gold SQL         : SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(2, 'Tabatha Gehling')]
Gold Output      : [(2, 'Tabatha Gehling')]

===== Eval Round 697 =====
Database         : voter_1
Prediction SQL   : SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA')
Gold SQL         : SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(3,)]
Gold Output      : [(3,)]

===== Eval Round 698 =====
Database         : voter_1
Prediction SQL   : SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
Gold SQL         : SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(8,)]
Gold Output      : [(8,)]

===== Eval Round 699 =====
Database         : voter_1
Prediction SQL   : SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM VOTES GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1)
Gold SQL         : SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(212,), (315,), (347,), (516,), (518,), (585,), (607,), (631,), (646,), (716,), (718,), (845,), (914,), (917,)]
Gold Output      : [(212,)]

===== Eval Round 700 =====
Database         : voter_1
Prediction SQL   : SELECT created, state, phone_number FROM VOTES WHERE contestant_number IN (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling')
Gold SQL         : SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('2018-03-09 19:03:21', 'NY', 7182887233)]
Gold Output      : [('2018-03-09 19:03:21', 'NY', 7182887233)]

===== Eval Round 701 =====
Database         : voter_1
Prediction SQL   : SELECT DISTINCT T1.area_code FROM AREA_CODE_STATE T1 JOIN VOTES T2 ON T1.state = T2.state WHERE T2.contestant_number IN (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling') AND T2.contestant_number IN (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Kelly Clauss')
Gold SQL         : SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [(212,), (315,), (347,), (516,), (518,), (585,), (607,), (631,), (646,), (716,), (718,), (845,), (914,), (917,)]

===== Eval Round 702 =====
Database         : voter_1
Prediction SQL   : SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'
Gold SQL         : select contestant_name from contestants where contestant_name like "%al%"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Jessie Alloway',), ('Alana Bregman',), ('Allie Rogalski',), ('Kurt Walser',)]
Gold Output      : [('Jessie Alloway',), ('Alana Bregman',), ('Allie Rogalski',), ('Kurt Walser',)]

===== Eval Round 703 =====
Database         : world_1
Prediction SQL   : SELECT Name FROM country WHERE IndepYear > 1950
Gold SQL         : SELECT Name FROM country WHERE IndepYear  >  1950
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Angola',), ('United Arab Emirates',), ('Armenia',), ('Antigua and Barbuda',), ('Azerbaijan',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Barbados',), ('Brunei',), ('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Algeria',), ('Eritrea',), ('Estonia',), ('Fiji Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('Georgia',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Grenada',), ('Guyana',), ('Croatia',), ('Jamaica',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('Kuwait',), ('Laos',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Lesotho',), ('Lithuania',), ('Latvia',), ('Morocco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Namibia',), ('Niger',), ('Nigeria',), ('Nauru',), ('Oman',), ('Palau',), ('Papua New Guinea',), ('Qatar',), ('Russian Federation',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Singapore',), ('Solomon Islands',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tajikistan',), ('Turkmenistan',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Tuvalu',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Vanuatu',), ('Samoa',), ('Zambia',), ('Zimbabwe',)]
Gold Output      : [('Angola',), ('United Arab Emirates',), ('Armenia',), ('Antigua and Barbuda',), ('Azerbaijan',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Barbados',), ('Brunei',), ('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Algeria',), ('Eritrea',), ('Estonia',), ('Fiji Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('Georgia',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Grenada',), ('Guyana',), ('Croatia',), ('Jamaica',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('Kuwait',), ('Laos',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Lesotho',), ('Lithuania',), ('Latvia',), ('Morocco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Namibia',), ('Niger',), ('Nigeria',), ('Nauru',), ('Oman',), ('Palau',), ('Papua New Guinea',), ('Qatar',), ('Russian Federation',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Singapore',), ('Solomon Islands',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tajikistan',), ('Turkmenistan',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Tuvalu',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Vanuatu',), ('Samoa',), ('Zambia',), ('Zimbabwe',)]

===== Eval Round 704 =====
Database         : world_1
Prediction SQL   : SELECT Name FROM country WHERE IndepYear > 1950
Gold SQL         : SELECT Name FROM country WHERE IndepYear  >  1950
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Angola',), ('United Arab Emirates',), ('Armenia',), ('Antigua and Barbuda',), ('Azerbaijan',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Barbados',), ('Brunei',), ('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Algeria',), ('Eritrea',), ('Estonia',), ('Fiji Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('Georgia',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Grenada',), ('Guyana',), ('Croatia',), ('Jamaica',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('Kuwait',), ('Laos',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Lesotho',), ('Lithuania',), ('Latvia',), ('Morocco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Namibia',), ('Niger',), ('Nigeria',), ('Nauru',), ('Oman',), ('Palau',), ('Papua New Guinea',), ('Qatar',), ('Russian Federation',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Singapore',), ('Solomon Islands',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tajikistan',), ('Turkmenistan',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Tuvalu',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Vanuatu',), ('Samoa',), ('Zambia',), ('Zimbabwe',)]
Gold Output      : [('Angola',), ('United Arab Emirates',), ('Armenia',), ('Antigua and Barbuda',), ('Azerbaijan',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Barbados',), ('Brunei',), ('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Algeria',), ('Eritrea',), ('Estonia',), ('Fiji Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('Georgia',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Grenada',), ('Guyana',), ('Croatia',), ('Jamaica',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('Kuwait',), ('Laos',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Lesotho',), ('Lithuania',), ('Latvia',), ('Morocco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Namibia',), ('Niger',), ('Nigeria',), ('Nauru',), ('Oman',), ('Palau',), ('Papua New Guinea',), ('Qatar',), ('Russian Federation',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Singapore',), ('Solomon Islands',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tajikistan',), ('Turkmenistan',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Tuvalu',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Vanuatu',), ('Samoa',), ('Zambia',), ('Zimbabwe',)]

===== Eval Round 705 =====
Database         : world_1
Prediction SQL   : SELECT count(*) FROM country WHERE GovernmentForm = 'Republic'
Gold SQL         : SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(122,)]
Gold Output      : [(122,)]

===== Eval Round 706 =====
Database         : world_1
Prediction SQL   : SELECT count(*) FROM country WHERE GovernmentForm = 'Republic'
Gold SQL         : SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(122,)]
Gold Output      : [(122,)]

===== Eval Round 707 =====
Database         : world_1
Prediction SQL   : SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'
Gold SQL         : SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(234423.0,)]
Gold Output      : [(234423.0,)]

===== Eval Round 708 =====
Database         : world_1
Prediction SQL   : SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean'
Gold SQL         : SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(None,)]
Gold Output      : [(234423.0,)]

===== Eval Round 709 =====
Database         : world_1
Prediction SQL   : SELECT T1.Continent FROM country AS T1 WHERE T1.Name = "Anguilla"
Gold SQL         : SELECT Continent FROM country WHERE Name  =  "Anguilla"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('North America',)]
Gold Output      : [('North America',)]

===== Eval Round 710 =====
Database         : world_1
Prediction SQL   : SELECT T1.Continent FROM country AS T1 WHERE T1.Code = (SELECT Code FROM city WHERE Name = 'Anguilla')
Gold SQL         : SELECT Continent FROM country WHERE Name  =  "Anguilla"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('North America',)]

===== Eval Round 711 =====
Database         : world_1
Prediction SQL   : SELECT T1.Region FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Kabul'
Gold SQL         : SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Southern and Central Asia',)]
Gold Output      : [('Southern and Central Asia',)]

===== Eval Round 712 =====
Database         : world_1
Prediction SQL   : SELECT T2.Region FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Kabul'
Gold SQL         : SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Southern and Central Asia',)]
Gold Output      : [('Southern and Central Asia',)]

===== Eval Round 713 =====
Database         : world_1
Prediction SQL   : SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') ORDER BY Percentage DESC LIMIT 1
Gold SQL         : SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Papiamento',)]
Gold Output      : [('Papiamento',)]

===== Eval Round 714 =====
Database         : world_1
Prediction SQL   : SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba' AND Code IS NOT NULL) ORDER BY Percentage DESC LIMIT 1
Gold SQL         : SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Papiamento',)]
Gold Output      : [('Papiamento',)]

===== Eval Round 715 =====
Database         : world_1
Prediction SQL   : SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
Gold SQL         : SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(170115000, 62.9)]
Gold Output      : [(170115000, 62.9)]

===== Eval Round 716 =====
Database         : world_1
Prediction SQL   : SELECT Population, LifeExpectancy FROM country WHERE Name = "Brazil"
Gold SQL         : SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(170115000, 62.9)]
Gold Output      : [(170115000, 62.9)]

===== Eval Round 717 =====
Database         : world_1
Prediction SQL   : SELECT Region, Population FROM country WHERE Name = 'Angola'
Gold SQL         : SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Central Africa', 12878000)]
Gold Output      : [(12878000, 'Central Africa')]

===== Eval Round 718 =====
Database         : world_1
Prediction SQL   : SELECT Region, Population FROM country WHERE Name = 'Angola'
Gold SQL         : SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Central Africa', 12878000)]
Gold Output      : [(12878000, 'Central Africa')]

===== Eval Round 719 =====
Database         : world_1
Prediction SQL   : SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
Gold SQL         : SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(50.31111111111111,)]
Gold Output      : [(50.31111111111111,)]

===== Eval Round 720 =====
Database         : world_1
Prediction SQL   : SELECT avg(LifeExpectancy) FROM country WHERE Continent = 'Central Africa'
Gold SQL         : SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(None,)]
Gold Output      : [(50.31111111111111,)]

===== Eval Round 721 =====
Database         : world_1
Prediction SQL   : SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1
Gold SQL         : SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Afghanistan',)]
Gold Output      : [('Afghanistan',)]

===== Eval Round 722 =====
Database         : world_1
Prediction SQL   : SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1
Gold SQL         : SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Afghanistan',)]
Gold Output      : [('Afghanistan',)]

===== Eval Round 723 =====
Database         : world_1
Prediction SQL   : SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'
Gold SQL         : SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(3705025700, 3787042.0)]
Gold Output      : [(3705025700, 3787042.0)]

===== Eval Round 724 =====
Database         : world_1
Prediction SQL   : SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'
Gold SQL         : SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(3705025700, 3787042.0)]
Gold Output      : [(3705025700, 3787042.0)]

===== Eval Round 725 =====
Database         : world_1
Prediction SQL   : SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'
Gold SQL         : SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(50.84347826086956,)]
Gold Output      : [(50.84347826086956,)]

===== Eval Round 726 =====
Database         : world_1
Prediction SQL   : SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'
Gold SQL         : SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(50.84347826086956,)]
Gold Output      : [(50.84347826086956,)]

===== Eval Round 727 =====
Database         : world_1
Prediction SQL   : SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')
Gold SQL         : SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(54930138.9,)]
Gold Output      : [(54930138.9,)]

===== Eval Round 728 =====
Database         : world_1
Prediction SQL   : SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')
Gold SQL         : SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(54930138.9,)]
Gold Output      : [(54930138.9,)]

===== Eval Round 729 =====
Database         : world_1
Prediction SQL   : SELECT Population FROM city WHERE District = 'Gelderland'
Gold SQL         : SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(153491,), (152463,), (138020,), (101574,)]
Gold Output      : [(545548,)]

===== Eval Round 730 =====
Database         : world_1
Prediction SQL   : SELECT SUM(Population) FROM city WHERE District = 'Gelderland'
Gold SQL         : SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(545548,)]
Gold Output      : [(545548,)]

===== Eval Round 731 =====
Database         : world_1
Prediction SQL   : SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'US territory'
Gold SQL         : SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
Exec Accuracy(EX): 0
Exact Match(EM)  : True
Pred Output      : [(None, None)]
Gold Output      : [(510.3333333333333, 329000)]

===== Eval Round 732 =====
Database         : world_1
Prediction SQL   : SELECT AVG(T1.GNP), SUM(T1.Population) FROM country AS T1 WHERE T1.Code2 LIKE 'UM%'
Gold SQL         : SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(0.0, 0)]
Gold Output      : [(510.3333333333333, 329000)]

===== Eval Round 733 =====
Database         : world_1
Prediction SQL   : SELECT COUNT(DISTINCT Language) FROM countrylanguage
Gold SQL         : SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(457,)]
Gold Output      : [(457,)]

===== Eval Round 734 =====
Database         : world_1
Prediction SQL   : SELECT COUNT(DISTINCT Language) FROM countrylanguage
Gold SQL         : SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(457,)]
Gold Output      : [(457,)]

===== Eval Round 735 =====
Database         : world_1
Prediction SQL   : SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
Gold SQL         : SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(10,)]
Gold Output      : [(10,)]

===== Eval Round 736 =====
Database         : world_1
Prediction SQL   : SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
Gold SQL         : SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(10,)]
Gold Output      : [(10,)]

===== Eval Round 737 =====
Database         : world_1
Prediction SQL   : SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba')
Gold SQL         : SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(4,)]
Gold Output      : [(4,)]

===== Eval Round 738 =====
Database         : world_1
Prediction SQL   : SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba')
Gold SQL         : SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(4,)]
Gold Output      : [(4,)]

===== Eval Round 739 =====
Database         : world_1
Prediction SQL   : SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
Gold SQL         : SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(2,)]
Gold Output      : [(2,)]

===== Eval Round 740 =====
Database         : world_1
Prediction SQL   : SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
Gold SQL         : SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(2,)]
Gold Output      : [(2,)]

===== Eval Round 741 =====
Database         : world_1
Prediction SQL   : SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Code ORDER BY COUNT(T2.Language) DESC LIMIT 1
Gold SQL         : SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Canada',)]
Gold Output      : [('United States',)]

===== Eval Round 742 =====
Database         : world_1
Prediction SQL   : SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Code ORDER BY COUNT(T2.Language) DESC LIMIT 1
Gold SQL         : SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Canada',)]
Gold Output      : [('United States',)]

===== Eval Round 743 =====
Database         : world_1
Prediction SQL   : SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(T2.Language) DESC LIMIT 1
Gold SQL         : SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Africa',)]
Gold Output      : [('Africa',)]

===== Eval Round 744 =====
Database         : world_1
Prediction SQL   : SELECT T1.Continent FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T1.Continent ORDER BY COUNT(T1.Language) DESC LIMIT 1
Gold SQL         : SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: T1.Continent
Gold Output      : [('Africa',)]

===== Eval Round 745 =====
Database         : world_1
Prediction SQL   : SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'English' AND CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch')
Gold SQL         : SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(3,)]
Gold Output      : [(3,)]

===== Eval Round 746 =====
Database         : world_1
Prediction SQL   : SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'English' AND CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch')
Gold SQL         : SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(3,)]
Gold Output      : [(3,)]

===== Eval Round 747 =====
Database         : world_1
Prediction SQL   : SELECT DISTINCT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND EXISTS (SELECT 1 FROM countrylanguage AS T3 WHERE T3.CountryCode = T1.Code AND T3.Language = 'French')
Gold SQL         : SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Canada',), ('Monaco',), ('Seychelles',), ('United States',), ('Virgin Islands, U.S.',), ('Vanuatu',)]
Gold Output      : [('Canada',), ('Monaco',), ('Seychelles',), ('United States',), ('Vanuatu',), ('Virgin Islands, U.S.',)]

===== Eval Round 748 =====
Database         : world_1
Prediction SQL   : SELECT DISTINCT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND EXISTS (SELECT 1 FROM countrylanguage AS T3 WHERE T3.CountryCode = T1.Code AND T3.Language = 'French')
Gold SQL         : SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Canada',), ('Monaco',), ('Seychelles',), ('United States',), ('Virgin Islands, U.S.',), ('Vanuatu',)]
Gold Output      : [('Canada',), ('Monaco',), ('Seychelles',), ('United States',), ('Vanuatu',), ('Virgin Islands, U.S.',)]

===== Eval Round 749 =====
Database         : world_1
Prediction SQL   : SELECT DISTINCT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND EXISTS (SELECT 1 FROM countrylanguage AS T3 WHERE T3.CountryCode = T1.Code AND T3.Language = 'French' AND T3.IsOfficial = 'TRUE')
Gold SQL         : SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('Canada',), ('Seychelles',), ('Vanuatu',)]

===== Eval Round 750 =====
Database         : world_1
Prediction SQL   : SELECT DISTINCT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English','French')
Gold SQL         : SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Aruba',), ('Anguilla',), ('Andorra',), ('Netherlands Antilles',), ('American Samoa',), ('Antigua and Barbuda',), ('Australia',), ('Burundi',), ('Belgium',), ('Bahrain',), ('Belize',), ('Bermuda',), ('Barbados',), ('Brunei',), ('Canada',), ('Cocos (Keeling) Islands',), ('Switzerland',), ('Cook Islands',), ('Christmas Island',), ('Cayman Islands',), ('Denmark',), ('Falkland Islands',), ('France',), ('United Kingdom',), ('Gibraltar',), ('Guadeloupe',), ('Guam',), ('Hong Kong',), ('Haiti',), ('Ireland',), ('Iceland',), ('Italy',), ('Japan',), ('Saint Kitts and Nevis',), ('Kuwait',), ('Lebanon',), ('Saint Lucia',), ('Lesotho',), ('Luxembourg',), ('Macao',), ('Monaco',), ('Madagascar',), ('Maldives',), ('Marshall Islands',), ('Malta',), ('Northern Mariana Islands',), ('Montserrat',), ('Martinique',), ('Mauritius',), ('Malaysia',), ('Mayotte',), ('New Caledonia',), ('Norfolk Island',), ('Niue',), ('Norway',), ('Nauru',), ('New Zealand',), ('Palau',), ('Puerto Rico',), ('French Polynesia',), ('Rwanda',), ('Saint Helena',), ('Saint Pierre and Miquelon',), ('Sao Tome and Principe',), ('Seychelles',), ('Turks and Caicos Islands',), ('Tokelau',), ('Tonga',), ('Trinidad and Tobago',), ('Tuvalu',), ('United States Minor Outlying Islands',), ('United States',), ('Saint Vincent and the Grenadines',), ('Virgin Islands, British',), ('Virgin Islands, U.S.',), ('Vanuatu',), ('Samoa',), ('South Africa',), ('Zimbabwe',)]
Gold Output      : [('Canada',), ('Seychelles',), ('Vanuatu',)]

===== Eval Round 751 =====
Database         : world_1
Prediction SQL   : SELECT DISTINCT T1.Continent FROM country c JOIN countrylanguage T1 ON c.Code = T1.CountryCode WHERE T1.Language = 'Chinese'
Gold SQL         : SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: T1.Continent
Gold Output      : [(4,)]

===== Eval Round 752 =====
Database         : world_1
Prediction SQL   : SELECT COUNT(DISTINCT c.Continent) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese'
Gold SQL         : SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(4,)]
Gold Output      : [(4,)]

===== Eval Round 753 =====
Database         : world_1
Prediction SQL   : SELECT DISTINCT T1.Region FROM countrylanguage AS T1 WHERE T1.Language IN ('English', 'Dutch')
Gold SQL         : SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: T1.Region
Gold Output      : [('Caribbean',), ('Polynesia',), ('Australia and New Zealand',), ('Western Europe',), ('Middle East',), ('Central America',), ('North America',), ('Southeast Asia',), ('Nordic Countries',), ('South America',), ('British Islands',), ('Southern Europe',), ('Micronesia',), ('Eastern Asia',), ('Southern Africa',), ('Southern and Central Asia',), ('Western Africa',), ('Eastern Africa',), ('Micronesia/Caribbean',), ('Melanesia',)]

===== Eval Round 754 =====
Database         : world_1
Prediction SQL   : SELECT DISTINCT T1.Region FROM countrylanguage AS T1 WHERE T1.Language IN ('Dutch', 'English')
Gold SQL         : SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: T1.Region
Gold Output      : [('Caribbean',), ('Polynesia',), ('Australia and New Zealand',), ('Western Europe',), ('Middle East',), ('Central America',), ('North America',), ('Southeast Asia',), ('Nordic Countries',), ('South America',), ('British Islands',), ('Southern Europe',), ('Micronesia',), ('Eastern Asia',), ('Southern Africa',), ('Southern and Central Asia',), ('Western Africa',), ('Eastern Africa',), ('Micronesia/Caribbean',), ('Melanesia',)]

===== Eval Round 755 =====
Database         : world_1
Prediction SQL   : SELECT DISTINCT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch') AND IsOfficial = 'T')
Gold SQL         : select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Aruba',), ('Anguilla',), ('Netherlands Antilles',), ('American Samoa',), ('Antigua and Barbuda',), ('Australia',), ('Belgium',), ('Belize',), ('Bermuda',), ('Barbados',), ('Canada',), ('Cocos (Keeling) Islands',), ('Christmas Island',), ('Cayman Islands',), ('Falkland Islands',), ('United Kingdom',), ('Gibraltar',), ('Guam',), ('Hong Kong',), ('Ireland',), ('Saint Kitts and Nevis',), ('Saint Lucia',), ('Lesotho',), ('Marshall Islands',), ('Malta',), ('Northern Mariana Islands',), ('Montserrat',), ('Norfolk Island',), ('Niue',), ('Netherlands',), ('Nauru',), ('New Zealand',), ('Palau',), ('Saint Helena',), ('Seychelles',), ('Turks and Caicos Islands',), ('Tokelau',), ('Tonga',), ('Tuvalu',), ('United States Minor Outlying Islands',), ('United States',), ('Saint Vincent and the Grenadines',), ('Virgin Islands, British',), ('Virgin Islands, U.S.',), ('Vanuatu',), ('Samoa',), ('South Africa',), ('Zimbabwe',)]
Gold Output      : []

===== Eval Round 756 =====
Database         : world_1
Prediction SQL   : SELECT DISTINCT T1.Name FROM countrylanguage AS T1 WHERE T1.CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' OR Language = 'Dutch')
Gold SQL         : SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: T1.Name
Gold Output      : [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW', 'ABW', 'Dutch', 'T', 5.3), ('AIA', 'Anguilla', 'North America', 'Caribbean', 96.0, None, 8000, 76.1, 63.2, None, 'Anguilla', 'Dependent Territory of the UK', 'Elisabeth II', 62, 'AI', 'AIA', 'English', 'T', 0.0), ('ANT', 'Netherlands Antilles', 'North America', 'Caribbean', 800.0, None, 217000, 74.7, 1941.0, None, 'Nederlandse Antillen', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 33, 'AN', 'ANT', 'Dutch', 'T', 0.0), ('ASM', 'American Samoa', 'Oceania', 'Polynesia', 199.0, None, 68000, 75.1, 334.0, None, 'Amerika Samoa', 'US Territory', 'George W. Bush', 54, 'AS', 'ASM', 'English', 'T', 3.1), ('ATG', 'Antigua and Barbuda', 'North America', 'Caribbean', 442.0, 1981, 68000, 70.5, 612.0, 584.0, 'Antigua and Barbuda', 'Constitutional Monarchy', 'Elisabeth II', 63, 'AG', 'ATG', 'English', 'T', 0.0), ('AUS', 'Australia', 'Oceania', 'Australia and New Zealand', 7741220.0, 1901, 18886000, 79.8, 351182.0, 392911.0, 'Australia', 'Constitutional Monarchy, Federation', 'Elisabeth II', 135, 'AU', 'AUS', 'English', 'T', 81.2), ('BEL', 'Belgium', 'Europe', 'Western Europe', 30518.0, 1830, 10239000, 77.8, 249704.0, 243948.0, 'België/Belgique', 'Constitutional Monarchy, Federation', 'Albert II', 179, 'BE', 'BEL', 'Dutch', 'T', 59.2), ('BLZ', 'Belize', 'North America', 'Central America', 22696.0, 1981, 241000, 70.9, 630.0, 616.0, 'Belize', 'Constitutional Monarchy', 'Elisabeth II', 185, 'BZ', 'BLZ', 'English', 'T', 50.8), ('BMU', 'Bermuda', 'North America', 'North America', 53.0, None, 65000, 76.9, 2328.0, 2190.0, 'Bermuda', 'Dependent Territory of the UK', 'Elisabeth II', 191, 'BM', 'BMU', 'English', 'T', 100.0), ('BRB', 'Barbados', 'North America', 'Caribbean', 430.0, 1966, 270000, 73.0, 2223.0, 2186.0, 'Barbados', 'Constitutional Monarchy', 'Elisabeth II', 174, 'BB', 'BRB', 'English', 'T', 0.0), ('CAN', 'Canada', 'North America', 'North America', 9970610.0, 1867, 31147000, 79.4, 598862.0, 625626.0, 'Canada', 'Constitutional Monarchy, Federation', 'Elisabeth II', 1822, 'CA', 'CAN', 'English', 'T', 60.4), ('CCK', 'Cocos (Keeling) Islands', 'Oceania', 'Australia and New Zealand', 14.0, None, 600, None, 0.0, None, 'Cocos (Keeling) Islands', 'Territory of Australia', 'Elisabeth II', 2317, 'CC', 'CCK', 'English', 'T', 0.0), ('CXR', 'Christmas Island', 'Oceania', 'Australia and New Zealand', 135.0, None, 2500, None, 0.0, None, 'Christmas Island', 'Territory of Australia', 'Elisabeth II', 1791, 'CX', 'CXR', 'English', 'T', 0.0), ('CYM', 'Cayman Islands', 'North America', 'Caribbean', 264.0, None, 38000, 78.9, 1263.0, 1186.0, 'Cayman Islands', 'Dependent Territory of the UK', 'Elisabeth II', 553, 'KY', 'CYM', 'English', 'T', 0.0), ('FLK', 'Falkland Islands', 'South America', 'South America', 12173.0, None, 2000, None, 0.0, None, 'Falkland Islands', 'Dependent Territory of the UK', 'Elisabeth II', 763, 'FK', 'FLK', 'English', 'T', 0.0), ('GBR', 'United Kingdom', 'Europe', 'British Islands', 242900.0, 1066, 59623400, 77.7, 1378330.0, 1296830.0, 'United Kingdom', 'Constitutional Monarchy', 'Elisabeth II', 456, 'GB', 'GBR', 'English', 'T', 97.3), ('GIB', 'Gibraltar', 'Europe', 'Southern Europe', 6.0, None, 25000, 79.0, 258.0, None, 'Gibraltar', 'Dependent Territory of the UK', 'Elisabeth II', 915, 'GI', 'GIB', 'English', 'T', 88.9), ('GUM', 'Guam', 'Oceania', 'Micronesia', 549.0, None, 168000, 77.8, 1197.0, 1136.0, 'Guam', 'US Territory', 'George W. Bush', 921, 'GU', 'GUM', 'English', 'T', 37.5), ('HKG', 'Hong Kong', 'Asia', 'Eastern Asia', 1075.0, None, 6782000, 79.5, 166448.0, 173610.0, 'Xianggang/Hong Kong', 'Special Administrative Region of China', 'Jiang Zemin', 937, 'HK', 'HKG', 'English', 'T', 2.2), ('IRL', 'Ireland', 'Europe', 'British Islands', 70273.0, 1921, 3775100, 76.8, 75921.0, 73132.0, 'Ireland/Éire', 'Republic', 'Mary McAleese', 1447, 'IE', 'IRL', 'English', 'T', 98.4), ('KNA', 'Saint Kitts and Nevis', 'North America', 'Caribbean', 261.0, 1983, 38000, 70.7, 299.0, None, 'Saint Kitts and Nevis', 'Constitutional Monarchy', 'Elisabeth II', 3064, 'KN', 'KNA', 'English', 'T', 0.0), ('LCA', 'Saint Lucia', 'North America', 'Caribbean', 622.0, 1979, 154000, 72.3, 571.0, None, 'Saint Lucia', 'Constitutional Monarchy', 'Elisabeth II', 3065, 'LC', 'LCA', 'English', 'T', 20.0), ('LSO', 'Lesotho', 'Africa', 'Southern Africa', 30355.0, 1966, 2153000, 50.8, 1061.0, 1161.0, 'Lesotho', 'Constitutional Monarchy', 'Letsie III', 2437, 'LS', 'LSO', 'English', 'T', 0.0), ('MHL', 'Marshall Islands', 'Oceania', 'Micronesia', 181.0, 1990, 64000, 65.5, 97.0, None, 'Marshall Islands/Majol', 'Republic', 'Kessai Note', 2507, 'MH', 'MHL', 'English', 'T', 0.0), ('MLT', 'Malta', 'Europe', 'Southern Europe', 316.0, 1964, 380200, 77.9, 3512.0, 3338.0, 'Malta', 'Republic', 'Guido de Marco', 2484, 'MT', 'MLT', 'English', 'T', 2.1), ('MNP', 'Northern Mariana Islands', 'Oceania', 'Micronesia', 464.0, None, 78000, 75.5, 0.0, None, 'Northern Mariana Islands', 'Commonwealth of the US', 'George W. Bush', 2913, 'MP', 'MNP', 'English', 'T', 4.8), ('MSR', 'Montserrat', 'North America', 'Caribbean', 102.0, None, 11000, 78.0, 109.0, None, 'Montserrat', 'Dependent Territory of the UK', 'Elisabeth II', 2697, 'MS', 'MSR', 'English', 'T', 0.0), ('NFK', 'Norfolk Island', 'Oceania', 'Australia and New Zealand', 36.0, None, 2000, None, 0.0, None, 'Norfolk Island', 'Territory of Australia', 'Elisabeth II', 2806, 'NF', 'NFK', 'English', 'T', 0.0), ('NIU', 'Niue', 'Oceania', 'Polynesia', 260.0, None, 2000, None, 0.0, None, 'Niue', 'Nonmetropolitan Territory of New Zealand', 'Elisabeth II', 2805, 'NU', 'NIU', 'English', 'T', 0.0), ('NLD', 'Netherlands', 'Europe', 'Western Europe', 41526.0, 1581, 15864000, 78.3, 371362.0, 360478.0, 'Nederland', 'Constitutional Monarchy', 'Beatrix', 5, 'NL', 'NLD', 'Dutch', 'T', 95.6), ('NRU', 'Nauru', 'Oceania', 'Micronesia', 21.0, 1968, 12000, 60.8, 197.0, None, 'Naoero/Nauru', 'Republic', 'Bernard Dowiyogo', 2728, 'NR', 'NRU', 'English', 'T', 7.5), ('NZL', 'New Zealand', 'Oceania', 'Australia and New Zealand', 270534.0, 1907, 3862000, 77.8, 54669.0, 64960.0, 'New Zealand/Aotearoa', 'Constitutional Monarchy', 'Elisabeth II', 3499, 'NZ', 'NZL', 'English', 'T', 87.0), ('PLW', 'Palau', 'Oceania', 'Micronesia', 459.0, 1994, 19000, 68.6, 105.0, None, 'Belau/Palau', 'Republic', 'Kuniwo Nakamura', 2881, 'PW', 'PLW', 'English', 'T', 3.2), ('SHN', 'Saint Helena', 'Africa', 'Western Africa', 314.0, None, 6000, 76.8, 0.0, None, 'Saint Helena', 'Dependent Territory of the UK', 'Elisabeth II', 3063, 'SH', 'SHN', 'English', 'T', 0.0), ('SYC', 'Seychelles', 'Africa', 'Eastern Africa', 455.0, 1976, 77000, 70.4, 536.0, 539.0, 'Sesel/Seychelles', 'Republic', 'France-Albert René', 3206, 'SC', 'SYC', 'English', 'T', 3.8), ('TCA', 'Turks and Caicos Islands', 'North America', 'Caribbean', 430.0, None, 17000, 73.3, 96.0, None, 'The Turks and Caicos Islands', 'Dependent Territory of the UK', 'Elisabeth II', 3423, 'TC', 'TCA', 'English', 'T', 0.0), ('TKL', 'Tokelau', 'Oceania', 'Polynesia', 12.0, None, 2000, None, 0.0, None, 'Tokelau', 'Nonmetropolitan Territory of New Zealand', 'Elisabeth II', 3333, 'TK', 'TKL', 'English', 'T', 0.0), ('TON', 'Tonga', 'Oceania', 'Polynesia', 650.0, 1970, 99000, 67.9, 146.0, 170.0, 'Tonga', 'Monarchy', "Taufa'ahau Tupou IV", 3334, 'TO', 'TON', 'English', 'T', 0.0), ('TUV', 'Tuvalu', 'Oceania', 'Polynesia', 26.0, 1978, 12000, 66.3, 6.0, None, 'Tuvalu', 'Constitutional Monarchy', 'Elisabeth II', 3424, 'TV', 'TUV', 'English', 'T', 0.0), ('UMI', 'United States Minor Outlying Islands', 'Oceania', 'Micronesia/Caribbean', 16.0, None, 0, None, 0.0, None, 'United States Minor Outlying Islands', 'Dependent Territory of the US', 'George W. Bush', None, 'UM', 'UMI', 'English', 'T', 0.0), ('USA', 'United States', 'North America', 'North America', 9363520.0, 1776, 278357000, 77.1, 8510700.0, 8110900.0, 'United States', 'Federal Republic', 'George W. Bush', 3813, 'US', 'USA', 'English', 'T', 86.2), ('VCT', 'Saint Vincent and the Grenadines', 'North America', 'Caribbean', 388.0, 1979, 114000, 72.3, 285.0, None, 'Saint Vincent and the Grenadines', 'Constitutional Monarchy', 'Elisabeth II', 3066, 'VC', 'VCT', 'English', 'T', 0.0), ('VGB', 'Virgin Islands, British', 'North America', 'Caribbean', 151.0, None, 21000, 75.4, 612.0, 573.0, 'British Virgin Islands', 'Dependent Territory of the UK', 'Elisabeth II', 537, 'VG', 'VGB', 'English', 'T', 0.0), ('VIR', 'Virgin Islands, U.S.', 'North America', 'Caribbean', 347.0, None, 93000, 78.1, 0.0, None, 'Virgin Islands of the United States', 'US Territory', 'George W. Bush', 4067, 'VI', 'VIR', 'English', 'T', 81.7), ('VUT', 'Vanuatu', 'Oceania', 'Melanesia', 12189.0, 1980, 190000, 60.6, 261.0, 246.0, 'Vanuatu', 'Republic', 'John Bani', 3537, 'VU', 'VUT', 'English', 'T', 28.3), ('WSM', 'Samoa', 'Oceania', 'Polynesia', 2831.0, 1962, 180000, 69.2, 141.0, 157.0, 'Samoa', 'Parlementary Monarchy', 'Malietoa Tanumafili II', 3169, 'WS', 'WSM', 'English', 'T', 0.6), ('ZAF', 'South Africa', 'Africa', 'Southern Africa', 1221037.0, 1910, 40377000, 51.1, 116729.0, 129092.0, 'South Africa', 'Republic', 'Thabo Mbeki', 716, 'ZA', 'ZAF', 'English', 'T', 8.5), ('ZWE', 'Zimbabwe', 'Africa', 'Eastern Africa', 390757.0, 1980, 11669000, 37.8, 5951.0, 8670.0, 'Zimbabwe', 'Republic', 'Robert G. Mugabe', 4068, 'ZW', 'ZWE', 'English', 'T', 2.2)]

===== Eval Round 757 =====
Database         : world_1
Prediction SQL   : SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') GROUP BY Language ORDER BY SUM(Percentage) DESC LIMIT 1
Gold SQL         : SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Arabic',)]
Gold Output      : [('Arabic',)]

===== Eval Round 758 =====
Database         : world_1
Prediction SQL   : SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Arabic',)]
Gold Output      : [('Arabic',)]

===== Eval Round 759 =====
Database         : world_1
Prediction SQL   : SELECT DISTINCT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE GovernmentForm = 'Republic') AND Language NOT IN (SELECT Language FROM countrylanguage WHERE CountryCode NOT IN (SELECT Code FROM country WHERE GovernmentForm = 'Republic'))
Gold SQL         : SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Ambo',), ('Chokwe',), ('Kongo',), ('Luchazi',), ('Luimbe-nganguela',), ('Luvale',), ('Mbundu',), ('Nyaneka-nkhumbi',), ('Ovimbundu',), ('Kirundi',), ('Swahili',), ('Adja',), ('Aizo',), ('Bariba',), ('Fon',), ('Somba',), ('Busansi',), ('Dagara',), ('Dyula',), ('Gurma',), ('Mossi',), ('Chakma',), ('Garo',), ('Khasi',), ('Marma',), ('Santhali',), ('Tripuri',), ('Bulgariana',), ('Aimará',), ('Guaraní',), ('Ketšua',), ('Khoekhoe',), ('Ndebele',), ('San',), ('Shona',), ('Tswana',), ('Banda',), ('Gbaya',), ('Mandjia',), ('Mbum',), ('Ngbaka',), ('Sara',), ('Araucan',), ('Rapa nui',), ('Akan',), ('Gur',), ('Kru',), ('Malinke',), ('[South]Mande',), ('Bamileke-bamum',), ('Duala',), ('Fang',), ('Maka',), ('Mandara',), ('Masana',), ('Tikar',), ('Boa',), ('Luba',), ('Mongo',), ('Ngala and Bangi',), ('Rundi',), ('Rwanda',), ('Teke',), ('Mbete',), ('Mboshi',), ('Punu',), ('Sango',), ('Arawakan',), ('Caribbean',), ('Chibcha',), ('Comorian-Arabic',), ('Comorian-French',), ('Comorian-Swahili',), ('Comorian-madagassi',), ('Crioulo',), ('Moravian',), ('Silesiana',), ('Afar',), ('Somali',), ('Sinaberberi',), ('Bilin',), ('Hadareb',), ('Saho',), ('Tigre',), ('Tigrinja',), ('Estonian',), ('Amhara',), ('Gurage',), ('Oromo',), ('Sidamo',), ('Walaita',), ('Fijian',), ('Mpongwe',), ('Punu-sira-nzebi',), ('Abhyasi',), ('Georgiana',), ('Osseetti',), ('Ewe',), ('Ga-adangme',), ('Kissi',), ('Kpelle',), ('Loma',), ('Susu',), ('Yalunka',), ('Diola',), ('Soninke',), ('Wolof',), ('Balante',), ('Mandyako',), ('Bubi',), ('Cakchiquel',), ('Kekchí',), ('Mam',), ('Quiché',), ('Miskito',), ('Haiti Creole',), ('Bali',), ('Banja',), ('Batakki',), ('Bugi',), ('Javanese',), ('Madura',), ('Minangkabau',), ('Irish',), ('Assyrian',), ('Icelandic',), ('Friuli',), ('Sardinian',), ('Gusii',), ('Kalenjin',), ('Kamba',), ('Kikuyu',), ('Luhya',), ('Luo',), ('Masai',), ('Meru',), ('Nyika',), ('Turkana',), ('Kirgiz',), ('Tadzhik',), ('Lao-Soung',), ('Mon-khmer',), ('Bassa',), ('Gio',), ('Grebo',), ('Mano',), ('Mixed Languages',), ('Singali',), ('Lithuanian',), ('Latvian',), ('Gagauzi',), ('Dhivehi',), ('Marshallese',), ('Bambara',), ('Senufo and Minianka',), ('Songhai',), ('Tamashek',), ('Maltese',), ('Burmese',), ('Chin',), ('Kachin',), ('Karen',), ('Kayah',), ('Mon',), ('Rakhine',), ('Shan',), ('Bajad',), ('Buryat',), ('Dariganga',), ('Dorbet',), ('Chuabo',), ('Lomwe',), ('Makua',), ('Marendje',), ('Nyanja',), ('Ronga',), ('Sena',), ('Tsonga',), ('Tswa',), ('Hassaniya',), ('Tukulor',), ('Zenaga',), ('Chichewa',), ('Ngoni',), ('Yao',), ('Afrikaans',), ('Caprivi',), ('Herero',), ('Kavango',), ('Nama',), ('Ovambo',), ('Songhai-zerma',), ('Sumo',), ('Nauru',), ('Brahui',), ('Hindko',), ('Saraiki',), ('Sindhi',), ('Cuna',), ('Embera',), ('Guaymí',), ('Bicol',), ('Cebuano',), ('Hiligaynon',), ('Ilocano',), ('Maguindanao',), ('Maranao',), ('Pampango',), ('Pangasinan',), ('Pilipino',), ('Waray-waray',), ('Palau',), ('Serer',), ('Bullom-sherbro',), ('Kono-vai',), ('Kuranko',), ('Limba',), ('Mende',), ('Temne',), ('Nahua',), ('Sranantonga',), ('Czech and Moravian',), ('Ukrainian and Russian',), ('Seselwa',), ('Gorane',), ('Hadjarai',), ('Kanem-bornu',), ('Mayo-kebbi',), ('Ouaddai',), ('Tandjile',), ('Ane',), ('Kabyé',), ('Kotokoli',), ('Moba',), ('Naudemba',), ('Watyi',), ('Arabic-French',), ('Arabic-French-English',), ('Ami',), ('Atayal',), ('Min',), ('Paiwan',), ('Chaga and Pare',), ('Gogo',), ('Ha',), ('Haya',), ('Hehet',), ('Luguru',), ('Makonde',), ('Nyakusa',), ('Nyamwesi',), ('Shambala',), ('Acholi',), ('Ganda',), ('Gisu',), ('Kiga',), ('Lango',), ('Lugbara',), ('Nkole',), ('Soga',), ('Teso',), ('Karakalpak',), ('Bislama',), ('Soqutri',), ('Northsotho',), ('Southsotho',), ('Venda',), ('Xhosa',), ('Bemba',), ('Chewa',), ('Lozi',), ('Nsenga',)]
Gold Output      : [('Abhyasi',), ('Acholi',), ('Adja',), ('Aizo',), ('Ambo',), ('Amhara',), ('Ami',), ('Ane',), ('Arabic-French',), ('Arabic-French-English',), ('Araucan',), ('Assyrian',), ('Atayal',), ('Bajad',), ('Balante',), ('Bali',), ('Balochi',), ('Bambara',), ('Bamileke-bamum',), ('Banda',), ('Banja',), ('Bariba',), ('Bassa',), ('Batakki',), ('Bemba',), ('Bengali',), ('Berberi',), ('Bhojpuri',), ('Bicol',), ('Bilin',), ('Bislama',), ('Boa',), ('Brahui',), ('Bubi',), ('Bugi',), ('Bullom-sherbro',), ('Burmese',), ('Buryat',), ('Busansi',), ('Cakchiquel',), ('Caprivi',), ('Cebuano',), ('Chaga and Pare',), ('Chakma',), ('Chewa',), ('Chichewa',), ('Chin',), ('Chuabo',), ('Comorian',), ('Comorian-Arabic',), ('Comorian-French',), ('Comorian-Swahili',), ('Comorian-madagassi',), ('Cuna',), ('Czech',), ('Czech and Moravian',), ('Dagara',), ('Dariganga',), ('Dhivehi',), ('Dorbet',), ('Duala',), ('Dyula',), ('Embera',), ('Fijian',), ('Fon',), ('Friuli',), ('Ga-adangme',), ('Gagauzi',), ('Ganda',), ('Garifuna',), ('Garo',), ('Gbaya',), ('Georgiana',), ('Gio',), ('Gisu',), ('Gogo',), ('Gorane',), ('Grebo',), ('Guaymí',), ('Gur',), ('Gurage',), ('Gusii',), ('Ha',), ('Hadareb',), ('Hadjarai',), ('Haiti Creole',), ('Hakka',), ('Hassaniya',), ('Hausa',), ('Haya',), ('Hebrew',), ('Hehet',), ('Herero',), ('Hiligaynon',), ('Hindko',), ('Icelandic',), ('Ilocano',), ('Irish',), ('Javanese',), ('Kabyé',), ('Kachin',), ('Kalenjin',), ('Kamba',), ('Kanem-bornu',), ('Kanuri',), ('Karakalpak',), ('Karen',), ('Kavango',), ('Kayah',), ('Kekchí',), ('Khasi',), ('Khoekhoe',), ('Kiga',), ('Kikuyu',), ('Kirgiz',), ('Kirundi',), ('Kissi',), ('Kono-vai',), ('Korean',), ('Kotokoli',), ('Kuranko',), ('Lango',), ('Lao',), ('Lao-Soung',), ('Latvian',), ('Limba',), ('Lozi',), ('Luba',), ('Luchazi',), ('Lugbara',), ('Luguru',), ('Luhya',), ('Luimbe-nganguela',), ('Luo',), ('Luvale',), ('Madura',), ('Maguindanao',), ('Maka',), ('Makonde',), ('Makua',), ('Maltese',), ('Mam',), ('Mandara',), ('Mandarin Chinese',), ('Mandjia',), ('Mandyako',), ('Mano',), ('Maranao',), ('Marathi',), ('Marendje',), ('Marma',), ('Marshallese',), ('Masai',), ('Masana',), ('Mayo-kebbi',), ('Mboshi',), ('Mbum',), ('Mbundu',), ('Mende',), ('Meru',), ('Min',), ('Minangkabau',), ('Mixed Languages',), ('Moba',), ('Mon',), ('Mon-khmer',), ('Mongo',), ('Mongolian',), ('Moravian',), ('Mpongwe',), ('Nahua',), ('Nama',), ('Naudemba',), ('Nauru',), ('Ngala and Bangi',), ('Ngbaka',), ('Ngoni',), ('Nkole',), ('Northsotho',), ('Nsenga',), ('Nyakusa',), ('Nyamwesi',), ('Nyaneka-nkhumbi',), ('Nyika',), ('Oromo',), ('Osseetti',), ('Ouaddai',), ('Ovambo',), ('Ovimbundu',), ('Paiwan',), ('Palau',), ('Pampango',), ('Pangasinan',), ('Pashto',), ('Persian',), ('Philippene Languages',), ('Pilipino',), ('Punjabi',), ('Punu',), ('Punu-sira-nzebi',), ('Quiché',), ('Rakhine',), ('Rapa nui',), ('Ronga',), ('Rundi',), ('Saame',), ('Saho',), ('Sango',), ('Santhali',), ('Saraiki',), ('Sardinian',), ('Sena',), ('Senufo and Minianka',), ('Serer',), ('Seselwa',), ('Shambala',), ('Shan',), ('Sidamo',), ('Silesiana',), ('Sinaberberi',), ('Sindhi',), ('Singali',), ('Soga',), ('Somba',), ('Songhai',), ('Songhai-zerma',), ('Soqutri',), ('Southsotho',), ('Sranantonga',), ('Sumo',), ('Sunda',), ('Susu',), ('Swazi',), ('Swedish',), ('Tandjile',), ('Temne',), ('Teso',), ('Thai',), ('Tigre',), ('Tikar',), ('Tongan',), ('Tripuri',), ('Tswa',), ('Tukulor',), ('Turkana',), ('Turkmenian',), ('Ukrainian and Russian',), ('Urdu',), ('Venda',), ('Walaita',), ('Waray-waray',), ('Watyi',), ('Xhosa',), ('Yao',), ('Zande',), ('Zenaga',), ('Zulu',), ('[South]Mande',)]

===== Eval Round 760 =====
Database         : world_1
Prediction SQL   : SELECT DISTINCT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE GovernmentForm = 'Republic')
Gold SQL         : SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Ambo',), ('Chokwe',), ('Kongo',), ('Luchazi',), ('Luimbe-nganguela',), ('Luvale',), ('Mbundu',), ('Nyaneka-nkhumbi',), ('Ovimbundu',), ('Albaniana',), ('Greek',), ('Macedonian',), ('Armenian',), ('Azerbaijani',), ('French',), ('Kirundi',), ('Swahili',), ('Adja',), ('Aizo',), ('Bariba',), ('Fon',), ('Ful',), ('Joruba',), ('Somba',), ('Busansi',), ('Dagara',), ('Dyula',), ('Gurma',), ('Mossi',), ('Bengali',), ('Chakma',), ('Garo',), ('Khasi',), ('Marma',), ('Santhali',), ('Tripuri',), ('Bulgariana',), ('Romani',), ('Turkish',), ('Belorussian',), ('Polish',), ('Russian',), ('Ukrainian',), ('Aimará',), ('Guaraní',), ('Ketšua',), ('Spanish',), ('Khoekhoe',), ('Ndebele',), ('San',), ('Shona',), ('Tswana',), ('Banda',), ('Gbaya',), ('Mandjia',), ('Mbum',), ('Ngbaka',), ('Sara',), ('Araucan',), ('Rapa nui',), ('Akan',), ('Gur',), ('Kru',), ('Malinke',), ('[South]Mande',), ('Bamileke-bamum',), ('Duala',), ('Fang',), ('Maka',), ('Mandara',), ('Masana',), ('Tikar',), ('Boa',), ('Luba',), ('Mongo',), ('Ngala and Bangi',), ('Rundi',), ('Rwanda',), ('Teke',), ('Zande',), ('Mbete',), ('Mboshi',), ('Punu',), ('Sango',), ('Arawakan',), ('Caribbean',), ('Chibcha',), ('Creole English',), ('Comorian',), ('Comorian-Arabic',), ('Comorian-French',), ('Comorian-Swahili',), ('Comorian-madagassi',), ('Crioulo',), ('Portuguese',), ('Chinese',), ('Czech',), ('German',), ('Hungarian',), ('Moravian',), ('Silesiana',), ('Slovak',), ('Afar',), ('Arabic',), ('Somali',), ('Creole French',), ('Berberi',), ('Sinaberberi',), ('Bilin',), ('Hadareb',), ('Saho',), ('Tigre',), ('Tigrinja',), ('Estonian',), ('Finnish',), ('Amhara',), ('Gurage',), ('Oromo',), ('Sidamo',), ('Walaita',), ('Saame',), ('Swedish',), ('Fijian',), ('Hindi',), ('Italian',), ('Mpongwe',), ('Punu-sira-nzebi',), ('Abhyasi',), ('Georgiana',), ('Osseetti',), ('Ewe',), ('Ga-adangme',), ('Kissi',), ('Kpelle',), ('Loma',), ('Susu',), ('Yalunka',), ('Diola',), ('Soninke',), ('Wolof',), ('Balante',), ('Mandyako',), ('Bubi',), ('Cakchiquel',), ('Kekchí',), ('Mam',), ('Quiché',), ('Garifuna',), ('Miskito',), ('Serbo-Croatian',), ('Slovene',), ('Haiti Creole',), ('Romanian',), ('Bali',), ('Banja',), ('Batakki',), ('Bugi',), ('Javanese',), ('Madura',), ('Malay',), ('Minangkabau',), ('Sunda',), ('English',), ('Irish',), ('Assyrian',), ('Kurdish',), ('Persian',), ('Icelandic',), ('Hebrew',), ('Friuli',), ('Sardinian',), ('Kazakh',), ('Tatar',), ('Uzbek',), ('Gusii',), ('Kalenjin',), ('Kamba',), ('Kikuyu',), ('Luhya',), ('Luo',), ('Masai',), ('Meru',), ('Nyika',), ('Turkana',), ('Kirgiz',), ('Tadzhik',), ('Kiribati',), ('Tuvalu',), ('Korean',), ('Lao',), ('Lao-Soung',), ('Mon-khmer',), ('Thai',), ('Bassa',), ('Gio',), ('Grebo',), ('Mano',), ('Mixed Languages',), ('Singali',), ('Tamil',), ('Lithuanian',), ('Latvian',), ('Gagauzi',), ('Dhivehi',), ('Marshallese',), ('Bambara',), ('Senufo and Minianka',), ('Songhai',), ('Tamashek',), ('Maltese',), ('Burmese',), ('Chin',), ('Kachin',), ('Karen',), ('Kayah',), ('Mon',), ('Rakhine',), ('Shan',), ('Bajad',), ('Buryat',), ('Dariganga',), ('Dorbet',), ('Mongolian',), ('Chuabo',), ('Lomwe',), ('Makua',), ('Marendje',), ('Nyanja',), ('Ronga',), ('Sena',), ('Tsonga',), ('Tswa',), ('Hassaniya',), ('Tukulor',), ('Zenaga',), ('Bhojpuri',), ('Marathi',), ('Chichewa',), ('Ngoni',), ('Yao',), ('Afrikaans',), ('Caprivi',), ('Herero',), ('Kavango',), ('Nama',), ('Ovambo',), ('Hausa',), ('Kanuri',), ('Songhai-zerma',), ('Sumo',), ('Nauru',), ('Balochi',), ('Brahui',), ('Hindko',), ('Pashto',), ('Punjabi',), ('Saraiki',), ('Sindhi',), ('Urdu',), ('Cuna',), ('Embera',), ('Guaymí',), ('Bicol',), ('Cebuano',), ('Hiligaynon',), ('Ilocano',), ('Maguindanao',), ('Maranao',), ('Pampango',), ('Pangasinan',), ('Pilipino',), ('Waray-waray',), ('Palau',), ('Philippene Languages',), ('Serer',), ('Bullom-sherbro',), ('Kono-vai',), ('Kuranko',), ('Limba',), ('Mende',), ('Temne',), ('Nahua',), ('Sranantonga',), ('Czech and Moravian',), ('Ukrainian and Russian',), ('Seselwa',), ('Gorane',), ('Hadjarai',), ('Kanem-bornu',), ('Mayo-kebbi',), ('Ouaddai',), ('Tandjile',), ('Ane',), ('Kabyé',), ('Kotokoli',), ('Moba',), ('Naudemba',), ('Watyi',), ('Turkmenian',), ('Arabic-French',), ('Arabic-French-English',), ('Ami',), ('Atayal',), ('Hakka',), ('Mandarin Chinese',), ('Min',), ('Paiwan',), ('Chaga and Pare',), ('Gogo',), ('Ha',), ('Haya',), ('Hehet',), ('Luguru',), ('Makonde',), ('Nyakusa',), ('Nyamwesi',), ('Shambala',), ('Acholi',), ('Ganda',), ('Gisu',), ('Kiga',), ('Lango',), ('Lugbara',), ('Nkole',), ('Soga',), ('Teso',), ('Karakalpak',), ('Bislama',), ('Soqutri',), ('Northsotho',), ('Southsotho',), ('Swazi',), ('Venda',), ('Xhosa',), ('Zulu',), ('Bemba',), ('Chewa',), ('Lozi',), ('Nsenga',), ('Tongan',)]
Gold Output      : [('Abhyasi',), ('Acholi',), ('Adja',), ('Aizo',), ('Ambo',), ('Amhara',), ('Ami',), ('Ane',), ('Arabic-French',), ('Arabic-French-English',), ('Araucan',), ('Assyrian',), ('Atayal',), ('Bajad',), ('Balante',), ('Bali',), ('Balochi',), ('Bambara',), ('Bamileke-bamum',), ('Banda',), ('Banja',), ('Bariba',), ('Bassa',), ('Batakki',), ('Bemba',), ('Bengali',), ('Berberi',), ('Bhojpuri',), ('Bicol',), ('Bilin',), ('Bislama',), ('Boa',), ('Brahui',), ('Bubi',), ('Bugi',), ('Bullom-sherbro',), ('Burmese',), ('Buryat',), ('Busansi',), ('Cakchiquel',), ('Caprivi',), ('Cebuano',), ('Chaga and Pare',), ('Chakma',), ('Chewa',), ('Chichewa',), ('Chin',), ('Chuabo',), ('Comorian',), ('Comorian-Arabic',), ('Comorian-French',), ('Comorian-Swahili',), ('Comorian-madagassi',), ('Cuna',), ('Czech',), ('Czech and Moravian',), ('Dagara',), ('Dariganga',), ('Dhivehi',), ('Dorbet',), ('Duala',), ('Dyula',), ('Embera',), ('Fijian',), ('Fon',), ('Friuli',), ('Ga-adangme',), ('Gagauzi',), ('Ganda',), ('Garifuna',), ('Garo',), ('Gbaya',), ('Georgiana',), ('Gio',), ('Gisu',), ('Gogo',), ('Gorane',), ('Grebo',), ('Guaymí',), ('Gur',), ('Gurage',), ('Gusii',), ('Ha',), ('Hadareb',), ('Hadjarai',), ('Haiti Creole',), ('Hakka',), ('Hassaniya',), ('Hausa',), ('Haya',), ('Hebrew',), ('Hehet',), ('Herero',), ('Hiligaynon',), ('Hindko',), ('Icelandic',), ('Ilocano',), ('Irish',), ('Javanese',), ('Kabyé',), ('Kachin',), ('Kalenjin',), ('Kamba',), ('Kanem-bornu',), ('Kanuri',), ('Karakalpak',), ('Karen',), ('Kavango',), ('Kayah',), ('Kekchí',), ('Khasi',), ('Khoekhoe',), ('Kiga',), ('Kikuyu',), ('Kirgiz',), ('Kirundi',), ('Kissi',), ('Kono-vai',), ('Korean',), ('Kotokoli',), ('Kuranko',), ('Lango',), ('Lao',), ('Lao-Soung',), ('Latvian',), ('Limba',), ('Lozi',), ('Luba',), ('Luchazi',), ('Lugbara',), ('Luguru',), ('Luhya',), ('Luimbe-nganguela',), ('Luo',), ('Luvale',), ('Madura',), ('Maguindanao',), ('Maka',), ('Makonde',), ('Makua',), ('Maltese',), ('Mam',), ('Mandara',), ('Mandarin Chinese',), ('Mandjia',), ('Mandyako',), ('Mano',), ('Maranao',), ('Marathi',), ('Marendje',), ('Marma',), ('Marshallese',), ('Masai',), ('Masana',), ('Mayo-kebbi',), ('Mboshi',), ('Mbum',), ('Mbundu',), ('Mende',), ('Meru',), ('Min',), ('Minangkabau',), ('Mixed Languages',), ('Moba',), ('Mon',), ('Mon-khmer',), ('Mongo',), ('Mongolian',), ('Moravian',), ('Mpongwe',), ('Nahua',), ('Nama',), ('Naudemba',), ('Nauru',), ('Ngala and Bangi',), ('Ngbaka',), ('Ngoni',), ('Nkole',), ('Northsotho',), ('Nsenga',), ('Nyakusa',), ('Nyamwesi',), ('Nyaneka-nkhumbi',), ('Nyika',), ('Oromo',), ('Osseetti',), ('Ouaddai',), ('Ovambo',), ('Ovimbundu',), ('Paiwan',), ('Palau',), ('Pampango',), ('Pangasinan',), ('Pashto',), ('Persian',), ('Philippene Languages',), ('Pilipino',), ('Punjabi',), ('Punu',), ('Punu-sira-nzebi',), ('Quiché',), ('Rakhine',), ('Rapa nui',), ('Ronga',), ('Rundi',), ('Saame',), ('Saho',), ('Sango',), ('Santhali',), ('Saraiki',), ('Sardinian',), ('Sena',), ('Senufo and Minianka',), ('Serer',), ('Seselwa',), ('Shambala',), ('Shan',), ('Sidamo',), ('Silesiana',), ('Sinaberberi',), ('Sindhi',), ('Singali',), ('Soga',), ('Somba',), ('Songhai',), ('Songhai-zerma',), ('Soqutri',), ('Southsotho',), ('Sranantonga',), ('Sumo',), ('Sunda',), ('Susu',), ('Swazi',), ('Swedish',), ('Tandjile',), ('Temne',), ('Teso',), ('Thai',), ('Tigre',), ('Tikar',), ('Tongan',), ('Tripuri',), ('Tswa',), ('Tukulor',), ('Turkana',), ('Turkmenian',), ('Ukrainian and Russian',), ('Urdu',), ('Venda',), ('Walaita',), ('Waray-waray',), ('Watyi',), ('Xhosa',), ('Yao',), ('Zande',), ('Zenaga',), ('Zulu',), ('[South]Mande',)]

===== Eval Round 761 =====
Database         : world_1
Prediction SQL   : SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1
Gold SQL         : SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('New York',)]
Gold Output      : [('New York', 8008278)]

===== Eval Round 762 =====
Database         : world_1
Prediction SQL   : SELECT T1.Name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1
Gold SQL         : SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('New York',)]
Gold Output      : [('New York', 8008278)]

===== Eval Round 763 =====
Database         : world_1
Prediction SQL   : SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1
Gold SQL         : SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('China', 1277558000, 71.4)]
Gold Output      : [('China', 1277558000, 71.4)]

===== Eval Round 764 =====
Database         : world_1
Prediction SQL   : SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1
Gold SQL         : SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('China', 1277558000, 71.4)]
Gold Output      : [('China', 1277558000, 71.4)]

===== Eval Round 765 =====
Database         : world_1
Prediction SQL   : SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'TRUE')
Gold SQL         : SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(66.48603603603601,)]
Gold Output      : [(65.48270270270272,)]

===== Eval Round 766 =====
Database         : world_1
Prediction SQL   : SELECT AVG(LifeExpectancy) FROM country WHERE CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
Gold SQL         : SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: CountryCode
Gold Output      : [(65.48270270270272,)]

===== Eval Round 767 =====
Database         : world_1
Prediction SQL   : SELECT SUM(T1.Population) FROM country AS T1 WHERE T1.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
Gold SQL         : SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(5451331150,)]
Gold Output      : [(5451331150,)]

===== Eval Round 768 =====
Database         : world_1
Prediction SQL   : SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
Gold SQL         : SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(5451331150,)]
Gold Output      : [(5451331150,)]

===== Eval Round 769 =====
Database         : world_1
Prediction SQL   : SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'
Gold SQL         : SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Dutch',), ('Dutch',), ('Papiamento',), ('Dutch',)]
Gold Output      : [('Dutch',), ('Dutch',), ('Papiamento',), ('Dutch',)]

===== Eval Round 770 =====
Database         : world_1
Prediction SQL   : SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'
Gold SQL         : SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Dutch',), ('Dutch',), ('Papiamento',), ('Dutch',)]
Gold Output      : [('Dutch',), ('Dutch',), ('Papiamento',), ('Dutch',)]

===== Eval Round 771 =====
Database         : world_1
Prediction SQL   : SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930) AND IsOfficial = 'T'
Gold SQL         : SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(63,)]
Gold Output      : [(40,)]

===== Eval Round 772 =====
Database         : world_1
Prediction SQL   : SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)
Gold SQL         : SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(153,)]
Gold Output      : [(40,)]

===== Eval Round 773 =====
Database         : world_1
Prediction SQL   : SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
Gold SQL         : SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('Aruba',), ('Afghanistan',), ('Angola',), ('Anguilla',), ('Albania',), ('Andorra',), ('Netherlands Antilles',), ('United Arab Emirates',), ('Argentina',), ('Armenia',), ('American Samoa',), ('Antarctica',), ('French Southern territories',), ('Antigua and Barbuda',), ('Australia',), ('Austria',), ('Azerbaijan',), ('Burundi',), ('Belgium',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bulgaria',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Bermuda',), ('Bolivia',), ('Brazil',), ('Barbados',), ('Brunei',), ('Bhutan',), ('Bouvet Island',), ('Botswana',), ('Central African Republic',), ('Canada',), ('Cocos (Keeling) Islands',), ('Switzerland',), ('Chile',), ('China',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Cook Islands',), ('Colombia',), ('Comoros',), ('Cape Verde',), ('Costa Rica',), ('Cuba',), ('Christmas Island',), ('Cayman Islands',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Denmark',), ('Dominican Republic',), ('Algeria',), ('Ecuador',), ('Egypt',), ('Eritrea',), ('Western Sahara',), ('Spain',), ('Estonia',), ('Ethiopia',), ('Finland',), ('Fiji Islands',), ('Falkland Islands',), ('France',), ('Faroe Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('United Kingdom',), ('Georgia',), ('Ghana',), ('Gibraltar',), ('Guinea',), ('Guadeloupe',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Greece',), ('Grenada',), ('Greenland',), ('Guatemala',), ('French Guiana',), ('Guam',), ('Guyana',), ('Hong Kong',), ('Heard Island and McDonald Islands',), ('Honduras',), ('Croatia',), ('Haiti',), ('Hungary',), ('Indonesia',), ('India',), ('British Indian Ocean Territory',), ('Ireland',), ('Iran',), ('Iraq',), ('Iceland',), ('Israel',), ('Italy',), ('Jamaica',), ('Jordan',), ('Japan',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('South Korea',), ('Kuwait',), ('Laos',), ('Lebanon',), ('Liberia',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Liechtenstein',), ('Sri Lanka',), ('Lesotho',), ('Lithuania',), ('Luxembourg',), ('Latvia',), ('Macao',), ('Morocco',), ('Monaco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Mexico',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Myanmar',), ('Mongolia',), ('Northern Mariana Islands',), ('Mozambique',), ('Mauritania',), ('Montserrat',), ('Martinique',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Mayotte',), ('Namibia',), ('New Caledonia',), ('Niger',), ('Norfolk Island',), ('Nigeria',), ('Nicaragua',), ('Niue',), ('Netherlands',), ('Norway',), ('Nepal',), ('Nauru',), ('New Zealand',), ('Oman',), ('Pakistan',), ('Panama',), ('Pitcairn',), ('Peru',), ('Philippines',), ('Palau',), ('Papua New Guinea',), ('Poland',), ('Puerto Rico',), ('North Korea',), ('Portugal',), ('Paraguay',), ('Palestine',), ('French Polynesia',), ('Qatar',), ('Réunion',), ('Romania',), ('Russian Federation',), ('Rwanda',), ('Saudi Arabia',), ('Sudan',), ('Senegal',), ('Singapore',), ('South Georgia and the South Sandwich Islands',), ('Saint Helena',), ('Svalbard and Jan Mayen',), ('Solomon Islands',), ('Sierra Leone',), ('El Salvador',), ('San Marino',), ('Somalia',), ('Saint Pierre and Miquelon',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Sweden',), ('Swaziland',), ('Seychelles',), ('Syria',), ('Turks and Caicos Islands',), ('Chad',), ('Togo',), ('Thailand',), ('Tajikistan',), ('Tokelau',), ('Turkmenistan',), ('East Timor',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Turkey',), ('Tuvalu',), ('Taiwan',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('United States Minor Outlying Islands',), ('Uruguay',), ('United States',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Venezuela',), ('Virgin Islands, British',), ('Virgin Islands, U.S.',), ('Vietnam',), ('Vanuatu',), ('Wallis and Futuna',), ('Samoa',), ('Yemen',), ('Yugoslavia',), ('South Africa',), ('Zambia',), ('Zimbabwe',)]

===== Eval Round 774 =====
Database         : world_1
Prediction SQL   : SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
Gold SQL         : SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('Aruba',), ('Afghanistan',), ('Angola',), ('Anguilla',), ('Albania',), ('Andorra',), ('Netherlands Antilles',), ('United Arab Emirates',), ('Argentina',), ('Armenia',), ('American Samoa',), ('Antarctica',), ('French Southern territories',), ('Antigua and Barbuda',), ('Australia',), ('Austria',), ('Azerbaijan',), ('Burundi',), ('Belgium',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bulgaria',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Bermuda',), ('Bolivia',), ('Brazil',), ('Barbados',), ('Brunei',), ('Bhutan',), ('Bouvet Island',), ('Botswana',), ('Central African Republic',), ('Canada',), ('Cocos (Keeling) Islands',), ('Switzerland',), ('Chile',), ('China',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Cook Islands',), ('Colombia',), ('Comoros',), ('Cape Verde',), ('Costa Rica',), ('Cuba',), ('Christmas Island',), ('Cayman Islands',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Denmark',), ('Dominican Republic',), ('Algeria',), ('Ecuador',), ('Egypt',), ('Eritrea',), ('Western Sahara',), ('Spain',), ('Estonia',), ('Ethiopia',), ('Finland',), ('Fiji Islands',), ('Falkland Islands',), ('France',), ('Faroe Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('United Kingdom',), ('Georgia',), ('Ghana',), ('Gibraltar',), ('Guinea',), ('Guadeloupe',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Greece',), ('Grenada',), ('Greenland',), ('Guatemala',), ('French Guiana',), ('Guam',), ('Guyana',), ('Hong Kong',), ('Heard Island and McDonald Islands',), ('Honduras',), ('Croatia',), ('Haiti',), ('Hungary',), ('Indonesia',), ('India',), ('British Indian Ocean Territory',), ('Ireland',), ('Iran',), ('Iraq',), ('Iceland',), ('Israel',), ('Italy',), ('Jamaica',), ('Jordan',), ('Japan',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('South Korea',), ('Kuwait',), ('Laos',), ('Lebanon',), ('Liberia',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Liechtenstein',), ('Sri Lanka',), ('Lesotho',), ('Lithuania',), ('Luxembourg',), ('Latvia',), ('Macao',), ('Morocco',), ('Monaco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Mexico',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Myanmar',), ('Mongolia',), ('Northern Mariana Islands',), ('Mozambique',), ('Mauritania',), ('Montserrat',), ('Martinique',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Mayotte',), ('Namibia',), ('New Caledonia',), ('Niger',), ('Norfolk Island',), ('Nigeria',), ('Nicaragua',), ('Niue',), ('Netherlands',), ('Norway',), ('Nepal',), ('Nauru',), ('New Zealand',), ('Oman',), ('Pakistan',), ('Panama',), ('Pitcairn',), ('Peru',), ('Philippines',), ('Palau',), ('Papua New Guinea',), ('Poland',), ('Puerto Rico',), ('North Korea',), ('Portugal',), ('Paraguay',), ('Palestine',), ('French Polynesia',), ('Qatar',), ('Réunion',), ('Romania',), ('Russian Federation',), ('Rwanda',), ('Saudi Arabia',), ('Sudan',), ('Senegal',), ('Singapore',), ('South Georgia and the South Sandwich Islands',), ('Saint Helena',), ('Svalbard and Jan Mayen',), ('Solomon Islands',), ('Sierra Leone',), ('El Salvador',), ('San Marino',), ('Somalia',), ('Saint Pierre and Miquelon',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Sweden',), ('Swaziland',), ('Seychelles',), ('Syria',), ('Turks and Caicos Islands',), ('Chad',), ('Togo',), ('Thailand',), ('Tajikistan',), ('Tokelau',), ('Turkmenistan',), ('East Timor',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Turkey',), ('Tuvalu',), ('Taiwan',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('United States Minor Outlying Islands',), ('Uruguay',), ('United States',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Venezuela',), ('Virgin Islands, British',), ('Virgin Islands, U.S.',), ('Vietnam',), ('Vanuatu',), ('Wallis and Futuna',), ('Samoa',), ('Yemen',), ('Yugoslavia',), ('South Africa',), ('Zambia',), ('Zimbabwe',)]

===== Eval Round 775 =====
Database         : world_1
Prediction SQL   : SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Africa' AND T1.Population < (SELECT MAX(Population) FROM country WHERE Continent = 'Asia')
Gold SQL         : SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Angola',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Djibouti',), ('Algeria',), ('Egypt',), ('Eritrea',), ('Western Sahara',), ('Ethiopia',), ('Gabon',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('British Indian Ocean Territory',), ('Kenya',), ('Liberia',), ('Libyan Arab Jamahiriya',), ('Lesotho',), ('Morocco',), ('Madagascar',), ('Mali',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Mayotte',), ('Namibia',), ('Niger',), ('Nigeria',), ('Réunion',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Saint Helena',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tunisia',), ('Tanzania',), ('Uganda',), ('South Africa',), ('Zambia',), ('Zimbabwe',)]
Gold Output      : [('Angola',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Djibouti',), ('Algeria',), ('Egypt',), ('Eritrea',), ('Western Sahara',), ('Ethiopia',), ('Gabon',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('British Indian Ocean Territory',), ('Kenya',), ('Liberia',), ('Libyan Arab Jamahiriya',), ('Lesotho',), ('Morocco',), ('Madagascar',), ('Mali',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Mayotte',), ('Namibia',), ('Niger',), ('Nigeria',), ('Réunion',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Saint Helena',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tunisia',), ('Tanzania',), ('Uganda',), ('South Africa',), ('Zambia',), ('Zimbabwe',)]

===== Eval Round 776 =====
Database         : world_1
Prediction SQL   : SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Africa' AND T1.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')
Gold SQL         : SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('British Indian Ocean Territory',), ('Mayotte',), ('Saint Helena',), ('Sao Tome and Principe',), ('Seychelles',)]
Gold Output      : [('British Indian Ocean Territory',), ('Mayotte',), ('Saint Helena',), ('Sao Tome and Principe',), ('Seychelles',)]

===== Eval Round 777 =====
Database         : world_1
Prediction SQL   : SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')
Gold SQL         : SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  "Africa")
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Bangladesh',), ('China',), ('Indonesia',), ('India',), ('Japan',), ('Pakistan',)]
Gold Output      : [('Bangladesh',), ('China',), ('Indonesia',), ('India',), ('Japan',), ('Pakistan',)]

===== Eval Round 778 =====
Database         : world_1
Prediction SQL   : SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')
Gold SQL         : SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Bangladesh',), ('China',), ('Indonesia',), ('India',), ('Japan',), ('Pakistan',)]
Gold Output      : [('Afghanistan',), ('United Arab Emirates',), ('Armenia',), ('Azerbaijan',), ('Bangladesh',), ('Bahrain',), ('Brunei',), ('Bhutan',), ('China',), ('Cyprus',), ('Georgia',), ('Hong Kong',), ('Indonesia',), ('India',), ('Iran',), ('Iraq',), ('Israel',), ('Jordan',), ('Japan',), ('Kazakstan',), ('Kyrgyzstan',), ('Cambodia',), ('South Korea',), ('Kuwait',), ('Laos',), ('Lebanon',), ('Sri Lanka',), ('Macao',), ('Maldives',), ('Myanmar',), ('Mongolia',), ('Malaysia',), ('Nepal',), ('Oman',), ('Pakistan',), ('Philippines',), ('North Korea',), ('Palestine',), ('Qatar',), ('Saudi Arabia',), ('Singapore',), ('Syria',), ('Thailand',), ('Tajikistan',), ('Turkmenistan',), ('East Timor',), ('Turkey',), ('Taiwan',), ('Uzbekistan',), ('Vietnam',), ('Yemen',)]

===== Eval Round 779 =====
Database         : world_1
Prediction SQL   : SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English'
Gold SQL         : SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('ABW',), ('AFG',), ('AGO',), ('ALB',), ('AND',), ('ANT',), ('ARE',), ('ARG',), ('ARM',), ('ASM',), ('ATG',), ('AUS',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHR',), ('BHS',), ('BIH',), ('BLR',), ('BLZ',), ('BOL',), ('BRA',), ('BRB',), ('BRN',), ('BTN',), ('BWA',), ('CAF',), ('CAN',), ('CCK',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COK',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CXR',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DNK',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GBR',), ('GEO',), ('GHA',), ('GIB',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUM',), ('GUY',), ('HKG',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRL',), ('IRN',), ('IRQ',), ('ISL',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('JPN',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KNA',), ('KOR',), ('KWT',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LCA',), ('LIE',), ('LKA',), ('LSO',), ('LTU',), ('LUX',), ('LVA',), ('MAC',), ('MAR',), ('MCO',), ('MDA',), ('MDG',), ('MDV',), ('MEX',), ('MHL',), ('MKD',), ('MLI',), ('MLT',), ('MMR',), ('MNG',), ('MNP',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYS',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NIU',), ('NLD',), ('NOR',), ('NPL',), ('NRU',), ('NZL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PLW',), ('PNG',), ('POL',), ('PRI',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYC',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKL',), ('TKM',), ('TMP',), ('TON',), ('TTO',), ('TUN',), ('TUR',), ('TUV',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('USA',), ('UZB',), ('VAT',), ('VCT',), ('VEN',), ('VIR',), ('VNM',), ('VUT',), ('WLF',), ('WSM',), ('YEM',), ('YUG',), ('ZAF',), ('ZMB',), ('ZWE',)]
Gold Output      : [('AFG',), ('AGO',), ('ALB',), ('AND',), ('ARE',), ('ARG',), ('ARM',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHS',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BTN',), ('BWA',), ('CAF',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GEO',), ('GHA',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUY',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRN',), ('IRQ',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KOR',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LIE',), ('LKA',), ('LTU',), ('LUX',), ('LVA',), ('MAR',), ('MDA',), ('MDG',), ('MEX',), ('MKD',), ('MLI',), ('MMR',), ('MNG',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NLD',), ('NPL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PNG',), ('POL',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKM',), ('TMP',), ('TUN',), ('TUR',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('UZB',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YEM',), ('YUG',), ('ZMB',)]

===== Eval Round 780 =====
Database         : world_1
Prediction SQL   : SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English'
Gold SQL         : SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('ABW',), ('AFG',), ('AGO',), ('ALB',), ('AND',), ('ANT',), ('ARE',), ('ARG',), ('ARM',), ('ASM',), ('ATG',), ('AUS',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHR',), ('BHS',), ('BIH',), ('BLR',), ('BLZ',), ('BOL',), ('BRA',), ('BRB',), ('BRN',), ('BTN',), ('BWA',), ('CAF',), ('CAN',), ('CCK',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COK',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CXR',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DNK',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GBR',), ('GEO',), ('GHA',), ('GIB',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUM',), ('GUY',), ('HKG',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRL',), ('IRN',), ('IRQ',), ('ISL',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('JPN',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KNA',), ('KOR',), ('KWT',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LCA',), ('LIE',), ('LKA',), ('LSO',), ('LTU',), ('LUX',), ('LVA',), ('MAC',), ('MAR',), ('MCO',), ('MDA',), ('MDG',), ('MDV',), ('MEX',), ('MHL',), ('MKD',), ('MLI',), ('MLT',), ('MMR',), ('MNG',), ('MNP',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYS',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NIU',), ('NLD',), ('NOR',), ('NPL',), ('NRU',), ('NZL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PLW',), ('PNG',), ('POL',), ('PRI',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYC',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKL',), ('TKM',), ('TMP',), ('TON',), ('TTO',), ('TUN',), ('TUR',), ('TUV',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('USA',), ('UZB',), ('VAT',), ('VCT',), ('VEN',), ('VIR',), ('VNM',), ('VUT',), ('WLF',), ('WSM',), ('YEM',), ('YUG',), ('ZAF',), ('ZMB',), ('ZWE',)]
Gold Output      : [('AFG',), ('AGO',), ('ALB',), ('AND',), ('ARE',), ('ARG',), ('ARM',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHS',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BTN',), ('BWA',), ('CAF',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GEO',), ('GHA',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUY',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRN',), ('IRQ',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KOR',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LIE',), ('LKA',), ('LTU',), ('LUX',), ('LVA',), ('MAR',), ('MDA',), ('MDG',), ('MEX',), ('MKD',), ('MLI',), ('MMR',), ('MNG',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NLD',), ('NPL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PNG',), ('POL',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKM',), ('TMP',), ('TUN',), ('TUR',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('UZB',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YEM',), ('YUG',), ('ZMB',)]

===== Eval Round 781 =====
Database         : world_1
Prediction SQL   : SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English'
Gold SQL         : SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('ABW',), ('AFG',), ('AGO',), ('ALB',), ('AND',), ('ANT',), ('ARE',), ('ARG',), ('ARM',), ('ASM',), ('ATG',), ('AUS',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHR',), ('BHS',), ('BIH',), ('BLR',), ('BLZ',), ('BOL',), ('BRA',), ('BRB',), ('BRN',), ('BTN',), ('BWA',), ('CAF',), ('CAN',), ('CCK',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COK',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CXR',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DNK',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GBR',), ('GEO',), ('GHA',), ('GIB',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUM',), ('GUY',), ('HKG',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRL',), ('IRN',), ('IRQ',), ('ISL',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('JPN',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KNA',), ('KOR',), ('KWT',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LCA',), ('LIE',), ('LKA',), ('LSO',), ('LTU',), ('LUX',), ('LVA',), ('MAC',), ('MAR',), ('MCO',), ('MDA',), ('MDG',), ('MDV',), ('MEX',), ('MHL',), ('MKD',), ('MLI',), ('MLT',), ('MMR',), ('MNG',), ('MNP',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYS',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NIU',), ('NLD',), ('NOR',), ('NPL',), ('NRU',), ('NZL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PLW',), ('PNG',), ('POL',), ('PRI',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYC',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKL',), ('TKM',), ('TMP',), ('TON',), ('TTO',), ('TUN',), ('TUR',), ('TUV',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('USA',), ('UZB',), ('VAT',), ('VCT',), ('VEN',), ('VIR',), ('VNM',), ('VUT',), ('WLF',), ('WSM',), ('YEM',), ('YUG',), ('ZAF',), ('ZMB',), ('ZWE',)]
Gold Output      : [('ABW',), ('AFG',), ('AGO',), ('ALB',), ('AND',), ('ANT',), ('ARE',), ('ARG',), ('ARM',), ('ASM',), ('ATG',), ('AUS',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHR',), ('BHS',), ('BIH',), ('BLR',), ('BLZ',), ('BOL',), ('BRA',), ('BRB',), ('BRN',), ('BTN',), ('BWA',), ('CAF',), ('CAN',), ('CCK',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COK',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CXR',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DNK',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GBR',), ('GEO',), ('GHA',), ('GIB',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUM',), ('GUY',), ('HKG',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRL',), ('IRN',), ('IRQ',), ('ISL',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('JPN',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KNA',), ('KOR',), ('KWT',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LCA',), ('LIE',), ('LKA',), ('LSO',), ('LTU',), ('LUX',), ('LVA',), ('MAC',), ('MAR',), ('MCO',), ('MDA',), ('MDG',), ('MDV',), ('MEX',), ('MHL',), ('MKD',), ('MLI',), ('MLT',), ('MMR',), ('MNG',), ('MNP',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYS',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NIU',), ('NLD',), ('NOR',), ('NPL',), ('NRU',), ('NZL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PLW',), ('PNG',), ('POL',), ('PRI',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYC',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKL',), ('TKM',), ('TMP',), ('TON',), ('TTO',), ('TUN',), ('TUR',), ('TUV',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('USA',), ('UZB',), ('VAT',), ('VCT',), ('VEN',), ('VIR',), ('VNM',), ('VUT',), ('WLF',), ('WSM',), ('YEM',), ('YUG',), ('ZAF',), ('ZMB',), ('ZWE',)]

===== Eval Round 782 =====
Database         : world_1
Prediction SQL   : SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'
Gold SQL         : SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('ABW',), ('AFG',), ('AGO',), ('ALB',), ('AND',), ('ANT',), ('ARE',), ('ARG',), ('ARM',), ('ASM',), ('ATG',), ('AUS',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHR',), ('BHS',), ('BIH',), ('BLR',), ('BLZ',), ('BOL',), ('BRA',), ('BRB',), ('BRN',), ('BTN',), ('BWA',), ('CAF',), ('CAN',), ('CCK',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COK',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CXR',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DNK',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GBR',), ('GEO',), ('GHA',), ('GIB',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUM',), ('GUY',), ('HKG',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRL',), ('IRN',), ('IRQ',), ('ISL',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('JPN',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KNA',), ('KOR',), ('KWT',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LCA',), ('LIE',), ('LKA',), ('LSO',), ('LTU',), ('LUX',), ('LVA',), ('MAC',), ('MAR',), ('MCO',), ('MDA',), ('MDG',), ('MDV',), ('MEX',), ('MHL',), ('MKD',), ('MLI',), ('MLT',), ('MMR',), ('MNG',), ('MNP',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYS',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NIU',), ('NLD',), ('NOR',), ('NPL',), ('NRU',), ('NZL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PLW',), ('PNG',), ('POL',), ('PRI',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYC',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKL',), ('TKM',), ('TMP',), ('TON',), ('TTO',), ('TUN',), ('TUR',), ('TUV',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('USA',), ('UZB',), ('VAT',), ('VCT',), ('VEN',), ('VIR',), ('VNM',), ('VUT',), ('WLF',), ('WSM',), ('YEM',), ('YUG',), ('ZAF',), ('ZMB',), ('ZWE',)]
Gold Output      : [('ABW',), ('AFG',), ('AGO',), ('ALB',), ('AND',), ('ANT',), ('ARE',), ('ARG',), ('ARM',), ('ASM',), ('ATG',), ('AUS',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHR',), ('BHS',), ('BIH',), ('BLR',), ('BLZ',), ('BOL',), ('BRA',), ('BRB',), ('BRN',), ('BTN',), ('BWA',), ('CAF',), ('CAN',), ('CCK',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COK',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CXR',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DNK',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GBR',), ('GEO',), ('GHA',), ('GIB',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUM',), ('GUY',), ('HKG',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRL',), ('IRN',), ('IRQ',), ('ISL',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('JPN',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KNA',), ('KOR',), ('KWT',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LCA',), ('LIE',), ('LKA',), ('LSO',), ('LTU',), ('LUX',), ('LVA',), ('MAC',), ('MAR',), ('MCO',), ('MDA',), ('MDG',), ('MDV',), ('MEX',), ('MHL',), ('MKD',), ('MLI',), ('MLT',), ('MMR',), ('MNG',), ('MNP',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYS',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NIU',), ('NLD',), ('NOR',), ('NPL',), ('NRU',), ('NZL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PLW',), ('PNG',), ('POL',), ('PRI',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYC',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKL',), ('TKM',), ('TMP',), ('TON',), ('TTO',), ('TUN',), ('TUR',), ('TUV',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('USA',), ('UZB',), ('VAT',), ('VCT',), ('VEN',), ('VIR',), ('VNM',), ('VUT',), ('WLF',), ('WSM',), ('YEM',), ('YUG',), ('ZAF',), ('ZMB',), ('ZWE',)]

===== Eval Round 783 =====
Database         : world_1
Prediction SQL   : SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English' AND CountryCode IN (SELECT Code FROM country WHERE GovernmentForm != 'Republic')
Gold SQL         : SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('ABW',), ('AFG',), ('AND',), ('ANT',), ('ARE',), ('ARG',), ('ASM',), ('ATG',), ('AUS',), ('AUT',), ('AZE',), ('BEL',), ('BHR',), ('BHS',), ('BIH',), ('BLZ',), ('BRA',), ('BRB',), ('BRN',), ('BTN',), ('CAN',), ('CCK',), ('CHE',), ('CHN',), ('COK',), ('CUB',), ('CXR',), ('DEU',), ('DNK',), ('ESH',), ('ESP',), ('FRO',), ('FSM',), ('GBR',), ('GIB',), ('GLP',), ('GRD',), ('GRL',), ('GUF',), ('GUM',), ('HKG',), ('IND',), ('IRN',), ('JAM',), ('JOR',), ('JPN',), ('KHM',), ('KNA',), ('KWT',), ('LBY',), ('LCA',), ('LIE',), ('LSO',), ('LUX',), ('MAC',), ('MAR',), ('MCO',), ('MDG',), ('MEX',), ('MNP',), ('MTQ',), ('MYS',), ('MYT',), ('NCL',), ('NGA',), ('NIU',), ('NLD',), ('NOR',), ('NPL',), ('NZL',), ('OMN',), ('PCN',), ('PNG',), ('PRI',), ('PRK',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('RUS',), ('SAU',), ('SDN',), ('SJM',), ('SLB',), ('SPM',), ('SWE',), ('SWZ',), ('THA',), ('TKL',), ('TMP',), ('TON',), ('TUV',), ('USA',), ('VAT',), ('VCT',), ('VEN',), ('VIR',), ('VNM',), ('WLF',), ('WSM',), ('YUG',)]
Gold Output      : [('AFG',), ('AND',), ('ARE',), ('ARG',), ('ATA',), ('ATF',), ('AUT',), ('AZE',), ('BEL',), ('BHS',), ('BIH',), ('BRA',), ('BTN',), ('BVT',), ('CHE',), ('CHN',), ('CUB',), ('DEU',), ('ESH',), ('ESP',), ('FRO',), ('FSM',), ('GLP',), ('GRD',), ('GRL',), ('GUF',), ('HMD',), ('IND',), ('IOT',), ('IRN',), ('JAM',), ('JOR',), ('KHM',), ('LBY',), ('LIE',), ('LUX',), ('MAR',), ('MDG',), ('MEX',), ('MTQ',), ('MYT',), ('NCL',), ('NGA',), ('NLD',), ('NPL',), ('OMN',), ('PCN',), ('PNG',), ('PRK',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('RUS',), ('SAU',), ('SDN',), ('SGS',), ('SJM',), ('SLB',), ('SPM',), ('SWE',), ('SWZ',), ('THA',), ('TMP',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YUG',)]

===== Eval Round 784 =====
Database         : world_1
Prediction SQL   : SELECT Code FROM country WHERE Language NOT LIKE '%English%' AND GovernmentForm <> 'Republic'
Gold SQL         : SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: no such column: Language
Gold Output      : [('AFG',), ('AND',), ('ARE',), ('ARG',), ('ATA',), ('ATF',), ('AUT',), ('AZE',), ('BEL',), ('BHS',), ('BIH',), ('BRA',), ('BTN',), ('BVT',), ('CHE',), ('CHN',), ('CUB',), ('DEU',), ('ESH',), ('ESP',), ('FRO',), ('FSM',), ('GLP',), ('GRD',), ('GRL',), ('GUF',), ('HMD',), ('IND',), ('IOT',), ('IRN',), ('JAM',), ('JOR',), ('KHM',), ('LBY',), ('LIE',), ('LUX',), ('MAR',), ('MDG',), ('MEX',), ('MTQ',), ('MYT',), ('NCL',), ('NGA',), ('NLD',), ('NPL',), ('OMN',), ('PCN',), ('PNG',), ('PRK',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('RUS',), ('SAU',), ('SDN',), ('SGS',), ('SJM',), ('SLB',), ('SPM',), ('SWE',), ('SWZ',), ('THA',), ('TMP',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YUG',)]

===== Eval Round 785 =====
Database         : world_1
Prediction SQL   : SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Europe' AND NOT EXISTS (SELECT 1 FROM countrylanguage WHERE CountryCode = T2.Code AND Language = 'English')
Gold SQL         : SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Tirana',), ('Andorra la Vella',), ('Wien',), ('Graz',), ('Linz',), ('Salzburg',), ('Innsbruck',), ('Klagenfurt',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Bruxelles [Brussel]',), ('Brugge',), ('Schaerbeek',), ('Namur',), ('Mons',), ('Sofija',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Stara Zagora',), ('Pleven',), ('Sliven',), ('Dobric',), ('Šumen',), ('Sarajevo',), ('Banja Luka',), ('Zenica',), ('Minsk',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Brest',), ('Bobruisk',), ('Baranovitši',), ('Borisov',), ('Pinsk',), ('Orša',), ('Mozyr',), ('Novopolotsk',), ('Lida',), ('Soligorsk',), ('Molodetšno',), ('Zürich',), ('Geneve',), ('Basel',), ('Bern',), ('Lausanne',), ('Praha',), ('Brno',), ('Ostrava',), ('Plzen',), ('Olomouc',), ('Liberec',), ('Ceské Budejovice',), ('Hradec Králové',), ('Ústí nad Labem',), ('Pardubice',), ('Berlin',), ('Hamburg',), ('Munich [München]',), ('Köln',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('Düsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('Nürnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('Münster',), ('Mönchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('Lübeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbrücken',), ('Mainz',), ('Hamm',), ('Herne',), ('Mülheim an der Ruhr',), ('Solingen',), ('Osnabrück',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Oldenburg',), ('Neuss',), ('Heidelberg',), ('Darmstadt',), ('Paderborn',), ('Potsdam',), ('Würzburg',), ('Regensburg',), ('Recklinghausen',), ('Göttingen',), ('Bremerhaven',), ('Wolfsburg',), ('Bottrop',), ('Remscheid',), ('Heilbronn',), ('Pforzheim',), ('Offenbach am Main',), ('Ulm',), ('Ingolstadt',), ('Gera',), ('Salzgitter',), ('Cottbus',), ('Reutlingen',), ('Fürth',), ('Siegen',), ('Koblenz',), ('Moers',), ('Bergisch Gladbach',), ('Zwickau',), ('Hildesheim',), ('Witten',), ('Schwerin',), ('Erlangen',), ('Kaiserslautern',), ('Trier',), ('Jena',), ('Iserlohn',), ('Gütersloh',), ('Marl',), ('Lünen',), ('Düren',), ('Ratingen',), ('Velbert',), ('Esslingen am Neckar',), ('Madrid',), ('Barcelona',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('Málaga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('Córdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gijón',), ('L´Hospitalet de Llobregat',), ('Granada',), ('A Coruña (La Coruña)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('Móstoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iruña]',), ('Donostia-San Sebastián',), ('Cartagena',), ('Leganés',), ('Fuenlabrada',), ('Almería',), ('Terrassa',), ('Alcalá de Henares',), ('Burgos',), ('Salamanca',), ('Albacete',), ('Getafe',), ('Cádiz',), ('Alcorcón',), ('Huelva',), ('León',), ('Castellón de la Plana [Castell',), ('Badajoz',), ('[San Cristóbal de] la Laguna',), ('Logroño',), ('Santa Coloma de Gramenet',), ('Tarragona',), ('Lleida (Lérida)',), ('Jaén',), ('Ourense (Orense)',), ('Mataró',), ('Algeciras',), ('Marbella',), ('Barakaldo',), ('Dos Hermanas',), ('Santiago de Compostela',), ('Torrejón de Ardoz',), ('Tallinn',), ('Tartu',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [Åbo]',), ('Oulu',), ('Lahti',), ('Paris',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-Étienne',), ('Toulon',), ('Grenoble',), ('Angers',), ('Dijon',), ('Brest',), ('Le Mans',), ('Clermont-Ferrand',), ('Amiens',), ('Aix-en-Provence',), ('Limoges',), ('Nîmes',), ('Tours',), ('Villeurbanne',), ('Metz',), ('Besançon',), ('Caen',), ('Orléans',), ('Mulhouse',), ('Rouen',), ('Boulogne-Billancourt',), ('Perpignan',), ('Nancy',), ('Roubaix',), ('Argenteuil',), ('Tourcoing',), ('Montreuil',), ('Tórshavn',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Patras',), ('Peristerion',), ('Herakleion',), ('Kallithea',), ('Larisa',), ('Zagreb',), ('Split',), ('Rijeka',), ('Osijek',), ('Budapest',), ('Debrecen',), ('Miskolc',), ('Szeged',), ('Pécs',), ('Györ',), ('Nyiregyháza',), ('Kecskemét',), ('Székesfehérvár',), ('Roma',), ('Milano',), ('Napoli',), ('Torino',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Perugia',), ('Foggia',), ('Reggio nell´ Emilia',), ('Salerno',), ('Ravenna',), ('Ferrara',), ('Rimini',), ('Syrakusa',), ('Sassari',), ('Monza',), ('Bergamo',), ('Pescara',), ('Latina',), ('Vicenza',), ('Terni',), ('Forlì',), ('Trento',), ('Novara',), ('Piacenza',), ('Ancona',), ('Lecce',), ('Bolzano',), ('Catanzaro',), ('La Spezia',), ('Udine',), ('Torre del Greco',), ('Andria',), ('Brindisi',), ('Giugliano in Campania',), ('Pisa',), ('Barletta',), ('Arezzo',), ('Alessandria',), ('Cesena',), ('Pesaro',), ('Schaan',), ('Vaduz',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('Šiauliai',), ('Panevezys',), ('Luxembourg [Luxemburg/Lëtzebuerg]',), ('Riga',), ('Daugavpils',), ('Liepaja',), ('Chisinau',), ('Tiraspol',), ('Balti',), ('Bender (Tîghina)',), ('Skopje',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Apeldoorn',), ('Nijmegen',), ('Enschede',), ('Haarlem',), ('Almere',), ('Arnhem',), ('Zaanstad',), ('´s-Hertogenbosch',), ('Amersfoort',), ('Maastricht',), ('Dordrecht',), ('Leiden',), ('Haarlemmermeer',), ('Zoetermeer',), ('Emmen',), ('Zwolle',), ('Ede',), ('Delft',), ('Heerlen',), ('Alkmaar',), ('Warszawa',), ('Lódz',), ('Kraków',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzeszów',), ('Ruda Slaska',), ('Rybnik',), ('Walbrzych',), ('Tychy',), ('Dabrowa Górnicza',), ('Plock',), ('Elblag',), ('Opole',), ('Gorzów Wielkopolski',), ('Wloclawek',), ('Chorzów',), ('Tarnów',), ('Zielona Góra',), ('Koszalin',), ('Legnica',), ('Kalisz',), ('Grudziadz',), ('Slupsk',), ('Jastrzebie-Zdrój',), ('Jaworzno',), ('Jelenia Góra',), ('Lisboa',), ('Porto',), ('Amadora',), ('Coímbra',), ('Braga',), ('Bucuresti',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('Târgu Mures',), ('Baia Mare',), ('Buzau',), ('Satu Mare',), ('Botosani',), ('Piatra Neamt',), ('Râmnicu Vâlcea',), ('Suceava',), ('Drobeta-Turnu Severin',), ('Târgoviste',), ('Focsani',), ('Târgu Jiu',), ('Tulcea',), ('Resita',), ('Moscow',), ('St Petersburg',), ('Novosibirsk',), ('Nizni Novgorod',), ('Jekaterinburg',), ('Samara',), ('Omsk',), ('Kazan',), ('Ufa',), ('Tšeljabinsk',), ('Rostov-na-Donu',), ('Perm',), ('Volgograd',), ('Voronez',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje Tšelny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('Tšeboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sotši',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahatškala',), ('Tšerepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('Tšita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Joškar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Naltšik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagoveštšensk',), ('Šahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamtšatski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novotšerkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Kovrov',), ('Nahodka',), ('Ussurijsk',), ('Salavat',), ('Mytištši',), ('Kolomna',), ('Elektrostal',), ('Murom',), ('Kolpino',), ('Norilsk',), ('Almetjevsk',), ('Novomoskovsk',), ('Dimitrovgrad',), ('Pervouralsk',), ('Himki',), ('Balašiha',), ('Nevinnomyssk',), ('Pjatigorsk',), ('Korolev',), ('Serpuhov',), ('Odintsovo',), ('Orehovo-Zujevo',), ('Kamyšin',), ('Novotšeboksarsk',), ('Tšerkessk',), ('Atšinsk',), ('Magadan',), ('Mitšurinsk',), ('Kislovodsk',), ('Jelets',), ('Seversk',), ('Noginsk',), ('Velikije Luki',), ('Novokuibyševsk',), ('Neftekamsk',), ('Leninsk-Kuznetski',), ('Oktjabrski',), ('Sergijev Posad',), ('Arzamas',), ('Kiseljovsk',), ('Novotroitsk',), ('Obninsk',), ('Kansk',), ('Glazov',), ('Solikamsk',), ('Sarapul',), ('Ust-Ilimsk',), ('Štšolkovo',), ('Mezduretšensk',), ('Usolje-Sibirskoje',), ('Elista',), ('Novošahtinsk',), ('Votkinsk',), ('Kyzyl',), ('Serov',), ('Zelenodolsk',), ('Zeleznodoroznyi',), ('Kinešma',), ('Kuznetsk',), ('Uhta',), ('Jessentuki',), ('Tobolsk',), ('Neftejugansk',), ('Bataisk',), ('Nojabrsk',), ('Balašov',), ('Zeleznogorsk',), ('Zukovski',), ('Anzero-Sudzensk',), ('Bugulma',), ('Zeleznogorsk',), ('Novouralsk',), ('Puškin',), ('Vorkuta',), ('Derbent',), ('Kirovo-Tšepetsk',), ('Krasnogorsk',), ('Klin',), ('Tšaikovski',), ('Novyi Urengoi',), ('Longyearbyen',), ('Serravalle',), ('San Marino',), ('Bratislava',), ('Košice',), ('Prešov',), ('Ljubljana',), ('Maribor',), ('Stockholm',), ('Gothenburg [Göteborg]',), ('Malmö',), ('Uppsala',), ('Linköping',), ('Västerås',), ('Örebro',), ('Norrköping',), ('Helsingborg',), ('Jönköping',), ('Umeå',), ('Lund',), ('Borås',), ('Sundsvall',), ('Gävle',), ('Kyiv',), ('Harkova [Harkiv]',), ('Dnipropetrovsk',), ('Donetsk',), ('Odesa',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('Tšernigiv',), ('Tšerkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('Tšernivtsi',), ('Rivne',), ('Krementšuk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kertš',), ('Nikopol',), ('Berdjansk',), ('Pavlograd',), ('Sjeverodonetsk',), ('Slovjansk',), ('Uzgorod',), ('Altševsk',), ('Lysytšansk',), ('Jevpatorija',), ('Kamjanets-Podilskyi',), ('Jenakijeve',), ('Krasnyi Lutš',), ('Stahanov',), ('Oleksandrija',), ('Konotop',), ('Kostjantynivka',), ('Berdytšiv',), ('Izmajil',), ('Šostka',), ('Uman',), ('Brovary',), ('Mukatševe',), ('Città del Vaticano',), ('Beograd',), ('Novi Sad',), ('Niš',), ('Priština',), ('Kragujevac',), ('Podgorica',), ('Subotica',), ('Prizren',)]
Gold Output      : [('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Apeldoorn',), ('Nijmegen',), ('Enschede',), ('Haarlem',), ('Almere',), ('Arnhem',), ('Zaanstad',), ('´s-Hertogenbosch',), ('Amersfoort',), ('Maastricht',), ('Dordrecht',), ('Leiden',), ('Haarlemmermeer',), ('Zoetermeer',), ('Emmen',), ('Zwolle',), ('Ede',), ('Delft',), ('Heerlen',), ('Alkmaar',), ('Tirana',), ('Andorra la Vella',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Bruxelles [Brussel]',), ('Brugge',), ('Schaerbeek',), ('Namur',), ('Mons',), ('Sarajevo',), ('Banja Luka',), ('Zenica',), ('Sofija',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Stara Zagora',), ('Pleven',), ('Sliven',), ('Dobric',), ('Šumen',), ('Madrid',), ('Barcelona',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('Málaga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('Córdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gijón',), ('L´Hospitalet de Llobregat',), ('Granada',), ('A Coruña (La Coruña)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('Móstoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iruña]',), ('Donostia-San Sebastián',), ('Cartagena',), ('Leganés',), ('Fuenlabrada',), ('Almería',), ('Terrassa',), ('Alcalá de Henares',), ('Burgos',), ('Salamanca',), ('Albacete',), ('Getafe',), ('Cádiz',), ('Alcorcón',), ('Huelva',), ('León',), ('Castellón de la Plana [Castell',), ('Badajoz',), ('[San Cristóbal de] la Laguna',), ('Logroño',), ('Santa Coloma de Gramenet',), ('Tarragona',), ('Lleida (Lérida)',), ('Jaén',), ('Ourense (Orense)',), ('Mataró',), ('Algeciras',), ('Marbella',), ('Barakaldo',), ('Dos Hermanas',), ('Santiago de Compostela',), ('Torrejón de Ardoz',), ('Tórshavn',), ('Longyearbyen',), ('Reykjavík',), ('Roma',), ('Milano',), ('Napoli',), ('Torino',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Perugia',), ('Foggia',), ('Reggio nell´ Emilia',), ('Salerno',), ('Ravenna',), ('Ferrara',), ('Rimini',), ('Syrakusa',), ('Sassari',), ('Monza',), ('Bergamo',), ('Pescara',), ('Latina',), ('Vicenza',), ('Terni',), ('Forlì',), ('Trento',), ('Novara',), ('Piacenza',), ('Ancona',), ('Lecce',), ('Bolzano',), ('Catanzaro',), ('La Spezia',), ('Udine',), ('Torre del Greco',), ('Andria',), ('Brindisi',), ('Giugliano in Campania',), ('Pisa',), ('Barletta',), ('Arezzo',), ('Alessandria',), ('Cesena',), ('Pesaro',), ('Wien',), ('Graz',), ('Linz',), ('Salzburg',), ('Innsbruck',), ('Klagenfurt',), ('Beograd',), ('Novi Sad',), ('Niš',), ('Priština',), ('Kragujevac',), ('Podgorica',), ('Subotica',), ('Prizren',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Patras',), ('Peristerion',), ('Herakleion',), ('Kallithea',), ('Larisa',), ('Zagreb',), ('Split',), ('Rijeka',), ('Osijek',), ('Riga',), ('Daugavpils',), ('Liepaja',), ('Schaan',), ('Vaduz',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('Šiauliai',), ('Panevezys',), ('Luxembourg [Luxemburg/Lëtzebuerg]',), ('Skopje',), ('Chisinau',), ('Tiraspol',), ('Balti',), ('Bender (Tîghina)',), ('Monte-Carlo',), ('Monaco-Ville',), ('Oslo',), ('Bergen',), ('Trondheim',), ('Stavanger',), ('Bærum',), ('Lisboa',), ('Porto',), ('Amadora',), ('Coímbra',), ('Braga',), ('Warszawa',), ('Lódz',), ('Kraków',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzeszów',), ('Ruda Slaska',), ('Rybnik',), ('Walbrzych',), ('Tychy',), ('Dabrowa Górnicza',), ('Plock',), ('Elblag',), ('Opole',), ('Gorzów Wielkopolski',), ('Wloclawek',), ('Chorzów',), ('Tarnów',), ('Zielona Góra',), ('Koszalin',), ('Legnica',), ('Kalisz',), ('Grudziadz',), ('Slupsk',), ('Jastrzebie-Zdrój',), ('Jaworzno',), ('Jelenia Góra',), ('Paris',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-Étienne',), ('Toulon',), ('Grenoble',), ('Angers',), ('Dijon',), ('Brest',), ('Le Mans',), ('Clermont-Ferrand',), ('Amiens',), ('Aix-en-Provence',), ('Limoges',), ('Nîmes',), ('Tours',), ('Villeurbanne',), ('Metz',), ('Besançon',), ('Caen',), ('Orléans',), ('Mulhouse',), ('Rouen',), ('Boulogne-Billancourt',), ('Perpignan',), ('Nancy',), ('Roubaix',), ('Argenteuil',), ('Tourcoing',), ('Montreuil',), ('Bucuresti',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('Târgu Mures',), ('Baia Mare',), ('Buzau',), ('Satu Mare',), ('Botosani',), ('Piatra Neamt',), ('Râmnicu Vâlcea',), ('Suceava',), ('Drobeta-Turnu Severin',), ('Târgoviste',), ('Focsani',), ('Târgu Jiu',), ('Tulcea',), ('Resita',), ('Stockholm',), ('Gothenburg [Göteborg]',), ('Malmö',), ('Uppsala',), ('Linköping',), ('Västerås',), ('Örebro',), ('Norrköping',), ('Helsingborg',), ('Jönköping',), ('Umeå',), ('Lund',), ('Borås',), ('Sundsvall',), ('Gävle',), ('Berlin',), ('Hamburg',), ('Munich [München]',), ('Köln',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('Düsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('Nürnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('Münster',), ('Mönchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('Lübeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbrücken',), ('Mainz',), ('Hamm',), ('Herne',), ('Mülheim an der Ruhr',), ('Solingen',), ('Osnabrück',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Oldenburg',), ('Neuss',), ('Heidelberg',), ('Darmstadt',), ('Paderborn',), ('Potsdam',), ('Würzburg',), ('Regensburg',), ('Recklinghausen',), ('Göttingen',), ('Bremerhaven',), ('Wolfsburg',), ('Bottrop',), ('Remscheid',), ('Heilbronn',), ('Pforzheim',), ('Offenbach am Main',), ('Ulm',), ('Ingolstadt',), ('Gera',), ('Salzgitter',), ('Cottbus',), ('Reutlingen',), ('Fürth',), ('Siegen',), ('Koblenz',), ('Moers',), ('Bergisch Gladbach',), ('Zwickau',), ('Hildesheim',), ('Witten',), ('Schwerin',), ('Erlangen',), ('Kaiserslautern',), ('Trier',), ('Jena',), ('Iserlohn',), ('Gütersloh',), ('Marl',), ('Lünen',), ('Düren',), ('Ratingen',), ('Velbert',), ('Esslingen am Neckar',), ('Serravalle',), ('San Marino',), ('Bratislava',), ('Košice',), ('Prešov',), ('Ljubljana',), ('Maribor',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [Åbo]',), ('Oulu',), ('Lahti',), ('Zürich',), ('Geneve',), ('Basel',), ('Bern',), ('Lausanne',), ('København',), ('Århus',), ('Odense',), ('Aalborg',), ('Frederiksberg',), ('Praha',), ('Brno',), ('Ostrava',), ('Plzen',), ('Olomouc',), ('Liberec',), ('Ceské Budejovice',), ('Hradec Králové',), ('Ústí nad Labem',), ('Pardubice',), ('Kyiv',), ('Harkova [Harkiv]',), ('Dnipropetrovsk',), ('Donetsk',), ('Odesa',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('Tšernigiv',), ('Tšerkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('Tšernivtsi',), ('Rivne',), ('Krementšuk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kertš',), ('Nikopol',), ('Berdjansk',), ('Pavlograd',), ('Sjeverodonetsk',), ('Slovjansk',), ('Uzgorod',), ('Altševsk',), ('Lysytšansk',), ('Jevpatorija',), ('Kamjanets-Podilskyi',), ('Jenakijeve',), ('Krasnyi Lutš',), ('Stahanov',), ('Oleksandrija',), ('Konotop',), ('Kostjantynivka',), ('Berdytšiv',), ('Izmajil',), ('Šostka',), ('Uman',), ('Brovary',), ('Mukatševe',), ('Budapest',), ('Debrecen',), ('Miskolc',), ('Szeged',), ('Pécs',), ('Györ',), ('Nyiregyháza',), ('Kecskemét',), ('Székesfehérvár',), ('Minsk',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Bobruisk',), ('Baranovitši',), ('Borisov',), ('Pinsk',), ('Orša',), ('Mozyr',), ('Novopolotsk',), ('Lida',), ('Soligorsk',), ('Molodetšno',), ('Città del Vaticano',), ('Moscow',), ('St Petersburg',), ('Novosibirsk',), ('Nizni Novgorod',), ('Jekaterinburg',), ('Samara',), ('Omsk',), ('Kazan',), ('Ufa',), ('Tšeljabinsk',), ('Rostov-na-Donu',), ('Perm',), ('Volgograd',), ('Voronez',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje Tšelny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('Tšeboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sotši',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahatškala',), ('Tšerepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('Tšita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Joškar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Naltšik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagoveštšensk',), ('Šahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamtšatski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novotšerkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Kovrov',), ('Nahodka',), ('Ussurijsk',), ('Salavat',), ('Mytištši',), ('Kolomna',), ('Elektrostal',), ('Murom',), ('Kolpino',), ('Norilsk',), ('Almetjevsk',), ('Novomoskovsk',), ('Dimitrovgrad',), ('Pervouralsk',), ('Himki',), ('Balašiha',), ('Nevinnomyssk',), ('Pjatigorsk',), ('Korolev',), ('Serpuhov',), ('Odintsovo',), ('Orehovo-Zujevo',), ('Kamyšin',), ('Novotšeboksarsk',), ('Tšerkessk',), ('Atšinsk',), ('Magadan',), ('Mitšurinsk',), ('Kislovodsk',), ('Jelets',), ('Seversk',), ('Noginsk',), ('Velikije Luki',), ('Novokuibyševsk',), ('Neftekamsk',), ('Leninsk-Kuznetski',), ('Oktjabrski',), ('Sergijev Posad',), ('Arzamas',), ('Kiseljovsk',), ('Novotroitsk',), ('Obninsk',), ('Kansk',), ('Glazov',), ('Solikamsk',), ('Sarapul',), ('Ust-Ilimsk',), ('Štšolkovo',), ('Mezduretšensk',), ('Usolje-Sibirskoje',), ('Elista',), ('Novošahtinsk',), ('Votkinsk',), ('Kyzyl',), ('Serov',), ('Zelenodolsk',), ('Zeleznodoroznyi',), ('Kinešma',), ('Kuznetsk',), ('Uhta',), ('Jessentuki',), ('Tobolsk',), ('Neftejugansk',), ('Bataisk',), ('Nojabrsk',), ('Balašov',), ('Zeleznogorsk',), ('Zukovski',), ('Anzero-Sudzensk',), ('Bugulma',), ('Novouralsk',), ('Puškin',), ('Vorkuta',), ('Derbent',), ('Kirovo-Tšepetsk',), ('Krasnogorsk',), ('Klin',), ('Tšaikovski',), ('Novyi Urengoi',), ('Tallinn',), ('Tartu',)]

===== Eval Round 786 =====
Database         : world_1
Prediction SQL   : SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Europe' AND NOT EXISTS (SELECT 1 FROM countrylanguage WHERE CountryCode = T2.Code AND Language = 'English')
Gold SQL         : SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Tirana',), ('Andorra la Vella',), ('Wien',), ('Graz',), ('Linz',), ('Salzburg',), ('Innsbruck',), ('Klagenfurt',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Bruxelles [Brussel]',), ('Brugge',), ('Schaerbeek',), ('Namur',), ('Mons',), ('Sofija',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Stara Zagora',), ('Pleven',), ('Sliven',), ('Dobric',), ('Šumen',), ('Sarajevo',), ('Banja Luka',), ('Zenica',), ('Minsk',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Brest',), ('Bobruisk',), ('Baranovitši',), ('Borisov',), ('Pinsk',), ('Orša',), ('Mozyr',), ('Novopolotsk',), ('Lida',), ('Soligorsk',), ('Molodetšno',), ('Zürich',), ('Geneve',), ('Basel',), ('Bern',), ('Lausanne',), ('Praha',), ('Brno',), ('Ostrava',), ('Plzen',), ('Olomouc',), ('Liberec',), ('Ceské Budejovice',), ('Hradec Králové',), ('Ústí nad Labem',), ('Pardubice',), ('Berlin',), ('Hamburg',), ('Munich [München]',), ('Köln',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('Düsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('Nürnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('Münster',), ('Mönchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('Lübeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbrücken',), ('Mainz',), ('Hamm',), ('Herne',), ('Mülheim an der Ruhr',), ('Solingen',), ('Osnabrück',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Oldenburg',), ('Neuss',), ('Heidelberg',), ('Darmstadt',), ('Paderborn',), ('Potsdam',), ('Würzburg',), ('Regensburg',), ('Recklinghausen',), ('Göttingen',), ('Bremerhaven',), ('Wolfsburg',), ('Bottrop',), ('Remscheid',), ('Heilbronn',), ('Pforzheim',), ('Offenbach am Main',), ('Ulm',), ('Ingolstadt',), ('Gera',), ('Salzgitter',), ('Cottbus',), ('Reutlingen',), ('Fürth',), ('Siegen',), ('Koblenz',), ('Moers',), ('Bergisch Gladbach',), ('Zwickau',), ('Hildesheim',), ('Witten',), ('Schwerin',), ('Erlangen',), ('Kaiserslautern',), ('Trier',), ('Jena',), ('Iserlohn',), ('Gütersloh',), ('Marl',), ('Lünen',), ('Düren',), ('Ratingen',), ('Velbert',), ('Esslingen am Neckar',), ('Madrid',), ('Barcelona',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('Málaga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('Córdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gijón',), ('L´Hospitalet de Llobregat',), ('Granada',), ('A Coruña (La Coruña)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('Móstoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iruña]',), ('Donostia-San Sebastián',), ('Cartagena',), ('Leganés',), ('Fuenlabrada',), ('Almería',), ('Terrassa',), ('Alcalá de Henares',), ('Burgos',), ('Salamanca',), ('Albacete',), ('Getafe',), ('Cádiz',), ('Alcorcón',), ('Huelva',), ('León',), ('Castellón de la Plana [Castell',), ('Badajoz',), ('[San Cristóbal de] la Laguna',), ('Logroño',), ('Santa Coloma de Gramenet',), ('Tarragona',), ('Lleida (Lérida)',), ('Jaén',), ('Ourense (Orense)',), ('Mataró',), ('Algeciras',), ('Marbella',), ('Barakaldo',), ('Dos Hermanas',), ('Santiago de Compostela',), ('Torrejón de Ardoz',), ('Tallinn',), ('Tartu',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [Åbo]',), ('Oulu',), ('Lahti',), ('Paris',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-Étienne',), ('Toulon',), ('Grenoble',), ('Angers',), ('Dijon',), ('Brest',), ('Le Mans',), ('Clermont-Ferrand',), ('Amiens',), ('Aix-en-Provence',), ('Limoges',), ('Nîmes',), ('Tours',), ('Villeurbanne',), ('Metz',), ('Besançon',), ('Caen',), ('Orléans',), ('Mulhouse',), ('Rouen',), ('Boulogne-Billancourt',), ('Perpignan',), ('Nancy',), ('Roubaix',), ('Argenteuil',), ('Tourcoing',), ('Montreuil',), ('Tórshavn',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Patras',), ('Peristerion',), ('Herakleion',), ('Kallithea',), ('Larisa',), ('Zagreb',), ('Split',), ('Rijeka',), ('Osijek',), ('Budapest',), ('Debrecen',), ('Miskolc',), ('Szeged',), ('Pécs',), ('Györ',), ('Nyiregyháza',), ('Kecskemét',), ('Székesfehérvár',), ('Roma',), ('Milano',), ('Napoli',), ('Torino',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Perugia',), ('Foggia',), ('Reggio nell´ Emilia',), ('Salerno',), ('Ravenna',), ('Ferrara',), ('Rimini',), ('Syrakusa',), ('Sassari',), ('Monza',), ('Bergamo',), ('Pescara',), ('Latina',), ('Vicenza',), ('Terni',), ('Forlì',), ('Trento',), ('Novara',), ('Piacenza',), ('Ancona',), ('Lecce',), ('Bolzano',), ('Catanzaro',), ('La Spezia',), ('Udine',), ('Torre del Greco',), ('Andria',), ('Brindisi',), ('Giugliano in Campania',), ('Pisa',), ('Barletta',), ('Arezzo',), ('Alessandria',), ('Cesena',), ('Pesaro',), ('Schaan',), ('Vaduz',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('Šiauliai',), ('Panevezys',), ('Luxembourg [Luxemburg/Lëtzebuerg]',), ('Riga',), ('Daugavpils',), ('Liepaja',), ('Chisinau',), ('Tiraspol',), ('Balti',), ('Bender (Tîghina)',), ('Skopje',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Apeldoorn',), ('Nijmegen',), ('Enschede',), ('Haarlem',), ('Almere',), ('Arnhem',), ('Zaanstad',), ('´s-Hertogenbosch',), ('Amersfoort',), ('Maastricht',), ('Dordrecht',), ('Leiden',), ('Haarlemmermeer',), ('Zoetermeer',), ('Emmen',), ('Zwolle',), ('Ede',), ('Delft',), ('Heerlen',), ('Alkmaar',), ('Warszawa',), ('Lódz',), ('Kraków',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzeszów',), ('Ruda Slaska',), ('Rybnik',), ('Walbrzych',), ('Tychy',), ('Dabrowa Górnicza',), ('Plock',), ('Elblag',), ('Opole',), ('Gorzów Wielkopolski',), ('Wloclawek',), ('Chorzów',), ('Tarnów',), ('Zielona Góra',), ('Koszalin',), ('Legnica',), ('Kalisz',), ('Grudziadz',), ('Slupsk',), ('Jastrzebie-Zdrój',), ('Jaworzno',), ('Jelenia Góra',), ('Lisboa',), ('Porto',), ('Amadora',), ('Coímbra',), ('Braga',), ('Bucuresti',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('Târgu Mures',), ('Baia Mare',), ('Buzau',), ('Satu Mare',), ('Botosani',), ('Piatra Neamt',), ('Râmnicu Vâlcea',), ('Suceava',), ('Drobeta-Turnu Severin',), ('Târgoviste',), ('Focsani',), ('Târgu Jiu',), ('Tulcea',), ('Resita',), ('Moscow',), ('St Petersburg',), ('Novosibirsk',), ('Nizni Novgorod',), ('Jekaterinburg',), ('Samara',), ('Omsk',), ('Kazan',), ('Ufa',), ('Tšeljabinsk',), ('Rostov-na-Donu',), ('Perm',), ('Volgograd',), ('Voronez',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje Tšelny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('Tšeboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sotši',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahatškala',), ('Tšerepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('Tšita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Joškar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Naltšik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagoveštšensk',), ('Šahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamtšatski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novotšerkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Kovrov',), ('Nahodka',), ('Ussurijsk',), ('Salavat',), ('Mytištši',), ('Kolomna',), ('Elektrostal',), ('Murom',), ('Kolpino',), ('Norilsk',), ('Almetjevsk',), ('Novomoskovsk',), ('Dimitrovgrad',), ('Pervouralsk',), ('Himki',), ('Balašiha',), ('Nevinnomyssk',), ('Pjatigorsk',), ('Korolev',), ('Serpuhov',), ('Odintsovo',), ('Orehovo-Zujevo',), ('Kamyšin',), ('Novotšeboksarsk',), ('Tšerkessk',), ('Atšinsk',), ('Magadan',), ('Mitšurinsk',), ('Kislovodsk',), ('Jelets',), ('Seversk',), ('Noginsk',), ('Velikije Luki',), ('Novokuibyševsk',), ('Neftekamsk',), ('Leninsk-Kuznetski',), ('Oktjabrski',), ('Sergijev Posad',), ('Arzamas',), ('Kiseljovsk',), ('Novotroitsk',), ('Obninsk',), ('Kansk',), ('Glazov',), ('Solikamsk',), ('Sarapul',), ('Ust-Ilimsk',), ('Štšolkovo',), ('Mezduretšensk',), ('Usolje-Sibirskoje',), ('Elista',), ('Novošahtinsk',), ('Votkinsk',), ('Kyzyl',), ('Serov',), ('Zelenodolsk',), ('Zeleznodoroznyi',), ('Kinešma',), ('Kuznetsk',), ('Uhta',), ('Jessentuki',), ('Tobolsk',), ('Neftejugansk',), ('Bataisk',), ('Nojabrsk',), ('Balašov',), ('Zeleznogorsk',), ('Zukovski',), ('Anzero-Sudzensk',), ('Bugulma',), ('Zeleznogorsk',), ('Novouralsk',), ('Puškin',), ('Vorkuta',), ('Derbent',), ('Kirovo-Tšepetsk',), ('Krasnogorsk',), ('Klin',), ('Tšaikovski',), ('Novyi Urengoi',), ('Longyearbyen',), ('Serravalle',), ('San Marino',), ('Bratislava',), ('Košice',), ('Prešov',), ('Ljubljana',), ('Maribor',), ('Stockholm',), ('Gothenburg [Göteborg]',), ('Malmö',), ('Uppsala',), ('Linköping',), ('Västerås',), ('Örebro',), ('Norrköping',), ('Helsingborg',), ('Jönköping',), ('Umeå',), ('Lund',), ('Borås',), ('Sundsvall',), ('Gävle',), ('Kyiv',), ('Harkova [Harkiv]',), ('Dnipropetrovsk',), ('Donetsk',), ('Odesa',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('Tšernigiv',), ('Tšerkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('Tšernivtsi',), ('Rivne',), ('Krementšuk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kertš',), ('Nikopol',), ('Berdjansk',), ('Pavlograd',), ('Sjeverodonetsk',), ('Slovjansk',), ('Uzgorod',), ('Altševsk',), ('Lysytšansk',), ('Jevpatorija',), ('Kamjanets-Podilskyi',), ('Jenakijeve',), ('Krasnyi Lutš',), ('Stahanov',), ('Oleksandrija',), ('Konotop',), ('Kostjantynivka',), ('Berdytšiv',), ('Izmajil',), ('Šostka',), ('Uman',), ('Brovary',), ('Mukatševe',), ('Città del Vaticano',), ('Beograd',), ('Novi Sad',), ('Niš',), ('Priština',), ('Kragujevac',), ('Podgorica',), ('Subotica',), ('Prizren',)]
Gold Output      : [('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Apeldoorn',), ('Nijmegen',), ('Enschede',), ('Haarlem',), ('Almere',), ('Arnhem',), ('Zaanstad',), ('´s-Hertogenbosch',), ('Amersfoort',), ('Maastricht',), ('Dordrecht',), ('Leiden',), ('Haarlemmermeer',), ('Zoetermeer',), ('Emmen',), ('Zwolle',), ('Ede',), ('Delft',), ('Heerlen',), ('Alkmaar',), ('Tirana',), ('Andorra la Vella',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Bruxelles [Brussel]',), ('Brugge',), ('Schaerbeek',), ('Namur',), ('Mons',), ('Sarajevo',), ('Banja Luka',), ('Zenica',), ('Sofija',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Stara Zagora',), ('Pleven',), ('Sliven',), ('Dobric',), ('Šumen',), ('Madrid',), ('Barcelona',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('Málaga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('Córdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gijón',), ('L´Hospitalet de Llobregat',), ('Granada',), ('A Coruña (La Coruña)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('Móstoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iruña]',), ('Donostia-San Sebastián',), ('Cartagena',), ('Leganés',), ('Fuenlabrada',), ('Almería',), ('Terrassa',), ('Alcalá de Henares',), ('Burgos',), ('Salamanca',), ('Albacete',), ('Getafe',), ('Cádiz',), ('Alcorcón',), ('Huelva',), ('León',), ('Castellón de la Plana [Castell',), ('Badajoz',), ('[San Cristóbal de] la Laguna',), ('Logroño',), ('Santa Coloma de Gramenet',), ('Tarragona',), ('Lleida (Lérida)',), ('Jaén',), ('Ourense (Orense)',), ('Mataró',), ('Algeciras',), ('Marbella',), ('Barakaldo',), ('Dos Hermanas',), ('Santiago de Compostela',), ('Torrejón de Ardoz',), ('Tórshavn',), ('Longyearbyen',), ('Reykjavík',), ('Roma',), ('Milano',), ('Napoli',), ('Torino',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Perugia',), ('Foggia',), ('Reggio nell´ Emilia',), ('Salerno',), ('Ravenna',), ('Ferrara',), ('Rimini',), ('Syrakusa',), ('Sassari',), ('Monza',), ('Bergamo',), ('Pescara',), ('Latina',), ('Vicenza',), ('Terni',), ('Forlì',), ('Trento',), ('Novara',), ('Piacenza',), ('Ancona',), ('Lecce',), ('Bolzano',), ('Catanzaro',), ('La Spezia',), ('Udine',), ('Torre del Greco',), ('Andria',), ('Brindisi',), ('Giugliano in Campania',), ('Pisa',), ('Barletta',), ('Arezzo',), ('Alessandria',), ('Cesena',), ('Pesaro',), ('Wien',), ('Graz',), ('Linz',), ('Salzburg',), ('Innsbruck',), ('Klagenfurt',), ('Beograd',), ('Novi Sad',), ('Niš',), ('Priština',), ('Kragujevac',), ('Podgorica',), ('Subotica',), ('Prizren',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Patras',), ('Peristerion',), ('Herakleion',), ('Kallithea',), ('Larisa',), ('Zagreb',), ('Split',), ('Rijeka',), ('Osijek',), ('Riga',), ('Daugavpils',), ('Liepaja',), ('Schaan',), ('Vaduz',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('Šiauliai',), ('Panevezys',), ('Luxembourg [Luxemburg/Lëtzebuerg]',), ('Skopje',), ('Chisinau',), ('Tiraspol',), ('Balti',), ('Bender (Tîghina)',), ('Monte-Carlo',), ('Monaco-Ville',), ('Oslo',), ('Bergen',), ('Trondheim',), ('Stavanger',), ('Bærum',), ('Lisboa',), ('Porto',), ('Amadora',), ('Coímbra',), ('Braga',), ('Warszawa',), ('Lódz',), ('Kraków',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzeszów',), ('Ruda Slaska',), ('Rybnik',), ('Walbrzych',), ('Tychy',), ('Dabrowa Górnicza',), ('Plock',), ('Elblag',), ('Opole',), ('Gorzów Wielkopolski',), ('Wloclawek',), ('Chorzów',), ('Tarnów',), ('Zielona Góra',), ('Koszalin',), ('Legnica',), ('Kalisz',), ('Grudziadz',), ('Slupsk',), ('Jastrzebie-Zdrój',), ('Jaworzno',), ('Jelenia Góra',), ('Paris',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-Étienne',), ('Toulon',), ('Grenoble',), ('Angers',), ('Dijon',), ('Brest',), ('Le Mans',), ('Clermont-Ferrand',), ('Amiens',), ('Aix-en-Provence',), ('Limoges',), ('Nîmes',), ('Tours',), ('Villeurbanne',), ('Metz',), ('Besançon',), ('Caen',), ('Orléans',), ('Mulhouse',), ('Rouen',), ('Boulogne-Billancourt',), ('Perpignan',), ('Nancy',), ('Roubaix',), ('Argenteuil',), ('Tourcoing',), ('Montreuil',), ('Bucuresti',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('Târgu Mures',), ('Baia Mare',), ('Buzau',), ('Satu Mare',), ('Botosani',), ('Piatra Neamt',), ('Râmnicu Vâlcea',), ('Suceava',), ('Drobeta-Turnu Severin',), ('Târgoviste',), ('Focsani',), ('Târgu Jiu',), ('Tulcea',), ('Resita',), ('Stockholm',), ('Gothenburg [Göteborg]',), ('Malmö',), ('Uppsala',), ('Linköping',), ('Västerås',), ('Örebro',), ('Norrköping',), ('Helsingborg',), ('Jönköping',), ('Umeå',), ('Lund',), ('Borås',), ('Sundsvall',), ('Gävle',), ('Berlin',), ('Hamburg',), ('Munich [München]',), ('Köln',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('Düsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('Nürnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('Münster',), ('Mönchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('Lübeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbrücken',), ('Mainz',), ('Hamm',), ('Herne',), ('Mülheim an der Ruhr',), ('Solingen',), ('Osnabrück',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Oldenburg',), ('Neuss',), ('Heidelberg',), ('Darmstadt',), ('Paderborn',), ('Potsdam',), ('Würzburg',), ('Regensburg',), ('Recklinghausen',), ('Göttingen',), ('Bremerhaven',), ('Wolfsburg',), ('Bottrop',), ('Remscheid',), ('Heilbronn',), ('Pforzheim',), ('Offenbach am Main',), ('Ulm',), ('Ingolstadt',), ('Gera',), ('Salzgitter',), ('Cottbus',), ('Reutlingen',), ('Fürth',), ('Siegen',), ('Koblenz',), ('Moers',), ('Bergisch Gladbach',), ('Zwickau',), ('Hildesheim',), ('Witten',), ('Schwerin',), ('Erlangen',), ('Kaiserslautern',), ('Trier',), ('Jena',), ('Iserlohn',), ('Gütersloh',), ('Marl',), ('Lünen',), ('Düren',), ('Ratingen',), ('Velbert',), ('Esslingen am Neckar',), ('Serravalle',), ('San Marino',), ('Bratislava',), ('Košice',), ('Prešov',), ('Ljubljana',), ('Maribor',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [Åbo]',), ('Oulu',), ('Lahti',), ('Zürich',), ('Geneve',), ('Basel',), ('Bern',), ('Lausanne',), ('København',), ('Århus',), ('Odense',), ('Aalborg',), ('Frederiksberg',), ('Praha',), ('Brno',), ('Ostrava',), ('Plzen',), ('Olomouc',), ('Liberec',), ('Ceské Budejovice',), ('Hradec Králové',), ('Ústí nad Labem',), ('Pardubice',), ('Kyiv',), ('Harkova [Harkiv]',), ('Dnipropetrovsk',), ('Donetsk',), ('Odesa',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('Tšernigiv',), ('Tšerkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('Tšernivtsi',), ('Rivne',), ('Krementšuk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kertš',), ('Nikopol',), ('Berdjansk',), ('Pavlograd',), ('Sjeverodonetsk',), ('Slovjansk',), ('Uzgorod',), ('Altševsk',), ('Lysytšansk',), ('Jevpatorija',), ('Kamjanets-Podilskyi',), ('Jenakijeve',), ('Krasnyi Lutš',), ('Stahanov',), ('Oleksandrija',), ('Konotop',), ('Kostjantynivka',), ('Berdytšiv',), ('Izmajil',), ('Šostka',), ('Uman',), ('Brovary',), ('Mukatševe',), ('Budapest',), ('Debrecen',), ('Miskolc',), ('Szeged',), ('Pécs',), ('Györ',), ('Nyiregyháza',), ('Kecskemét',), ('Székesfehérvár',), ('Minsk',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Bobruisk',), ('Baranovitši',), ('Borisov',), ('Pinsk',), ('Orša',), ('Mozyr',), ('Novopolotsk',), ('Lida',), ('Soligorsk',), ('Molodetšno',), ('Città del Vaticano',), ('Moscow',), ('St Petersburg',), ('Novosibirsk',), ('Nizni Novgorod',), ('Jekaterinburg',), ('Samara',), ('Omsk',), ('Kazan',), ('Ufa',), ('Tšeljabinsk',), ('Rostov-na-Donu',), ('Perm',), ('Volgograd',), ('Voronez',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje Tšelny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('Tšeboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sotši',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahatškala',), ('Tšerepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('Tšita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Joškar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Naltšik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagoveštšensk',), ('Šahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamtšatski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novotšerkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Kovrov',), ('Nahodka',), ('Ussurijsk',), ('Salavat',), ('Mytištši',), ('Kolomna',), ('Elektrostal',), ('Murom',), ('Kolpino',), ('Norilsk',), ('Almetjevsk',), ('Novomoskovsk',), ('Dimitrovgrad',), ('Pervouralsk',), ('Himki',), ('Balašiha',), ('Nevinnomyssk',), ('Pjatigorsk',), ('Korolev',), ('Serpuhov',), ('Odintsovo',), ('Orehovo-Zujevo',), ('Kamyšin',), ('Novotšeboksarsk',), ('Tšerkessk',), ('Atšinsk',), ('Magadan',), ('Mitšurinsk',), ('Kislovodsk',), ('Jelets',), ('Seversk',), ('Noginsk',), ('Velikije Luki',), ('Novokuibyševsk',), ('Neftekamsk',), ('Leninsk-Kuznetski',), ('Oktjabrski',), ('Sergijev Posad',), ('Arzamas',), ('Kiseljovsk',), ('Novotroitsk',), ('Obninsk',), ('Kansk',), ('Glazov',), ('Solikamsk',), ('Sarapul',), ('Ust-Ilimsk',), ('Štšolkovo',), ('Mezduretšensk',), ('Usolje-Sibirskoje',), ('Elista',), ('Novošahtinsk',), ('Votkinsk',), ('Kyzyl',), ('Serov',), ('Zelenodolsk',), ('Zeleznodoroznyi',), ('Kinešma',), ('Kuznetsk',), ('Uhta',), ('Jessentuki',), ('Tobolsk',), ('Neftejugansk',), ('Bataisk',), ('Nojabrsk',), ('Balašov',), ('Zeleznogorsk',), ('Zukovski',), ('Anzero-Sudzensk',), ('Bugulma',), ('Novouralsk',), ('Puškin',), ('Vorkuta',), ('Derbent',), ('Kirovo-Tšepetsk',), ('Krasnogorsk',), ('Klin',), ('Tšaikovski',), ('Novyi Urengoi',), ('Tallinn',), ('Tartu',)]

===== Eval Round 787 =====
Database         : world_1
Prediction SQL   : SELECT DISTINCT T1.Name FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code INNER JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T2.Continent = 'Asia' AND T3.Language = 'Chinese' AND T3.IsOfficial = 'TRUE'
Gold SQL         : select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  "asia"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 788 =====
Database         : world_1
Prediction SQL   : SELECT T1.Name FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia' AND EXISTS (SELECT 1 FROM countrylanguage WHERE countrylanguage.CountryCode = T2.Code AND countrylanguage.Language = 'Chinese')
Gold SQL         : SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  "Asia"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Bandar Seri Begawan',), ('Shanghai',), ('Peking',), ('Chongqing',), ('Tianjin',), ('Wuhan',), ('Harbin',), ('Shenyang',), ('Kanton [Guangzhou]',), ('Chengdu',), ('Nanking [Nanjing]',), ('Changchun',), ('Xi´an',), ('Dalian',), ('Qingdao',), ('Jinan',), ('Hangzhou',), ('Zhengzhou',), ('Shijiazhuang',), ('Taiyuan',), ('Kunming',), ('Changsha',), ('Nanchang',), ('Fuzhou',), ('Lanzhou',), ('Guiyang',), ('Ningbo',), ('Hefei',), ('Urumtši [Ürümqi]',), ('Anshan',), ('Fushun',), ('Nanning',), ('Zibo',), ('Qiqihar',), ('Jilin',), ('Tangshan',), ('Baotou',), ('Shenzhen',), ('Hohhot',), ('Handan',), ('Wuxi',), ('Xuzhou',), ('Datong',), ('Yichun',), ('Benxi',), ('Luoyang',), ('Suzhou',), ('Xining',), ('Huainan',), ('Jixi',), ('Daqing',), ('Fuxin',), ('Amoy [Xiamen]',), ('Liuzhou',), ('Shantou',), ('Jinzhou',), ('Mudanjiang',), ('Yinchuan',), ('Changzhou',), ('Zhangjiakou',), ('Dandong',), ('Hegang',), ('Kaifeng',), ('Jiamusi',), ('Liaoyang',), ('Hengyang',), ('Baoding',), ('Hunjiang',), ('Xinxiang',), ('Huangshi',), ('Haikou',), ('Yantai',), ('Bengbu',), ('Xiangtan',), ('Weifang',), ('Wuhu',), ('Pingxiang',), ('Yingkou',), ('Anyang',), ('Panzhihua',), ('Pingdingshan',), ('Xiangfan',), ('Zhuzhou',), ('Jiaozuo',), ('Wenzhou',), ('Zhangjiang',), ('Zigong',), ('Shuangyashan',), ('Zaozhuang',), ('Yakeshi',), ('Yichang',), ('Zhenjiang',), ('Huaibei',), ('Qinhuangdao',), ('Guilin',), ('Liupanshui',), ('Panjin',), ('Yangquan',), ('Jinxi',), ('Liaoyuan',), ('Lianyungang',), ('Xianyang',), ('Tai´an',), ('Chifeng',), ('Shaoguan',), ('Nantong',), ('Leshan',), ('Baoji',), ('Linyi',), ('Tonghua',), ('Siping',), ('Changzhi',), ('Tengzhou',), ('Chaozhou',), ('Yangzhou',), ('Dongwan',), ('Ma´anshan',), ('Foshan',), ('Yueyang',), ('Xingtai',), ('Changde',), ('Shihezi',), ('Yancheng',), ('Jiujiang',), ('Dongying',), ('Shashi',), ('Xintai',), ('Jingdezhen',), ('Tongchuan',), ('Zhongshan',), ('Shiyan',), ('Tieli',), ('Jining',), ('Wuhai',), ('Mianyang',), ('Luzhou',), ('Zunyi',), ('Shizuishan',), ('Neijiang',), ('Tongliao',), ('Tieling',), ('Wafangdian',), ('Anqing',), ('Shaoyang',), ('Laiwu',), ('Chengde',), ('Tianshui',), ('Nanyang',), ('Cangzhou',), ('Yibin',), ('Huaiyin',), ('Dunhua',), ('Yanji',), ('Jiangmen',), ('Tongling',), ('Suihua',), ('Gongziling',), ('Xiantao',), ('Chaoyang',), ('Ganzhou',), ('Huzhou',), ('Baicheng',), ('Shangzi',), ('Yangjiang',), ('Qitaihe',), ('Gejiu',), ('Jiangyin',), ('Hebi',), ('Jiaxing',), ('Wuzhou',), ('Meihekou',), ('Xuchang',), ('Liaocheng',), ('Haicheng',), ('Qianjiang',), ('Baiyin',), ('Bei´an',), ('Yixing',), ('Laizhou',), ('Qaramay',), ('Acheng',), ('Dezhou',), ('Nanping',), ('Zhaoqing',), ('Beipiao',), ('Fengcheng',), ('Fuyu',), ('Xinyang',), ('Dongtai',), ('Yuci',), ('Honghu',), ('Ezhou',), ('Heze',), ('Daxian',), ('Linfen',), ('Tianmen',), ('Yiyang',), ('Quanzhou',), ('Rizhao',), ('Deyang',), ('Guangyuan',), ('Changshu',), ('Zhangzhou',), ('Hailar',), ('Nanchong',), ('Jiutai',), ('Zhaodong',), ('Shaoxing',), ('Fuyang',), ('Maoming',), ('Qujing',), ('Ghulja',), ('Jiaohe',), ('Puyang',), ('Huadian',), ('Jiangyou',), ('Qashqar',), ('Anshun',), ('Fuling',), ('Xinyu',), ('Hanzhong',), ('Danyang',), ('Chenzhou',), ('Xiaogan',), ('Shangqiu',), ('Zhuhai',), ('Qingyuan',), ('Aqsu',), ('Jining',), ('Xiaoshan',), ('Zaoyang',), ('Xinghua',), ('Hami',), ('Huizhou',), ('Jinmen',), ('Sanming',), ('Ulanhot',), ('Korla',), ('Wanxian',), ('Rui´an',), ('Zhoushan',), ('Liangcheng',), ('Jiaozhou',), ('Taizhou',), ('Suzhou',), ('Yichun',), ('Taonan',), ('Pingdu',), ('Ji´an',), ('Longkou',), ('Langfang',), ('Zhoukou',), ('Suining',), ('Yulin',), ('Jinhua',), ('Liu´an',), ('Shuangcheng',), ('Suizhou',), ('Ankang',), ('Weinan',), ('Longjing',), ('Da´an',), ('Lengshuijiang',), ('Laiyang',), ('Xianning',), ('Dali',), ('Anda',), ('Jincheng',), ('Longyan',), ('Xichang',), ('Wendeng',), ('Hailun',), ('Binzhou',), ('Linhe',), ('Wuwei',), ('Duyun',), ('Mishan',), ('Shangrao',), ('Changji',), ('Meixian',), ('Yushu',), ('Tiefa',), ('Huai´an',), ('Leiyang',), ('Zalantun',), ('Weihai',), ('Loudi',), ('Qingzhou',), ('Qidong',), ('Huaihua',), ('Luohe',), ('Chuzhou',), ('Kaiyuan',), ('Linqing',), ('Chaohu',), ('Laohekou',), ('Dujiangyan',), ('Zhumadian',), ('Linchuan',), ('Jiaonan',), ('Sanmenxia',), ('Heyuan',), ('Manzhouli',), ('Lhasa',), ('Lianyuan',), ('Kuytun',), ('Puqi',), ('Hongjiang',), ('Qinzhou',), ('Renqiu',), ('Yuyao',), ('Guigang',), ('Kaili',), ('Yan´an',), ('Beihai',), ('Xuangzhou',), ('Quzhou',), ('Yong´an',), ('Zixing',), ('Liyang',), ('Yizheng',), ('Yumen',), ('Liling',), ('Yuncheng',), ('Shanwei',), ('Cixi',), ('Yuanjiang',), ('Bozhou',), ('Jinchang',), ('Fu´an',), ('Suqian',), ('Shishou',), ('Hengshui',), ('Danjiangkou',), ('Fujin',), ('Sanya',), ('Guangshui',), ('Huangshan',), ('Xingcheng',), ('Zhucheng',), ('Kunshan',), ('Haining',), ('Pingliang',), ('Fuqing',), ('Xinzhou',), ('Jieyang',), ('Zhangjiagang',), ('Tong Xian',), ('Ya´an',), ('Jinzhou',), ('Emeishan',), ('Enshi',), ('Bose',), ('Yuzhou',), ('Kaiyuan',), ('Tumen',), ('Putian',), ('Linhai',), ('Xilin Hot',), ('Shaowu',), ('Junan',), ('Huaying',), ('Pingyi',), ('Huangyan',), ('Tokyo',), ('Jokohama [Yokohama]',), ('Osaka',), ('Nagoya',), ('Sapporo',), ('Kioto',), ('Kobe',), ('Fukuoka',), ('Kawasaki',), ('Hiroshima',), ('Kitakyushu',), ('Sendai',), ('Chiba',), ('Sakai',), ('Kumamoto',), ('Okayama',), ('Sagamihara',), ('Hamamatsu',), ('Kagoshima',), ('Funabashi',), ('Higashiosaka',), ('Hachioji',), ('Niigata',), ('Amagasaki',), ('Himeji',), ('Shizuoka',), ('Urawa',), ('Matsuyama',), ('Matsudo',), ('Kanazawa',), ('Kawaguchi',), ('Ichikawa',), ('Omiya',), ('Utsunomiya',), ('Oita',), ('Nagasaki',), ('Yokosuka',), ('Kurashiki',), ('Gifu',), ('Hirakata',), ('Nishinomiya',), ('Toyonaka',), ('Wakayama',), ('Fukuyama',), ('Fujisawa',), ('Asahikawa',), ('Machida',), ('Nara',), ('Takatsuki',), ('Iwaki',), ('Nagano',), ('Toyohashi',), ('Toyota',), ('Suita',), ('Takamatsu',), ('Koriyama',), ('Okazaki',), ('Kawagoe',), ('Tokorozawa',), ('Toyama',), ('Kochi',), ('Kashiwa',), ('Akita',), ('Miyazaki',), ('Koshigaya',), ('Naha',), ('Aomori',), ('Hakodate',), ('Akashi',), ('Yokkaichi',), ('Fukushima',), ('Morioka',), ('Maebashi',), ('Kasugai',), ('Otsu',), ('Ichihara',), ('Yao',), ('Ichinomiya',), ('Tokushima',), ('Kakogawa',), ('Ibaraki',), ('Neyagawa',), ('Shimonoseki',), ('Yamagata',), ('Fukui',), ('Hiratsuka',), ('Mito',), ('Sasebo',), ('Hachinohe',), ('Takasaki',), ('Shimizu',), ('Kurume',), ('Fuji',), ('Soka',), ('Fuchu',), ('Chigasaki',), ('Atsugi',), ('Numazu',), ('Ageo',), ('Yamato',), ('Matsumoto',), ('Kure',), ('Takarazuka',), ('Kasukabe',), ('Chofu',), ('Odawara',), ('Kofu',), ('Kushiro',), ('Kishiwada',), ('Hitachi',), ('Nagaoka',), ('Itami',), ('Uji',), ('Suzuka',), ('Hirosaki',), ('Ube',), ('Kodaira',), ('Takaoka',), ('Obihiro',), ('Tomakomai',), ('Saga',), ('Sakura',), ('Kamakura',), ('Mitaka',), ('Izumi',), ('Hino',), ('Hadano',), ('Ashikaga',), ('Tsu',), ('Sayama',), ('Yachiyo',), ('Tsukuba',), ('Tachikawa',), ('Kumagaya',), ('Moriguchi',), ('Otaru',), ('Anjo',), ('Narashino',), ('Oyama',), ('Ogaki',), ('Matsue',), ('Kawanishi',), ('Hitachinaka',), ('Niiza',), ('Nagareyama',), ('Tottori',), ('Tama',), ('Iruma',), ('Ota',), ('Omuta',), ('Komaki',), ('Ome',), ('Kadoma',), ('Yamaguchi',), ('Higashimurayama',), ('Yonago',), ('Matsubara',), ('Musashino',), ('Tsuchiura',), ('Joetsu',), ('Miyakonojo',), ('Misato',), ('Kakamigahara',), ('Daito',), ('Seto',), ('Kariya',), ('Urayasu',), ('Beppu',), ('Niihama',), ('Minoo',), ('Fujieda',), ('Abiko',), ('Nobeoka',), ('Tondabayashi',), ('Ueda',), ('Kashihara',), ('Matsusaka',), ('Isesaki',), ('Zama',), ('Kisarazu',), ('Noda',), ('Ishinomaki',), ('Fujinomiya',), ('Kawachinagano',), ('Imabari',), ('Aizuwakamatsu',), ('Higashihiroshima',), ('Habikino',), ('Ebetsu',), ('Hofu',), ('Kiryu',), ('Okinawa',), ('Yaizu',), ('Toyokawa',), ('Ebina',), ('Asaka',), ('Higashikurume',), ('Ikoma',), ('Kitami',), ('Koganei',), ('Iwatsuki',), ('Mishima',), ('Handa',), ('Muroran',), ('Komatsu',), ('Yatsushiro',), ('Iida',), ('Tokuyama',), ('Kokubunji',), ('Akishima',), ('Iwakuni',), ('Kusatsu',), ('Kuwana',), ('Sanda',), ('Hikone',), ('Toda',), ('Tajimi',), ('Ikeda',), ('Fukaya',), ('Ise',), ('Sakata',), ('Kasuga',), ('Kamagaya',), ('Tsuruoka',), ('Hoya',), ('Nishio',), ('Tokai',), ('Inazawa',), ('Sakado',), ('Isehara',), ('Takasago',), ('Fujimi',), ('Urasoe',), ('Yonezawa',), ('Konan',), ('Yamatokoriyama',), ('Maizuru',), ('Onomichi',), ('Higashimatsuyama',), ('Kimitsu',), ('Isahaya',), ('Kanuma',), ('Izumisano',), ('Kameoka',), ('Mobara',), ('Narita',), ('Kashiwazaki',), ('Tsuyama',), ('Phnom Penh',), ('Battambang',), ('Siem Reap',), ('Seoul',), ('Pusan',), ('Inchon',), ('Taegu',), ('Taejon',), ('Kwangju',), ('Ulsan',), ('Songnam',), ('Puchon',), ('Suwon',), ('Anyang',), ('Chonju',), ('Chongju',), ('Koyang',), ('Ansan',), ('Pohang',), ('Chang-won',), ('Masan',), ('Kwangmyong',), ('Chonan',), ('Chinju',), ('Iksan',), ('Pyongtaek',), ('Kumi',), ('Uijongbu',), ('Kyongju',), ('Kunsan',), ('Cheju',), ('Kimhae',), ('Sunchon',), ('Mokpo',), ('Yong-in',), ('Wonju',), ('Kunpo',), ('Chunchon',), ('Namyangju',), ('Kangnung',), ('Chungju',), ('Andong',), ('Yosu',), ('Kyongsan',), ('Paju',), ('Yangsan',), ('Ichon',), ('Asan',), ('Koje',), ('Kimchon',), ('Nonsan',), ('Kuri',), ('Chong-up',), ('Chechon',), ('Sosan',), ('Shihung',), ('Tong-yong',), ('Kongju',), ('Yongju',), ('Chinhae',), ('Sangju',), ('Poryong',), ('Kwang-yang',), ('Miryang',), ('Hanam',), ('Kimje',), ('Yongchon',), ('Sachon',), ('Uiwang',), ('Naju',), ('Namwon',), ('Tonghae',), ('Mun-gyong',), ('Kuala Lumpur',), ('Ipoh',), ('Johor Baharu',), ('Petaling Jaya',), ('Kelang',), ('Kuala Terengganu',), ('Pinang',), ('Kota Bharu',), ('Kuantan',), ('Taiping',), ('Seremban',), ('Kuching',), ('Sibu',), ('Sandakan',), ('Alor Setar',), ('Selayang Baru',), ('Sungai Petani',), ('Shah Alam',), ('Pyongyang',), ('Hamhung',), ('Chongjin',), ('Nampo',), ('Sinuiju',), ('Wonsan',), ('Phyongsong',), ('Sariwon',), ('Haeju',), ('Kanggye',), ('Kimchaek',), ('Hyesan',), ('Kaesong',), ('Singapore',), ('Bangkok',), ('Nonthaburi',), ('Nakhon Ratchasima',), ('Chiang Mai',), ('Udon Thani',), ('Hat Yai',), ('Khon Kaen',), ('Pak Kret',), ('Nakhon Sawan',), ('Ubon Ratchathani',), ('Songkhla',), ('Nakhon Pathom',), ('Ho Chi Minh City',), ('Hanoi',), ('Haiphong',), ('Da Nang',), ('Biên Hoa',), ('Nha Trang',), ('Hue',), ('Can Tho',), ('Cam Pha',), ('Nam Dinh',), ('Quy Nhon',), ('Vung Tau',), ('Rach Gia',), ('Long Xuyen',), ('Thai Nguyen',), ('Hong Gai',), ('Phan Thiêt',), ('Cam Ranh',), ('Vinh',), ('My Tho',), ('Da Lat',), ('Buon Ma Thuot',)]
Gold Output      : [('Shanghai',), ('Peking',), ('Chongqing',), ('Tianjin',), ('Wuhan',), ('Harbin',), ('Shenyang',), ('Kanton [Guangzhou]',), ('Chengdu',), ('Nanking [Nanjing]',), ('Changchun',), ('Xi´an',), ('Dalian',), ('Qingdao',), ('Jinan',), ('Hangzhou',), ('Zhengzhou',), ('Shijiazhuang',), ('Taiyuan',), ('Kunming',), ('Changsha',), ('Nanchang',), ('Fuzhou',), ('Lanzhou',), ('Guiyang',), ('Ningbo',), ('Hefei',), ('Urumtši [Ürümqi]',), ('Anshan',), ('Fushun',), ('Nanning',), ('Zibo',), ('Qiqihar',), ('Jilin',), ('Tangshan',), ('Baotou',), ('Shenzhen',), ('Hohhot',), ('Handan',), ('Wuxi',), ('Xuzhou',), ('Datong',), ('Yichun',), ('Benxi',), ('Luoyang',), ('Suzhou',), ('Xining',), ('Huainan',), ('Jixi',), ('Daqing',), ('Fuxin',), ('Amoy [Xiamen]',), ('Liuzhou',), ('Shantou',), ('Jinzhou',), ('Mudanjiang',), ('Yinchuan',), ('Changzhou',), ('Zhangjiakou',), ('Dandong',), ('Hegang',), ('Kaifeng',), ('Jiamusi',), ('Liaoyang',), ('Hengyang',), ('Baoding',), ('Hunjiang',), ('Xinxiang',), ('Huangshi',), ('Haikou',), ('Yantai',), ('Bengbu',), ('Xiangtan',), ('Weifang',), ('Wuhu',), ('Pingxiang',), ('Yingkou',), ('Anyang',), ('Panzhihua',), ('Pingdingshan',), ('Xiangfan',), ('Zhuzhou',), ('Jiaozuo',), ('Wenzhou',), ('Zhangjiang',), ('Zigong',), ('Shuangyashan',), ('Zaozhuang',), ('Yakeshi',), ('Yichang',), ('Zhenjiang',), ('Huaibei',), ('Qinhuangdao',), ('Guilin',), ('Liupanshui',), ('Panjin',), ('Yangquan',), ('Jinxi',), ('Liaoyuan',), ('Lianyungang',), ('Xianyang',), ('Tai´an',), ('Chifeng',), ('Shaoguan',), ('Nantong',), ('Leshan',), ('Baoji',), ('Linyi',), ('Tonghua',), ('Siping',), ('Changzhi',), ('Tengzhou',), ('Chaozhou',), ('Yangzhou',), ('Dongwan',), ('Ma´anshan',), ('Foshan',), ('Yueyang',), ('Xingtai',), ('Changde',), ('Shihezi',), ('Yancheng',), ('Jiujiang',), ('Dongying',), ('Shashi',), ('Xintai',), ('Jingdezhen',), ('Tongchuan',), ('Zhongshan',), ('Shiyan',), ('Tieli',), ('Jining',), ('Wuhai',), ('Mianyang',), ('Luzhou',), ('Zunyi',), ('Shizuishan',), ('Neijiang',), ('Tongliao',), ('Tieling',), ('Wafangdian',), ('Anqing',), ('Shaoyang',), ('Laiwu',), ('Chengde',), ('Tianshui',), ('Nanyang',), ('Cangzhou',), ('Yibin',), ('Huaiyin',), ('Dunhua',), ('Yanji',), ('Jiangmen',), ('Tongling',), ('Suihua',), ('Gongziling',), ('Xiantao',), ('Chaoyang',), ('Ganzhou',), ('Huzhou',), ('Baicheng',), ('Shangzi',), ('Yangjiang',), ('Qitaihe',), ('Gejiu',), ('Jiangyin',), ('Hebi',), ('Jiaxing',), ('Wuzhou',), ('Meihekou',), ('Xuchang',), ('Liaocheng',), ('Haicheng',), ('Qianjiang',), ('Baiyin',), ('Bei´an',), ('Yixing',), ('Laizhou',), ('Qaramay',), ('Acheng',), ('Dezhou',), ('Nanping',), ('Zhaoqing',), ('Beipiao',), ('Fengcheng',), ('Fuyu',), ('Xinyang',), ('Dongtai',), ('Yuci',), ('Honghu',), ('Ezhou',), ('Heze',), ('Daxian',), ('Linfen',), ('Tianmen',), ('Yiyang',), ('Quanzhou',), ('Rizhao',), ('Deyang',), ('Guangyuan',), ('Changshu',), ('Zhangzhou',), ('Hailar',), ('Nanchong',), ('Jiutai',), ('Zhaodong',), ('Shaoxing',), ('Fuyang',), ('Maoming',), ('Qujing',), ('Ghulja',), ('Jiaohe',), ('Puyang',), ('Huadian',), ('Jiangyou',), ('Qashqar',), ('Anshun',), ('Fuling',), ('Xinyu',), ('Hanzhong',), ('Danyang',), ('Chenzhou',), ('Xiaogan',), ('Shangqiu',), ('Zhuhai',), ('Qingyuan',), ('Aqsu',), ('Xiaoshan',), ('Zaoyang',), ('Xinghua',), ('Hami',), ('Huizhou',), ('Jinmen',), ('Sanming',), ('Ulanhot',), ('Korla',), ('Wanxian',), ('Rui´an',), ('Zhoushan',), ('Liangcheng',), ('Jiaozhou',), ('Taizhou',), ('Taonan',), ('Pingdu',), ('Ji´an',), ('Longkou',), ('Langfang',), ('Zhoukou',), ('Suining',), ('Yulin',), ('Jinhua',), ('Liu´an',), ('Shuangcheng',), ('Suizhou',), ('Ankang',), ('Weinan',), ('Longjing',), ('Da´an',), ('Lengshuijiang',), ('Laiyang',), ('Xianning',), ('Dali',), ('Anda',), ('Jincheng',), ('Longyan',), ('Xichang',), ('Wendeng',), ('Hailun',), ('Binzhou',), ('Linhe',), ('Wuwei',), ('Duyun',), ('Mishan',), ('Shangrao',), ('Changji',), ('Meixian',), ('Yushu',), ('Tiefa',), ('Huai´an',), ('Leiyang',), ('Zalantun',), ('Weihai',), ('Loudi',), ('Qingzhou',), ('Qidong',), ('Huaihua',), ('Luohe',), ('Chuzhou',), ('Kaiyuan',), ('Linqing',), ('Chaohu',), ('Laohekou',), ('Dujiangyan',), ('Zhumadian',), ('Linchuan',), ('Jiaonan',), ('Sanmenxia',), ('Heyuan',), ('Manzhouli',), ('Lhasa',), ('Lianyuan',), ('Kuytun',), ('Puqi',), ('Hongjiang',), ('Qinzhou',), ('Renqiu',), ('Yuyao',), ('Guigang',), ('Kaili',), ('Yan´an',), ('Beihai',), ('Xuangzhou',), ('Quzhou',), ('Yong´an',), ('Zixing',), ('Liyang',), ('Yizheng',), ('Yumen',), ('Liling',), ('Yuncheng',), ('Shanwei',), ('Cixi',), ('Yuanjiang',), ('Bozhou',), ('Jinchang',), ('Fu´an',), ('Suqian',), ('Shishou',), ('Hengshui',), ('Danjiangkou',), ('Fujin',), ('Sanya',), ('Guangshui',), ('Huangshan',), ('Xingcheng',), ('Zhucheng',), ('Kunshan',), ('Haining',), ('Pingliang',), ('Fuqing',), ('Xinzhou',), ('Jieyang',), ('Zhangjiagang',), ('Tong Xian',), ('Ya´an',), ('Emeishan',), ('Enshi',), ('Bose',), ('Yuzhou',), ('Tumen',), ('Putian',), ('Linhai',), ('Xilin Hot',), ('Shaowu',), ('Junan',), ('Huaying',), ('Pingyi',), ('Huangyan',), ('Singapore',)]

===== Eval Round 789 =====
Database         : world_1
Prediction SQL   : SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1
Gold SQL         : SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Antarctica', None, 13120000.0)]
Gold Output      : [('Antarctica', 13120000.0, None)]

===== Eval Round 790 =====
Database         : world_1
Prediction SQL   : SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1
Gold SQL         : SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Antarctica', None, 13120000.0)]
Gold Output      : [('Antarctica', 13120000.0, None)]

===== Eval Round 791 =====
Database         : world_1
Prediction SQL   : SELECT Population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
Gold SQL         : SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(146934000, 'Russian Federation', 'Vladimir Putin')]
Gold Output      : [('Russian Federation', 146934000, 'Vladimir Putin')]

===== Eval Round 792 =====
Database         : world_1
Prediction SQL   : SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
Gold SQL         : SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Russian Federation', 146934000, 'Vladimir Putin')]
Gold Output      : [('Russian Federation', 146934000, 'Vladimir Putin')]

===== Eval Round 793 =====
Database         : world_1
Prediction SQL   : SELECT T1.Name, COUNT(T2.Language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Code HAVING COUNT(T2.Language) >= 3
Gold SQL         : SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Aruba', 4), ('Afghanistan', 5), ('Angola', 9), ('Albania', 3), ('Andorra', 4), ('Netherlands Antilles', 3), ('Argentina', 3), ('American Samoa', 3), ('Australia', 8), ('Austria', 8), ('Azerbaijan', 4), ('Burundi', 3), ('Belgium', 6), ('Benin', 7), ('Burkina Faso', 6), ('Bangladesh', 7), ('Bulgaria', 4), ('Belarus', 4), ('Belize', 4), ('Bolivia', 4), ('Brazil', 5), ('Brunei', 4), ('Bhutan', 3), ('Botswana', 5), ('Central African Republic', 6), ('Canada', 12), ('Switzerland', 4), ('Chile', 4), ('China', 12), ('Côte d’Ivoire', 5), ('Cameroon', 8), ('Congo, The Democratic Republic of the', 10), ('Congo', 6), ('Colombia', 5), ('Comoros', 5), ('Costa Rica', 4), ('Czech Republic', 8), ('Germany', 6), ('Djibouti', 3), ('Denmark', 7), ('Eritrea', 6), ('Spain', 4), ('Estonia', 5), ('Ethiopia', 7), ('Finland', 5), ('France', 6), ('Micronesia, Federated States of', 6), ('Gabon', 4), ('United Kingdom', 3), ('Georgia', 6), ('Ghana', 6), ('Guinea', 7), ('Gambia', 5), ('Guinea-Bissau', 6), ('Guatemala', 5), ('Guam', 5), ('Guyana', 3), ('Hong Kong', 5), ('Honduras', 4), ('Hungary', 6), ('Indonesia', 9), ('India', 12), ('Iran', 10), ('Iraq', 5), ('Israel', 3), ('Italy', 8), ('Jordan', 3), ('Japan', 6), ('Kazakstan', 6), ('Kenya', 10), ('Kyrgyzstan', 7), ('Cambodia', 4), ('Laos', 4), ('Lebanon', 3), ('Liberia', 8), ('Liechtenstein', 3), ('Sri Lanka', 3), ('Lesotho', 3), ('Lithuania', 5), ('Luxembourg', 5), ('Latvia', 6), ('Macao', 4), ('Monaco', 4), ('Moldova', 5), ('Mexico', 6), ('Macedonia', 5), ('Mali', 6), ('Myanmar', 8), ('Mongolia', 6), ('Northern Mariana Islands', 6), ('Mozambique', 10), ('Mauritania', 6), ('Mauritius', 6), ('Malawi', 4), ('Malaysia', 6), ('Mayotte', 3), ('Namibia', 8), ('New Caledonia', 3), ('Niger', 5), ('Nigeria', 10), ('Nicaragua', 4), ('Netherlands', 4), ('Norway', 5), ('Nepal', 7), ('Nauru', 5), ('Pakistan', 8), ('Panama', 6), ('Peru', 3), ('Philippines', 10), ('Palau', 4), ('Poland', 4), ('Paraguay', 4), ('French Polynesia', 3), ('Réunion', 5), ('Romania', 6), ('Russian Federation', 12), ('Sudan', 10), ('Senegal', 6), ('Singapore', 3), ('Solomon Islands', 3), ('Sierra Leone', 8), ('Slovakia', 5), ('Slovenia', 3), ('Sweden', 6), ('Seychelles', 3), ('Chad', 8), ('Togo', 8), ('Thailand', 6), ('Tajikistan', 3), ('Turkmenistan', 4), ('Trinidad and Tobago', 3), ('Tunisia', 3), ('Turkey', 3), ('Tuvalu', 3), ('Taiwan', 6), ('Tanzania', 11), ('Uganda', 10), ('Ukraine', 7), ('United States', 12), ('Uzbekistan', 6), ('Venezuela', 3), ('Virgin Islands, U.S.', 3), ('Vietnam', 9), ('Vanuatu', 3), ('Samoa', 3), ('Yugoslavia', 6), ('South Africa', 11), ('Zambia', 6), ('Zimbabwe', 4)]
Gold Output      : [(5, 'Afghanistan'), (3, 'Albania'), (3, 'American Samoa'), (4, 'Andorra'), (9, 'Angola'), (3, 'Argentina'), (4, 'Aruba'), (8, 'Australia'), (8, 'Austria'), (4, 'Azerbaijan'), (7, 'Bangladesh'), (4, 'Belarus'), (6, 'Belgium'), (4, 'Belize'), (7, 'Benin'), (3, 'Bhutan'), (4, 'Bolivia'), (5, 'Botswana'), (5, 'Brazil'), (4, 'Brunei'), (4, 'Bulgaria'), (6, 'Burkina Faso'), (3, 'Burundi'), (4, 'Cambodia'), (8, 'Cameroon'), (12, 'Canada'), (6, 'Central African Republic'), (8, 'Chad'), (4, 'Chile'), (12, 'China'), (5, 'Colombia'), (5, 'Comoros'), (6, 'Congo'), (10, 'Congo, The Democratic Republic of the'), (4, 'Costa Rica'), (8, 'Czech Republic'), (5, 'Côte d’Ivoire'), (7, 'Denmark'), (3, 'Djibouti'), (6, 'Eritrea'), (5, 'Estonia'), (7, 'Ethiopia'), (5, 'Finland'), (6, 'France'), (3, 'French Polynesia'), (4, 'Gabon'), (5, 'Gambia'), (6, 'Georgia'), (6, 'Germany'), (6, 'Ghana'), (5, 'Guam'), (5, 'Guatemala'), (7, 'Guinea'), (6, 'Guinea-Bissau'), (3, 'Guyana'), (4, 'Honduras'), (5, 'Hong Kong'), (6, 'Hungary'), (12, 'India'), (9, 'Indonesia'), (10, 'Iran'), (5, 'Iraq'), (3, 'Israel'), (8, 'Italy'), (6, 'Japan'), (3, 'Jordan'), (6, 'Kazakstan'), (10, 'Kenya'), (7, 'Kyrgyzstan'), (4, 'Laos'), (6, 'Latvia'), (3, 'Lebanon'), (3, 'Lesotho'), (8, 'Liberia'), (3, 'Liechtenstein'), (5, 'Lithuania'), (5, 'Luxembourg'), (4, 'Macao'), (5, 'Macedonia'), (4, 'Malawi'), (6, 'Malaysia'), (6, 'Mali'), (6, 'Mauritania'), (6, 'Mauritius'), (3, 'Mayotte'), (6, 'Mexico'), (6, 'Micronesia, Federated States of'), (5, 'Moldova'), (4, 'Monaco'), (6, 'Mongolia'), (10, 'Mozambique'), (8, 'Myanmar'), (8, 'Namibia'), (5, 'Nauru'), (7, 'Nepal'), (4, 'Netherlands'), (3, 'Netherlands Antilles'), (3, 'New Caledonia'), (4, 'Nicaragua'), (5, 'Niger'), (10, 'Nigeria'), (6, 'Northern Mariana Islands'), (5, 'Norway'), (8, 'Pakistan'), (4, 'Palau'), (6, 'Panama'), (4, 'Paraguay'), (3, 'Peru'), (10, 'Philippines'), (4, 'Poland'), (6, 'Romania'), (12, 'Russian Federation'), (5, 'Réunion'), (3, 'Samoa'), (6, 'Senegal'), (3, 'Seychelles'), (8, 'Sierra Leone'), (3, 'Singapore'), (5, 'Slovakia'), (3, 'Slovenia'), (3, 'Solomon Islands'), (11, 'South Africa'), (4, 'Spain'), (3, 'Sri Lanka'), (10, 'Sudan'), (6, 'Sweden'), (4, 'Switzerland'), (6, 'Taiwan'), (3, 'Tajikistan'), (11, 'Tanzania'), (6, 'Thailand'), (8, 'Togo'), (3, 'Trinidad and Tobago'), (3, 'Tunisia'), (3, 'Turkey'), (4, 'Turkmenistan'), (3, 'Tuvalu'), (10, 'Uganda'), (7, 'Ukraine'), (3, 'United Kingdom'), (12, 'United States'), (6, 'Uzbekistan'), (3, 'Vanuatu'), (3, 'Venezuela'), (9, 'Vietnam'), (3, 'Virgin Islands, U.S.'), (6, 'Yugoslavia'), (6, 'Zambia'), (4, 'Zimbabwe')]

===== Eval Round 794 =====
Database         : world_1
Prediction SQL   : SELECT c.Name, COUNT(cl.Language) AS LanguageCount FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code HAVING COUNT(cl.Language) > 2
Gold SQL         : SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Aruba', 4), ('Afghanistan', 5), ('Angola', 9), ('Albania', 3), ('Andorra', 4), ('Netherlands Antilles', 3), ('Argentina', 3), ('American Samoa', 3), ('Australia', 8), ('Austria', 8), ('Azerbaijan', 4), ('Burundi', 3), ('Belgium', 6), ('Benin', 7), ('Burkina Faso', 6), ('Bangladesh', 7), ('Bulgaria', 4), ('Belarus', 4), ('Belize', 4), ('Bolivia', 4), ('Brazil', 5), ('Brunei', 4), ('Bhutan', 3), ('Botswana', 5), ('Central African Republic', 6), ('Canada', 12), ('Switzerland', 4), ('Chile', 4), ('China', 12), ('Côte d’Ivoire', 5), ('Cameroon', 8), ('Congo, The Democratic Republic of the', 10), ('Congo', 6), ('Colombia', 5), ('Comoros', 5), ('Costa Rica', 4), ('Czech Republic', 8), ('Germany', 6), ('Djibouti', 3), ('Denmark', 7), ('Eritrea', 6), ('Spain', 4), ('Estonia', 5), ('Ethiopia', 7), ('Finland', 5), ('France', 6), ('Micronesia, Federated States of', 6), ('Gabon', 4), ('United Kingdom', 3), ('Georgia', 6), ('Ghana', 6), ('Guinea', 7), ('Gambia', 5), ('Guinea-Bissau', 6), ('Guatemala', 5), ('Guam', 5), ('Guyana', 3), ('Hong Kong', 5), ('Honduras', 4), ('Hungary', 6), ('Indonesia', 9), ('India', 12), ('Iran', 10), ('Iraq', 5), ('Israel', 3), ('Italy', 8), ('Jordan', 3), ('Japan', 6), ('Kazakstan', 6), ('Kenya', 10), ('Kyrgyzstan', 7), ('Cambodia', 4), ('Laos', 4), ('Lebanon', 3), ('Liberia', 8), ('Liechtenstein', 3), ('Sri Lanka', 3), ('Lesotho', 3), ('Lithuania', 5), ('Luxembourg', 5), ('Latvia', 6), ('Macao', 4), ('Monaco', 4), ('Moldova', 5), ('Mexico', 6), ('Macedonia', 5), ('Mali', 6), ('Myanmar', 8), ('Mongolia', 6), ('Northern Mariana Islands', 6), ('Mozambique', 10), ('Mauritania', 6), ('Mauritius', 6), ('Malawi', 4), ('Malaysia', 6), ('Mayotte', 3), ('Namibia', 8), ('New Caledonia', 3), ('Niger', 5), ('Nigeria', 10), ('Nicaragua', 4), ('Netherlands', 4), ('Norway', 5), ('Nepal', 7), ('Nauru', 5), ('Pakistan', 8), ('Panama', 6), ('Peru', 3), ('Philippines', 10), ('Palau', 4), ('Poland', 4), ('Paraguay', 4), ('French Polynesia', 3), ('Réunion', 5), ('Romania', 6), ('Russian Federation', 12), ('Sudan', 10), ('Senegal', 6), ('Singapore', 3), ('Solomon Islands', 3), ('Sierra Leone', 8), ('Slovakia', 5), ('Slovenia', 3), ('Sweden', 6), ('Seychelles', 3), ('Chad', 8), ('Togo', 8), ('Thailand', 6), ('Tajikistan', 3), ('Turkmenistan', 4), ('Trinidad and Tobago', 3), ('Tunisia', 3), ('Turkey', 3), ('Tuvalu', 3), ('Taiwan', 6), ('Tanzania', 11), ('Uganda', 10), ('Ukraine', 7), ('United States', 12), ('Uzbekistan', 6), ('Venezuela', 3), ('Virgin Islands, U.S.', 3), ('Vietnam', 9), ('Vanuatu', 3), ('Samoa', 3), ('Yugoslavia', 6), ('South Africa', 11), ('Zambia', 6), ('Zimbabwe', 4)]
Gold Output      : [(5, 'Afghanistan'), (3, 'Albania'), (3, 'American Samoa'), (4, 'Andorra'), (9, 'Angola'), (3, 'Argentina'), (4, 'Aruba'), (8, 'Australia'), (8, 'Austria'), (4, 'Azerbaijan'), (7, 'Bangladesh'), (4, 'Belarus'), (6, 'Belgium'), (4, 'Belize'), (7, 'Benin'), (3, 'Bhutan'), (4, 'Bolivia'), (5, 'Botswana'), (5, 'Brazil'), (4, 'Brunei'), (4, 'Bulgaria'), (6, 'Burkina Faso'), (3, 'Burundi'), (4, 'Cambodia'), (8, 'Cameroon'), (12, 'Canada'), (6, 'Central African Republic'), (8, 'Chad'), (4, 'Chile'), (12, 'China'), (5, 'Colombia'), (5, 'Comoros'), (6, 'Congo'), (10, 'Congo, The Democratic Republic of the'), (4, 'Costa Rica'), (8, 'Czech Republic'), (5, 'Côte d’Ivoire'), (7, 'Denmark'), (3, 'Djibouti'), (6, 'Eritrea'), (5, 'Estonia'), (7, 'Ethiopia'), (5, 'Finland'), (6, 'France'), (3, 'French Polynesia'), (4, 'Gabon'), (5, 'Gambia'), (6, 'Georgia'), (6, 'Germany'), (6, 'Ghana'), (5, 'Guam'), (5, 'Guatemala'), (7, 'Guinea'), (6, 'Guinea-Bissau'), (3, 'Guyana'), (4, 'Honduras'), (5, 'Hong Kong'), (6, 'Hungary'), (12, 'India'), (9, 'Indonesia'), (10, 'Iran'), (5, 'Iraq'), (3, 'Israel'), (8, 'Italy'), (6, 'Japan'), (3, 'Jordan'), (6, 'Kazakstan'), (10, 'Kenya'), (7, 'Kyrgyzstan'), (4, 'Laos'), (6, 'Latvia'), (3, 'Lebanon'), (3, 'Lesotho'), (8, 'Liberia'), (3, 'Liechtenstein'), (5, 'Lithuania'), (5, 'Luxembourg'), (4, 'Macao'), (5, 'Macedonia'), (4, 'Malawi'), (6, 'Malaysia'), (6, 'Mali'), (6, 'Mauritania'), (6, 'Mauritius'), (3, 'Mayotte'), (6, 'Mexico'), (6, 'Micronesia, Federated States of'), (5, 'Moldova'), (4, 'Monaco'), (6, 'Mongolia'), (10, 'Mozambique'), (8, 'Myanmar'), (8, 'Namibia'), (5, 'Nauru'), (7, 'Nepal'), (4, 'Netherlands'), (3, 'Netherlands Antilles'), (3, 'New Caledonia'), (4, 'Nicaragua'), (5, 'Niger'), (10, 'Nigeria'), (6, 'Northern Mariana Islands'), (5, 'Norway'), (8, 'Pakistan'), (4, 'Palau'), (6, 'Panama'), (4, 'Paraguay'), (3, 'Peru'), (10, 'Philippines'), (4, 'Poland'), (6, 'Romania'), (12, 'Russian Federation'), (5, 'Réunion'), (3, 'Samoa'), (6, 'Senegal'), (3, 'Seychelles'), (8, 'Sierra Leone'), (3, 'Singapore'), (5, 'Slovakia'), (3, 'Slovenia'), (3, 'Solomon Islands'), (11, 'South Africa'), (4, 'Spain'), (3, 'Sri Lanka'), (10, 'Sudan'), (6, 'Sweden'), (4, 'Switzerland'), (6, 'Taiwan'), (3, 'Tajikistan'), (11, 'Tanzania'), (6, 'Thailand'), (8, 'Togo'), (3, 'Trinidad and Tobago'), (3, 'Tunisia'), (3, 'Turkey'), (4, 'Turkmenistan'), (3, 'Tuvalu'), (10, 'Uganda'), (7, 'Ukraine'), (3, 'United Kingdom'), (12, 'United States'), (6, 'Uzbekistan'), (3, 'Vanuatu'), (3, 'Venezuela'), (9, 'Vietnam'), (3, 'Virgin Islands, U.S.'), (6, 'Yugoslavia'), (6, 'Zambia'), (4, 'Zimbabwe')]

===== Eval Round 795 =====
Database         : world_1
Prediction SQL   : SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District
Gold SQL         : SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Abidjan', 1), ('Abu Dhabi', 1), ('Adana', 1), ('Addis Abeba', 1), ('Aden', 1), ('Aguascalientes', 1), ('Ahal', 1), ('Aichi', 2), ('Alagoas', 1), ('Alberta', 2), ('Aleksandria', 1), ('Aleppo', 1), ('Alger', 1), ('Almaty Qalasy', 1), ('Altai', 1), ('Amazonas', 1), ('Amman', 1), ('Anambra & Enugu & Eb', 1), ('Andalusia', 2), ('Andhra Pradesh', 5), ('Anhui', 5), ('Ankara', 1), ('Antalya', 1), ('Antananarivo', 1), ('Antioquia', 1), ('Antwerpen', 1), ('Aragonia', 1), ('Aragua', 1), ('Arequipa', 1), ('Arizona', 3), ('Arkangeli', 1), ('Ashanti', 1), ('Assam', 1), ('Astrahan', 1), ('Asunción', 1), ('Atlantique', 1), ('Atlántico', 1), ('Attika', 1), ('Auckland', 1), ('Baden-Württemberg', 1), ('Baghdad', 1), ('Bahia', 2), ('Baijeri', 2), ('Baja California', 3), ('Baki', 1), ('Bali', 1), ('Baluchistan', 1), ('Bamako', 1), ('Banaadir', 1), ('Bangkok', 1), ('Bangui', 1), ('Baskimaa', 1), ('Basra', 1), ('Baškortostan', 1), ('Beirut', 1), ('Bengasi', 1), ('Berliini', 1), ('Bihar', 1), ('Bishkek shaary', 1), ('Blantyre', 1), ('Bolívar', 2), ('Bratislava', 1), ('Brazzaville', 1), ('Bremen', 1), ('British Colombia', 1), ('Brjansk', 1), ('Budapest', 1), ('Buenos Aires', 12), ('Bukarest', 1), ('Bulawayo', 1), ('Burjatia', 1), ('Bursa', 1), ('California', 8), ('Callao', 1), ('Campania', 1), ('Canary Islands', 1), ('Cap-Vert', 2), ('Carabobo', 1), ('Casablanca', 1), ('Ceará', 1), ('Central', 2), ('Central Java', 2), ('Central Macedonia', 1), ('Central Serbia', 1), ('Central Visayas', 1), ('Centre', 1), ('Chandigarh', 1), ('Chari-Baguirmi', 1), ('Chhatisgarh', 2), ('Chiapas', 1), ('Chiba', 4), ('Chihuahua', 2), ('Chisinau', 1), ('Chittagong', 1), ('Chollabuk', 1), ('Chongqing', 1), ('Chungchongbuk', 1), ('Coahuila de Zaragoza', 2), ('Coast', 1), ('Cochabamba', 1), ('Colorado', 2), ('Conakry', 1), ('Constantine', 1), ('Cortés', 1), ('Córdoba', 1), ('Damascus', 1), ('Dar es Salaam', 1), ('Delhi', 1), ('Dhaka', 1), ('District of Columbia', 1), ('Distrito Central', 1), ('Distrito Federal', 4), ('Distrito Nacional', 1), ('Diyarbakir', 1), ('Djibouti', 1), ('Dnipropetrovsk', 2), ('Doha', 1), ('Dolnoslaskie', 1), ('Donetsk', 3), ('Dubai', 1), ('Durango', 1), ('East Azerbaidzan', 1), ('East Java', 2), ('East Kasai', 1), ('Eastern Cape', 1), ('Ehime', 1), ('Emilia-Romagna', 1), ('England', 7), ('Esfahan', 1), ('Eskisehir', 1), ('Estuaire', 1), ('Fars', 1), ('Federaatio', 1), ('Florida', 2), ('Fujian', 2), ('Fukuoka', 2), ('Fukushima', 1), ('Fès-Boulemane', 1), ('Gansu', 1), ('Gauteng', 7), ('Gaza', 1), ('Gaziantep', 1), ('Georgia', 1), ('Gifu', 1), ('Gilan', 1), ('Giza', 1), ('Goiás', 1), ('Gomel', 1), ('Grad Sofija', 1), ('Grad Zagreb', 1), ('Greater Accra', 1), ('Guanajuato', 3), ('Guangdong', 4), ('Guangxi', 3), ('Guatemala', 1), ('Guayas', 1), ('Guerrero', 1), ('Guizhou', 2), ('Gujarat', 5), ('Habarovsk', 1), ('Hainan', 1), ('Haiphong', 1), ('Hamadan', 1), ('Hamburg', 1), ('Hamgyong N', 1), ('Hamgyong P', 1), ('Hanoi', 1), ('Harare', 1), ('Harjumaa', 1), ('Harkova', 1), ('Haryana', 1), ('Haute-Zaïre', 1), ('Hawaii', 1), ('Hebei', 6), ('Heilongjiang', 9), ('Henan', 7), ('Herson', 1), ('Hessen', 1), ('Hims', 1), ('Hiroshima', 2), ('Hlavní mesto Praha', 1), ('Ho Chi Minh City', 1), ('Hokkaido', 2), ('Hongkong', 1), ('Horad Minsk', 1), ('Hsinchu', 1), ('Hubei', 4), ('Hunan', 4), ('Hyogo', 4), ('Illinois', 1), ('Inchon', 1), ('Indiana', 1), ('Inner Mongolia', 3), ('Irbil', 1), ('Irkutsk', 1), ('Ishikawa', 1), ('Islamabad', 1), ('Istanbul', 1), ('Ivanovo', 1), ('Izmir', 1), ('Içel', 1), ('Jakarta Raya', 1), ('Jalisco', 3), ('Jambi', 1), ('Jammu and Kashmir', 1), ('Jaroslavl', 1), ('Jerusalem', 1), ('Jharkhand', 2), ('Jiangsu', 7), ('Jiangxi', 2), ('Jilin', 4), ('Jizní Morava', 1), ('Kabol', 1), ('Kadiogo', 1), ('Kaduna', 1), ('Kagoshima', 1), ('Kairo', 1), ('Kalimantan Barat', 1), ('Kalimantan Selatan', 1), ('Kalimantan Timur', 1), ('Kaliningrad', 1), ('Kanagawa', 5), ('Kano & Jigawa', 1), ('Kaohsiung', 1), ('Karnataka', 3), ('Karotegin', 1), ('Katalonia', 1), ('Kaunas', 1), ('Kayseri', 1), ('Keelung', 1), ('Kemerovo', 2), ('Kerala', 3), ('Kerman', 1), ('Kermanshah', 1), ('Khartum', 3), ('Khorasan', 1), ('Khulna', 1), ('Khuzestan', 1), ('Kinshasa', 1), ('Kiova', 1), ('Kirov', 1), ('Konya', 1), ('Kouilou', 1), ('Kowloon and New Kowl', 1), ('Krasnodar', 2), ('Krasnojarsk', 1), ('Kujawsko-Pomorskie', 1), ('Kumamoto', 1), ('Kurgan', 1), ('Kursk', 1), ('KwaZulu-Natal', 4), ('Kwangju', 1), ('Kwara & Kogi', 1), ('Kyonggi', 7), ('Kyongsangbuk', 1), ('Kyongsangnam', 3), ('Kyoto', 1), ('København', 1), ('La Habana', 1), ('La Libertad', 1), ('La Paz', 2), ('Lagos', 1), ('Lambayeque', 1), ('Lampung', 1), ('Lara', 1), ('Latium', 1), ('Leinster', 1), ('Liaoning', 12), ('Liguria', 1), ('Lilongwe', 1), ('Lima', 1), ('Lipetsk', 1), ('Lisboa', 2), ('Littoral', 1), ('Lodzkie', 1), ('Lombardia', 1), ('Loreto', 1), ('Louisiana', 1), ('Luanda', 1), ('Lubelskie', 1), ('Lugansk', 1), ('Lusaka', 1), ('Luxor', 1), ('Lviv', 1), ('Macau', 1), ('Madhya Pradesh', 5), ('Madrid', 1), ('Maekel', 1), ('Magdalena', 1), ('Maharashtra', 13), ('Malopolskie', 1), ('Managua', 1), ('Mandalay', 1), ('Manitoba', 1), ('Maputo', 2), ('Maranhão', 1), ('Maritime', 1), ('Markazi', 1), ('Marrakech-Tensift-Al', 1), ('Maryland', 1), ('Massachusetts', 1), ('Mato Grosso', 1), ('Mato Grosso do Sul', 1), ('Mazowieckie', 1), ('Medina', 1), ('Mekka', 3), ('Meknès-Tafilalet', 1), ('Michigan', 1), ('Michoacán de Ocampo', 1), ('Midi-Pyrénées', 1), ('Minas Gerais', 4), ('Minnesota', 1), ('Miranda', 1), ('Missouri', 1), ('Miyagi', 1), ('Mogiljov', 1), ('Montevideo', 1), ('Montserrado', 1), ('Moscow (City)', 1), ('Murcia', 1), ('Murmansk', 1), ('Mykolajiv', 1), ('México', 9), ('Nagano', 1), ('Nagasaki', 1), ('Nairobi', 1), ('Namangan', 1), ('Nampo-si', 1), ('Nara', 1), ('National Capital Reg', 12), ('Nebraska', 1), ('Nevada', 1), ('New Mexico', 1), ('New South Wales', 1), ('New York', 1), ('Newmaa', 1), ('Niamey', 1), ('Niedersachsen', 1), ('Niigata', 1), ('Ninawa', 1), ('Ningxia', 1), ('Nizni Novgorod', 1), ('Noord-Holland', 1), ('Nordrhein-Westfalen', 7), ('Norte de Santander', 1), ('North Carolina', 1), ('Northern Mindanao', 1), ('Nothwest Border Prov', 1), ('Nouakchott', 1), ('Novosibirsk', 1), ('Nuevo León', 3), ('Odesa', 1), ('Ogun', 1), ('Ohio', 2), ('Oita', 1), ('Okayama', 2), ('Oklahoma', 2), ('Omsk', 1), ('Ondo & Ekiti', 1), ('Ontario', 4), ('Oran', 1), ('Oregon', 1), ('Orenburg', 1), ('Oriental', 1), ('Orissa', 2), ('Osaka', 6), ('Oslo', 1), ('Ouest', 1), ('Oyo & Osun', 5), ('Panamá', 1), ('Paraná', 2), ('Paraíba', 2), ('Pará', 2), ('Peking', 1), ('Pennsylvania', 1), ('Penza', 1), ('Perak', 1), ('Perm', 1), ('Pernambuco', 3), ('Phnom Penh', 1), ('Piauí', 1), ('Pichincha', 1), ('Piemonte', 1), ('Pietari', 1), ('Pomorskie', 1), ('Port Said', 1), ('Primorje', 1), ('Provence-Alpes-Côte', 1), ('Puebla', 1), ('Punjab', 11), ('Pusan', 1), ('Pyongyang-si', 1), ('Qaraghandy', 1), ('Qinghai', 1), ('Qom', 1), ('Quang Nam-Da Nang', 1), ('Queensland', 1), ('Querétaro de Arteaga', 1), ('Quintana Roo', 1), ('Québec', 1), ('Rabat-Salé-Zammour-Z', 2), ('Rajasthan', 5), ('Rangoon [Yangon]', 1), ('Rhône-Alpes', 1), ('Riau', 1), ('Riika', 1), ('Rio Grande do Norte', 1), ('Rio Grande do Sul', 1), ('Rio de Janeiro', 8), ('Risaralda', 1), ('Rivers & Bayelsa', 1), ('Riyadh', 1), ('Rjazan', 1), ('Rostov-na-Donu', 1), ('Saitama', 3), ('Saksi', 2), ('Salta', 1), ('Samara', 2), ('Samarkand', 1), ('San Juan', 1), ('San Luis Potosí', 1), ('San Salvador', 1), ('Sanaa', 1), ('Sanliurfa', 1), ('Santa Catarina', 1), ('Santa Cruz', 1), ('Santa Fé', 2), ('Santafé de Bogotá', 1), ('Santander', 1), ('Santiago', 3), ('Santiago de Cuba', 1), ('Saratov', 1), ('Scotland', 2), ('Seoul', 1), ('Sergipe', 1), ('Shaanxi', 2), ('Shaba', 2), ('Shandong', 7), ('Shanghai', 1), ('Shanxi', 3), ('Shizuoka', 2), ('Sichuan', 3), ('Sinaloa', 3), ('Sindh', 2), ('Sisilia', 1), ('Sistan va Baluchesta', 1), ('Skopje', 1), ('Smolensk', 1), ('Sofala', 1), ('Sonora', 2), ('South Australia', 1), ('South Kazakstan', 1), ('Southern Mindanao', 2), ('Southern Tagalog', 2), ('Suez', 1), ('Sulawesi Selatan', 1), ('Sumatera Barat', 1), ('Sumatera Selatan', 1), ('Sumatera Utara', 1), ('Sverdlovsk', 2), ('São Paulo', 13), ('Tabasco', 1), ('Taegu', 1), ('Taejon', 1), ('Taichung', 1), ('Tainan', 1), ('Taipei', 5), ('Tamaulipas', 2), ('Tamil Nadu', 5), ('Tanger-Tétouan', 1), ('Tatarstan', 2), ('Tbilisi', 1), ('Teheran', 2), ('Tennessee', 2), ('Texas', 6), ('Tianjin', 1), ('Tjumen', 1), ('Tochigi', 1), ('Tokyo-to', 3), ('Tolima', 1), ('Tomsk', 1), ('Toscana', 1), ('Toskent Shahri', 1), ('Tripoli', 1), ('Tucumán', 1), ('Tula', 1), ('Tunis', 1), ('Tver', 1), ('Tšeljabinsk', 2), ('Tšuvassia', 1), ('Udmurtia', 1), ('Ulaanbaatar', 1), ('Uljanovsk', 1), ('Uttar Pradesh', 12), ('Valencia', 1), ('Valle', 1), ('Veracruz', 2), ('Viangchan', 1), ('Victoria', 1), ('Vilna', 1), ('Vinnytsja', 1), ('Virginia', 1), ('Volgograd', 1), ('Voronez', 1), ('Wakayama', 1), ('Washington', 1), ('West Australia', 1), ('West Azerbaidzan', 1), ('West Bengali', 3), ('West Götanmaan län', 1), ('West Java', 4), ('West Kasai', 1), ('Western', 2), ('Western Cape', 1), ('Western Mindanao', 1), ('Western Visayas', 2), ('Wielkopolskie', 1), ('Wien', 1), ('Wilayah Persekutuan', 1), ('Wisconsin', 1), ('Xinxiang', 1), ('Yerevan', 1), ('Yogyakarta', 1), ('Yucatán', 1), ('Yunnan', 1), ('Zachodnio-Pomorskie', 1), ('Zaporizzja', 1), ('Zhejiang', 3), ('Zuid-Holland', 2), ('Zulia', 1), ('al-Daqahliya', 1), ('al-Gharbiya', 2), ('al-Qalyubiya', 1), ('al-Sharqiya', 1), ('al-Sulaymaniya', 1), ('al-Tamim', 1), ('al-Zarqa', 1), ('Île-de-France', 1), ('–', 1)]
Gold Output      : [(1, 'Abidjan'), (1, 'Abu Dhabi'), (1, 'Adana'), (1, 'Addis Abeba'), (1, 'Aden'), (1, 'Aguascalientes'), (1, 'Ahal'), (2, 'Aichi'), (1, 'Alagoas'), (2, 'Alberta'), (1, 'Aleksandria'), (1, 'Aleppo'), (1, 'Alger'), (1, 'Almaty Qalasy'), (1, 'Altai'), (1, 'Amazonas'), (1, 'Amman'), (1, 'Anambra & Enugu & Eb'), (2, 'Andalusia'), (5, 'Andhra Pradesh'), (5, 'Anhui'), (1, 'Ankara'), (1, 'Antalya'), (1, 'Antananarivo'), (1, 'Antioquia'), (1, 'Antwerpen'), (1, 'Aragonia'), (1, 'Aragua'), (1, 'Arequipa'), (3, 'Arizona'), (1, 'Arkangeli'), (1, 'Ashanti'), (1, 'Assam'), (1, 'Astrahan'), (1, 'Asunción'), (1, 'Atlantique'), (1, 'Atlántico'), (1, 'Attika'), (1, 'Auckland'), (1, 'Baden-Württemberg'), (1, 'Baghdad'), (2, 'Bahia'), (2, 'Baijeri'), (3, 'Baja California'), (1, 'Baki'), (1, 'Bali'), (1, 'Baluchistan'), (1, 'Bamako'), (1, 'Banaadir'), (1, 'Bangkok'), (1, 'Bangui'), (1, 'Baskimaa'), (1, 'Basra'), (1, 'Baškortostan'), (1, 'Beirut'), (1, 'Bengasi'), (1, 'Berliini'), (1, 'Bihar'), (1, 'Bishkek shaary'), (1, 'Blantyre'), (2, 'Bolívar'), (1, 'Bratislava'), (1, 'Brazzaville'), (1, 'Bremen'), (1, 'British Colombia'), (1, 'Brjansk'), (1, 'Budapest'), (12, 'Buenos Aires'), (1, 'Bukarest'), (1, 'Bulawayo'), (1, 'Burjatia'), (1, 'Bursa'), (8, 'California'), (1, 'Callao'), (1, 'Campania'), (1, 'Canary Islands'), (2, 'Cap-Vert'), (1, 'Carabobo'), (1, 'Casablanca'), (1, 'Ceará'), (2, 'Central'), (2, 'Central Java'), (1, 'Central Macedonia'), (1, 'Central Serbia'), (1, 'Central Visayas'), (1, 'Centre'), (1, 'Chandigarh'), (1, 'Chari-Baguirmi'), (2, 'Chhatisgarh'), (1, 'Chiapas'), (4, 'Chiba'), (2, 'Chihuahua'), (1, 'Chisinau'), (1, 'Chittagong'), (1, 'Chollabuk'), (1, 'Chongqing'), (1, 'Chungchongbuk'), (2, 'Coahuila de Zaragoza'), (1, 'Coast'), (1, 'Cochabamba'), (2, 'Colorado'), (1, 'Conakry'), (1, 'Constantine'), (1, 'Cortés'), (1, 'Córdoba'), (1, 'Damascus'), (1, 'Dar es Salaam'), (1, 'Delhi'), (1, 'Dhaka'), (1, 'District of Columbia'), (1, 'Distrito Central'), (4, 'Distrito Federal'), (1, 'Distrito Nacional'), (1, 'Diyarbakir'), (1, 'Djibouti'), (2, 'Dnipropetrovsk'), (1, 'Doha'), (1, 'Dolnoslaskie'), (3, 'Donetsk'), (1, 'Dubai'), (1, 'Durango'), (1, 'East Azerbaidzan'), (2, 'East Java'), (1, 'East Kasai'), (1, 'Eastern Cape'), (1, 'Ehime'), (1, 'Emilia-Romagna'), (7, 'England'), (1, 'Esfahan'), (1, 'Eskisehir'), (1, 'Estuaire'), (1, 'Fars'), (1, 'Federaatio'), (2, 'Florida'), (2, 'Fujian'), (2, 'Fukuoka'), (1, 'Fukushima'), (1, 'Fès-Boulemane'), (1, 'Gansu'), (7, 'Gauteng'), (1, 'Gaza'), (1, 'Gaziantep'), (1, 'Georgia'), (1, 'Gifu'), (1, 'Gilan'), (1, 'Giza'), (1, 'Goiás'), (1, 'Gomel'), (1, 'Grad Sofija'), (1, 'Grad Zagreb'), (1, 'Greater Accra'), (3, 'Guanajuato'), (4, 'Guangdong'), (3, 'Guangxi'), (1, 'Guatemala'), (1, 'Guayas'), (1, 'Guerrero'), (2, 'Guizhou'), (5, 'Gujarat'), (1, 'Habarovsk'), (1, 'Hainan'), (1, 'Haiphong'), (1, 'Hamadan'), (1, 'Hamburg'), (1, 'Hamgyong N'), (1, 'Hamgyong P'), (1, 'Hanoi'), (1, 'Harare'), (1, 'Harjumaa'), (1, 'Harkova'), (1, 'Haryana'), (1, 'Haute-Zaïre'), (1, 'Hawaii'), (6, 'Hebei'), (9, 'Heilongjiang'), (7, 'Henan'), (1, 'Herson'), (1, 'Hessen'), (1, 'Hims'), (2, 'Hiroshima'), (1, 'Hlavní mesto Praha'), (1, 'Ho Chi Minh City'), (2, 'Hokkaido'), (1, 'Hongkong'), (1, 'Horad Minsk'), (1, 'Hsinchu'), (4, 'Hubei'), (4, 'Hunan'), (4, 'Hyogo'), (1, 'Illinois'), (1, 'Inchon'), (1, 'Indiana'), (3, 'Inner Mongolia'), (1, 'Irbil'), (1, 'Irkutsk'), (1, 'Ishikawa'), (1, 'Islamabad'), (1, 'Istanbul'), (1, 'Ivanovo'), (1, 'Izmir'), (1, 'Içel'), (1, 'Jakarta Raya'), (3, 'Jalisco'), (1, 'Jambi'), (1, 'Jammu and Kashmir'), (1, 'Jaroslavl'), (1, 'Jerusalem'), (2, 'Jharkhand'), (7, 'Jiangsu'), (2, 'Jiangxi'), (4, 'Jilin'), (1, 'Jizní Morava'), (1, 'Kabol'), (1, 'Kadiogo'), (1, 'Kaduna'), (1, 'Kagoshima'), (1, 'Kairo'), (1, 'Kalimantan Barat'), (1, 'Kalimantan Selatan'), (1, 'Kalimantan Timur'), (1, 'Kaliningrad'), (5, 'Kanagawa'), (1, 'Kano & Jigawa'), (1, 'Kaohsiung'), (3, 'Karnataka'), (1, 'Karotegin'), (1, 'Katalonia'), (1, 'Kaunas'), (1, 'Kayseri'), (1, 'Keelung'), (2, 'Kemerovo'), (3, 'Kerala'), (1, 'Kerman'), (1, 'Kermanshah'), (3, 'Khartum'), (1, 'Khorasan'), (1, 'Khulna'), (1, 'Khuzestan'), (1, 'Kinshasa'), (1, 'Kiova'), (1, 'Kirov'), (1, 'Konya'), (1, 'Kouilou'), (1, 'Kowloon and New Kowl'), (2, 'Krasnodar'), (1, 'Krasnojarsk'), (1, 'Kujawsko-Pomorskie'), (1, 'Kumamoto'), (1, 'Kurgan'), (1, 'Kursk'), (4, 'KwaZulu-Natal'), (1, 'Kwangju'), (1, 'Kwara & Kogi'), (7, 'Kyonggi'), (1, 'Kyongsangbuk'), (3, 'Kyongsangnam'), (1, 'Kyoto'), (1, 'København'), (1, 'La Habana'), (1, 'La Libertad'), (2, 'La Paz'), (1, 'Lagos'), (1, 'Lambayeque'), (1, 'Lampung'), (1, 'Lara'), (1, 'Latium'), (1, 'Leinster'), (12, 'Liaoning'), (1, 'Liguria'), (1, 'Lilongwe'), (1, 'Lima'), (1, 'Lipetsk'), (2, 'Lisboa'), (1, 'Littoral'), (1, 'Lodzkie'), (1, 'Lombardia'), (1, 'Loreto'), (1, 'Louisiana'), (1, 'Luanda'), (1, 'Lubelskie'), (1, 'Lugansk'), (1, 'Lusaka'), (1, 'Luxor'), (1, 'Lviv'), (1, 'Macau'), (5, 'Madhya Pradesh'), (1, 'Madrid'), (1, 'Maekel'), (1, 'Magdalena'), (13, 'Maharashtra'), (1, 'Malopolskie'), (1, 'Managua'), (1, 'Mandalay'), (1, 'Manitoba'), (2, 'Maputo'), (1, 'Maranhão'), (1, 'Maritime'), (1, 'Markazi'), (1, 'Marrakech-Tensift-Al'), (1, 'Maryland'), (1, 'Massachusetts'), (1, 'Mato Grosso'), (1, 'Mato Grosso do Sul'), (1, 'Mazowieckie'), (1, 'Medina'), (3, 'Mekka'), (1, 'Meknès-Tafilalet'), (1, 'Michigan'), (1, 'Michoacán de Ocampo'), (1, 'Midi-Pyrénées'), (4, 'Minas Gerais'), (1, 'Minnesota'), (1, 'Miranda'), (1, 'Missouri'), (1, 'Miyagi'), (1, 'Mogiljov'), (1, 'Montevideo'), (1, 'Montserrado'), (1, 'Moscow (City)'), (1, 'Murcia'), (1, 'Murmansk'), (1, 'Mykolajiv'), (9, 'México'), (1, 'Nagano'), (1, 'Nagasaki'), (1, 'Nairobi'), (1, 'Namangan'), (1, 'Nampo-si'), (1, 'Nara'), (12, 'National Capital Reg'), (1, 'Nebraska'), (1, 'Nevada'), (1, 'New Mexico'), (1, 'New South Wales'), (1, 'New York'), (1, 'Newmaa'), (1, 'Niamey'), (1, 'Niedersachsen'), (1, 'Niigata'), (1, 'Ninawa'), (1, 'Ningxia'), (1, 'Nizni Novgorod'), (1, 'Noord-Holland'), (7, 'Nordrhein-Westfalen'), (1, 'Norte de Santander'), (1, 'North Carolina'), (1, 'Northern Mindanao'), (1, 'Nothwest Border Prov'), (1, 'Nouakchott'), (1, 'Novosibirsk'), (3, 'Nuevo León'), (1, 'Odesa'), (1, 'Ogun'), (2, 'Ohio'), (1, 'Oita'), (2, 'Okayama'), (2, 'Oklahoma'), (1, 'Omsk'), (1, 'Ondo & Ekiti'), (4, 'Ontario'), (1, 'Oran'), (1, 'Oregon'), (1, 'Orenburg'), (1, 'Oriental'), (2, 'Orissa'), (6, 'Osaka'), (1, 'Oslo'), (1, 'Ouest'), (5, 'Oyo & Osun'), (1, 'Panamá'), (2, 'Paraná'), (2, 'Paraíba'), (2, 'Pará'), (1, 'Peking'), (1, 'Pennsylvania'), (1, 'Penza'), (1, 'Perak'), (1, 'Perm'), (3, 'Pernambuco'), (1, 'Phnom Penh'), (1, 'Piauí'), (1, 'Pichincha'), (1, 'Piemonte'), (1, 'Pietari'), (1, 'Pomorskie'), (1, 'Port Said'), (1, 'Primorje'), (1, 'Provence-Alpes-Côte'), (1, 'Puebla'), (11, 'Punjab'), (1, 'Pusan'), (1, 'Pyongyang-si'), (1, 'Qaraghandy'), (1, 'Qinghai'), (1, 'Qom'), (1, 'Quang Nam-Da Nang'), (1, 'Queensland'), (1, 'Querétaro de Arteaga'), (1, 'Quintana Roo'), (1, 'Québec'), (2, 'Rabat-Salé-Zammour-Z'), (5, 'Rajasthan'), (1, 'Rangoon [Yangon]'), (1, 'Rhône-Alpes'), (1, 'Riau'), (1, 'Riika'), (1, 'Rio Grande do Norte'), (1, 'Rio Grande do Sul'), (8, 'Rio de Janeiro'), (1, 'Risaralda'), (1, 'Rivers & Bayelsa'), (1, 'Riyadh'), (1, 'Rjazan'), (1, 'Rostov-na-Donu'), (3, 'Saitama'), (2, 'Saksi'), (1, 'Salta'), (2, 'Samara'), (1, 'Samarkand'), (1, 'San Juan'), (1, 'San Luis Potosí'), (1, 'San Salvador'), (1, 'Sanaa'), (1, 'Sanliurfa'), (1, 'Santa Catarina'), (1, 'Santa Cruz'), (2, 'Santa Fé'), (1, 'Santafé de Bogotá'), (1, 'Santander'), (3, 'Santiago'), (1, 'Santiago de Cuba'), (1, 'Saratov'), (2, 'Scotland'), (1, 'Seoul'), (1, 'Sergipe'), (2, 'Shaanxi'), (2, 'Shaba'), (7, 'Shandong'), (1, 'Shanghai'), (3, 'Shanxi'), (2, 'Shizuoka'), (3, 'Sichuan'), (3, 'Sinaloa'), (2, 'Sindh'), (1, 'Sisilia'), (1, 'Sistan va Baluchesta'), (1, 'Skopje'), (1, 'Smolensk'), (1, 'Sofala'), (2, 'Sonora'), (1, 'South Australia'), (1, 'South Kazakstan'), (2, 'Southern Mindanao'), (2, 'Southern Tagalog'), (1, 'Suez'), (1, 'Sulawesi Selatan'), (1, 'Sumatera Barat'), (1, 'Sumatera Selatan'), (1, 'Sumatera Utara'), (2, 'Sverdlovsk'), (13, 'São Paulo'), (1, 'Tabasco'), (1, 'Taegu'), (1, 'Taejon'), (1, 'Taichung'), (1, 'Tainan'), (5, 'Taipei'), (2, 'Tamaulipas'), (5, 'Tamil Nadu'), (1, 'Tanger-Tétouan'), (2, 'Tatarstan'), (1, 'Tbilisi'), (2, 'Teheran'), (2, 'Tennessee'), (6, 'Texas'), (1, 'Tianjin'), (1, 'Tjumen'), (1, 'Tochigi'), (3, 'Tokyo-to'), (1, 'Tolima'), (1, 'Tomsk'), (1, 'Toscana'), (1, 'Toskent Shahri'), (1, 'Tripoli'), (1, 'Tucumán'), (1, 'Tula'), (1, 'Tunis'), (1, 'Tver'), (2, 'Tšeljabinsk'), (1, 'Tšuvassia'), (1, 'Udmurtia'), (1, 'Ulaanbaatar'), (1, 'Uljanovsk'), (12, 'Uttar Pradesh'), (1, 'Valencia'), (1, 'Valle'), (2, 'Veracruz'), (1, 'Viangchan'), (1, 'Victoria'), (1, 'Vilna'), (1, 'Vinnytsja'), (1, 'Virginia'), (1, 'Volgograd'), (1, 'Voronez'), (1, 'Wakayama'), (1, 'Washington'), (1, 'West Australia'), (1, 'West Azerbaidzan'), (3, 'West Bengali'), (1, 'West Götanmaan län'), (4, 'West Java'), (1, 'West Kasai'), (2, 'Western'), (1, 'Western Cape'), (1, 'Western Mindanao'), (2, 'Western Visayas'), (1, 'Wielkopolskie'), (1, 'Wien'), (1, 'Wilayah Persekutuan'), (1, 'Wisconsin'), (1, 'Xinxiang'), (1, 'Yerevan'), (1, 'Yogyakarta'), (1, 'Yucatán'), (1, 'Yunnan'), (1, 'Zachodnio-Pomorskie'), (1, 'Zaporizzja'), (3, 'Zhejiang'), (2, 'Zuid-Holland'), (1, 'Zulia'), (1, 'al-Daqahliya'), (2, 'al-Gharbiya'), (1, 'al-Qalyubiya'), (1, 'al-Sharqiya'), (1, 'al-Sulaymaniya'), (1, 'al-Tamim'), (1, 'al-Zarqa'), (1, 'Île-de-France'), (1, '–')]

===== Eval Round 796 =====
Database         : world_1
Prediction SQL   : SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District
Gold SQL         : SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Abidjan', 1), ('Abu Dhabi', 1), ('Adana', 1), ('Addis Abeba', 1), ('Aden', 1), ('Aguascalientes', 1), ('Ahal', 1), ('Aichi', 2), ('Alagoas', 1), ('Alberta', 2), ('Aleksandria', 1), ('Aleppo', 1), ('Alger', 1), ('Almaty Qalasy', 1), ('Altai', 1), ('Amazonas', 1), ('Amman', 1), ('Anambra & Enugu & Eb', 1), ('Andalusia', 2), ('Andhra Pradesh', 5), ('Anhui', 5), ('Ankara', 1), ('Antalya', 1), ('Antananarivo', 1), ('Antioquia', 1), ('Antwerpen', 1), ('Aragonia', 1), ('Aragua', 1), ('Arequipa', 1), ('Arizona', 3), ('Arkangeli', 1), ('Ashanti', 1), ('Assam', 1), ('Astrahan', 1), ('Asunción', 1), ('Atlantique', 1), ('Atlántico', 1), ('Attika', 1), ('Auckland', 1), ('Baden-Württemberg', 1), ('Baghdad', 1), ('Bahia', 2), ('Baijeri', 2), ('Baja California', 3), ('Baki', 1), ('Bali', 1), ('Baluchistan', 1), ('Bamako', 1), ('Banaadir', 1), ('Bangkok', 1), ('Bangui', 1), ('Baskimaa', 1), ('Basra', 1), ('Baškortostan', 1), ('Beirut', 1), ('Bengasi', 1), ('Berliini', 1), ('Bihar', 1), ('Bishkek shaary', 1), ('Blantyre', 1), ('Bolívar', 2), ('Bratislava', 1), ('Brazzaville', 1), ('Bremen', 1), ('British Colombia', 1), ('Brjansk', 1), ('Budapest', 1), ('Buenos Aires', 12), ('Bukarest', 1), ('Bulawayo', 1), ('Burjatia', 1), ('Bursa', 1), ('California', 8), ('Callao', 1), ('Campania', 1), ('Canary Islands', 1), ('Cap-Vert', 2), ('Carabobo', 1), ('Casablanca', 1), ('Ceará', 1), ('Central', 2), ('Central Java', 2), ('Central Macedonia', 1), ('Central Serbia', 1), ('Central Visayas', 1), ('Centre', 1), ('Chandigarh', 1), ('Chari-Baguirmi', 1), ('Chhatisgarh', 2), ('Chiapas', 1), ('Chiba', 4), ('Chihuahua', 2), ('Chisinau', 1), ('Chittagong', 1), ('Chollabuk', 1), ('Chongqing', 1), ('Chungchongbuk', 1), ('Coahuila de Zaragoza', 2), ('Coast', 1), ('Cochabamba', 1), ('Colorado', 2), ('Conakry', 1), ('Constantine', 1), ('Cortés', 1), ('Córdoba', 1), ('Damascus', 1), ('Dar es Salaam', 1), ('Delhi', 1), ('Dhaka', 1), ('District of Columbia', 1), ('Distrito Central', 1), ('Distrito Federal', 4), ('Distrito Nacional', 1), ('Diyarbakir', 1), ('Djibouti', 1), ('Dnipropetrovsk', 2), ('Doha', 1), ('Dolnoslaskie', 1), ('Donetsk', 3), ('Dubai', 1), ('Durango', 1), ('East Azerbaidzan', 1), ('East Java', 2), ('East Kasai', 1), ('Eastern Cape', 1), ('Ehime', 1), ('Emilia-Romagna', 1), ('England', 7), ('Esfahan', 1), ('Eskisehir', 1), ('Estuaire', 1), ('Fars', 1), ('Federaatio', 1), ('Florida', 2), ('Fujian', 2), ('Fukuoka', 2), ('Fukushima', 1), ('Fès-Boulemane', 1), ('Gansu', 1), ('Gauteng', 7), ('Gaza', 1), ('Gaziantep', 1), ('Georgia', 1), ('Gifu', 1), ('Gilan', 1), ('Giza', 1), ('Goiás', 1), ('Gomel', 1), ('Grad Sofija', 1), ('Grad Zagreb', 1), ('Greater Accra', 1), ('Guanajuato', 3), ('Guangdong', 4), ('Guangxi', 3), ('Guatemala', 1), ('Guayas', 1), ('Guerrero', 1), ('Guizhou', 2), ('Gujarat', 5), ('Habarovsk', 1), ('Hainan', 1), ('Haiphong', 1), ('Hamadan', 1), ('Hamburg', 1), ('Hamgyong N', 1), ('Hamgyong P', 1), ('Hanoi', 1), ('Harare', 1), ('Harjumaa', 1), ('Harkova', 1), ('Haryana', 1), ('Haute-Zaïre', 1), ('Hawaii', 1), ('Hebei', 6), ('Heilongjiang', 9), ('Henan', 7), ('Herson', 1), ('Hessen', 1), ('Hims', 1), ('Hiroshima', 2), ('Hlavní mesto Praha', 1), ('Ho Chi Minh City', 1), ('Hokkaido', 2), ('Hongkong', 1), ('Horad Minsk', 1), ('Hsinchu', 1), ('Hubei', 4), ('Hunan', 4), ('Hyogo', 4), ('Illinois', 1), ('Inchon', 1), ('Indiana', 1), ('Inner Mongolia', 3), ('Irbil', 1), ('Irkutsk', 1), ('Ishikawa', 1), ('Islamabad', 1), ('Istanbul', 1), ('Ivanovo', 1), ('Izmir', 1), ('Içel', 1), ('Jakarta Raya', 1), ('Jalisco', 3), ('Jambi', 1), ('Jammu and Kashmir', 1), ('Jaroslavl', 1), ('Jerusalem', 1), ('Jharkhand', 2), ('Jiangsu', 7), ('Jiangxi', 2), ('Jilin', 4), ('Jizní Morava', 1), ('Kabol', 1), ('Kadiogo', 1), ('Kaduna', 1), ('Kagoshima', 1), ('Kairo', 1), ('Kalimantan Barat', 1), ('Kalimantan Selatan', 1), ('Kalimantan Timur', 1), ('Kaliningrad', 1), ('Kanagawa', 5), ('Kano & Jigawa', 1), ('Kaohsiung', 1), ('Karnataka', 3), ('Karotegin', 1), ('Katalonia', 1), ('Kaunas', 1), ('Kayseri', 1), ('Keelung', 1), ('Kemerovo', 2), ('Kerala', 3), ('Kerman', 1), ('Kermanshah', 1), ('Khartum', 3), ('Khorasan', 1), ('Khulna', 1), ('Khuzestan', 1), ('Kinshasa', 1), ('Kiova', 1), ('Kirov', 1), ('Konya', 1), ('Kouilou', 1), ('Kowloon and New Kowl', 1), ('Krasnodar', 2), ('Krasnojarsk', 1), ('Kujawsko-Pomorskie', 1), ('Kumamoto', 1), ('Kurgan', 1), ('Kursk', 1), ('KwaZulu-Natal', 4), ('Kwangju', 1), ('Kwara & Kogi', 1), ('Kyonggi', 7), ('Kyongsangbuk', 1), ('Kyongsangnam', 3), ('Kyoto', 1), ('København', 1), ('La Habana', 1), ('La Libertad', 1), ('La Paz', 2), ('Lagos', 1), ('Lambayeque', 1), ('Lampung', 1), ('Lara', 1), ('Latium', 1), ('Leinster', 1), ('Liaoning', 12), ('Liguria', 1), ('Lilongwe', 1), ('Lima', 1), ('Lipetsk', 1), ('Lisboa', 2), ('Littoral', 1), ('Lodzkie', 1), ('Lombardia', 1), ('Loreto', 1), ('Louisiana', 1), ('Luanda', 1), ('Lubelskie', 1), ('Lugansk', 1), ('Lusaka', 1), ('Luxor', 1), ('Lviv', 1), ('Macau', 1), ('Madhya Pradesh', 5), ('Madrid', 1), ('Maekel', 1), ('Magdalena', 1), ('Maharashtra', 13), ('Malopolskie', 1), ('Managua', 1), ('Mandalay', 1), ('Manitoba', 1), ('Maputo', 2), ('Maranhão', 1), ('Maritime', 1), ('Markazi', 1), ('Marrakech-Tensift-Al', 1), ('Maryland', 1), ('Massachusetts', 1), ('Mato Grosso', 1), ('Mato Grosso do Sul', 1), ('Mazowieckie', 1), ('Medina', 1), ('Mekka', 3), ('Meknès-Tafilalet', 1), ('Michigan', 1), ('Michoacán de Ocampo', 1), ('Midi-Pyrénées', 1), ('Minas Gerais', 4), ('Minnesota', 1), ('Miranda', 1), ('Missouri', 1), ('Miyagi', 1), ('Mogiljov', 1), ('Montevideo', 1), ('Montserrado', 1), ('Moscow (City)', 1), ('Murcia', 1), ('Murmansk', 1), ('Mykolajiv', 1), ('México', 9), ('Nagano', 1), ('Nagasaki', 1), ('Nairobi', 1), ('Namangan', 1), ('Nampo-si', 1), ('Nara', 1), ('National Capital Reg', 12), ('Nebraska', 1), ('Nevada', 1), ('New Mexico', 1), ('New South Wales', 1), ('New York', 1), ('Newmaa', 1), ('Niamey', 1), ('Niedersachsen', 1), ('Niigata', 1), ('Ninawa', 1), ('Ningxia', 1), ('Nizni Novgorod', 1), ('Noord-Holland', 1), ('Nordrhein-Westfalen', 7), ('Norte de Santander', 1), ('North Carolina', 1), ('Northern Mindanao', 1), ('Nothwest Border Prov', 1), ('Nouakchott', 1), ('Novosibirsk', 1), ('Nuevo León', 3), ('Odesa', 1), ('Ogun', 1), ('Ohio', 2), ('Oita', 1), ('Okayama', 2), ('Oklahoma', 2), ('Omsk', 1), ('Ondo & Ekiti', 1), ('Ontario', 4), ('Oran', 1), ('Oregon', 1), ('Orenburg', 1), ('Oriental', 1), ('Orissa', 2), ('Osaka', 6), ('Oslo', 1), ('Ouest', 1), ('Oyo & Osun', 5), ('Panamá', 1), ('Paraná', 2), ('Paraíba', 2), ('Pará', 2), ('Peking', 1), ('Pennsylvania', 1), ('Penza', 1), ('Perak', 1), ('Perm', 1), ('Pernambuco', 3), ('Phnom Penh', 1), ('Piauí', 1), ('Pichincha', 1), ('Piemonte', 1), ('Pietari', 1), ('Pomorskie', 1), ('Port Said', 1), ('Primorje', 1), ('Provence-Alpes-Côte', 1), ('Puebla', 1), ('Punjab', 11), ('Pusan', 1), ('Pyongyang-si', 1), ('Qaraghandy', 1), ('Qinghai', 1), ('Qom', 1), ('Quang Nam-Da Nang', 1), ('Queensland', 1), ('Querétaro de Arteaga', 1), ('Quintana Roo', 1), ('Québec', 1), ('Rabat-Salé-Zammour-Z', 2), ('Rajasthan', 5), ('Rangoon [Yangon]', 1), ('Rhône-Alpes', 1), ('Riau', 1), ('Riika', 1), ('Rio Grande do Norte', 1), ('Rio Grande do Sul', 1), ('Rio de Janeiro', 8), ('Risaralda', 1), ('Rivers & Bayelsa', 1), ('Riyadh', 1), ('Rjazan', 1), ('Rostov-na-Donu', 1), ('Saitama', 3), ('Saksi', 2), ('Salta', 1), ('Samara', 2), ('Samarkand', 1), ('San Juan', 1), ('San Luis Potosí', 1), ('San Salvador', 1), ('Sanaa', 1), ('Sanliurfa', 1), ('Santa Catarina', 1), ('Santa Cruz', 1), ('Santa Fé', 2), ('Santafé de Bogotá', 1), ('Santander', 1), ('Santiago', 3), ('Santiago de Cuba', 1), ('Saratov', 1), ('Scotland', 2), ('Seoul', 1), ('Sergipe', 1), ('Shaanxi', 2), ('Shaba', 2), ('Shandong', 7), ('Shanghai', 1), ('Shanxi', 3), ('Shizuoka', 2), ('Sichuan', 3), ('Sinaloa', 3), ('Sindh', 2), ('Sisilia', 1), ('Sistan va Baluchesta', 1), ('Skopje', 1), ('Smolensk', 1), ('Sofala', 1), ('Sonora', 2), ('South Australia', 1), ('South Kazakstan', 1), ('Southern Mindanao', 2), ('Southern Tagalog', 2), ('Suez', 1), ('Sulawesi Selatan', 1), ('Sumatera Barat', 1), ('Sumatera Selatan', 1), ('Sumatera Utara', 1), ('Sverdlovsk', 2), ('São Paulo', 13), ('Tabasco', 1), ('Taegu', 1), ('Taejon', 1), ('Taichung', 1), ('Tainan', 1), ('Taipei', 5), ('Tamaulipas', 2), ('Tamil Nadu', 5), ('Tanger-Tétouan', 1), ('Tatarstan', 2), ('Tbilisi', 1), ('Teheran', 2), ('Tennessee', 2), ('Texas', 6), ('Tianjin', 1), ('Tjumen', 1), ('Tochigi', 1), ('Tokyo-to', 3), ('Tolima', 1), ('Tomsk', 1), ('Toscana', 1), ('Toskent Shahri', 1), ('Tripoli', 1), ('Tucumán', 1), ('Tula', 1), ('Tunis', 1), ('Tver', 1), ('Tšeljabinsk', 2), ('Tšuvassia', 1), ('Udmurtia', 1), ('Ulaanbaatar', 1), ('Uljanovsk', 1), ('Uttar Pradesh', 12), ('Valencia', 1), ('Valle', 1), ('Veracruz', 2), ('Viangchan', 1), ('Victoria', 1), ('Vilna', 1), ('Vinnytsja', 1), ('Virginia', 1), ('Volgograd', 1), ('Voronez', 1), ('Wakayama', 1), ('Washington', 1), ('West Australia', 1), ('West Azerbaidzan', 1), ('West Bengali', 3), ('West Götanmaan län', 1), ('West Java', 4), ('West Kasai', 1), ('Western', 2), ('Western Cape', 1), ('Western Mindanao', 1), ('Western Visayas', 2), ('Wielkopolskie', 1), ('Wien', 1), ('Wilayah Persekutuan', 1), ('Wisconsin', 1), ('Xinxiang', 1), ('Yerevan', 1), ('Yogyakarta', 1), ('Yucatán', 1), ('Yunnan', 1), ('Zachodnio-Pomorskie', 1), ('Zaporizzja', 1), ('Zhejiang', 3), ('Zuid-Holland', 2), ('Zulia', 1), ('al-Daqahliya', 1), ('al-Gharbiya', 2), ('al-Qalyubiya', 1), ('al-Sharqiya', 1), ('al-Sulaymaniya', 1), ('al-Tamim', 1), ('al-Zarqa', 1), ('Île-de-France', 1), ('–', 1)]
Gold Output      : [(1, 'Abidjan'), (1, 'Abu Dhabi'), (1, 'Adana'), (1, 'Addis Abeba'), (1, 'Aden'), (1, 'Aguascalientes'), (1, 'Ahal'), (2, 'Aichi'), (1, 'Alagoas'), (2, 'Alberta'), (1, 'Aleksandria'), (1, 'Aleppo'), (1, 'Alger'), (1, 'Almaty Qalasy'), (1, 'Altai'), (1, 'Amazonas'), (1, 'Amman'), (1, 'Anambra & Enugu & Eb'), (2, 'Andalusia'), (5, 'Andhra Pradesh'), (5, 'Anhui'), (1, 'Ankara'), (1, 'Antalya'), (1, 'Antananarivo'), (1, 'Antioquia'), (1, 'Antwerpen'), (1, 'Aragonia'), (1, 'Aragua'), (1, 'Arequipa'), (3, 'Arizona'), (1, 'Arkangeli'), (1, 'Ashanti'), (1, 'Assam'), (1, 'Astrahan'), (1, 'Asunción'), (1, 'Atlantique'), (1, 'Atlántico'), (1, 'Attika'), (1, 'Auckland'), (1, 'Baden-Württemberg'), (1, 'Baghdad'), (2, 'Bahia'), (2, 'Baijeri'), (3, 'Baja California'), (1, 'Baki'), (1, 'Bali'), (1, 'Baluchistan'), (1, 'Bamako'), (1, 'Banaadir'), (1, 'Bangkok'), (1, 'Bangui'), (1, 'Baskimaa'), (1, 'Basra'), (1, 'Baškortostan'), (1, 'Beirut'), (1, 'Bengasi'), (1, 'Berliini'), (1, 'Bihar'), (1, 'Bishkek shaary'), (1, 'Blantyre'), (2, 'Bolívar'), (1, 'Bratislava'), (1, 'Brazzaville'), (1, 'Bremen'), (1, 'British Colombia'), (1, 'Brjansk'), (1, 'Budapest'), (12, 'Buenos Aires'), (1, 'Bukarest'), (1, 'Bulawayo'), (1, 'Burjatia'), (1, 'Bursa'), (8, 'California'), (1, 'Callao'), (1, 'Campania'), (1, 'Canary Islands'), (2, 'Cap-Vert'), (1, 'Carabobo'), (1, 'Casablanca'), (1, 'Ceará'), (2, 'Central'), (2, 'Central Java'), (1, 'Central Macedonia'), (1, 'Central Serbia'), (1, 'Central Visayas'), (1, 'Centre'), (1, 'Chandigarh'), (1, 'Chari-Baguirmi'), (2, 'Chhatisgarh'), (1, 'Chiapas'), (4, 'Chiba'), (2, 'Chihuahua'), (1, 'Chisinau'), (1, 'Chittagong'), (1, 'Chollabuk'), (1, 'Chongqing'), (1, 'Chungchongbuk'), (2, 'Coahuila de Zaragoza'), (1, 'Coast'), (1, 'Cochabamba'), (2, 'Colorado'), (1, 'Conakry'), (1, 'Constantine'), (1, 'Cortés'), (1, 'Córdoba'), (1, 'Damascus'), (1, 'Dar es Salaam'), (1, 'Delhi'), (1, 'Dhaka'), (1, 'District of Columbia'), (1, 'Distrito Central'), (4, 'Distrito Federal'), (1, 'Distrito Nacional'), (1, 'Diyarbakir'), (1, 'Djibouti'), (2, 'Dnipropetrovsk'), (1, 'Doha'), (1, 'Dolnoslaskie'), (3, 'Donetsk'), (1, 'Dubai'), (1, 'Durango'), (1, 'East Azerbaidzan'), (2, 'East Java'), (1, 'East Kasai'), (1, 'Eastern Cape'), (1, 'Ehime'), (1, 'Emilia-Romagna'), (7, 'England'), (1, 'Esfahan'), (1, 'Eskisehir'), (1, 'Estuaire'), (1, 'Fars'), (1, 'Federaatio'), (2, 'Florida'), (2, 'Fujian'), (2, 'Fukuoka'), (1, 'Fukushima'), (1, 'Fès-Boulemane'), (1, 'Gansu'), (7, 'Gauteng'), (1, 'Gaza'), (1, 'Gaziantep'), (1, 'Georgia'), (1, 'Gifu'), (1, 'Gilan'), (1, 'Giza'), (1, 'Goiás'), (1, 'Gomel'), (1, 'Grad Sofija'), (1, 'Grad Zagreb'), (1, 'Greater Accra'), (3, 'Guanajuato'), (4, 'Guangdong'), (3, 'Guangxi'), (1, 'Guatemala'), (1, 'Guayas'), (1, 'Guerrero'), (2, 'Guizhou'), (5, 'Gujarat'), (1, 'Habarovsk'), (1, 'Hainan'), (1, 'Haiphong'), (1, 'Hamadan'), (1, 'Hamburg'), (1, 'Hamgyong N'), (1, 'Hamgyong P'), (1, 'Hanoi'), (1, 'Harare'), (1, 'Harjumaa'), (1, 'Harkova'), (1, 'Haryana'), (1, 'Haute-Zaïre'), (1, 'Hawaii'), (6, 'Hebei'), (9, 'Heilongjiang'), (7, 'Henan'), (1, 'Herson'), (1, 'Hessen'), (1, 'Hims'), (2, 'Hiroshima'), (1, 'Hlavní mesto Praha'), (1, 'Ho Chi Minh City'), (2, 'Hokkaido'), (1, 'Hongkong'), (1, 'Horad Minsk'), (1, 'Hsinchu'), (4, 'Hubei'), (4, 'Hunan'), (4, 'Hyogo'), (1, 'Illinois'), (1, 'Inchon'), (1, 'Indiana'), (3, 'Inner Mongolia'), (1, 'Irbil'), (1, 'Irkutsk'), (1, 'Ishikawa'), (1, 'Islamabad'), (1, 'Istanbul'), (1, 'Ivanovo'), (1, 'Izmir'), (1, 'Içel'), (1, 'Jakarta Raya'), (3, 'Jalisco'), (1, 'Jambi'), (1, 'Jammu and Kashmir'), (1, 'Jaroslavl'), (1, 'Jerusalem'), (2, 'Jharkhand'), (7, 'Jiangsu'), (2, 'Jiangxi'), (4, 'Jilin'), (1, 'Jizní Morava'), (1, 'Kabol'), (1, 'Kadiogo'), (1, 'Kaduna'), (1, 'Kagoshima'), (1, 'Kairo'), (1, 'Kalimantan Barat'), (1, 'Kalimantan Selatan'), (1, 'Kalimantan Timur'), (1, 'Kaliningrad'), (5, 'Kanagawa'), (1, 'Kano & Jigawa'), (1, 'Kaohsiung'), (3, 'Karnataka'), (1, 'Karotegin'), (1, 'Katalonia'), (1, 'Kaunas'), (1, 'Kayseri'), (1, 'Keelung'), (2, 'Kemerovo'), (3, 'Kerala'), (1, 'Kerman'), (1, 'Kermanshah'), (3, 'Khartum'), (1, 'Khorasan'), (1, 'Khulna'), (1, 'Khuzestan'), (1, 'Kinshasa'), (1, 'Kiova'), (1, 'Kirov'), (1, 'Konya'), (1, 'Kouilou'), (1, 'Kowloon and New Kowl'), (2, 'Krasnodar'), (1, 'Krasnojarsk'), (1, 'Kujawsko-Pomorskie'), (1, 'Kumamoto'), (1, 'Kurgan'), (1, 'Kursk'), (4, 'KwaZulu-Natal'), (1, 'Kwangju'), (1, 'Kwara & Kogi'), (7, 'Kyonggi'), (1, 'Kyongsangbuk'), (3, 'Kyongsangnam'), (1, 'Kyoto'), (1, 'København'), (1, 'La Habana'), (1, 'La Libertad'), (2, 'La Paz'), (1, 'Lagos'), (1, 'Lambayeque'), (1, 'Lampung'), (1, 'Lara'), (1, 'Latium'), (1, 'Leinster'), (12, 'Liaoning'), (1, 'Liguria'), (1, 'Lilongwe'), (1, 'Lima'), (1, 'Lipetsk'), (2, 'Lisboa'), (1, 'Littoral'), (1, 'Lodzkie'), (1, 'Lombardia'), (1, 'Loreto'), (1, 'Louisiana'), (1, 'Luanda'), (1, 'Lubelskie'), (1, 'Lugansk'), (1, 'Lusaka'), (1, 'Luxor'), (1, 'Lviv'), (1, 'Macau'), (5, 'Madhya Pradesh'), (1, 'Madrid'), (1, 'Maekel'), (1, 'Magdalena'), (13, 'Maharashtra'), (1, 'Malopolskie'), (1, 'Managua'), (1, 'Mandalay'), (1, 'Manitoba'), (2, 'Maputo'), (1, 'Maranhão'), (1, 'Maritime'), (1, 'Markazi'), (1, 'Marrakech-Tensift-Al'), (1, 'Maryland'), (1, 'Massachusetts'), (1, 'Mato Grosso'), (1, 'Mato Grosso do Sul'), (1, 'Mazowieckie'), (1, 'Medina'), (3, 'Mekka'), (1, 'Meknès-Tafilalet'), (1, 'Michigan'), (1, 'Michoacán de Ocampo'), (1, 'Midi-Pyrénées'), (4, 'Minas Gerais'), (1, 'Minnesota'), (1, 'Miranda'), (1, 'Missouri'), (1, 'Miyagi'), (1, 'Mogiljov'), (1, 'Montevideo'), (1, 'Montserrado'), (1, 'Moscow (City)'), (1, 'Murcia'), (1, 'Murmansk'), (1, 'Mykolajiv'), (9, 'México'), (1, 'Nagano'), (1, 'Nagasaki'), (1, 'Nairobi'), (1, 'Namangan'), (1, 'Nampo-si'), (1, 'Nara'), (12, 'National Capital Reg'), (1, 'Nebraska'), (1, 'Nevada'), (1, 'New Mexico'), (1, 'New South Wales'), (1, 'New York'), (1, 'Newmaa'), (1, 'Niamey'), (1, 'Niedersachsen'), (1, 'Niigata'), (1, 'Ninawa'), (1, 'Ningxia'), (1, 'Nizni Novgorod'), (1, 'Noord-Holland'), (7, 'Nordrhein-Westfalen'), (1, 'Norte de Santander'), (1, 'North Carolina'), (1, 'Northern Mindanao'), (1, 'Nothwest Border Prov'), (1, 'Nouakchott'), (1, 'Novosibirsk'), (3, 'Nuevo León'), (1, 'Odesa'), (1, 'Ogun'), (2, 'Ohio'), (1, 'Oita'), (2, 'Okayama'), (2, 'Oklahoma'), (1, 'Omsk'), (1, 'Ondo & Ekiti'), (4, 'Ontario'), (1, 'Oran'), (1, 'Oregon'), (1, 'Orenburg'), (1, 'Oriental'), (2, 'Orissa'), (6, 'Osaka'), (1, 'Oslo'), (1, 'Ouest'), (5, 'Oyo & Osun'), (1, 'Panamá'), (2, 'Paraná'), (2, 'Paraíba'), (2, 'Pará'), (1, 'Peking'), (1, 'Pennsylvania'), (1, 'Penza'), (1, 'Perak'), (1, 'Perm'), (3, 'Pernambuco'), (1, 'Phnom Penh'), (1, 'Piauí'), (1, 'Pichincha'), (1, 'Piemonte'), (1, 'Pietari'), (1, 'Pomorskie'), (1, 'Port Said'), (1, 'Primorje'), (1, 'Provence-Alpes-Côte'), (1, 'Puebla'), (11, 'Punjab'), (1, 'Pusan'), (1, 'Pyongyang-si'), (1, 'Qaraghandy'), (1, 'Qinghai'), (1, 'Qom'), (1, 'Quang Nam-Da Nang'), (1, 'Queensland'), (1, 'Querétaro de Arteaga'), (1, 'Quintana Roo'), (1, 'Québec'), (2, 'Rabat-Salé-Zammour-Z'), (5, 'Rajasthan'), (1, 'Rangoon [Yangon]'), (1, 'Rhône-Alpes'), (1, 'Riau'), (1, 'Riika'), (1, 'Rio Grande do Norte'), (1, 'Rio Grande do Sul'), (8, 'Rio de Janeiro'), (1, 'Risaralda'), (1, 'Rivers & Bayelsa'), (1, 'Riyadh'), (1, 'Rjazan'), (1, 'Rostov-na-Donu'), (3, 'Saitama'), (2, 'Saksi'), (1, 'Salta'), (2, 'Samara'), (1, 'Samarkand'), (1, 'San Juan'), (1, 'San Luis Potosí'), (1, 'San Salvador'), (1, 'Sanaa'), (1, 'Sanliurfa'), (1, 'Santa Catarina'), (1, 'Santa Cruz'), (2, 'Santa Fé'), (1, 'Santafé de Bogotá'), (1, 'Santander'), (3, 'Santiago'), (1, 'Santiago de Cuba'), (1, 'Saratov'), (2, 'Scotland'), (1, 'Seoul'), (1, 'Sergipe'), (2, 'Shaanxi'), (2, 'Shaba'), (7, 'Shandong'), (1, 'Shanghai'), (3, 'Shanxi'), (2, 'Shizuoka'), (3, 'Sichuan'), (3, 'Sinaloa'), (2, 'Sindh'), (1, 'Sisilia'), (1, 'Sistan va Baluchesta'), (1, 'Skopje'), (1, 'Smolensk'), (1, 'Sofala'), (2, 'Sonora'), (1, 'South Australia'), (1, 'South Kazakstan'), (2, 'Southern Mindanao'), (2, 'Southern Tagalog'), (1, 'Suez'), (1, 'Sulawesi Selatan'), (1, 'Sumatera Barat'), (1, 'Sumatera Selatan'), (1, 'Sumatera Utara'), (2, 'Sverdlovsk'), (13, 'São Paulo'), (1, 'Tabasco'), (1, 'Taegu'), (1, 'Taejon'), (1, 'Taichung'), (1, 'Tainan'), (5, 'Taipei'), (2, 'Tamaulipas'), (5, 'Tamil Nadu'), (1, 'Tanger-Tétouan'), (2, 'Tatarstan'), (1, 'Tbilisi'), (2, 'Teheran'), (2, 'Tennessee'), (6, 'Texas'), (1, 'Tianjin'), (1, 'Tjumen'), (1, 'Tochigi'), (3, 'Tokyo-to'), (1, 'Tolima'), (1, 'Tomsk'), (1, 'Toscana'), (1, 'Toskent Shahri'), (1, 'Tripoli'), (1, 'Tucumán'), (1, 'Tula'), (1, 'Tunis'), (1, 'Tver'), (2, 'Tšeljabinsk'), (1, 'Tšuvassia'), (1, 'Udmurtia'), (1, 'Ulaanbaatar'), (1, 'Uljanovsk'), (12, 'Uttar Pradesh'), (1, 'Valencia'), (1, 'Valle'), (2, 'Veracruz'), (1, 'Viangchan'), (1, 'Victoria'), (1, 'Vilna'), (1, 'Vinnytsja'), (1, 'Virginia'), (1, 'Volgograd'), (1, 'Voronez'), (1, 'Wakayama'), (1, 'Washington'), (1, 'West Australia'), (1, 'West Azerbaidzan'), (3, 'West Bengali'), (1, 'West Götanmaan län'), (4, 'West Java'), (1, 'West Kasai'), (2, 'Western'), (1, 'Western Cape'), (1, 'Western Mindanao'), (2, 'Western Visayas'), (1, 'Wielkopolskie'), (1, 'Wien'), (1, 'Wilayah Persekutuan'), (1, 'Wisconsin'), (1, 'Xinxiang'), (1, 'Yerevan'), (1, 'Yogyakarta'), (1, 'Yucatán'), (1, 'Yunnan'), (1, 'Zachodnio-Pomorskie'), (1, 'Zaporizzja'), (3, 'Zhejiang'), (2, 'Zuid-Holland'), (1, 'Zulia'), (1, 'al-Daqahliya'), (2, 'al-Gharbiya'), (1, 'al-Qalyubiya'), (1, 'al-Sharqiya'), (1, 'al-Sulaymaniya'), (1, 'al-Tamim'), (1, 'al-Zarqa'), (1, 'Île-de-France'), (1, '–')]

===== Eval Round 797 =====
Database         : world_1
Prediction SQL   : SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm
Gold SQL         : SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Commonwealth of the US', 3947000), ('Constitutional Monarchy', 272881000), ('Constitutional Monarchy (Emirate)', 1972000), ('Constitutional Monarchy, Federation', 60272000), ('Dependent Territory of the UK', 191000), ('Emirate Federation', 2441000), ('Federal Republic', 440455500), ('Federation', 7160400), ('Monarchy', 599000), ('Monarchy (Emirate)', 617000), ('Monarchy (Sultanate)', 328000), ('Nonmetropolitan Territory of France', 449000), ('Nonmetropolitan Territory of The Netherlands', 320000), ('Overseas Department of France', 1731000), ('Parliamentary Coprincipality', 78000), ('Part of Denmark', 43000), ('Republic', 338610500), ('Socialistic Republic', 11201000), ('Socialistic State', 5605000), ('Special Administrative Region of China', 7255000), ('Territorial Collectivity of France', 7000), ('US Territory', 329000)]
Gold Output      : [(3947000, 'Commonwealth of the US'), (1972000, 'Constitutional Monarchy (Emirate)'), (82516000, 'Constitutional Monarchy, Federation'), (193050, 'Dependent Territory of the UK'), (2441000, 'Emirate Federation'), (7160400, 'Federation'), (617000, 'Monarchy (Emirate)'), (2870000, 'Monarchy (Sultanate)'), (464000, 'Nonmetropolitan Territory of France'), (320000, 'Nonmetropolitan Territory of The Netherlands'), (1731000, 'Overseas Department of France'), (78000, 'Parliamentary Coprincipality'), (99000, 'Part of Denmark'), (115072000, 'Socialistic Republic'), (5605000, 'Socialistic State'), (7255000, 'Special Administrative Region of China'), (329000, 'US Territory')]

===== Eval Round 798 =====
Database         : world_1
Prediction SQL   : SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm
Gold SQL         : SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Commonwealth of the US', 3947000), ('Constitutional Monarchy', 272881000), ('Constitutional Monarchy (Emirate)', 1972000), ('Constitutional Monarchy, Federation', 60272000), ('Dependent Territory of the UK', 191000), ('Emirate Federation', 2441000), ('Federal Republic', 440455500), ('Federation', 7160400), ('Monarchy', 599000), ('Monarchy (Emirate)', 617000), ('Monarchy (Sultanate)', 328000), ('Nonmetropolitan Territory of France', 449000), ('Nonmetropolitan Territory of The Netherlands', 320000), ('Overseas Department of France', 1731000), ('Parliamentary Coprincipality', 78000), ('Part of Denmark', 43000), ('Republic', 338610500), ('Socialistic Republic', 11201000), ('Socialistic State', 5605000), ('Special Administrative Region of China', 7255000), ('Territorial Collectivity of France', 7000), ('US Territory', 329000)]
Gold Output      : [(3947000, 'Commonwealth of the US'), (1972000, 'Constitutional Monarchy (Emirate)'), (82516000, 'Constitutional Monarchy, Federation'), (193050, 'Dependent Territory of the UK'), (2441000, 'Emirate Federation'), (7160400, 'Federation'), (617000, 'Monarchy (Emirate)'), (2870000, 'Monarchy (Sultanate)'), (464000, 'Nonmetropolitan Territory of France'), (320000, 'Nonmetropolitan Territory of The Netherlands'), (1731000, 'Overseas Department of France'), (78000, 'Parliamentary Coprincipality'), (99000, 'Part of Denmark'), (115072000, 'Socialistic Republic'), (5605000, 'Socialistic State'), (7255000, 'Special Administrative Region of China'), (329000, 'US Territory')]

===== Eval Round 799 =====
Database         : world_1
Prediction SQL   : SELECT Continent, AVG(LifeExpectancy), SUM(Population) FROM country WHERE LifeExpectancy < 72 GROUP BY Continent
Gold SQL         : SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Africa', 50.90377358490565, 768579000), ('Asia', 63.91621621621622, 3480378000), ('Europe', 69.0, 267630700), ('North America', 67.61538461538463, 138422000), ('Oceania', 66.2076923076923, 6866000), ('South America', 67.62857142857142, 260351000)]
Gold Output      : [(784475000, 52.571929824561394, 'Africa'), (3705025700, 67.44117647058825, 'Asia'), (30401150, 69.715, 'Oceania'), (345780000, 70.94615384615386, 'South America')]

===== Eval Round 800 =====
Database         : world_1
Prediction SQL   : SELECT Continent, SUM(Population), AVG(LifeExpectancy) FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72
Gold SQL         : SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Africa', 784475000, 52.571929824561394), ('Asia', 3705025700, 67.44117647058825), ('Oceania', 30401150, 69.715), ('South America', 345780000, 70.94615384615386)]
Gold Output      : [(784475000, 52.571929824561394, 'Africa'), (3705025700, 67.44117647058825, 'Asia'), (30401150, 69.715, 'Oceania'), (345780000, 70.94615384615386, 'South America')]

===== Eval Round 801 =====
Database         : world_1
Prediction SQL   : SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
Gold SQL         : SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Russian Federation', 17075400.0), ('Antarctica', 13120000.0), ('Canada', 9970610.0), ('China', 9572900.0), ('United States', 9363520.0)]
Gold Output      : [('Russian Federation', 17075400.0), ('Antarctica', 13120000.0), ('Canada', 9970610.0), ('China', 9572900.0), ('United States', 9363520.0)]

===== Eval Round 802 =====
Database         : world_1
Prediction SQL   : SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
Gold SQL         : SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Russian Federation', 17075400.0), ('Antarctica', 13120000.0), ('Canada', 9970610.0), ('China', 9572900.0), ('United States', 9363520.0)]
Gold Output      : [('Russian Federation', 17075400.0), ('Antarctica', 13120000.0), ('Canada', 9970610.0), ('China', 9572900.0), ('United States', 9363520.0)]

===== Eval Round 803 =====
Database         : world_1
Prediction SQL   : SELECT Name FROM country ORDER BY Population DESC LIMIT 3
Gold SQL         : SELECT Name FROM country ORDER BY Population DESC LIMIT 3
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('China',), ('India',), ('United States',)]
Gold Output      : [('China',), ('India',), ('United States',)]

===== Eval Round 804 =====
Database         : world_1
Prediction SQL   : SELECT Name FROM country ORDER BY Population DESC LIMIT 3
Gold SQL         : SELECT Name FROM country ORDER BY Population DESC LIMIT 3
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('China',), ('India',), ('United States',)]
Gold Output      : [('China',), ('India',), ('United States',)]

===== Eval Round 805 =====
Database         : world_1
Prediction SQL   : SELECT Name FROM country ORDER BY Population ASC LIMIT 3
Gold SQL         : SELECT Name FROM country ORDER BY Population ASC LIMIT 3
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Antarctica',), ('French Southern territories',), ('Bouvet Island',)]
Gold Output      : [('Antarctica',), ('French Southern territories',), ('Bouvet Island',)]

===== Eval Round 806 =====
Database         : world_1
Prediction SQL   : SELECT Name FROM country ORDER BY Population ASC LIMIT 3
Gold SQL         : SELECT Name FROM country ORDER BY Population ASC LIMIT 3
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Antarctica',), ('French Southern territories',), ('Bouvet Island',)]
Gold Output      : [('Antarctica',), ('French Southern territories',), ('Bouvet Island',)]

===== Eval Round 807 =====
Database         : world_1
Prediction SQL   : SELECT COUNT(*) FROM country WHERE Continent = 'Asia'
Gold SQL         : SELECT count(*) FROM country WHERE continent  =  "Asia"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(51,)]
Gold Output      : [(51,)]

===== Eval Round 808 =====
Database         : world_1
Prediction SQL   : SELECT count(*) FROM country WHERE Continent = 'Asia'
Gold SQL         : SELECT count(*) FROM country WHERE continent  =  "Asia"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(51,)]
Gold Output      : [(51,)]

===== Eval Round 809 =====
Database         : world_1
Prediction SQL   : SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000
Gold SQL         : SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : []

===== Eval Round 810 =====
Database         : world_1
Prediction SQL   : SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000
Gold SQL         : SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : []
Gold Output      : []

===== Eval Round 811 =====
Database         : world_1
Prediction SQL   : SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000
Gold SQL         : select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
Exec Accuracy(EX): 0
Exact Match(EM)  : True
Pred Output      : [(480753000, 1344763.7222222222)]
Gold Output      : [(None, None)]

===== Eval Round 812 =====
Database         : world_1
Prediction SQL   : SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000
Gold SQL         : select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
Exec Accuracy(EX): 0
Exact Match(EM)  : True
Pred Output      : [(480753000, 1344763.7222222222)]
Gold Output      : [(None, None)]

===== Eval Round 813 =====
Database         : world_1
Prediction SQL   : SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000
Gold SQL         : SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Qandahar',), ('Herat',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Tirana',), ('Oran',), ('Constantine',), ('Annaba',), ('Batna',), ('Sétif',), ('Huambo',), ('Dubai',), ('Abu Dhabi',), ('Sharja',), ('al-Ayn',), ('Lomas de Zamora',), ('Quilmes',), ('Almirante Brown',), ('La Plata',), ('Mar del Plata',), ('San Miguel de Tucumán',), ('Lanús',), ('Merlo',), ('General San Martín',), ('Salta',), ('Moreno',), ('Santa Fé',), ('Avellaneda',), ('Tres de Febrero',), ('Morón',), ('Florencio Varela',), ('San Isidro',), ('Tigre',), ('Malvinas Argentinas',), ('Vicente López',), ('Berazategui',), ('Corrientes',), ('San Miguel',), ('Bahía Blanca',), ('Esteban Echeverría',), ('Resistencia',), ('José C. Paz',), ('Paraná',), ('Godoy Cruz',), ('Posadas',), ('Guaymallén',), ('Santiago del Estero',), ('San Salvador de Jujuy',), ('Hurlingham',), ('Neuquén',), ('Gjumri',), ('Vanadzor',), ('Canberra',), ('Gold Coast',), ('Newcastle',), ('Central Coast',), ('Wollongong',), ('Gäncä',), ('Sumqayit',), ('Nassau',), ('Khulna',), ('Rajshahi',), ('Narayanganj',), ('Rangpur',), ('Mymensingh',), ('Barisal',), ('Tungi',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Cotonou',), ('Porto-Novo',), ('La Paz',), ('El Alto',), ('Cochabamba',), ('Oruro',), ('Sucre',), ('Sarajevo',), ('Gaborone',), ('São Gonçalo',), ('Nova Iguaçu',), ('São Luís',), ('Maceió',), ('Duque de Caxias',), ('São Bernardo do Campo',), ('Teresina',), ('Natal',), ('Osasco',), ('Campo Grande',), ('Santo André',), ('João Pessoa',), ('Jaboatão dos Guararapes',), ('Contagem',), ('São José dos Campos',), ('Uberlândia',), ('Feira de Santana',), ('Ribeirão Preto',), ('Sorocaba',), ('Niterói',), ('Cuiabá',), ('Juiz de Fora',), ('Aracaju',), ('São João de Meriti',), ('Londrina',), ('Joinville',), ('Belford Roxo',), ('Santos',), ('Ananindeua',), ('Campos dos Goytacazes',), ('Mauá',), ('Carapicuíba',), ('Olinda',), ('Campina Grande',), ('São José do Rio Preto',), ('Caxias do Sul',), ('Moji das Cruzes',), ('Diadema',), ('Aparecida de Goiânia',), ('Piracicaba',), ('Cariacica',), ('Vila Velha',), ('Pelotas',), ('Bauru',), ('Porto Velho',), ('Serra',), ('Betim',), ('Jundíaí',), ('Canoas',), ('Franca',), ('São Vicente',), ('Maringá',), ('Montes Claros',), ('Anápolis',), ('Florianópolis',), ('Petrópolis',), ('Itaquaquecetuba',), ('Vitória',), ('Ponta Grossa',), ('Rio Branco',), ('Foz do Iguaçu',), ('Macapá',), ('Ilhéus',), ('Vitória da Conquista',), ('Uberaba',), ('Paulista',), ('Limeira',), ('Blumenau',), ('Caruaru',), ('Santarém',), ('Volta Redonda',), ('Novo Hamburgo',), ('Caucaia',), ('Santa Maria',), ('Cascavel',), ('Guarujá',), ('Ribeirão das Neves',), ('Governador Valadares',), ('Taubaté',), ('Imperatriz',), ('Gravataí',), ('Embu',), ('Mossoró',), ('Várzea Grande',), ('Petrolina',), ('Barueri',), ('Viamão',), ('Ipatinga',), ('Juazeiro',), ('Juazeiro do Norte',), ('Taboão da Serra',), ('São José dos Pinhais',), ('Magé',), ('Suzano',), ('São Leopoldo',), ('Marília',), ('São Carlos',), ('Sumaré',), ('Presidente Prudente',), ('Divinópolis',), ('Sete Lagoas',), ('Rio Grande',), ('Itabuna',), ('Jequié',), ('Arapiraca',), ('Colombo',), ('Americana',), ('Alvorada',), ('Araraquara',), ('Itaboraí',), ('Santa Bárbara d´Oeste',), ('Nova Friburgo',), ('Jacareí',), ('Araçatuba',), ('Barra Mansa',), ('Praia Grande',), ('Marabá',), ('Criciúma',), ('Boa Vista',), ('Passo Fundo',), ('Dourados',), ('Santa Luzia',), ('Rio Claro',), ('Maracanaú',), ('Guarapuava',), ('Glasgow',), ('Liverpool',), ('Edinburgh',), ('Sheffield',), ('Manchester',), ('Leeds',), ('Bristol',), ('Cardiff',), ('Coventry',), ('Leicester',), ('Bradford',), ('Belfast',), ('Nottingham',), ('Kingston upon Hull',), ('Plymouth',), ('Stoke-on-Trent',), ('Wolverhampton',), ('Derby',), ('Swansea',), ('Southampton',), ('Aberdeen',), ('Northampton',), ('Dudley',), ('Portsmouth',), ('Newcastle upon Tyne',), ('Sunderland',), ('Luton',), ('Swindon',), ('Southend-on-Sea',), ('Walsall',), ('Bournemouth',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Ouagadougou',), ('Bobo-Dioulasso',), ('Bujumbura',), ('Puente Alto',), ('Viña del Mar',), ('Valparaíso',), ('Talcahuano',), ('Antofagasta',), ('San Bernardo',), ('Temuco',), ('Concepción',), ('Rancagua',), ('Arica',), ('Talca',), ('Chillán',), ('Iquique',), ('San José',), ('Djibouti',), ('Santiago de los Caballeros',), ('Cuenca',), ('Machala',), ('Santo Domingo de los Colorados',), ('Portoviejo',), ('Ambato',), ('Manta',), ('Shubra al-Khayma',), ('Port Said',), ('Suez',), ('al-Mahallat al-Kubra',), ('Tanta',), ('al-Mansura',), ('Luxor',), ('Asyut',), ('Bahtim',), ('Zagazig',), ('al-Faiyum',), ('Ismailia',), ('Kafr al-Dawwar',), ('Assuan',), ('Damanhur',), ('al-Minya',), ('Bani Suwayf',), ('Qina',), ('Sawhaj',), ('San Salvador',), ('Asmara',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('Málaga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('Córdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gijón',), ('L´Hospitalet de Llobregat',), ('Granada',), ('A Coruña (La Coruña)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('Móstoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iruña]',), ('Donostia-San Sebastián',), ('Cartagena',), ('Leganés',), ('Fuenlabrada',), ('Almería',), ('Terrassa',), ('Alcalá de Henares',), ('Burgos',), ('Johannesburg',), ('Port Elizabeth',), ('Pretoria',), ('Inanda',), ('Durban',), ('Vanderbijlpark',), ('Kempton Park',), ('Alberton',), ('Pinetown',), ('Pietermaritzburg',), ('Benoni',), ('Randburg',), ('Umlazi',), ('Bloemfontein',), ('Vereeniging',), ('Wonderboom',), ('Roodepoort',), ('Boksburg',), ('Klerksdorp',), ('Soshanguve',), ('Newcastle',), ('East London',), ('Welkom',), ('Kimberley',), ('Uitenhage',), ('Chatsworth',), ('Mdantsane',), ('Krugersdorp',), ('Botshabelo',), ('Brakpan',), ('Witbank',), ('Oberholzer',), ('Germiston',), ('Springs',), ('Dire Dawa',), ('Cebu',), ('Zamboanga',), ('Pasig',), ('Valenzuela',), ('Las Piñas',), ('Antipolo',), ('Taguig',), ('Cagayan de Oro',), ('Parañaque',), ('Makati',), ('Bacolod',), ('General Santos',), ('Marikina',), ('Dasmariñas',), ('Muntinlupa',), ('Iloilo',), ('Pasay',), ('Malabon',), ('San José del Monte',), ('Bacoor',), ('Iligan',), ('Calamba',), ('Mandaluyong',), ('Butuan',), ('Angeles',), ('Tarlac',), ('Mandaue',), ('Baguio',), ('Batangas',), ('Cainta',), ('San Pedro',), ('Navotas',), ('Cabanatuan',), ('San Fernando',), ('Lipa',), ('Lapu-Lapu',), ('San Pablo',), ('Biñan',), ('Taytay',), ('Lucena',), ('Imus',), ('Olongapo',), ('Binangonan',), ('Santa Rosa',), ('Tagum',), ('Tacloban',), ('Malolos',), ('Mabalacat',), ('Cotabato',), ('Meycauayan',), ('Puerto Princesa',), ('Libreville',), ('Kutaisi',), ('Kumasi',), ('Ciudad de Guatemala',), ('Mixco',), ('Bissau',), ('Georgetown',), ('Port-au-Prince',), ('Carrefour',), ('Delmas',), ('Tegucigalpa',), ('San Pedro Sula',), ('Malang',), ('Bandar Lampung',), ('Bekasi',), ('Padang',), ('Surakarta',), ('Banjarmasin',), ('Pekan Baru',), ('Denpasar',), ('Yogyakarta',), ('Pontianak',), ('Samarinda',), ('Jambi',), ('Depok',), ('Cimahi',), ('Balikpapan',), ('Manado',), ('Mataram',), ('Pekalongan',), ('Tegal',), ('Bogor',), ('Ciputat',), ('Pondokgede',), ('Cirebon',), ('Kediri',), ('Ambon',), ('Jember',), ('Cilacap',), ('Cimanggis',), ('Pematang Siantar',), ('Purwokerto',), ('Ciomas',), ('Tasikmalaya',), ('Madiun',), ('Srinagar',), ('Agra',), ('Coimbatore',), ('Thane (Thana)',), ('Allahabad',), ('Meerut',), ('Vishakhapatnam',), ('Jabalpur',), ('Amritsar',), ('Faridabad',), ('Vijayawada',), ('Gwalior',), ('Jodhpur',), ('Nashik (Nasik)',), ('Hubli-Dharwad',), ('Solapur (Sholapur)',), ('Ranchi',), ('Bareilly',), ('Guwahati (Gauhati)',), ('Shambajinagar (Aurangabad)',), ('Cochin (Kochi)',), ('Rajkot',), ('Kota',), ('Thiruvananthapuram (Trivandrum',), ('Pimpri-Chinchwad',), ('Jalandhar (Jullundur)',), ('Gorakhpur',), ('Chandigarh',), ('Mysore',), ('Aligarh',), ('Guntur',), ('Jamshedpur',), ('Ghaziabad',), ('Warangal',), ('Raipur',), ('Moradabad',), ('Durgapur',), ('Amravati',), ('Calicut (Kozhikode)',), ('Bikaner',), ('Bhubaneswar',), ('Kolhapur',), ('Kataka (Cuttack)',), ('Ajmer',), ('Bhavnagar',), ('Tiruchirapalli',), ('Bhilai',), ('Bhiwandi',), ('Saharanpur',), ('Ulhasnagar',), ('Salem',), ('Ujjain',), ('Malegaon',), ('Jamnagar',), ('Bokaro Steel City',), ('Akola',), ('Belgaum',), ('Rajahmundry',), ('Nellore',), ('Udaipur',), ('New Bombay',), ('Bhatpara',), ('Gulbarga',), ('New Delhi',), ('Jhansi',), ('Gaya',), ('Kakinada',), ('Dhule (Dhulia)',), ('Panihati',), ('Nanded (Nander)',), ('Mangalore',), ('Dehra Dun',), ('Kamarhati',), ('Davangere',), ('Asansol',), ('Bhagalpur',), ('Bellary',), ('Barddhaman (Burdwan)',), ('Rampur',), ('Jalgaon',), ('Muzaffarpur',), ('Nizamabad',), ('Muzaffarnagar',), ('Patiala',), ('Shahjahanpur',), ('Kurnool',), ('Tiruppur (Tirupper)',), ('Rohtak',), ('South Dum Dum',), ('Mathura',), ('Chandrapur',), ('Barahanagar (Baranagar)',), ('Darbhanga',), ('Siliguri (Shiliguri)',), ('Raurkela',), ('Ambattur',), ('Panipat',), ('Firozabad',), ('Ichalkaranji',), ('Jammu',), ('Ramagundam',), ('Eluru',), ('Brahmapur',), ('Alwar',), ('Pondicherry',), ('Thanjavur',), ('Bihar Sharif',), ('Tuticorin',), ('Imphal',), ('Latur',), ('Sagar',), ('Farrukhabad-cum-Fatehgarh',), ('Sangli',), ('Parbhani',), ('Nagar Coil',), ('Bijapur',), ('Kukatpalle',), ('Bally',), ('Bhilwara',), ('Ratlam',), ('Avadi',), ('Dindigul',), ('Ahmadnagar',), ('Bilaspur',), ('Shimoga',), ('Kharagpur',), ('Mira Bhayandar',), ('Vellore',), ('Jalna',), ('Burnpur',), ('Anantapur',), ('Allappuzha (Alleppey)',), ('Tirupati',), ('Karnal',), ('Burhanpur',), ('Hisar (Hissar)',), ('Tiruvottiyur',), ('Mirzapur-cum-Vindhyachal',), ('Secunderabad',), ('Nadiad',), ('Dewas',), ('Murwara (Katni)',), ('Ganganagar',), ('Vizianagaram',), ('Mosul',), ('Irbil',), ('Kirkuk',), ('Basra',), ('al-Sulaymaniya',), ('al-Najaf',), ('Karbala',), ('al-Hilla',), ('al-Nasiriya',), ('al-Amara',), ('al-Diwaniya',), ('al-Ramadi',), ('al-Kut',), ('Ahvaz',), ('Qom',), ('Kermanshah',), ('Urmia',), ('Zahedan',), ('Rasht',), ('Hamadan',), ('Kerman',), ('Arak',), ('Ardebil',), ('Yazd',), ('Qazvin',), ('Zanjan',), ('Sanandaj',), ('Bandar-e-Abbas',), ('Khorramabad',), ('Eslamshahr',), ('Borujerd',), ('Abadan',), ('Dezful',), ('Kashan',), ('Sari',), ('Gorgan',), ('Najafabad',), ('Sabzevar',), ('Khomeynishahr',), ('Dublin',), ('Jerusalem',), ('Tel Aviv-Jaffa',), ('Haifa',), ('Rishon Le Ziyyon',), ('Beerseba',), ('Holon',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Graz',), ('Linz',), ('Chiba',), ('Sakai',), ('Kumamoto',), ('Okayama',), ('Sagamihara',), ('Hamamatsu',), ('Kagoshima',), ('Funabashi',), ('Higashiosaka',), ('Hachioji',), ('Niigata',), ('Amagasaki',), ('Himeji',), ('Shizuoka',), ('Urawa',), ('Matsuyama',), ('Matsudo',), ('Kanazawa',), ('Kawaguchi',), ('Ichikawa',), ('Omiya',), ('Utsunomiya',), ('Oita',), ('Nagasaki',), ('Yokosuka',), ('Kurashiki',), ('Gifu',), ('Hirakata',), ('Nishinomiya',), ('Toyonaka',), ('Wakayama',), ('Fukuyama',), ('Fujisawa',), ('Asahikawa',), ('Machida',), ('Nara',), ('Takatsuki',), ('Iwaki',), ('Nagano',), ('Toyohashi',), ('Toyota',), ('Suita',), ('Takamatsu',), ('Koriyama',), ('Okazaki',), ('Kawagoe',), ('Tokorozawa',), ('Toyama',), ('Kochi',), ('Kashiwa',), ('Akita',), ('Miyazaki',), ('Koshigaya',), ('Naha',), ('Aomori',), ('Hakodate',), ('Akashi',), ('Yokkaichi',), ('Fukushima',), ('Morioka',), ('Maebashi',), ('Kasugai',), ('Otsu',), ('Ichihara',), ('Yao',), ('Ichinomiya',), ('Tokushima',), ('Kakogawa',), ('Ibaraki',), ('Neyagawa',), ('Shimonoseki',), ('Yamagata',), ('Fukui',), ('Hiratsuka',), ('Mito',), ('Sasebo',), ('Hachinohe',), ('Takasaki',), ('Shimizu',), ('Kurume',), ('Fuji',), ('Soka',), ('Fuchu',), ('Chigasaki',), ('Atsugi',), ('Numazu',), ('Ageo',), ('Yamato',), ('Matsumoto',), ('Kure',), ('Takarazuka',), ('Kasukabe',), ('Chofu',), ('Odawara',), ('Kofu',), ('Kushiro',), ('Kishiwada',), ('Hitachi',), ('Nagaoka',), ('Itami',), ('Uji',), ('Suzuka',), ('Hirosaki',), ('Ube',), ('Kodaira',), ('Takaoka',), ('Obihiro',), ('Tomakomai',), ('Saga',), ('Sakura',), ('Kamakura',), ('Mitaka',), ('Izumi',), ('Hino',), ('Hadano',), ('Ashikaga',), ('Tsu',), ('Sayama',), ('Yachiyo',), ('Tsukuba',), ('Sanaa',), ('Aden',), ('Taizz',), ('Hodeida',), ('al-Zarqa',), ('Irbid',), ('Novi Sad',), ('Niš',), ('Phnom Penh',), ('Garoua',), ('Calgary',), ('Toronto',), ('North York',), ('Winnipeg',), ('Edmonton',), ('Mississauga',), ('Scarborough',), ('Vancouver',), ('Etobicoke',), ('London',), ('Hamilton',), ('Ottawa',), ('Laval',), ('Surrey',), ('Brampton',), ('Windsor',), ('Saskatoon',), ('Kitchener',), ('Markham',), ('Regina',), ('Burnaby',), ('Québec',), ('Qaraghandy',), ('Shymkent',), ('Taraz',), ('Astana',), ('Öskemen',), ('Pavlodar',), ('Semey',), ('Aqtöbe',), ('Qostanay',), ('Petropavl',), ('Oral',), ('Temirtau',), ('Mombasa',), ('Kisumu',), ('Nakuru',), ('Bangui',), ('Handan',), ('Wuxi',), ('Xuzhou',), ('Datong',), ('Yichun',), ('Benxi',), ('Luoyang',), ('Suzhou',), ('Xining',), ('Huainan',), ('Jixi',), ('Daqing',), ('Fuxin',), ('Amoy [Xiamen]',), ('Liuzhou',), ('Shantou',), ('Jinzhou',), ('Mudanjiang',), ('Yinchuan',), ('Changzhou',), ('Zhangjiakou',), ('Dandong',), ('Hegang',), ('Kaifeng',), ('Jiamusi',), ('Liaoyang',), ('Hengyang',), ('Baoding',), ('Hunjiang',), ('Xinxiang',), ('Huangshi',), ('Haikou',), ('Yantai',), ('Bengbu',), ('Xiangtan',), ('Weifang',), ('Wuhu',), ('Pingxiang',), ('Yingkou',), ('Anyang',), ('Panzhihua',), ('Pingdingshan',), ('Xiangfan',), ('Zhuzhou',), ('Jiaozuo',), ('Wenzhou',), ('Zhangjiang',), ('Zigong',), ('Shuangyashan',), ('Zaozhuang',), ('Yakeshi',), ('Yichang',), ('Zhenjiang',), ('Huaibei',), ('Qinhuangdao',), ('Guilin',), ('Liupanshui',), ('Panjin',), ('Yangquan',), ('Jinxi',), ('Liaoyuan',), ('Lianyungang',), ('Xianyang',), ('Tai´an',), ('Chifeng',), ('Shaoguan',), ('Nantong',), ('Leshan',), ('Baoji',), ('Linyi',), ('Tonghua',), ('Siping',), ('Changzhi',), ('Tengzhou',), ('Chaozhou',), ('Yangzhou',), ('Dongwan',), ('Ma´anshan',), ('Foshan',), ('Yueyang',), ('Xingtai',), ('Changde',), ('Shihezi',), ('Yancheng',), ('Jiujiang',), ('Dongying',), ('Shashi',), ('Xintai',), ('Jingdezhen',), ('Tongchuan',), ('Zhongshan',), ('Shiyan',), ('Tieli',), ('Jining',), ('Wuhai',), ('Mianyang',), ('Luzhou',), ('Zunyi',), ('Shizuishan',), ('Neijiang',), ('Tongliao',), ('Tieling',), ('Wafangdian',), ('Anqing',), ('Shaoyang',), ('Laiwu',), ('Chengde',), ('Tianshui',), ('Nanyang',), ('Cangzhou',), ('Yibin',), ('Huaiyin',), ('Dunhua',), ('Yanji',), ('Jiangmen',), ('Tongling',), ('Suihua',), ('Gongziling',), ('Xiantao',), ('Chaoyang',), ('Ganzhou',), ('Huzhou',), ('Baicheng',), ('Shangzi',), ('Yangjiang',), ('Qitaihe',), ('Gejiu',), ('Jiangyin',), ('Hebi',), ('Jiaxing',), ('Wuzhou',), ('Meihekou',), ('Xuchang',), ('Liaocheng',), ('Haicheng',), ('Qianjiang',), ('Baiyin',), ('Bei´an',), ('Yixing',), ('Laizhou',), ('Qaramay',), ('Acheng',), ('Dezhou',), ('Nanping',), ('Zhaoqing',), ('Beipiao',), ('Fengcheng',), ('Fuyu',), ('Xinyang',), ('Dongtai',), ('Yuci',), ('Honghu',), ('Ezhou',), ('Heze',), ('Daxian',), ('Linfen',), ('Tianmen',), ('Yiyang',), ('Quanzhou',), ('Rizhao',), ('Deyang',), ('Guangyuan',), ('Changshu',), ('Zhangzhou',), ('Hailar',), ('Nanchong',), ('Jiutai',), ('Zhaodong',), ('Shaoxing',), ('Fuyang',), ('Maoming',), ('Qujing',), ('Ghulja',), ('Jiaohe',), ('Puyang',), ('Huadian',), ('Jiangyou',), ('Qashqar',), ('Anshun',), ('Fuling',), ('Xinyu',), ('Hanzhong',), ('Danyang',), ('Chenzhou',), ('Xiaogan',), ('Shangqiu',), ('Zhuhai',), ('Qingyuan',), ('Aqsu',), ('Jining',), ('Xiaoshan',), ('Zaoyang',), ('Xinghua',), ('Hami',), ('Huizhou',), ('Jinmen',), ('Sanming',), ('Bishkek',), ('Osh',), ('Cartagena',), ('Cúcuta',), ('Bucaramanga',), ('Ibagué',), ('Pereira',), ('Santa Marta',), ('Manizales',), ('Bello',), ('Pasto',), ('Neiva',), ('Soledad',), ('Armenia',), ('Villavicencio',), ('Soacha',), ('Valledupar',), ('Montería',), ('Itagüí',), ('Palmira',), ('Buenaventura',), ('Floridablanca',), ('Sincelejo',), ('Popayán',), ('Barrancabermeja',), ('Pointe-Noire',), ('Lubumbashi',), ('Mbuji-Mayi',), ('Kolwezi',), ('Kisangani',), ('Kananga',), ('Likasi',), ('Bukavu',), ('Kikwit',), ('Tshikapa',), ('Matadi',), ('Mbandaka',), ('Hamhung',), ('Chongjin',), ('Nampo',), ('Sinuiju',), ('Wonsan',), ('Phyongsong',), ('Sariwon',), ('Haeju',), ('Kanggye',), ('Kimchaek',), ('Hyesan',), ('Kaesong',), ('Songnam',), ('Puchon',), ('Suwon',), ('Anyang',), ('Chonju',), ('Chongju',), ('Koyang',), ('Ansan',), ('Pohang',), ('Chang-won',), ('Masan',), ('Kwangmyong',), ('Chonan',), ('Chinju',), ('Iksan',), ('Pyongtaek',), ('Kumi',), ('Uijongbu',), ('Kyongju',), ('Kunsan',), ('Cheju',), ('Kimhae',), ('Sunchon',), ('Mokpo',), ('Yong-in',), ('Wonju',), ('Kunpo',), ('Chunchon',), ('Namyangju',), ('Kangnung',), ('Chungju',), ('Andong',), ('Yosu',), ('Kyongsan',), ('Paju',), ('Yangsan',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Zagreb',), ('Split',), ('Rijeka',), ('Santiago de Cuba',), ('Camagüey',), ('Holguín',), ('Santa Clara',), ('Guantánamo',), ('Nicosia',), ('Vientiane',), ('Riga',), ('Maseru',), ('Tripoli',), ('Monrovia',), ('Bengasi',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('El-Aaiún',), ('Macao',), ('Antananarivo',), ('Skopje',), ('Blantyre',), ('Lilongwe',), ('Ipoh',), ('Johor Baharu',), ('Petaling Jaya',), ('Kelang',), ('Kuala Terengganu',), ('Pinang',), ('Kota Bharu',), ('Kuantan',), ('Taiping',), ('Seremban',), ('Bamako',), ('Rabat',), ('Marrakech',), ('Fès',), ('Tanger',), ('Salé',), ('Meknès',), ('Oujda',), ('Kénitra',), ('Tétouan',), ('Safi',), ('Nouakchott',), ('Naucalpan de Juárez',), ('Mexicali',), ('Culiacán',), ('Acapulco de Juárez',), ('Tlalnepantla de Baz',), ('Mérida',), ('Chihuahua',), ('San Luis Potosí',), ('Guadalupe',), ('Toluca',), ('Aguascalientes',), ('Querétaro',), ('Morelia',), ('Hermosillo',), ('Saltillo',), ('Torreón',), ('Centro (Villahermosa)',), ('San Nicolás de los Garza',), ('Durango',), ('Chimalhuacán',), ('Tlaquepaque',), ('Atizapán de Zaragoza',), ('Veracruz',), ('Cuautitlán Izcalli',), ('Irapuato',), ('Tuxtla Gutiérrez',), ('Tultitlán',), ('Reynosa',), ('Benito Juárez',), ('Matamoros',), ('Xalapa',), ('Celaya',), ('Mazatlán',), ('Ensenada',), ('Ahome',), ('Cajeme',), ('Cuernavaca',), ('Tonalá',), ('Valle de Chalco Solidaridad',), ('Nuevo Laredo',), ('Tepic',), ('Tampico',), ('Ixtapaluca',), ('Apodaca',), ('Guasave',), ('Gómez Palacio',), ('Tapachula',), ('Nicolás Romero',), ('Coatzacoalcos',), ('Uruapan',), ('Victoria',), ('Oaxaca de Juárez',), ('Coacalco de Berriozábal',), ('Pachuca de Soto',), ('General Escobedo',), ('Salamanca',), ('Santa Catarina',), ('Tehuacán',), ('Chalco',), ('Cárdenas',), ('Campeche',), ('La Paz',), ('Othón P. Blanco (Chetumal)',), ('Texcoco',), ('La Paz',), ('Metepec',), ('Monclova',), ('Huixquilucan',), ('Chilpancingo de los Bravo',), ('Puerto Vallarta',), ('Fresnillo',), ('Ciudad Madero',), ('Soledad de Graciano Sánchez',), ('San Juan del Río',), ('San Felipe del Progreso',), ('Córdoba',), ('Tecámac',), ('Ocosingo',), ('Carmen',), ('Lázaro Cárdenas',), ('Jiutepec',), ('Papantla',), ('Comalcalco',), ('Zamora',), ('Chisinau',), ('Tiraspol',), ('Ulan Bator',), ('Matola',), ('Beira',), ('Nampula',), ('Chimoio',), ('Mandalay',), ('Moulmein (Mawlamyine)',), ('Pegu (Bago)',), ('Bassein (Pathein)',), ('Windhoek',), ('Kathmandu',), ('Niamey',), ('Ogbomosho',), ('Kano',), ('Oshogbo',), ('Ilorin',), ('Abeokuta',), ('Port Harcourt',), ('Zaria',), ('Ilesha',), ('Onitsha',), ('Iwo',), ('Ado-Ekiti',), ('Abuja',), ('Kaduna',), ('Mushin',), ('Maiduguri',), ('Enugu',), ('Ede',), ('Aba',), ('Ife',), ('Ila',), ('Oyo',), ('Ikerre',), ('Benin City',), ('Iseyin',), ('Katsina',), ('Jos',), ('Sokoto',), ('Ilobu',), ('Offa',), ('Ikorodu',), ('Ilawe-Ekiti',), ('Owo',), ('Ikirun',), ('Shaki',), ('Calabar',), ('Ondo',), ('Akure',), ('Oslo',), ('Bergen',), ('Bouaké',), ('Quetta',), ('Islamabad',), ('Sargodha',), ('Sialkot',), ('Bahawalpur',), ('Sukkur',), ('Jhang',), ('Sheikhupura',), ('Larkana',), ('Gujrat',), ('Mardan',), ('Kasur',), ('Rahim Yar Khan',), ('Sahiwal',), ('Okara',), ('Wah',), ('Dera Ghazi Khan',), ('Mirpur Khas',), ('Nawabshah',), ('Mingora',), ('Chiniot',), ('Ciudad de Panamá',), ('San Miguelito',), ('Port Moresby',), ('Asunción',), ('Arequipa',), ('Trujillo',), ('Chiclayo',), ('Callao',), ('Iquitos',), ('Chimbote',), ('Huancayo',), ('Piura',), ('Cusco',), ('Pucallpa',), ('Tacna',), ('Ica',), ('Lisboa',), ('Porto',), ('San Juan',), ('Bayamón',), ('Ponce',), ('Carolina',), ('Lódz',), ('Kraków',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzeszów',), ('Doha',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-Étienne',), ('Toulon',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('Târgu Mures',), ('Kigali',), ('Stockholm',), ('Gothenburg [Göteborg]',), ('Malmö',), ('Uppsala',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('Düsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('Nürnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('Münster',), ('Mönchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('Lübeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbrücken',), ('Mainz',), ('Hamm',), ('Herne',), ('Mülheim an der Ruhr',), ('Solingen',), ('Osnabrück',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Ndola',), ('Kitwe',), ('Medina',), ('al-Dammam',), ('al-Taif',), ('Tabuk',), ('Burayda',), ('al-Hufuf',), ('al-Mubarraz',), ('Khamis Mushayt',), ('Hail',), ('Pikine',), ('Dakar',), ('Thiès',), ('Kaolack',), ('Ziguinchor',), ('Freetown',), ('Bratislava',), ('Košice',), ('Ljubljana',), ('Colombo',), ('Dehiwala',), ('Moratuwa',), ('Sharq al-Nil',), ('Port Sudan',), ('Kassala',), ('Obeid',), ('Nyala',), ('Wad Madani',), ('al-Qadarif',), ('Kusti',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [Åbo]',), ('Zürich',), ('Geneve',), ('Basel',), ('Hims',), ('Hama',), ('Latakia',), ('Dushanbe',), ('Khujand',), ('Tainan',), ('Panchiao',), ('Chungho',), ('Keelung (Chilung)',), ('Sanchung',), ('Hsinchuang',), ('Hsinchu',), ('Chungli',), ('Fengshan',), ('Taoyuan',), ('Chiayi',), ('Hsintien',), ('Changhwa',), ('Yungho',), ('Tucheng',), ('Pingtung',), ('Yungkang',), ('Pingchen',), ('Tali',), ('Taiping',), ('Pate',), ('Fengyuan',), ('Luchou',), ('Dodoma',), ('Mwanza',), ('København',), ('Århus',), ('Odense',), ('Aalborg',), ('Nonthaburi',), ('Nakhon Ratchasima',), ('Chiang Mai',), ('Lomé',), ('N´Djaména',), ('Brno',), ('Ostrava',), ('Plzen',), ('Tunis',), ('Sfax',), ('Ariana',), ('Ettadhamen',), ('Gaziantep',), ('Konya',), ('Mersin (Içel)',), ('Antalya',), ('Diyarbakir',), ('Kayseri',), ('Eskisehir',), ('Sanliurfa',), ('Samsun',), ('Malatya',), ('Gebze',), ('Denizli',), ('Sivas',), ('Erzurum',), ('Tarsus',), ('Kahramanmaras',), ('Elâzig',), ('Van',), ('Sultanbeyli',), ('Izmit (Kocaeli)',), ('Manisa',), ('Batman',), ('Balikesir',), ('Sakarya (Adapazari)',), ('Ashgabat',), ('Chärjew',), ('Kampala',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('Tšernigiv',), ('Tšerkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('Tšernivtsi',), ('Rivne',), ('Krementšuk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kertš',), ('Debrecen',), ('Miskolc',), ('Auckland',), ('Christchurch',), ('Manukau',), ('North Shore',), ('Waitakere',), ('Wellington',), ('Namangan',), ('Samarkand',), ('Andijon',), ('Buhoro',), ('Karsi',), ('Nukus',), ('Kükon',), ('Fargona',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Brest',), ('Bobruisk',), ('Baranovitši',), ('Barquisimeto',), ('Valencia',), ('Ciudad Guayana',), ('Petare',), ('Maracay',), ('Barcelona',), ('Maturín',), ('San Cristóbal',), ('Ciudad Bolívar',), ('Cumaná',), ('Mérida',), ('Cabimas',), ('Barinas',), ('Turmero',), ('Baruta',), ('Puerto Cabello',), ('Santa Ana de Coro',), ('Los Teques',), ('Punto Fijo',), ('Guarenas',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje Tšelny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('Tšeboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sotši',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahatškala',), ('Tšerepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('Tšita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Joškar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Naltšik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagoveštšensk',), ('Šahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamtšatski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novotšerkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Haiphong',), ('Da Nang',), ('Biên Hoa',), ('Nha Trang',), ('Hue',), ('Can Tho',), ('Cam Pha',), ('Nam Dinh',), ('Quy Nhon',), ('Tallinn',), ('San Jose',), ('Indianapolis',), ('San Francisco',), ('Jacksonville',), ('Columbus',), ('Austin',), ('Baltimore',), ('Memphis',), ('Milwaukee',), ('Boston',), ('Washington',), ('Nashville-Davidson',), ('El Paso',), ('Seattle',), ('Denver',), ('Charlotte',), ('Fort Worth',), ('Portland',), ('Oklahoma City',), ('Tucson',), ('New Orleans',), ('Las Vegas',), ('Cleveland',), ('Long Beach',), ('Albuquerque',), ('Kansas City',), ('Fresno',), ('Virginia Beach',), ('Atlanta',), ('Sacramento',), ('Oakland',), ('Mesa',), ('Tulsa',), ('Omaha',), ('Minneapolis',), ('Honolulu',), ('Miami',), ('Colorado Springs',), ('Saint Louis',), ('Wichita',), ('Santa Ana',), ('Pittsburgh',), ('Arlington',), ('Cincinnati',), ('Anaheim',), ('Toledo',), ('Tampa',), ('Buffalo',), ('Saint Paul',), ('Corpus Christi',), ('Aurora',), ('Raleigh',), ('Newark',), ('Lexington-Fayette',), ('Anchorage',), ('Louisville',), ('Riverside',), ('Saint Petersburg',), ('Bakersfield',), ('Stockton',), ('Birmingham',), ('Jersey City',), ('Norfolk',), ('Baton Rouge',), ('Hialeah',), ('Lincoln',), ('Greensboro',), ('Plano',), ('Rochester',), ('Glendale',), ('Akron',), ('Garland',), ('Madison',), ('Fort Wayne',), ('Fremont',), ('Scottsdale',), ('Montgomery',), ('Shreveport',), ('Augusta-Richmond County',), ('Lubbock',), ('Chesapeake',), ('Mobile',), ('Des Moines',), ('Grand Rapids',), ('Richmond',), ('Yonkers',), ('Spokane',), ('Glendale',), ('Tacoma',), ('Irving',), ('Huntington Beach',), ('Modesto',), ('Durham',), ('Columbus',), ('Orlando',), ('Boise City',), ('Winston-Salem',), ('San Bernardino',), ('Jackson',), ('Little Rock',), ('Salt Lake City',), ('Reno',), ('Newport News',), ('Chandler',), ('Laredo',), ('Henderson',), ('Arlington',), ('Knoxville',), ('Amarillo',), ('Providence',), ('Chula Vista',), ('Worcester',), ('Oxnard',), ('Dayton',), ('Garden Grove',), ('Oceanside',), ('Bulawayo',), ('Chitungwiza',), ('Mount Darwin',), ('Gaza',)]
Gold Output      : [('Qandahar',), ('Herat',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Tirana',), ('Oran',), ('Constantine',), ('Annaba',), ('Batna',), ('Sétif',), ('Huambo',), ('Dubai',), ('Abu Dhabi',), ('Sharja',), ('al-Ayn',), ('Lomas de Zamora',), ('Quilmes',), ('Almirante Brown',), ('La Plata',), ('Mar del Plata',), ('San Miguel de Tucumán',), ('Lanús',), ('Merlo',), ('General San Martín',), ('Salta',), ('Moreno',), ('Santa Fé',), ('Avellaneda',), ('Tres de Febrero',), ('Morón',), ('Florencio Varela',), ('San Isidro',), ('Tigre',), ('Malvinas Argentinas',), ('Vicente López',), ('Berazategui',), ('Corrientes',), ('San Miguel',), ('Bahía Blanca',), ('Esteban Echeverría',), ('Resistencia',), ('José C. Paz',), ('Paraná',), ('Godoy Cruz',), ('Posadas',), ('Guaymallén',), ('Santiago del Estero',), ('San Salvador de Jujuy',), ('Hurlingham',), ('Neuquén',), ('Gjumri',), ('Vanadzor',), ('Canberra',), ('Gold Coast',), ('Newcastle',), ('Central Coast',), ('Wollongong',), ('Gäncä',), ('Sumqayit',), ('Nassau',), ('Khulna',), ('Rajshahi',), ('Narayanganj',), ('Rangpur',), ('Mymensingh',), ('Barisal',), ('Tungi',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Cotonou',), ('Porto-Novo',), ('La Paz',), ('El Alto',), ('Cochabamba',), ('Oruro',), ('Sucre',), ('Sarajevo',), ('Gaborone',), ('São Gonçalo',), ('Nova Iguaçu',), ('São Luís',), ('Maceió',), ('Duque de Caxias',), ('São Bernardo do Campo',), ('Teresina',), ('Natal',), ('Osasco',), ('Campo Grande',), ('Santo André',), ('João Pessoa',), ('Jaboatão dos Guararapes',), ('Contagem',), ('São José dos Campos',), ('Uberlândia',), ('Feira de Santana',), ('Ribeirão Preto',), ('Sorocaba',), ('Niterói',), ('Cuiabá',), ('Juiz de Fora',), ('Aracaju',), ('São João de Meriti',), ('Londrina',), ('Joinville',), ('Belford Roxo',), ('Santos',), ('Ananindeua',), ('Campos dos Goytacazes',), ('Mauá',), ('Carapicuíba',), ('Olinda',), ('Campina Grande',), ('São José do Rio Preto',), ('Caxias do Sul',), ('Moji das Cruzes',), ('Diadema',), ('Aparecida de Goiânia',), ('Piracicaba',), ('Cariacica',), ('Vila Velha',), ('Pelotas',), ('Bauru',), ('Porto Velho',), ('Serra',), ('Betim',), ('Jundíaí',), ('Canoas',), ('Franca',), ('São Vicente',), ('Maringá',), ('Montes Claros',), ('Anápolis',), ('Florianópolis',), ('Petrópolis',), ('Itaquaquecetuba',), ('Vitória',), ('Ponta Grossa',), ('Rio Branco',), ('Foz do Iguaçu',), ('Macapá',), ('Ilhéus',), ('Vitória da Conquista',), ('Uberaba',), ('Paulista',), ('Limeira',), ('Blumenau',), ('Caruaru',), ('Santarém',), ('Volta Redonda',), ('Novo Hamburgo',), ('Caucaia',), ('Santa Maria',), ('Cascavel',), ('Guarujá',), ('Ribeirão das Neves',), ('Governador Valadares',), ('Taubaté',), ('Imperatriz',), ('Gravataí',), ('Embu',), ('Mossoró',), ('Várzea Grande',), ('Petrolina',), ('Barueri',), ('Viamão',), ('Ipatinga',), ('Juazeiro',), ('Juazeiro do Norte',), ('Taboão da Serra',), ('São José dos Pinhais',), ('Magé',), ('Suzano',), ('São Leopoldo',), ('Marília',), ('São Carlos',), ('Sumaré',), ('Presidente Prudente',), ('Divinópolis',), ('Sete Lagoas',), ('Rio Grande',), ('Itabuna',), ('Jequié',), ('Arapiraca',), ('Colombo',), ('Americana',), ('Alvorada',), ('Araraquara',), ('Itaboraí',), ('Santa Bárbara d´Oeste',), ('Nova Friburgo',), ('Jacareí',), ('Araçatuba',), ('Barra Mansa',), ('Praia Grande',), ('Marabá',), ('Criciúma',), ('Boa Vista',), ('Passo Fundo',), ('Dourados',), ('Santa Luzia',), ('Rio Claro',), ('Maracanaú',), ('Guarapuava',), ('Glasgow',), ('Liverpool',), ('Edinburgh',), ('Sheffield',), ('Manchester',), ('Leeds',), ('Bristol',), ('Cardiff',), ('Coventry',), ('Leicester',), ('Bradford',), ('Belfast',), ('Nottingham',), ('Kingston upon Hull',), ('Plymouth',), ('Stoke-on-Trent',), ('Wolverhampton',), ('Derby',), ('Swansea',), ('Southampton',), ('Aberdeen',), ('Northampton',), ('Dudley',), ('Portsmouth',), ('Newcastle upon Tyne',), ('Sunderland',), ('Luton',), ('Swindon',), ('Southend-on-Sea',), ('Walsall',), ('Bournemouth',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Ouagadougou',), ('Bobo-Dioulasso',), ('Bujumbura',), ('Puente Alto',), ('Viña del Mar',), ('Valparaíso',), ('Talcahuano',), ('Antofagasta',), ('San Bernardo',), ('Temuco',), ('Concepción',), ('Rancagua',), ('Arica',), ('Talca',), ('Chillán',), ('Iquique',), ('San José',), ('Djibouti',), ('Santiago de los Caballeros',), ('Cuenca',), ('Machala',), ('Santo Domingo de los Colorados',), ('Portoviejo',), ('Ambato',), ('Manta',), ('Shubra al-Khayma',), ('Port Said',), ('Suez',), ('al-Mahallat al-Kubra',), ('Tanta',), ('al-Mansura',), ('Luxor',), ('Asyut',), ('Bahtim',), ('Zagazig',), ('al-Faiyum',), ('Ismailia',), ('Kafr al-Dawwar',), ('Assuan',), ('Damanhur',), ('al-Minya',), ('Bani Suwayf',), ('Qina',), ('Sawhaj',), ('San Salvador',), ('Asmara',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('Málaga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('Córdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gijón',), ('L´Hospitalet de Llobregat',), ('Granada',), ('A Coruña (La Coruña)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('Móstoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iruña]',), ('Donostia-San Sebastián',), ('Cartagena',), ('Leganés',), ('Fuenlabrada',), ('Almería',), ('Terrassa',), ('Alcalá de Henares',), ('Burgos',), ('Johannesburg',), ('Port Elizabeth',), ('Pretoria',), ('Inanda',), ('Durban',), ('Vanderbijlpark',), ('Kempton Park',), ('Alberton',), ('Pinetown',), ('Pietermaritzburg',), ('Benoni',), ('Randburg',), ('Umlazi',), ('Bloemfontein',), ('Vereeniging',), ('Wonderboom',), ('Roodepoort',), ('Boksburg',), ('Klerksdorp',), ('Soshanguve',), ('Newcastle',), ('East London',), ('Welkom',), ('Kimberley',), ('Uitenhage',), ('Chatsworth',), ('Mdantsane',), ('Krugersdorp',), ('Botshabelo',), ('Brakpan',), ('Witbank',), ('Oberholzer',), ('Germiston',), ('Springs',), ('Dire Dawa',), ('Cebu',), ('Zamboanga',), ('Pasig',), ('Valenzuela',), ('Las Piñas',), ('Antipolo',), ('Taguig',), ('Cagayan de Oro',), ('Parañaque',), ('Makati',), ('Bacolod',), ('General Santos',), ('Marikina',), ('Dasmariñas',), ('Muntinlupa',), ('Iloilo',), ('Pasay',), ('Malabon',), ('San José del Monte',), ('Bacoor',), ('Iligan',), ('Calamba',), ('Mandaluyong',), ('Butuan',), ('Angeles',), ('Tarlac',), ('Mandaue',), ('Baguio',), ('Batangas',), ('Cainta',), ('San Pedro',), ('Navotas',), ('Cabanatuan',), ('San Fernando',), ('Lipa',), ('Lapu-Lapu',), ('San Pablo',), ('Biñan',), ('Taytay',), ('Lucena',), ('Imus',), ('Olongapo',), ('Binangonan',), ('Santa Rosa',), ('Tagum',), ('Tacloban',), ('Malolos',), ('Mabalacat',), ('Cotabato',), ('Meycauayan',), ('Puerto Princesa',), ('Libreville',), ('Kutaisi',), ('Kumasi',), ('Ciudad de Guatemala',), ('Mixco',), ('Bissau',), ('Georgetown',), ('Port-au-Prince',), ('Carrefour',), ('Delmas',), ('Tegucigalpa',), ('San Pedro Sula',), ('Malang',), ('Bandar Lampung',), ('Bekasi',), ('Padang',), ('Surakarta',), ('Banjarmasin',), ('Pekan Baru',), ('Denpasar',), ('Yogyakarta',), ('Pontianak',), ('Samarinda',), ('Jambi',), ('Depok',), ('Cimahi',), ('Balikpapan',), ('Manado',), ('Mataram',), ('Pekalongan',), ('Tegal',), ('Bogor',), ('Ciputat',), ('Pondokgede',), ('Cirebon',), ('Kediri',), ('Ambon',), ('Jember',), ('Cilacap',), ('Cimanggis',), ('Pematang Siantar',), ('Purwokerto',), ('Ciomas',), ('Tasikmalaya',), ('Madiun',), ('Srinagar',), ('Agra',), ('Coimbatore',), ('Thane (Thana)',), ('Allahabad',), ('Meerut',), ('Vishakhapatnam',), ('Jabalpur',), ('Amritsar',), ('Faridabad',), ('Vijayawada',), ('Gwalior',), ('Jodhpur',), ('Nashik (Nasik)',), ('Hubli-Dharwad',), ('Solapur (Sholapur)',), ('Ranchi',), ('Bareilly',), ('Guwahati (Gauhati)',), ('Shambajinagar (Aurangabad)',), ('Cochin (Kochi)',), ('Rajkot',), ('Kota',), ('Thiruvananthapuram (Trivandrum',), ('Pimpri-Chinchwad',), ('Jalandhar (Jullundur)',), ('Gorakhpur',), ('Chandigarh',), ('Mysore',), ('Aligarh',), ('Guntur',), ('Jamshedpur',), ('Ghaziabad',), ('Warangal',), ('Raipur',), ('Moradabad',), ('Durgapur',), ('Amravati',), ('Calicut (Kozhikode)',), ('Bikaner',), ('Bhubaneswar',), ('Kolhapur',), ('Kataka (Cuttack)',), ('Ajmer',), ('Bhavnagar',), ('Tiruchirapalli',), ('Bhilai',), ('Bhiwandi',), ('Saharanpur',), ('Ulhasnagar',), ('Salem',), ('Ujjain',), ('Malegaon',), ('Jamnagar',), ('Bokaro Steel City',), ('Akola',), ('Belgaum',), ('Rajahmundry',), ('Nellore',), ('Udaipur',), ('New Bombay',), ('Bhatpara',), ('Gulbarga',), ('New Delhi',), ('Jhansi',), ('Gaya',), ('Kakinada',), ('Dhule (Dhulia)',), ('Panihati',), ('Nanded (Nander)',), ('Mangalore',), ('Dehra Dun',), ('Kamarhati',), ('Davangere',), ('Asansol',), ('Bhagalpur',), ('Bellary',), ('Barddhaman (Burdwan)',), ('Rampur',), ('Jalgaon',), ('Muzaffarpur',), ('Nizamabad',), ('Muzaffarnagar',), ('Patiala',), ('Shahjahanpur',), ('Kurnool',), ('Tiruppur (Tirupper)',), ('Rohtak',), ('South Dum Dum',), ('Mathura',), ('Chandrapur',), ('Barahanagar (Baranagar)',), ('Darbhanga',), ('Siliguri (Shiliguri)',), ('Raurkela',), ('Ambattur',), ('Panipat',), ('Firozabad',), ('Ichalkaranji',), ('Jammu',), ('Ramagundam',), ('Eluru',), ('Brahmapur',), ('Alwar',), ('Pondicherry',), ('Thanjavur',), ('Bihar Sharif',), ('Tuticorin',), ('Imphal',), ('Latur',), ('Sagar',), ('Farrukhabad-cum-Fatehgarh',), ('Sangli',), ('Parbhani',), ('Nagar Coil',), ('Bijapur',), ('Kukatpalle',), ('Bally',), ('Bhilwara',), ('Ratlam',), ('Avadi',), ('Dindigul',), ('Ahmadnagar',), ('Bilaspur',), ('Shimoga',), ('Kharagpur',), ('Mira Bhayandar',), ('Vellore',), ('Jalna',), ('Burnpur',), ('Anantapur',), ('Allappuzha (Alleppey)',), ('Tirupati',), ('Karnal',), ('Burhanpur',), ('Hisar (Hissar)',), ('Tiruvottiyur',), ('Mirzapur-cum-Vindhyachal',), ('Secunderabad',), ('Nadiad',), ('Dewas',), ('Murwara (Katni)',), ('Ganganagar',), ('Vizianagaram',), ('Mosul',), ('Irbil',), ('Kirkuk',), ('Basra',), ('al-Sulaymaniya',), ('al-Najaf',), ('Karbala',), ('al-Hilla',), ('al-Nasiriya',), ('al-Amara',), ('al-Diwaniya',), ('al-Ramadi',), ('al-Kut',), ('Ahvaz',), ('Qom',), ('Kermanshah',), ('Urmia',), ('Zahedan',), ('Rasht',), ('Hamadan',), ('Kerman',), ('Arak',), ('Ardebil',), ('Yazd',), ('Qazvin',), ('Zanjan',), ('Sanandaj',), ('Bandar-e-Abbas',), ('Khorramabad',), ('Eslamshahr',), ('Borujerd',), ('Abadan',), ('Dezful',), ('Kashan',), ('Sari',), ('Gorgan',), ('Najafabad',), ('Sabzevar',), ('Khomeynishahr',), ('Dublin',), ('Jerusalem',), ('Tel Aviv-Jaffa',), ('Haifa',), ('Rishon Le Ziyyon',), ('Beerseba',), ('Holon',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Graz',), ('Linz',), ('Chiba',), ('Sakai',), ('Kumamoto',), ('Okayama',), ('Sagamihara',), ('Hamamatsu',), ('Kagoshima',), ('Funabashi',), ('Higashiosaka',), ('Hachioji',), ('Niigata',), ('Amagasaki',), ('Himeji',), ('Shizuoka',), ('Urawa',), ('Matsuyama',), ('Matsudo',), ('Kanazawa',), ('Kawaguchi',), ('Ichikawa',), ('Omiya',), ('Utsunomiya',), ('Oita',), ('Nagasaki',), ('Yokosuka',), ('Kurashiki',), ('Gifu',), ('Hirakata',), ('Nishinomiya',), ('Toyonaka',), ('Wakayama',), ('Fukuyama',), ('Fujisawa',), ('Asahikawa',), ('Machida',), ('Nara',), ('Takatsuki',), ('Iwaki',), ('Nagano',), ('Toyohashi',), ('Toyota',), ('Suita',), ('Takamatsu',), ('Koriyama',), ('Okazaki',), ('Kawagoe',), ('Tokorozawa',), ('Toyama',), ('Kochi',), ('Kashiwa',), ('Akita',), ('Miyazaki',), ('Koshigaya',), ('Naha',), ('Aomori',), ('Hakodate',), ('Akashi',), ('Yokkaichi',), ('Fukushima',), ('Morioka',), ('Maebashi',), ('Kasugai',), ('Otsu',), ('Ichihara',), ('Yao',), ('Ichinomiya',), ('Tokushima',), ('Kakogawa',), ('Ibaraki',), ('Neyagawa',), ('Shimonoseki',), ('Yamagata',), ('Fukui',), ('Hiratsuka',), ('Mito',), ('Sasebo',), ('Hachinohe',), ('Takasaki',), ('Shimizu',), ('Kurume',), ('Fuji',), ('Soka',), ('Fuchu',), ('Chigasaki',), ('Atsugi',), ('Numazu',), ('Ageo',), ('Yamato',), ('Matsumoto',), ('Kure',), ('Takarazuka',), ('Kasukabe',), ('Chofu',), ('Odawara',), ('Kofu',), ('Kushiro',), ('Kishiwada',), ('Hitachi',), ('Nagaoka',), ('Itami',), ('Uji',), ('Suzuka',), ('Hirosaki',), ('Ube',), ('Kodaira',), ('Takaoka',), ('Obihiro',), ('Tomakomai',), ('Saga',), ('Sakura',), ('Kamakura',), ('Mitaka',), ('Izumi',), ('Hino',), ('Hadano',), ('Ashikaga',), ('Tsu',), ('Sayama',), ('Yachiyo',), ('Tsukuba',), ('Sanaa',), ('Aden',), ('Taizz',), ('Hodeida',), ('al-Zarqa',), ('Irbid',), ('Novi Sad',), ('Niš',), ('Phnom Penh',), ('Garoua',), ('Calgary',), ('Toronto',), ('North York',), ('Winnipeg',), ('Edmonton',), ('Mississauga',), ('Scarborough',), ('Vancouver',), ('Etobicoke',), ('London',), ('Hamilton',), ('Ottawa',), ('Laval',), ('Surrey',), ('Brampton',), ('Windsor',), ('Saskatoon',), ('Kitchener',), ('Markham',), ('Regina',), ('Burnaby',), ('Québec',), ('Qaraghandy',), ('Shymkent',), ('Taraz',), ('Astana',), ('Öskemen',), ('Pavlodar',), ('Semey',), ('Aqtöbe',), ('Qostanay',), ('Petropavl',), ('Oral',), ('Temirtau',), ('Mombasa',), ('Kisumu',), ('Nakuru',), ('Bangui',), ('Handan',), ('Wuxi',), ('Xuzhou',), ('Datong',), ('Yichun',), ('Benxi',), ('Luoyang',), ('Suzhou',), ('Xining',), ('Huainan',), ('Jixi',), ('Daqing',), ('Fuxin',), ('Amoy [Xiamen]',), ('Liuzhou',), ('Shantou',), ('Jinzhou',), ('Mudanjiang',), ('Yinchuan',), ('Changzhou',), ('Zhangjiakou',), ('Dandong',), ('Hegang',), ('Kaifeng',), ('Jiamusi',), ('Liaoyang',), ('Hengyang',), ('Baoding',), ('Hunjiang',), ('Xinxiang',), ('Huangshi',), ('Haikou',), ('Yantai',), ('Bengbu',), ('Xiangtan',), ('Weifang',), ('Wuhu',), ('Pingxiang',), ('Yingkou',), ('Anyang',), ('Panzhihua',), ('Pingdingshan',), ('Xiangfan',), ('Zhuzhou',), ('Jiaozuo',), ('Wenzhou',), ('Zhangjiang',), ('Zigong',), ('Shuangyashan',), ('Zaozhuang',), ('Yakeshi',), ('Yichang',), ('Zhenjiang',), ('Huaibei',), ('Qinhuangdao',), ('Guilin',), ('Liupanshui',), ('Panjin',), ('Yangquan',), ('Jinxi',), ('Liaoyuan',), ('Lianyungang',), ('Xianyang',), ('Tai´an',), ('Chifeng',), ('Shaoguan',), ('Nantong',), ('Leshan',), ('Baoji',), ('Linyi',), ('Tonghua',), ('Siping',), ('Changzhi',), ('Tengzhou',), ('Chaozhou',), ('Yangzhou',), ('Dongwan',), ('Ma´anshan',), ('Foshan',), ('Yueyang',), ('Xingtai',), ('Changde',), ('Shihezi',), ('Yancheng',), ('Jiujiang',), ('Dongying',), ('Shashi',), ('Xintai',), ('Jingdezhen',), ('Tongchuan',), ('Zhongshan',), ('Shiyan',), ('Tieli',), ('Jining',), ('Wuhai',), ('Mianyang',), ('Luzhou',), ('Zunyi',), ('Shizuishan',), ('Neijiang',), ('Tongliao',), ('Tieling',), ('Wafangdian',), ('Anqing',), ('Shaoyang',), ('Laiwu',), ('Chengde',), ('Tianshui',), ('Nanyang',), ('Cangzhou',), ('Yibin',), ('Huaiyin',), ('Dunhua',), ('Yanji',), ('Jiangmen',), ('Tongling',), ('Suihua',), ('Gongziling',), ('Xiantao',), ('Chaoyang',), ('Ganzhou',), ('Huzhou',), ('Baicheng',), ('Shangzi',), ('Yangjiang',), ('Qitaihe',), ('Gejiu',), ('Jiangyin',), ('Hebi',), ('Jiaxing',), ('Wuzhou',), ('Meihekou',), ('Xuchang',), ('Liaocheng',), ('Haicheng',), ('Qianjiang',), ('Baiyin',), ('Bei´an',), ('Yixing',), ('Laizhou',), ('Qaramay',), ('Acheng',), ('Dezhou',), ('Nanping',), ('Zhaoqing',), ('Beipiao',), ('Fengcheng',), ('Fuyu',), ('Xinyang',), ('Dongtai',), ('Yuci',), ('Honghu',), ('Ezhou',), ('Heze',), ('Daxian',), ('Linfen',), ('Tianmen',), ('Yiyang',), ('Quanzhou',), ('Rizhao',), ('Deyang',), ('Guangyuan',), ('Changshu',), ('Zhangzhou',), ('Hailar',), ('Nanchong',), ('Jiutai',), ('Zhaodong',), ('Shaoxing',), ('Fuyang',), ('Maoming',), ('Qujing',), ('Ghulja',), ('Jiaohe',), ('Puyang',), ('Huadian',), ('Jiangyou',), ('Qashqar',), ('Anshun',), ('Fuling',), ('Xinyu',), ('Hanzhong',), ('Danyang',), ('Chenzhou',), ('Xiaogan',), ('Shangqiu',), ('Zhuhai',), ('Qingyuan',), ('Aqsu',), ('Jining',), ('Xiaoshan',), ('Zaoyang',), ('Xinghua',), ('Hami',), ('Huizhou',), ('Jinmen',), ('Sanming',), ('Bishkek',), ('Osh',), ('Cartagena',), ('Cúcuta',), ('Bucaramanga',), ('Ibagué',), ('Pereira',), ('Santa Marta',), ('Manizales',), ('Bello',), ('Pasto',), ('Neiva',), ('Soledad',), ('Armenia',), ('Villavicencio',), ('Soacha',), ('Valledupar',), ('Montería',), ('Itagüí',), ('Palmira',), ('Buenaventura',), ('Floridablanca',), ('Sincelejo',), ('Popayán',), ('Barrancabermeja',), ('Pointe-Noire',), ('Lubumbashi',), ('Mbuji-Mayi',), ('Kolwezi',), ('Kisangani',), ('Kananga',), ('Likasi',), ('Bukavu',), ('Kikwit',), ('Tshikapa',), ('Matadi',), ('Mbandaka',), ('Hamhung',), ('Chongjin',), ('Nampo',), ('Sinuiju',), ('Wonsan',), ('Phyongsong',), ('Sariwon',), ('Haeju',), ('Kanggye',), ('Kimchaek',), ('Hyesan',), ('Kaesong',), ('Songnam',), ('Puchon',), ('Suwon',), ('Anyang',), ('Chonju',), ('Chongju',), ('Koyang',), ('Ansan',), ('Pohang',), ('Chang-won',), ('Masan',), ('Kwangmyong',), ('Chonan',), ('Chinju',), ('Iksan',), ('Pyongtaek',), ('Kumi',), ('Uijongbu',), ('Kyongju',), ('Kunsan',), ('Cheju',), ('Kimhae',), ('Sunchon',), ('Mokpo',), ('Yong-in',), ('Wonju',), ('Kunpo',), ('Chunchon',), ('Namyangju',), ('Kangnung',), ('Chungju',), ('Andong',), ('Yosu',), ('Kyongsan',), ('Paju',), ('Yangsan',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Zagreb',), ('Split',), ('Rijeka',), ('Santiago de Cuba',), ('Camagüey',), ('Holguín',), ('Santa Clara',), ('Guantánamo',), ('Nicosia',), ('Vientiane',), ('Riga',), ('Maseru',), ('Tripoli',), ('Monrovia',), ('Bengasi',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('El-Aaiún',), ('Macao',), ('Antananarivo',), ('Skopje',), ('Blantyre',), ('Lilongwe',), ('Ipoh',), ('Johor Baharu',), ('Petaling Jaya',), ('Kelang',), ('Kuala Terengganu',), ('Pinang',), ('Kota Bharu',), ('Kuantan',), ('Taiping',), ('Seremban',), ('Bamako',), ('Rabat',), ('Marrakech',), ('Fès',), ('Tanger',), ('Salé',), ('Meknès',), ('Oujda',), ('Kénitra',), ('Tétouan',), ('Safi',), ('Nouakchott',), ('Naucalpan de Juárez',), ('Mexicali',), ('Culiacán',), ('Acapulco de Juárez',), ('Tlalnepantla de Baz',), ('Mérida',), ('Chihuahua',), ('San Luis Potosí',), ('Guadalupe',), ('Toluca',), ('Aguascalientes',), ('Querétaro',), ('Morelia',), ('Hermosillo',), ('Saltillo',), ('Torreón',), ('Centro (Villahermosa)',), ('San Nicolás de los Garza',), ('Durango',), ('Chimalhuacán',), ('Tlaquepaque',), ('Atizapán de Zaragoza',), ('Veracruz',), ('Cuautitlán Izcalli',), ('Irapuato',), ('Tuxtla Gutiérrez',), ('Tultitlán',), ('Reynosa',), ('Benito Juárez',), ('Matamoros',), ('Xalapa',), ('Celaya',), ('Mazatlán',), ('Ensenada',), ('Ahome',), ('Cajeme',), ('Cuernavaca',), ('Tonalá',), ('Valle de Chalco Solidaridad',), ('Nuevo Laredo',), ('Tepic',), ('Tampico',), ('Ixtapaluca',), ('Apodaca',), ('Guasave',), ('Gómez Palacio',), ('Tapachula',), ('Nicolás Romero',), ('Coatzacoalcos',), ('Uruapan',), ('Victoria',), ('Oaxaca de Juárez',), ('Coacalco de Berriozábal',), ('Pachuca de Soto',), ('General Escobedo',), ('Salamanca',), ('Santa Catarina',), ('Tehuacán',), ('Chalco',), ('Cárdenas',), ('Campeche',), ('La Paz',), ('Othón P. Blanco (Chetumal)',), ('Texcoco',), ('La Paz',), ('Metepec',), ('Monclova',), ('Huixquilucan',), ('Chilpancingo de los Bravo',), ('Puerto Vallarta',), ('Fresnillo',), ('Ciudad Madero',), ('Soledad de Graciano Sánchez',), ('San Juan del Río',), ('San Felipe del Progreso',), ('Córdoba',), ('Tecámac',), ('Ocosingo',), ('Carmen',), ('Lázaro Cárdenas',), ('Jiutepec',), ('Papantla',), ('Comalcalco',), ('Zamora',), ('Chisinau',), ('Tiraspol',), ('Ulan Bator',), ('Matola',), ('Beira',), ('Nampula',), ('Chimoio',), ('Mandalay',), ('Moulmein (Mawlamyine)',), ('Pegu (Bago)',), ('Bassein (Pathein)',), ('Windhoek',), ('Kathmandu',), ('Niamey',), ('Ogbomosho',), ('Kano',), ('Oshogbo',), ('Ilorin',), ('Abeokuta',), ('Port Harcourt',), ('Zaria',), ('Ilesha',), ('Onitsha',), ('Iwo',), ('Ado-Ekiti',), ('Abuja',), ('Kaduna',), ('Mushin',), ('Maiduguri',), ('Enugu',), ('Ede',), ('Aba',), ('Ife',), ('Ila',), ('Oyo',), ('Ikerre',), ('Benin City',), ('Iseyin',), ('Katsina',), ('Jos',), ('Sokoto',), ('Ilobu',), ('Offa',), ('Ikorodu',), ('Ilawe-Ekiti',), ('Owo',), ('Ikirun',), ('Shaki',), ('Calabar',), ('Ondo',), ('Akure',), ('Oslo',), ('Bergen',), ('Bouaké',), ('Quetta',), ('Islamabad',), ('Sargodha',), ('Sialkot',), ('Bahawalpur',), ('Sukkur',), ('Jhang',), ('Sheikhupura',), ('Larkana',), ('Gujrat',), ('Mardan',), ('Kasur',), ('Rahim Yar Khan',), ('Sahiwal',), ('Okara',), ('Wah',), ('Dera Ghazi Khan',), ('Mirpur Khas',), ('Nawabshah',), ('Mingora',), ('Chiniot',), ('Ciudad de Panamá',), ('San Miguelito',), ('Port Moresby',), ('Asunción',), ('Arequipa',), ('Trujillo',), ('Chiclayo',), ('Callao',), ('Iquitos',), ('Chimbote',), ('Huancayo',), ('Piura',), ('Cusco',), ('Pucallpa',), ('Tacna',), ('Ica',), ('Lisboa',), ('Porto',), ('San Juan',), ('Bayamón',), ('Ponce',), ('Carolina',), ('Lódz',), ('Kraków',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzeszów',), ('Doha',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-Étienne',), ('Toulon',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('Târgu Mures',), ('Kigali',), ('Stockholm',), ('Gothenburg [Göteborg]',), ('Malmö',), ('Uppsala',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('Düsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('Nürnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('Münster',), ('Mönchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('Lübeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbrücken',), ('Mainz',), ('Hamm',), ('Herne',), ('Mülheim an der Ruhr',), ('Solingen',), ('Osnabrück',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Ndola',), ('Kitwe',), ('Medina',), ('al-Dammam',), ('al-Taif',), ('Tabuk',), ('Burayda',), ('al-Hufuf',), ('al-Mubarraz',), ('Khamis Mushayt',), ('Hail',), ('Pikine',), ('Dakar',), ('Thiès',), ('Kaolack',), ('Ziguinchor',), ('Freetown',), ('Bratislava',), ('Košice',), ('Ljubljana',), ('Colombo',), ('Dehiwala',), ('Moratuwa',), ('Sharq al-Nil',), ('Port Sudan',), ('Kassala',), ('Obeid',), ('Nyala',), ('Wad Madani',), ('al-Qadarif',), ('Kusti',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [Åbo]',), ('Zürich',), ('Geneve',), ('Basel',), ('Hims',), ('Hama',), ('Latakia',), ('Dushanbe',), ('Khujand',), ('Tainan',), ('Panchiao',), ('Chungho',), ('Keelung (Chilung)',), ('Sanchung',), ('Hsinchuang',), ('Hsinchu',), ('Chungli',), ('Fengshan',), ('Taoyuan',), ('Chiayi',), ('Hsintien',), ('Changhwa',), ('Yungho',), ('Tucheng',), ('Pingtung',), ('Yungkang',), ('Pingchen',), ('Tali',), ('Taiping',), ('Pate',), ('Fengyuan',), ('Luchou',), ('Dodoma',), ('Mwanza',), ('København',), ('Århus',), ('Odense',), ('Aalborg',), ('Nonthaburi',), ('Nakhon Ratchasima',), ('Chiang Mai',), ('Lomé',), ('N´Djaména',), ('Brno',), ('Ostrava',), ('Plzen',), ('Tunis',), ('Sfax',), ('Ariana',), ('Ettadhamen',), ('Gaziantep',), ('Konya',), ('Mersin (Içel)',), ('Antalya',), ('Diyarbakir',), ('Kayseri',), ('Eskisehir',), ('Sanliurfa',), ('Samsun',), ('Malatya',), ('Gebze',), ('Denizli',), ('Sivas',), ('Erzurum',), ('Tarsus',), ('Kahramanmaras',), ('Elâzig',), ('Van',), ('Sultanbeyli',), ('Izmit (Kocaeli)',), ('Manisa',), ('Batman',), ('Balikesir',), ('Sakarya (Adapazari)',), ('Ashgabat',), ('Chärjew',), ('Kampala',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('Tšernigiv',), ('Tšerkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('Tšernivtsi',), ('Rivne',), ('Krementšuk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kertš',), ('Debrecen',), ('Miskolc',), ('Auckland',), ('Christchurch',), ('Manukau',), ('North Shore',), ('Waitakere',), ('Wellington',), ('Namangan',), ('Samarkand',), ('Andijon',), ('Buhoro',), ('Karsi',), ('Nukus',), ('Kükon',), ('Fargona',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Brest',), ('Bobruisk',), ('Baranovitši',), ('Barquisimeto',), ('Valencia',), ('Ciudad Guayana',), ('Petare',), ('Maracay',), ('Barcelona',), ('Maturín',), ('San Cristóbal',), ('Ciudad Bolívar',), ('Cumaná',), ('Mérida',), ('Cabimas',), ('Barinas',), ('Turmero',), ('Baruta',), ('Puerto Cabello',), ('Santa Ana de Coro',), ('Los Teques',), ('Punto Fijo',), ('Guarenas',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje Tšelny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('Tšeboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sotši',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahatškala',), ('Tšerepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('Tšita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Joškar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Naltšik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagoveštšensk',), ('Šahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamtšatski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novotšerkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Haiphong',), ('Da Nang',), ('Biên Hoa',), ('Nha Trang',), ('Hue',), ('Can Tho',), ('Cam Pha',), ('Nam Dinh',), ('Quy Nhon',), ('Tallinn',), ('San Jose',), ('Indianapolis',), ('San Francisco',), ('Jacksonville',), ('Columbus',), ('Austin',), ('Baltimore',), ('Memphis',), ('Milwaukee',), ('Boston',), ('Washington',), ('Nashville-Davidson',), ('El Paso',), ('Seattle',), ('Denver',), ('Charlotte',), ('Fort Worth',), ('Portland',), ('Oklahoma City',), ('Tucson',), ('New Orleans',), ('Las Vegas',), ('Cleveland',), ('Long Beach',), ('Albuquerque',), ('Kansas City',), ('Fresno',), ('Virginia Beach',), ('Atlanta',), ('Sacramento',), ('Oakland',), ('Mesa',), ('Tulsa',), ('Omaha',), ('Minneapolis',), ('Honolulu',), ('Miami',), ('Colorado Springs',), ('Saint Louis',), ('Wichita',), ('Santa Ana',), ('Pittsburgh',), ('Arlington',), ('Cincinnati',), ('Anaheim',), ('Toledo',), ('Tampa',), ('Buffalo',), ('Saint Paul',), ('Corpus Christi',), ('Aurora',), ('Raleigh',), ('Newark',), ('Lexington-Fayette',), ('Anchorage',), ('Louisville',), ('Riverside',), ('Saint Petersburg',), ('Bakersfield',), ('Stockton',), ('Birmingham',), ('Jersey City',), ('Norfolk',), ('Baton Rouge',), ('Hialeah',), ('Lincoln',), ('Greensboro',), ('Plano',), ('Rochester',), ('Glendale',), ('Akron',), ('Garland',), ('Madison',), ('Fort Wayne',), ('Fremont',), ('Scottsdale',), ('Montgomery',), ('Shreveport',), ('Augusta-Richmond County',), ('Lubbock',), ('Chesapeake',), ('Mobile',), ('Des Moines',), ('Grand Rapids',), ('Richmond',), ('Yonkers',), ('Spokane',), ('Glendale',), ('Tacoma',), ('Irving',), ('Huntington Beach',), ('Modesto',), ('Durham',), ('Columbus',), ('Orlando',), ('Boise City',), ('Winston-Salem',), ('San Bernardino',), ('Jackson',), ('Little Rock',), ('Salt Lake City',), ('Reno',), ('Newport News',), ('Chandler',), ('Laredo',), ('Henderson',), ('Arlington',), ('Knoxville',), ('Amarillo',), ('Providence',), ('Chula Vista',), ('Worcester',), ('Oxnard',), ('Dayton',), ('Garden Grove',), ('Oceanside',), ('Bulawayo',), ('Chitungwiza',), ('Mount Darwin',), ('Gaza',)]

===== Eval Round 814 =====
Database         : world_1
Prediction SQL   : SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000
Gold SQL         : select name from city where population between 160000 and 900000
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Qandahar',), ('Herat',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Tirana',), ('Oran',), ('Constantine',), ('Annaba',), ('Batna',), ('Sétif',), ('Huambo',), ('Dubai',), ('Abu Dhabi',), ('Sharja',), ('al-Ayn',), ('Lomas de Zamora',), ('Quilmes',), ('Almirante Brown',), ('La Plata',), ('Mar del Plata',), ('San Miguel de Tucumán',), ('Lanús',), ('Merlo',), ('General San Martín',), ('Salta',), ('Moreno',), ('Santa Fé',), ('Avellaneda',), ('Tres de Febrero',), ('Morón',), ('Florencio Varela',), ('San Isidro',), ('Tigre',), ('Malvinas Argentinas',), ('Vicente López',), ('Berazategui',), ('Corrientes',), ('San Miguel',), ('Bahía Blanca',), ('Esteban Echeverría',), ('Resistencia',), ('José C. Paz',), ('Paraná',), ('Godoy Cruz',), ('Posadas',), ('Guaymallén',), ('Santiago del Estero',), ('San Salvador de Jujuy',), ('Hurlingham',), ('Neuquén',), ('Gjumri',), ('Vanadzor',), ('Canberra',), ('Gold Coast',), ('Newcastle',), ('Central Coast',), ('Wollongong',), ('Gäncä',), ('Sumqayit',), ('Nassau',), ('Khulna',), ('Rajshahi',), ('Narayanganj',), ('Rangpur',), ('Mymensingh',), ('Barisal',), ('Tungi',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Cotonou',), ('Porto-Novo',), ('La Paz',), ('El Alto',), ('Cochabamba',), ('Oruro',), ('Sucre',), ('Sarajevo',), ('Gaborone',), ('São Gonçalo',), ('Nova Iguaçu',), ('São Luís',), ('Maceió',), ('Duque de Caxias',), ('São Bernardo do Campo',), ('Teresina',), ('Natal',), ('Osasco',), ('Campo Grande',), ('Santo André',), ('João Pessoa',), ('Jaboatão dos Guararapes',), ('Contagem',), ('São José dos Campos',), ('Uberlândia',), ('Feira de Santana',), ('Ribeirão Preto',), ('Sorocaba',), ('Niterói',), ('Cuiabá',), ('Juiz de Fora',), ('Aracaju',), ('São João de Meriti',), ('Londrina',), ('Joinville',), ('Belford Roxo',), ('Santos',), ('Ananindeua',), ('Campos dos Goytacazes',), ('Mauá',), ('Carapicuíba',), ('Olinda',), ('Campina Grande',), ('São José do Rio Preto',), ('Caxias do Sul',), ('Moji das Cruzes',), ('Diadema',), ('Aparecida de Goiânia',), ('Piracicaba',), ('Cariacica',), ('Vila Velha',), ('Pelotas',), ('Bauru',), ('Porto Velho',), ('Serra',), ('Betim',), ('Jundíaí',), ('Canoas',), ('Franca',), ('São Vicente',), ('Maringá',), ('Montes Claros',), ('Anápolis',), ('Florianópolis',), ('Petrópolis',), ('Itaquaquecetuba',), ('Vitória',), ('Ponta Grossa',), ('Rio Branco',), ('Foz do Iguaçu',), ('Macapá',), ('Ilhéus',), ('Vitória da Conquista',), ('Uberaba',), ('Paulista',), ('Limeira',), ('Blumenau',), ('Caruaru',), ('Santarém',), ('Volta Redonda',), ('Novo Hamburgo',), ('Caucaia',), ('Santa Maria',), ('Cascavel',), ('Guarujá',), ('Ribeirão das Neves',), ('Governador Valadares',), ('Taubaté',), ('Imperatriz',), ('Gravataí',), ('Embu',), ('Mossoró',), ('Várzea Grande',), ('Petrolina',), ('Barueri',), ('Viamão',), ('Ipatinga',), ('Juazeiro',), ('Juazeiro do Norte',), ('Taboão da Serra',), ('São José dos Pinhais',), ('Magé',), ('Suzano',), ('São Leopoldo',), ('Marília',), ('São Carlos',), ('Sumaré',), ('Presidente Prudente',), ('Divinópolis',), ('Sete Lagoas',), ('Rio Grande',), ('Itabuna',), ('Jequié',), ('Arapiraca',), ('Colombo',), ('Americana',), ('Alvorada',), ('Araraquara',), ('Itaboraí',), ('Santa Bárbara d´Oeste',), ('Nova Friburgo',), ('Jacareí',), ('Araçatuba',), ('Barra Mansa',), ('Praia Grande',), ('Marabá',), ('Criciúma',), ('Boa Vista',), ('Passo Fundo',), ('Dourados',), ('Santa Luzia',), ('Rio Claro',), ('Maracanaú',), ('Guarapuava',), ('Glasgow',), ('Liverpool',), ('Edinburgh',), ('Sheffield',), ('Manchester',), ('Leeds',), ('Bristol',), ('Cardiff',), ('Coventry',), ('Leicester',), ('Bradford',), ('Belfast',), ('Nottingham',), ('Kingston upon Hull',), ('Plymouth',), ('Stoke-on-Trent',), ('Wolverhampton',), ('Derby',), ('Swansea',), ('Southampton',), ('Aberdeen',), ('Northampton',), ('Dudley',), ('Portsmouth',), ('Newcastle upon Tyne',), ('Sunderland',), ('Luton',), ('Swindon',), ('Southend-on-Sea',), ('Walsall',), ('Bournemouth',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Ouagadougou',), ('Bobo-Dioulasso',), ('Bujumbura',), ('Puente Alto',), ('Viña del Mar',), ('Valparaíso',), ('Talcahuano',), ('Antofagasta',), ('San Bernardo',), ('Temuco',), ('Concepción',), ('Rancagua',), ('Arica',), ('Talca',), ('Chillán',), ('Iquique',), ('San José',), ('Djibouti',), ('Santiago de los Caballeros',), ('Cuenca',), ('Machala',), ('Santo Domingo de los Colorados',), ('Portoviejo',), ('Ambato',), ('Manta',), ('Shubra al-Khayma',), ('Port Said',), ('Suez',), ('al-Mahallat al-Kubra',), ('Tanta',), ('al-Mansura',), ('Luxor',), ('Asyut',), ('Bahtim',), ('Zagazig',), ('al-Faiyum',), ('Ismailia',), ('Kafr al-Dawwar',), ('Assuan',), ('Damanhur',), ('al-Minya',), ('Bani Suwayf',), ('Qina',), ('Sawhaj',), ('San Salvador',), ('Asmara',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('Málaga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('Córdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gijón',), ('L´Hospitalet de Llobregat',), ('Granada',), ('A Coruña (La Coruña)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('Móstoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iruña]',), ('Donostia-San Sebastián',), ('Cartagena',), ('Leganés',), ('Fuenlabrada',), ('Almería',), ('Terrassa',), ('Alcalá de Henares',), ('Burgos',), ('Johannesburg',), ('Port Elizabeth',), ('Pretoria',), ('Inanda',), ('Durban',), ('Vanderbijlpark',), ('Kempton Park',), ('Alberton',), ('Pinetown',), ('Pietermaritzburg',), ('Benoni',), ('Randburg',), ('Umlazi',), ('Bloemfontein',), ('Vereeniging',), ('Wonderboom',), ('Roodepoort',), ('Boksburg',), ('Klerksdorp',), ('Soshanguve',), ('Newcastle',), ('East London',), ('Welkom',), ('Kimberley',), ('Uitenhage',), ('Chatsworth',), ('Mdantsane',), ('Krugersdorp',), ('Botshabelo',), ('Brakpan',), ('Witbank',), ('Oberholzer',), ('Germiston',), ('Springs',), ('Dire Dawa',), ('Cebu',), ('Zamboanga',), ('Pasig',), ('Valenzuela',), ('Las Piñas',), ('Antipolo',), ('Taguig',), ('Cagayan de Oro',), ('Parañaque',), ('Makati',), ('Bacolod',), ('General Santos',), ('Marikina',), ('Dasmariñas',), ('Muntinlupa',), ('Iloilo',), ('Pasay',), ('Malabon',), ('San José del Monte',), ('Bacoor',), ('Iligan',), ('Calamba',), ('Mandaluyong',), ('Butuan',), ('Angeles',), ('Tarlac',), ('Mandaue',), ('Baguio',), ('Batangas',), ('Cainta',), ('San Pedro',), ('Navotas',), ('Cabanatuan',), ('San Fernando',), ('Lipa',), ('Lapu-Lapu',), ('San Pablo',), ('Biñan',), ('Taytay',), ('Lucena',), ('Imus',), ('Olongapo',), ('Binangonan',), ('Santa Rosa',), ('Tagum',), ('Tacloban',), ('Malolos',), ('Mabalacat',), ('Cotabato',), ('Meycauayan',), ('Puerto Princesa',), ('Libreville',), ('Kutaisi',), ('Kumasi',), ('Ciudad de Guatemala',), ('Mixco',), ('Bissau',), ('Georgetown',), ('Port-au-Prince',), ('Carrefour',), ('Delmas',), ('Tegucigalpa',), ('San Pedro Sula',), ('Malang',), ('Bandar Lampung',), ('Bekasi',), ('Padang',), ('Surakarta',), ('Banjarmasin',), ('Pekan Baru',), ('Denpasar',), ('Yogyakarta',), ('Pontianak',), ('Samarinda',), ('Jambi',), ('Depok',), ('Cimahi',), ('Balikpapan',), ('Manado',), ('Mataram',), ('Pekalongan',), ('Tegal',), ('Bogor',), ('Ciputat',), ('Pondokgede',), ('Cirebon',), ('Kediri',), ('Ambon',), ('Jember',), ('Cilacap',), ('Cimanggis',), ('Pematang Siantar',), ('Purwokerto',), ('Ciomas',), ('Tasikmalaya',), ('Madiun',), ('Srinagar',), ('Agra',), ('Coimbatore',), ('Thane (Thana)',), ('Allahabad',), ('Meerut',), ('Vishakhapatnam',), ('Jabalpur',), ('Amritsar',), ('Faridabad',), ('Vijayawada',), ('Gwalior',), ('Jodhpur',), ('Nashik (Nasik)',), ('Hubli-Dharwad',), ('Solapur (Sholapur)',), ('Ranchi',), ('Bareilly',), ('Guwahati (Gauhati)',), ('Shambajinagar (Aurangabad)',), ('Cochin (Kochi)',), ('Rajkot',), ('Kota',), ('Thiruvananthapuram (Trivandrum',), ('Pimpri-Chinchwad',), ('Jalandhar (Jullundur)',), ('Gorakhpur',), ('Chandigarh',), ('Mysore',), ('Aligarh',), ('Guntur',), ('Jamshedpur',), ('Ghaziabad',), ('Warangal',), ('Raipur',), ('Moradabad',), ('Durgapur',), ('Amravati',), ('Calicut (Kozhikode)',), ('Bikaner',), ('Bhubaneswar',), ('Kolhapur',), ('Kataka (Cuttack)',), ('Ajmer',), ('Bhavnagar',), ('Tiruchirapalli',), ('Bhilai',), ('Bhiwandi',), ('Saharanpur',), ('Ulhasnagar',), ('Salem',), ('Ujjain',), ('Malegaon',), ('Jamnagar',), ('Bokaro Steel City',), ('Akola',), ('Belgaum',), ('Rajahmundry',), ('Nellore',), ('Udaipur',), ('New Bombay',), ('Bhatpara',), ('Gulbarga',), ('New Delhi',), ('Jhansi',), ('Gaya',), ('Kakinada',), ('Dhule (Dhulia)',), ('Panihati',), ('Nanded (Nander)',), ('Mangalore',), ('Dehra Dun',), ('Kamarhati',), ('Davangere',), ('Asansol',), ('Bhagalpur',), ('Bellary',), ('Barddhaman (Burdwan)',), ('Rampur',), ('Jalgaon',), ('Muzaffarpur',), ('Nizamabad',), ('Muzaffarnagar',), ('Patiala',), ('Shahjahanpur',), ('Kurnool',), ('Tiruppur (Tirupper)',), ('Rohtak',), ('South Dum Dum',), ('Mathura',), ('Chandrapur',), ('Barahanagar (Baranagar)',), ('Darbhanga',), ('Siliguri (Shiliguri)',), ('Raurkela',), ('Ambattur',), ('Panipat',), ('Firozabad',), ('Ichalkaranji',), ('Jammu',), ('Ramagundam',), ('Eluru',), ('Brahmapur',), ('Alwar',), ('Pondicherry',), ('Thanjavur',), ('Bihar Sharif',), ('Tuticorin',), ('Imphal',), ('Latur',), ('Sagar',), ('Farrukhabad-cum-Fatehgarh',), ('Sangli',), ('Parbhani',), ('Nagar Coil',), ('Bijapur',), ('Kukatpalle',), ('Bally',), ('Bhilwara',), ('Ratlam',), ('Avadi',), ('Dindigul',), ('Ahmadnagar',), ('Bilaspur',), ('Shimoga',), ('Kharagpur',), ('Mira Bhayandar',), ('Vellore',), ('Jalna',), ('Burnpur',), ('Anantapur',), ('Allappuzha (Alleppey)',), ('Tirupati',), ('Karnal',), ('Burhanpur',), ('Hisar (Hissar)',), ('Tiruvottiyur',), ('Mirzapur-cum-Vindhyachal',), ('Secunderabad',), ('Nadiad',), ('Dewas',), ('Murwara (Katni)',), ('Ganganagar',), ('Vizianagaram',), ('Mosul',), ('Irbil',), ('Kirkuk',), ('Basra',), ('al-Sulaymaniya',), ('al-Najaf',), ('Karbala',), ('al-Hilla',), ('al-Nasiriya',), ('al-Amara',), ('al-Diwaniya',), ('al-Ramadi',), ('al-Kut',), ('Ahvaz',), ('Qom',), ('Kermanshah',), ('Urmia',), ('Zahedan',), ('Rasht',), ('Hamadan',), ('Kerman',), ('Arak',), ('Ardebil',), ('Yazd',), ('Qazvin',), ('Zanjan',), ('Sanandaj',), ('Bandar-e-Abbas',), ('Khorramabad',), ('Eslamshahr',), ('Borujerd',), ('Abadan',), ('Dezful',), ('Kashan',), ('Sari',), ('Gorgan',), ('Najafabad',), ('Sabzevar',), ('Khomeynishahr',), ('Dublin',), ('Jerusalem',), ('Tel Aviv-Jaffa',), ('Haifa',), ('Rishon Le Ziyyon',), ('Beerseba',), ('Holon',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Graz',), ('Linz',), ('Chiba',), ('Sakai',), ('Kumamoto',), ('Okayama',), ('Sagamihara',), ('Hamamatsu',), ('Kagoshima',), ('Funabashi',), ('Higashiosaka',), ('Hachioji',), ('Niigata',), ('Amagasaki',), ('Himeji',), ('Shizuoka',), ('Urawa',), ('Matsuyama',), ('Matsudo',), ('Kanazawa',), ('Kawaguchi',), ('Ichikawa',), ('Omiya',), ('Utsunomiya',), ('Oita',), ('Nagasaki',), ('Yokosuka',), ('Kurashiki',), ('Gifu',), ('Hirakata',), ('Nishinomiya',), ('Toyonaka',), ('Wakayama',), ('Fukuyama',), ('Fujisawa',), ('Asahikawa',), ('Machida',), ('Nara',), ('Takatsuki',), ('Iwaki',), ('Nagano',), ('Toyohashi',), ('Toyota',), ('Suita',), ('Takamatsu',), ('Koriyama',), ('Okazaki',), ('Kawagoe',), ('Tokorozawa',), ('Toyama',), ('Kochi',), ('Kashiwa',), ('Akita',), ('Miyazaki',), ('Koshigaya',), ('Naha',), ('Aomori',), ('Hakodate',), ('Akashi',), ('Yokkaichi',), ('Fukushima',), ('Morioka',), ('Maebashi',), ('Kasugai',), ('Otsu',), ('Ichihara',), ('Yao',), ('Ichinomiya',), ('Tokushima',), ('Kakogawa',), ('Ibaraki',), ('Neyagawa',), ('Shimonoseki',), ('Yamagata',), ('Fukui',), ('Hiratsuka',), ('Mito',), ('Sasebo',), ('Hachinohe',), ('Takasaki',), ('Shimizu',), ('Kurume',), ('Fuji',), ('Soka',), ('Fuchu',), ('Chigasaki',), ('Atsugi',), ('Numazu',), ('Ageo',), ('Yamato',), ('Matsumoto',), ('Kure',), ('Takarazuka',), ('Kasukabe',), ('Chofu',), ('Odawara',), ('Kofu',), ('Kushiro',), ('Kishiwada',), ('Hitachi',), ('Nagaoka',), ('Itami',), ('Uji',), ('Suzuka',), ('Hirosaki',), ('Ube',), ('Kodaira',), ('Takaoka',), ('Obihiro',), ('Tomakomai',), ('Saga',), ('Sakura',), ('Kamakura',), ('Mitaka',), ('Izumi',), ('Hino',), ('Hadano',), ('Ashikaga',), ('Tsu',), ('Sayama',), ('Yachiyo',), ('Tsukuba',), ('Sanaa',), ('Aden',), ('Taizz',), ('Hodeida',), ('al-Zarqa',), ('Irbid',), ('Novi Sad',), ('Niš',), ('Phnom Penh',), ('Garoua',), ('Calgary',), ('Toronto',), ('North York',), ('Winnipeg',), ('Edmonton',), ('Mississauga',), ('Scarborough',), ('Vancouver',), ('Etobicoke',), ('London',), ('Hamilton',), ('Ottawa',), ('Laval',), ('Surrey',), ('Brampton',), ('Windsor',), ('Saskatoon',), ('Kitchener',), ('Markham',), ('Regina',), ('Burnaby',), ('Québec',), ('Qaraghandy',), ('Shymkent',), ('Taraz',), ('Astana',), ('Öskemen',), ('Pavlodar',), ('Semey',), ('Aqtöbe',), ('Qostanay',), ('Petropavl',), ('Oral',), ('Temirtau',), ('Mombasa',), ('Kisumu',), ('Nakuru',), ('Bangui',), ('Handan',), ('Wuxi',), ('Xuzhou',), ('Datong',), ('Yichun',), ('Benxi',), ('Luoyang',), ('Suzhou',), ('Xining',), ('Huainan',), ('Jixi',), ('Daqing',), ('Fuxin',), ('Amoy [Xiamen]',), ('Liuzhou',), ('Shantou',), ('Jinzhou',), ('Mudanjiang',), ('Yinchuan',), ('Changzhou',), ('Zhangjiakou',), ('Dandong',), ('Hegang',), ('Kaifeng',), ('Jiamusi',), ('Liaoyang',), ('Hengyang',), ('Baoding',), ('Hunjiang',), ('Xinxiang',), ('Huangshi',), ('Haikou',), ('Yantai',), ('Bengbu',), ('Xiangtan',), ('Weifang',), ('Wuhu',), ('Pingxiang',), ('Yingkou',), ('Anyang',), ('Panzhihua',), ('Pingdingshan',), ('Xiangfan',), ('Zhuzhou',), ('Jiaozuo',), ('Wenzhou',), ('Zhangjiang',), ('Zigong',), ('Shuangyashan',), ('Zaozhuang',), ('Yakeshi',), ('Yichang',), ('Zhenjiang',), ('Huaibei',), ('Qinhuangdao',), ('Guilin',), ('Liupanshui',), ('Panjin',), ('Yangquan',), ('Jinxi',), ('Liaoyuan',), ('Lianyungang',), ('Xianyang',), ('Tai´an',), ('Chifeng',), ('Shaoguan',), ('Nantong',), ('Leshan',), ('Baoji',), ('Linyi',), ('Tonghua',), ('Siping',), ('Changzhi',), ('Tengzhou',), ('Chaozhou',), ('Yangzhou',), ('Dongwan',), ('Ma´anshan',), ('Foshan',), ('Yueyang',), ('Xingtai',), ('Changde',), ('Shihezi',), ('Yancheng',), ('Jiujiang',), ('Dongying',), ('Shashi',), ('Xintai',), ('Jingdezhen',), ('Tongchuan',), ('Zhongshan',), ('Shiyan',), ('Tieli',), ('Jining',), ('Wuhai',), ('Mianyang',), ('Luzhou',), ('Zunyi',), ('Shizuishan',), ('Neijiang',), ('Tongliao',), ('Tieling',), ('Wafangdian',), ('Anqing',), ('Shaoyang',), ('Laiwu',), ('Chengde',), ('Tianshui',), ('Nanyang',), ('Cangzhou',), ('Yibin',), ('Huaiyin',), ('Dunhua',), ('Yanji',), ('Jiangmen',), ('Tongling',), ('Suihua',), ('Gongziling',), ('Xiantao',), ('Chaoyang',), ('Ganzhou',), ('Huzhou',), ('Baicheng',), ('Shangzi',), ('Yangjiang',), ('Qitaihe',), ('Gejiu',), ('Jiangyin',), ('Hebi',), ('Jiaxing',), ('Wuzhou',), ('Meihekou',), ('Xuchang',), ('Liaocheng',), ('Haicheng',), ('Qianjiang',), ('Baiyin',), ('Bei´an',), ('Yixing',), ('Laizhou',), ('Qaramay',), ('Acheng',), ('Dezhou',), ('Nanping',), ('Zhaoqing',), ('Beipiao',), ('Fengcheng',), ('Fuyu',), ('Xinyang',), ('Dongtai',), ('Yuci',), ('Honghu',), ('Ezhou',), ('Heze',), ('Daxian',), ('Linfen',), ('Tianmen',), ('Yiyang',), ('Quanzhou',), ('Rizhao',), ('Deyang',), ('Guangyuan',), ('Changshu',), ('Zhangzhou',), ('Hailar',), ('Nanchong',), ('Jiutai',), ('Zhaodong',), ('Shaoxing',), ('Fuyang',), ('Maoming',), ('Qujing',), ('Ghulja',), ('Jiaohe',), ('Puyang',), ('Huadian',), ('Jiangyou',), ('Qashqar',), ('Anshun',), ('Fuling',), ('Xinyu',), ('Hanzhong',), ('Danyang',), ('Chenzhou',), ('Xiaogan',), ('Shangqiu',), ('Zhuhai',), ('Qingyuan',), ('Aqsu',), ('Jining',), ('Xiaoshan',), ('Zaoyang',), ('Xinghua',), ('Hami',), ('Huizhou',), ('Jinmen',), ('Sanming',), ('Bishkek',), ('Osh',), ('Cartagena',), ('Cúcuta',), ('Bucaramanga',), ('Ibagué',), ('Pereira',), ('Santa Marta',), ('Manizales',), ('Bello',), ('Pasto',), ('Neiva',), ('Soledad',), ('Armenia',), ('Villavicencio',), ('Soacha',), ('Valledupar',), ('Montería',), ('Itagüí',), ('Palmira',), ('Buenaventura',), ('Floridablanca',), ('Sincelejo',), ('Popayán',), ('Barrancabermeja',), ('Pointe-Noire',), ('Lubumbashi',), ('Mbuji-Mayi',), ('Kolwezi',), ('Kisangani',), ('Kananga',), ('Likasi',), ('Bukavu',), ('Kikwit',), ('Tshikapa',), ('Matadi',), ('Mbandaka',), ('Hamhung',), ('Chongjin',), ('Nampo',), ('Sinuiju',), ('Wonsan',), ('Phyongsong',), ('Sariwon',), ('Haeju',), ('Kanggye',), ('Kimchaek',), ('Hyesan',), ('Kaesong',), ('Songnam',), ('Puchon',), ('Suwon',), ('Anyang',), ('Chonju',), ('Chongju',), ('Koyang',), ('Ansan',), ('Pohang',), ('Chang-won',), ('Masan',), ('Kwangmyong',), ('Chonan',), ('Chinju',), ('Iksan',), ('Pyongtaek',), ('Kumi',), ('Uijongbu',), ('Kyongju',), ('Kunsan',), ('Cheju',), ('Kimhae',), ('Sunchon',), ('Mokpo',), ('Yong-in',), ('Wonju',), ('Kunpo',), ('Chunchon',), ('Namyangju',), ('Kangnung',), ('Chungju',), ('Andong',), ('Yosu',), ('Kyongsan',), ('Paju',), ('Yangsan',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Zagreb',), ('Split',), ('Rijeka',), ('Santiago de Cuba',), ('Camagüey',), ('Holguín',), ('Santa Clara',), ('Guantánamo',), ('Nicosia',), ('Vientiane',), ('Riga',), ('Maseru',), ('Tripoli',), ('Monrovia',), ('Bengasi',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('El-Aaiún',), ('Macao',), ('Antananarivo',), ('Skopje',), ('Blantyre',), ('Lilongwe',), ('Ipoh',), ('Johor Baharu',), ('Petaling Jaya',), ('Kelang',), ('Kuala Terengganu',), ('Pinang',), ('Kota Bharu',), ('Kuantan',), ('Taiping',), ('Seremban',), ('Bamako',), ('Rabat',), ('Marrakech',), ('Fès',), ('Tanger',), ('Salé',), ('Meknès',), ('Oujda',), ('Kénitra',), ('Tétouan',), ('Safi',), ('Nouakchott',), ('Naucalpan de Juárez',), ('Mexicali',), ('Culiacán',), ('Acapulco de Juárez',), ('Tlalnepantla de Baz',), ('Mérida',), ('Chihuahua',), ('San Luis Potosí',), ('Guadalupe',), ('Toluca',), ('Aguascalientes',), ('Querétaro',), ('Morelia',), ('Hermosillo',), ('Saltillo',), ('Torreón',), ('Centro (Villahermosa)',), ('San Nicolás de los Garza',), ('Durango',), ('Chimalhuacán',), ('Tlaquepaque',), ('Atizapán de Zaragoza',), ('Veracruz',), ('Cuautitlán Izcalli',), ('Irapuato',), ('Tuxtla Gutiérrez',), ('Tultitlán',), ('Reynosa',), ('Benito Juárez',), ('Matamoros',), ('Xalapa',), ('Celaya',), ('Mazatlán',), ('Ensenada',), ('Ahome',), ('Cajeme',), ('Cuernavaca',), ('Tonalá',), ('Valle de Chalco Solidaridad',), ('Nuevo Laredo',), ('Tepic',), ('Tampico',), ('Ixtapaluca',), ('Apodaca',), ('Guasave',), ('Gómez Palacio',), ('Tapachula',), ('Nicolás Romero',), ('Coatzacoalcos',), ('Uruapan',), ('Victoria',), ('Oaxaca de Juárez',), ('Coacalco de Berriozábal',), ('Pachuca de Soto',), ('General Escobedo',), ('Salamanca',), ('Santa Catarina',), ('Tehuacán',), ('Chalco',), ('Cárdenas',), ('Campeche',), ('La Paz',), ('Othón P. Blanco (Chetumal)',), ('Texcoco',), ('La Paz',), ('Metepec',), ('Monclova',), ('Huixquilucan',), ('Chilpancingo de los Bravo',), ('Puerto Vallarta',), ('Fresnillo',), ('Ciudad Madero',), ('Soledad de Graciano Sánchez',), ('San Juan del Río',), ('San Felipe del Progreso',), ('Córdoba',), ('Tecámac',), ('Ocosingo',), ('Carmen',), ('Lázaro Cárdenas',), ('Jiutepec',), ('Papantla',), ('Comalcalco',), ('Zamora',), ('Chisinau',), ('Tiraspol',), ('Ulan Bator',), ('Matola',), ('Beira',), ('Nampula',), ('Chimoio',), ('Mandalay',), ('Moulmein (Mawlamyine)',), ('Pegu (Bago)',), ('Bassein (Pathein)',), ('Windhoek',), ('Kathmandu',), ('Niamey',), ('Ogbomosho',), ('Kano',), ('Oshogbo',), ('Ilorin',), ('Abeokuta',), ('Port Harcourt',), ('Zaria',), ('Ilesha',), ('Onitsha',), ('Iwo',), ('Ado-Ekiti',), ('Abuja',), ('Kaduna',), ('Mushin',), ('Maiduguri',), ('Enugu',), ('Ede',), ('Aba',), ('Ife',), ('Ila',), ('Oyo',), ('Ikerre',), ('Benin City',), ('Iseyin',), ('Katsina',), ('Jos',), ('Sokoto',), ('Ilobu',), ('Offa',), ('Ikorodu',), ('Ilawe-Ekiti',), ('Owo',), ('Ikirun',), ('Shaki',), ('Calabar',), ('Ondo',), ('Akure',), ('Oslo',), ('Bergen',), ('Bouaké',), ('Quetta',), ('Islamabad',), ('Sargodha',), ('Sialkot',), ('Bahawalpur',), ('Sukkur',), ('Jhang',), ('Sheikhupura',), ('Larkana',), ('Gujrat',), ('Mardan',), ('Kasur',), ('Rahim Yar Khan',), ('Sahiwal',), ('Okara',), ('Wah',), ('Dera Ghazi Khan',), ('Mirpur Khas',), ('Nawabshah',), ('Mingora',), ('Chiniot',), ('Ciudad de Panamá',), ('San Miguelito',), ('Port Moresby',), ('Asunción',), ('Arequipa',), ('Trujillo',), ('Chiclayo',), ('Callao',), ('Iquitos',), ('Chimbote',), ('Huancayo',), ('Piura',), ('Cusco',), ('Pucallpa',), ('Tacna',), ('Ica',), ('Lisboa',), ('Porto',), ('San Juan',), ('Bayamón',), ('Ponce',), ('Carolina',), ('Lódz',), ('Kraków',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzeszów',), ('Doha',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-Étienne',), ('Toulon',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('Târgu Mures',), ('Kigali',), ('Stockholm',), ('Gothenburg [Göteborg]',), ('Malmö',), ('Uppsala',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('Düsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('Nürnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('Münster',), ('Mönchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('Lübeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbrücken',), ('Mainz',), ('Hamm',), ('Herne',), ('Mülheim an der Ruhr',), ('Solingen',), ('Osnabrück',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Ndola',), ('Kitwe',), ('Medina',), ('al-Dammam',), ('al-Taif',), ('Tabuk',), ('Burayda',), ('al-Hufuf',), ('al-Mubarraz',), ('Khamis Mushayt',), ('Hail',), ('Pikine',), ('Dakar',), ('Thiès',), ('Kaolack',), ('Ziguinchor',), ('Freetown',), ('Bratislava',), ('Košice',), ('Ljubljana',), ('Colombo',), ('Dehiwala',), ('Moratuwa',), ('Sharq al-Nil',), ('Port Sudan',), ('Kassala',), ('Obeid',), ('Nyala',), ('Wad Madani',), ('al-Qadarif',), ('Kusti',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [Åbo]',), ('Zürich',), ('Geneve',), ('Basel',), ('Hims',), ('Hama',), ('Latakia',), ('Dushanbe',), ('Khujand',), ('Tainan',), ('Panchiao',), ('Chungho',), ('Keelung (Chilung)',), ('Sanchung',), ('Hsinchuang',), ('Hsinchu',), ('Chungli',), ('Fengshan',), ('Taoyuan',), ('Chiayi',), ('Hsintien',), ('Changhwa',), ('Yungho',), ('Tucheng',), ('Pingtung',), ('Yungkang',), ('Pingchen',), ('Tali',), ('Taiping',), ('Pate',), ('Fengyuan',), ('Luchou',), ('Dodoma',), ('Mwanza',), ('København',), ('Århus',), ('Odense',), ('Aalborg',), ('Nonthaburi',), ('Nakhon Ratchasima',), ('Chiang Mai',), ('Lomé',), ('N´Djaména',), ('Brno',), ('Ostrava',), ('Plzen',), ('Tunis',), ('Sfax',), ('Ariana',), ('Ettadhamen',), ('Gaziantep',), ('Konya',), ('Mersin (Içel)',), ('Antalya',), ('Diyarbakir',), ('Kayseri',), ('Eskisehir',), ('Sanliurfa',), ('Samsun',), ('Malatya',), ('Gebze',), ('Denizli',), ('Sivas',), ('Erzurum',), ('Tarsus',), ('Kahramanmaras',), ('Elâzig',), ('Van',), ('Sultanbeyli',), ('Izmit (Kocaeli)',), ('Manisa',), ('Batman',), ('Balikesir',), ('Sakarya (Adapazari)',), ('Ashgabat',), ('Chärjew',), ('Kampala',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('Tšernigiv',), ('Tšerkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('Tšernivtsi',), ('Rivne',), ('Krementšuk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kertš',), ('Debrecen',), ('Miskolc',), ('Auckland',), ('Christchurch',), ('Manukau',), ('North Shore',), ('Waitakere',), ('Wellington',), ('Namangan',), ('Samarkand',), ('Andijon',), ('Buhoro',), ('Karsi',), ('Nukus',), ('Kükon',), ('Fargona',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Brest',), ('Bobruisk',), ('Baranovitši',), ('Barquisimeto',), ('Valencia',), ('Ciudad Guayana',), ('Petare',), ('Maracay',), ('Barcelona',), ('Maturín',), ('San Cristóbal',), ('Ciudad Bolívar',), ('Cumaná',), ('Mérida',), ('Cabimas',), ('Barinas',), ('Turmero',), ('Baruta',), ('Puerto Cabello',), ('Santa Ana de Coro',), ('Los Teques',), ('Punto Fijo',), ('Guarenas',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje Tšelny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('Tšeboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sotši',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahatškala',), ('Tšerepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('Tšita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Joškar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Naltšik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagoveštšensk',), ('Šahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamtšatski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novotšerkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Haiphong',), ('Da Nang',), ('Biên Hoa',), ('Nha Trang',), ('Hue',), ('Can Tho',), ('Cam Pha',), ('Nam Dinh',), ('Quy Nhon',), ('Tallinn',), ('San Jose',), ('Indianapolis',), ('San Francisco',), ('Jacksonville',), ('Columbus',), ('Austin',), ('Baltimore',), ('Memphis',), ('Milwaukee',), ('Boston',), ('Washington',), ('Nashville-Davidson',), ('El Paso',), ('Seattle',), ('Denver',), ('Charlotte',), ('Fort Worth',), ('Portland',), ('Oklahoma City',), ('Tucson',), ('New Orleans',), ('Las Vegas',), ('Cleveland',), ('Long Beach',), ('Albuquerque',), ('Kansas City',), ('Fresno',), ('Virginia Beach',), ('Atlanta',), ('Sacramento',), ('Oakland',), ('Mesa',), ('Tulsa',), ('Omaha',), ('Minneapolis',), ('Honolulu',), ('Miami',), ('Colorado Springs',), ('Saint Louis',), ('Wichita',), ('Santa Ana',), ('Pittsburgh',), ('Arlington',), ('Cincinnati',), ('Anaheim',), ('Toledo',), ('Tampa',), ('Buffalo',), ('Saint Paul',), ('Corpus Christi',), ('Aurora',), ('Raleigh',), ('Newark',), ('Lexington-Fayette',), ('Anchorage',), ('Louisville',), ('Riverside',), ('Saint Petersburg',), ('Bakersfield',), ('Stockton',), ('Birmingham',), ('Jersey City',), ('Norfolk',), ('Baton Rouge',), ('Hialeah',), ('Lincoln',), ('Greensboro',), ('Plano',), ('Rochester',), ('Glendale',), ('Akron',), ('Garland',), ('Madison',), ('Fort Wayne',), ('Fremont',), ('Scottsdale',), ('Montgomery',), ('Shreveport',), ('Augusta-Richmond County',), ('Lubbock',), ('Chesapeake',), ('Mobile',), ('Des Moines',), ('Grand Rapids',), ('Richmond',), ('Yonkers',), ('Spokane',), ('Glendale',), ('Tacoma',), ('Irving',), ('Huntington Beach',), ('Modesto',), ('Durham',), ('Columbus',), ('Orlando',), ('Boise City',), ('Winston-Salem',), ('San Bernardino',), ('Jackson',), ('Little Rock',), ('Salt Lake City',), ('Reno',), ('Newport News',), ('Chandler',), ('Laredo',), ('Henderson',), ('Arlington',), ('Knoxville',), ('Amarillo',), ('Providence',), ('Chula Vista',), ('Worcester',), ('Oxnard',), ('Dayton',), ('Garden Grove',), ('Oceanside',), ('Bulawayo',), ('Chitungwiza',), ('Mount Darwin',), ('Gaza',)]
Gold Output      : [('Qandahar',), ('Herat',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Tirana',), ('Oran',), ('Constantine',), ('Annaba',), ('Batna',), ('Sétif',), ('Huambo',), ('Dubai',), ('Abu Dhabi',), ('Sharja',), ('al-Ayn',), ('Lomas de Zamora',), ('Quilmes',), ('Almirante Brown',), ('La Plata',), ('Mar del Plata',), ('San Miguel de Tucumán',), ('Lanús',), ('Merlo',), ('General San Martín',), ('Salta',), ('Moreno',), ('Santa Fé',), ('Avellaneda',), ('Tres de Febrero',), ('Morón',), ('Florencio Varela',), ('San Isidro',), ('Tigre',), ('Malvinas Argentinas',), ('Vicente López',), ('Berazategui',), ('Corrientes',), ('San Miguel',), ('Bahía Blanca',), ('Esteban Echeverría',), ('Resistencia',), ('José C. Paz',), ('Paraná',), ('Godoy Cruz',), ('Posadas',), ('Guaymallén',), ('Santiago del Estero',), ('San Salvador de Jujuy',), ('Hurlingham',), ('Neuquén',), ('Gjumri',), ('Vanadzor',), ('Canberra',), ('Gold Coast',), ('Newcastle',), ('Central Coast',), ('Wollongong',), ('Gäncä',), ('Sumqayit',), ('Nassau',), ('Khulna',), ('Rajshahi',), ('Narayanganj',), ('Rangpur',), ('Mymensingh',), ('Barisal',), ('Tungi',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Cotonou',), ('Porto-Novo',), ('La Paz',), ('El Alto',), ('Cochabamba',), ('Oruro',), ('Sucre',), ('Sarajevo',), ('Gaborone',), ('São Gonçalo',), ('Nova Iguaçu',), ('São Luís',), ('Maceió',), ('Duque de Caxias',), ('São Bernardo do Campo',), ('Teresina',), ('Natal',), ('Osasco',), ('Campo Grande',), ('Santo André',), ('João Pessoa',), ('Jaboatão dos Guararapes',), ('Contagem',), ('São José dos Campos',), ('Uberlândia',), ('Feira de Santana',), ('Ribeirão Preto',), ('Sorocaba',), ('Niterói',), ('Cuiabá',), ('Juiz de Fora',), ('Aracaju',), ('São João de Meriti',), ('Londrina',), ('Joinville',), ('Belford Roxo',), ('Santos',), ('Ananindeua',), ('Campos dos Goytacazes',), ('Mauá',), ('Carapicuíba',), ('Olinda',), ('Campina Grande',), ('São José do Rio Preto',), ('Caxias do Sul',), ('Moji das Cruzes',), ('Diadema',), ('Aparecida de Goiânia',), ('Piracicaba',), ('Cariacica',), ('Vila Velha',), ('Pelotas',), ('Bauru',), ('Porto Velho',), ('Serra',), ('Betim',), ('Jundíaí',), ('Canoas',), ('Franca',), ('São Vicente',), ('Maringá',), ('Montes Claros',), ('Anápolis',), ('Florianópolis',), ('Petrópolis',), ('Itaquaquecetuba',), ('Vitória',), ('Ponta Grossa',), ('Rio Branco',), ('Foz do Iguaçu',), ('Macapá',), ('Ilhéus',), ('Vitória da Conquista',), ('Uberaba',), ('Paulista',), ('Limeira',), ('Blumenau',), ('Caruaru',), ('Santarém',), ('Volta Redonda',), ('Novo Hamburgo',), ('Caucaia',), ('Santa Maria',), ('Cascavel',), ('Guarujá',), ('Ribeirão das Neves',), ('Governador Valadares',), ('Taubaté',), ('Imperatriz',), ('Gravataí',), ('Embu',), ('Mossoró',), ('Várzea Grande',), ('Petrolina',), ('Barueri',), ('Viamão',), ('Ipatinga',), ('Juazeiro',), ('Juazeiro do Norte',), ('Taboão da Serra',), ('São José dos Pinhais',), ('Magé',), ('Suzano',), ('São Leopoldo',), ('Marília',), ('São Carlos',), ('Sumaré',), ('Presidente Prudente',), ('Divinópolis',), ('Sete Lagoas',), ('Rio Grande',), ('Itabuna',), ('Jequié',), ('Arapiraca',), ('Colombo',), ('Americana',), ('Alvorada',), ('Araraquara',), ('Itaboraí',), ('Santa Bárbara d´Oeste',), ('Nova Friburgo',), ('Jacareí',), ('Araçatuba',), ('Barra Mansa',), ('Praia Grande',), ('Marabá',), ('Criciúma',), ('Boa Vista',), ('Passo Fundo',), ('Dourados',), ('Santa Luzia',), ('Rio Claro',), ('Maracanaú',), ('Guarapuava',), ('Glasgow',), ('Liverpool',), ('Edinburgh',), ('Sheffield',), ('Manchester',), ('Leeds',), ('Bristol',), ('Cardiff',), ('Coventry',), ('Leicester',), ('Bradford',), ('Belfast',), ('Nottingham',), ('Kingston upon Hull',), ('Plymouth',), ('Stoke-on-Trent',), ('Wolverhampton',), ('Derby',), ('Swansea',), ('Southampton',), ('Aberdeen',), ('Northampton',), ('Dudley',), ('Portsmouth',), ('Newcastle upon Tyne',), ('Sunderland',), ('Luton',), ('Swindon',), ('Southend-on-Sea',), ('Walsall',), ('Bournemouth',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Ouagadougou',), ('Bobo-Dioulasso',), ('Bujumbura',), ('Puente Alto',), ('Viña del Mar',), ('Valparaíso',), ('Talcahuano',), ('Antofagasta',), ('San Bernardo',), ('Temuco',), ('Concepción',), ('Rancagua',), ('Arica',), ('Talca',), ('Chillán',), ('Iquique',), ('San José',), ('Djibouti',), ('Santiago de los Caballeros',), ('Cuenca',), ('Machala',), ('Santo Domingo de los Colorados',), ('Portoviejo',), ('Ambato',), ('Manta',), ('Shubra al-Khayma',), ('Port Said',), ('Suez',), ('al-Mahallat al-Kubra',), ('Tanta',), ('al-Mansura',), ('Luxor',), ('Asyut',), ('Bahtim',), ('Zagazig',), ('al-Faiyum',), ('Ismailia',), ('Kafr al-Dawwar',), ('Assuan',), ('Damanhur',), ('al-Minya',), ('Bani Suwayf',), ('Qina',), ('Sawhaj',), ('San Salvador',), ('Asmara',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('Málaga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('Córdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gijón',), ('L´Hospitalet de Llobregat',), ('Granada',), ('A Coruña (La Coruña)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('Móstoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iruña]',), ('Donostia-San Sebastián',), ('Cartagena',), ('Leganés',), ('Fuenlabrada',), ('Almería',), ('Terrassa',), ('Alcalá de Henares',), ('Burgos',), ('Johannesburg',), ('Port Elizabeth',), ('Pretoria',), ('Inanda',), ('Durban',), ('Vanderbijlpark',), ('Kempton Park',), ('Alberton',), ('Pinetown',), ('Pietermaritzburg',), ('Benoni',), ('Randburg',), ('Umlazi',), ('Bloemfontein',), ('Vereeniging',), ('Wonderboom',), ('Roodepoort',), ('Boksburg',), ('Klerksdorp',), ('Soshanguve',), ('Newcastle',), ('East London',), ('Welkom',), ('Kimberley',), ('Uitenhage',), ('Chatsworth',), ('Mdantsane',), ('Krugersdorp',), ('Botshabelo',), ('Brakpan',), ('Witbank',), ('Oberholzer',), ('Germiston',), ('Springs',), ('Dire Dawa',), ('Cebu',), ('Zamboanga',), ('Pasig',), ('Valenzuela',), ('Las Piñas',), ('Antipolo',), ('Taguig',), ('Cagayan de Oro',), ('Parañaque',), ('Makati',), ('Bacolod',), ('General Santos',), ('Marikina',), ('Dasmariñas',), ('Muntinlupa',), ('Iloilo',), ('Pasay',), ('Malabon',), ('San José del Monte',), ('Bacoor',), ('Iligan',), ('Calamba',), ('Mandaluyong',), ('Butuan',), ('Angeles',), ('Tarlac',), ('Mandaue',), ('Baguio',), ('Batangas',), ('Cainta',), ('San Pedro',), ('Navotas',), ('Cabanatuan',), ('San Fernando',), ('Lipa',), ('Lapu-Lapu',), ('San Pablo',), ('Biñan',), ('Taytay',), ('Lucena',), ('Imus',), ('Olongapo',), ('Binangonan',), ('Santa Rosa',), ('Tagum',), ('Tacloban',), ('Malolos',), ('Mabalacat',), ('Cotabato',), ('Meycauayan',), ('Puerto Princesa',), ('Libreville',), ('Kutaisi',), ('Kumasi',), ('Ciudad de Guatemala',), ('Mixco',), ('Bissau',), ('Georgetown',), ('Port-au-Prince',), ('Carrefour',), ('Delmas',), ('Tegucigalpa',), ('San Pedro Sula',), ('Malang',), ('Bandar Lampung',), ('Bekasi',), ('Padang',), ('Surakarta',), ('Banjarmasin',), ('Pekan Baru',), ('Denpasar',), ('Yogyakarta',), ('Pontianak',), ('Samarinda',), ('Jambi',), ('Depok',), ('Cimahi',), ('Balikpapan',), ('Manado',), ('Mataram',), ('Pekalongan',), ('Tegal',), ('Bogor',), ('Ciputat',), ('Pondokgede',), ('Cirebon',), ('Kediri',), ('Ambon',), ('Jember',), ('Cilacap',), ('Cimanggis',), ('Pematang Siantar',), ('Purwokerto',), ('Ciomas',), ('Tasikmalaya',), ('Madiun',), ('Srinagar',), ('Agra',), ('Coimbatore',), ('Thane (Thana)',), ('Allahabad',), ('Meerut',), ('Vishakhapatnam',), ('Jabalpur',), ('Amritsar',), ('Faridabad',), ('Vijayawada',), ('Gwalior',), ('Jodhpur',), ('Nashik (Nasik)',), ('Hubli-Dharwad',), ('Solapur (Sholapur)',), ('Ranchi',), ('Bareilly',), ('Guwahati (Gauhati)',), ('Shambajinagar (Aurangabad)',), ('Cochin (Kochi)',), ('Rajkot',), ('Kota',), ('Thiruvananthapuram (Trivandrum',), ('Pimpri-Chinchwad',), ('Jalandhar (Jullundur)',), ('Gorakhpur',), ('Chandigarh',), ('Mysore',), ('Aligarh',), ('Guntur',), ('Jamshedpur',), ('Ghaziabad',), ('Warangal',), ('Raipur',), ('Moradabad',), ('Durgapur',), ('Amravati',), ('Calicut (Kozhikode)',), ('Bikaner',), ('Bhubaneswar',), ('Kolhapur',), ('Kataka (Cuttack)',), ('Ajmer',), ('Bhavnagar',), ('Tiruchirapalli',), ('Bhilai',), ('Bhiwandi',), ('Saharanpur',), ('Ulhasnagar',), ('Salem',), ('Ujjain',), ('Malegaon',), ('Jamnagar',), ('Bokaro Steel City',), ('Akola',), ('Belgaum',), ('Rajahmundry',), ('Nellore',), ('Udaipur',), ('New Bombay',), ('Bhatpara',), ('Gulbarga',), ('New Delhi',), ('Jhansi',), ('Gaya',), ('Kakinada',), ('Dhule (Dhulia)',), ('Panihati',), ('Nanded (Nander)',), ('Mangalore',), ('Dehra Dun',), ('Kamarhati',), ('Davangere',), ('Asansol',), ('Bhagalpur',), ('Bellary',), ('Barddhaman (Burdwan)',), ('Rampur',), ('Jalgaon',), ('Muzaffarpur',), ('Nizamabad',), ('Muzaffarnagar',), ('Patiala',), ('Shahjahanpur',), ('Kurnool',), ('Tiruppur (Tirupper)',), ('Rohtak',), ('South Dum Dum',), ('Mathura',), ('Chandrapur',), ('Barahanagar (Baranagar)',), ('Darbhanga',), ('Siliguri (Shiliguri)',), ('Raurkela',), ('Ambattur',), ('Panipat',), ('Firozabad',), ('Ichalkaranji',), ('Jammu',), ('Ramagundam',), ('Eluru',), ('Brahmapur',), ('Alwar',), ('Pondicherry',), ('Thanjavur',), ('Bihar Sharif',), ('Tuticorin',), ('Imphal',), ('Latur',), ('Sagar',), ('Farrukhabad-cum-Fatehgarh',), ('Sangli',), ('Parbhani',), ('Nagar Coil',), ('Bijapur',), ('Kukatpalle',), ('Bally',), ('Bhilwara',), ('Ratlam',), ('Avadi',), ('Dindigul',), ('Ahmadnagar',), ('Bilaspur',), ('Shimoga',), ('Kharagpur',), ('Mira Bhayandar',), ('Vellore',), ('Jalna',), ('Burnpur',), ('Anantapur',), ('Allappuzha (Alleppey)',), ('Tirupati',), ('Karnal',), ('Burhanpur',), ('Hisar (Hissar)',), ('Tiruvottiyur',), ('Mirzapur-cum-Vindhyachal',), ('Secunderabad',), ('Nadiad',), ('Dewas',), ('Murwara (Katni)',), ('Ganganagar',), ('Vizianagaram',), ('Mosul',), ('Irbil',), ('Kirkuk',), ('Basra',), ('al-Sulaymaniya',), ('al-Najaf',), ('Karbala',), ('al-Hilla',), ('al-Nasiriya',), ('al-Amara',), ('al-Diwaniya',), ('al-Ramadi',), ('al-Kut',), ('Ahvaz',), ('Qom',), ('Kermanshah',), ('Urmia',), ('Zahedan',), ('Rasht',), ('Hamadan',), ('Kerman',), ('Arak',), ('Ardebil',), ('Yazd',), ('Qazvin',), ('Zanjan',), ('Sanandaj',), ('Bandar-e-Abbas',), ('Khorramabad',), ('Eslamshahr',), ('Borujerd',), ('Abadan',), ('Dezful',), ('Kashan',), ('Sari',), ('Gorgan',), ('Najafabad',), ('Sabzevar',), ('Khomeynishahr',), ('Dublin',), ('Jerusalem',), ('Tel Aviv-Jaffa',), ('Haifa',), ('Rishon Le Ziyyon',), ('Beerseba',), ('Holon',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Graz',), ('Linz',), ('Chiba',), ('Sakai',), ('Kumamoto',), ('Okayama',), ('Sagamihara',), ('Hamamatsu',), ('Kagoshima',), ('Funabashi',), ('Higashiosaka',), ('Hachioji',), ('Niigata',), ('Amagasaki',), ('Himeji',), ('Shizuoka',), ('Urawa',), ('Matsuyama',), ('Matsudo',), ('Kanazawa',), ('Kawaguchi',), ('Ichikawa',), ('Omiya',), ('Utsunomiya',), ('Oita',), ('Nagasaki',), ('Yokosuka',), ('Kurashiki',), ('Gifu',), ('Hirakata',), ('Nishinomiya',), ('Toyonaka',), ('Wakayama',), ('Fukuyama',), ('Fujisawa',), ('Asahikawa',), ('Machida',), ('Nara',), ('Takatsuki',), ('Iwaki',), ('Nagano',), ('Toyohashi',), ('Toyota',), ('Suita',), ('Takamatsu',), ('Koriyama',), ('Okazaki',), ('Kawagoe',), ('Tokorozawa',), ('Toyama',), ('Kochi',), ('Kashiwa',), ('Akita',), ('Miyazaki',), ('Koshigaya',), ('Naha',), ('Aomori',), ('Hakodate',), ('Akashi',), ('Yokkaichi',), ('Fukushima',), ('Morioka',), ('Maebashi',), ('Kasugai',), ('Otsu',), ('Ichihara',), ('Yao',), ('Ichinomiya',), ('Tokushima',), ('Kakogawa',), ('Ibaraki',), ('Neyagawa',), ('Shimonoseki',), ('Yamagata',), ('Fukui',), ('Hiratsuka',), ('Mito',), ('Sasebo',), ('Hachinohe',), ('Takasaki',), ('Shimizu',), ('Kurume',), ('Fuji',), ('Soka',), ('Fuchu',), ('Chigasaki',), ('Atsugi',), ('Numazu',), ('Ageo',), ('Yamato',), ('Matsumoto',), ('Kure',), ('Takarazuka',), ('Kasukabe',), ('Chofu',), ('Odawara',), ('Kofu',), ('Kushiro',), ('Kishiwada',), ('Hitachi',), ('Nagaoka',), ('Itami',), ('Uji',), ('Suzuka',), ('Hirosaki',), ('Ube',), ('Kodaira',), ('Takaoka',), ('Obihiro',), ('Tomakomai',), ('Saga',), ('Sakura',), ('Kamakura',), ('Mitaka',), ('Izumi',), ('Hino',), ('Hadano',), ('Ashikaga',), ('Tsu',), ('Sayama',), ('Yachiyo',), ('Tsukuba',), ('Sanaa',), ('Aden',), ('Taizz',), ('Hodeida',), ('al-Zarqa',), ('Irbid',), ('Novi Sad',), ('Niš',), ('Phnom Penh',), ('Garoua',), ('Calgary',), ('Toronto',), ('North York',), ('Winnipeg',), ('Edmonton',), ('Mississauga',), ('Scarborough',), ('Vancouver',), ('Etobicoke',), ('London',), ('Hamilton',), ('Ottawa',), ('Laval',), ('Surrey',), ('Brampton',), ('Windsor',), ('Saskatoon',), ('Kitchener',), ('Markham',), ('Regina',), ('Burnaby',), ('Québec',), ('Qaraghandy',), ('Shymkent',), ('Taraz',), ('Astana',), ('Öskemen',), ('Pavlodar',), ('Semey',), ('Aqtöbe',), ('Qostanay',), ('Petropavl',), ('Oral',), ('Temirtau',), ('Mombasa',), ('Kisumu',), ('Nakuru',), ('Bangui',), ('Handan',), ('Wuxi',), ('Xuzhou',), ('Datong',), ('Yichun',), ('Benxi',), ('Luoyang',), ('Suzhou',), ('Xining',), ('Huainan',), ('Jixi',), ('Daqing',), ('Fuxin',), ('Amoy [Xiamen]',), ('Liuzhou',), ('Shantou',), ('Jinzhou',), ('Mudanjiang',), ('Yinchuan',), ('Changzhou',), ('Zhangjiakou',), ('Dandong',), ('Hegang',), ('Kaifeng',), ('Jiamusi',), ('Liaoyang',), ('Hengyang',), ('Baoding',), ('Hunjiang',), ('Xinxiang',), ('Huangshi',), ('Haikou',), ('Yantai',), ('Bengbu',), ('Xiangtan',), ('Weifang',), ('Wuhu',), ('Pingxiang',), ('Yingkou',), ('Anyang',), ('Panzhihua',), ('Pingdingshan',), ('Xiangfan',), ('Zhuzhou',), ('Jiaozuo',), ('Wenzhou',), ('Zhangjiang',), ('Zigong',), ('Shuangyashan',), ('Zaozhuang',), ('Yakeshi',), ('Yichang',), ('Zhenjiang',), ('Huaibei',), ('Qinhuangdao',), ('Guilin',), ('Liupanshui',), ('Panjin',), ('Yangquan',), ('Jinxi',), ('Liaoyuan',), ('Lianyungang',), ('Xianyang',), ('Tai´an',), ('Chifeng',), ('Shaoguan',), ('Nantong',), ('Leshan',), ('Baoji',), ('Linyi',), ('Tonghua',), ('Siping',), ('Changzhi',), ('Tengzhou',), ('Chaozhou',), ('Yangzhou',), ('Dongwan',), ('Ma´anshan',), ('Foshan',), ('Yueyang',), ('Xingtai',), ('Changde',), ('Shihezi',), ('Yancheng',), ('Jiujiang',), ('Dongying',), ('Shashi',), ('Xintai',), ('Jingdezhen',), ('Tongchuan',), ('Zhongshan',), ('Shiyan',), ('Tieli',), ('Jining',), ('Wuhai',), ('Mianyang',), ('Luzhou',), ('Zunyi',), ('Shizuishan',), ('Neijiang',), ('Tongliao',), ('Tieling',), ('Wafangdian',), ('Anqing',), ('Shaoyang',), ('Laiwu',), ('Chengde',), ('Tianshui',), ('Nanyang',), ('Cangzhou',), ('Yibin',), ('Huaiyin',), ('Dunhua',), ('Yanji',), ('Jiangmen',), ('Tongling',), ('Suihua',), ('Gongziling',), ('Xiantao',), ('Chaoyang',), ('Ganzhou',), ('Huzhou',), ('Baicheng',), ('Shangzi',), ('Yangjiang',), ('Qitaihe',), ('Gejiu',), ('Jiangyin',), ('Hebi',), ('Jiaxing',), ('Wuzhou',), ('Meihekou',), ('Xuchang',), ('Liaocheng',), ('Haicheng',), ('Qianjiang',), ('Baiyin',), ('Bei´an',), ('Yixing',), ('Laizhou',), ('Qaramay',), ('Acheng',), ('Dezhou',), ('Nanping',), ('Zhaoqing',), ('Beipiao',), ('Fengcheng',), ('Fuyu',), ('Xinyang',), ('Dongtai',), ('Yuci',), ('Honghu',), ('Ezhou',), ('Heze',), ('Daxian',), ('Linfen',), ('Tianmen',), ('Yiyang',), ('Quanzhou',), ('Rizhao',), ('Deyang',), ('Guangyuan',), ('Changshu',), ('Zhangzhou',), ('Hailar',), ('Nanchong',), ('Jiutai',), ('Zhaodong',), ('Shaoxing',), ('Fuyang',), ('Maoming',), ('Qujing',), ('Ghulja',), ('Jiaohe',), ('Puyang',), ('Huadian',), ('Jiangyou',), ('Qashqar',), ('Anshun',), ('Fuling',), ('Xinyu',), ('Hanzhong',), ('Danyang',), ('Chenzhou',), ('Xiaogan',), ('Shangqiu',), ('Zhuhai',), ('Qingyuan',), ('Aqsu',), ('Jining',), ('Xiaoshan',), ('Zaoyang',), ('Xinghua',), ('Hami',), ('Huizhou',), ('Jinmen',), ('Sanming',), ('Bishkek',), ('Osh',), ('Cartagena',), ('Cúcuta',), ('Bucaramanga',), ('Ibagué',), ('Pereira',), ('Santa Marta',), ('Manizales',), ('Bello',), ('Pasto',), ('Neiva',), ('Soledad',), ('Armenia',), ('Villavicencio',), ('Soacha',), ('Valledupar',), ('Montería',), ('Itagüí',), ('Palmira',), ('Buenaventura',), ('Floridablanca',), ('Sincelejo',), ('Popayán',), ('Barrancabermeja',), ('Pointe-Noire',), ('Lubumbashi',), ('Mbuji-Mayi',), ('Kolwezi',), ('Kisangani',), ('Kananga',), ('Likasi',), ('Bukavu',), ('Kikwit',), ('Tshikapa',), ('Matadi',), ('Mbandaka',), ('Hamhung',), ('Chongjin',), ('Nampo',), ('Sinuiju',), ('Wonsan',), ('Phyongsong',), ('Sariwon',), ('Haeju',), ('Kanggye',), ('Kimchaek',), ('Hyesan',), ('Kaesong',), ('Songnam',), ('Puchon',), ('Suwon',), ('Anyang',), ('Chonju',), ('Chongju',), ('Koyang',), ('Ansan',), ('Pohang',), ('Chang-won',), ('Masan',), ('Kwangmyong',), ('Chonan',), ('Chinju',), ('Iksan',), ('Pyongtaek',), ('Kumi',), ('Uijongbu',), ('Kyongju',), ('Kunsan',), ('Cheju',), ('Kimhae',), ('Sunchon',), ('Mokpo',), ('Yong-in',), ('Wonju',), ('Kunpo',), ('Chunchon',), ('Namyangju',), ('Kangnung',), ('Chungju',), ('Andong',), ('Yosu',), ('Kyongsan',), ('Paju',), ('Yangsan',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Zagreb',), ('Split',), ('Rijeka',), ('Santiago de Cuba',), ('Camagüey',), ('Holguín',), ('Santa Clara',), ('Guantánamo',), ('Nicosia',), ('Vientiane',), ('Riga',), ('Maseru',), ('Tripoli',), ('Monrovia',), ('Bengasi',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('El-Aaiún',), ('Macao',), ('Antananarivo',), ('Skopje',), ('Blantyre',), ('Lilongwe',), ('Ipoh',), ('Johor Baharu',), ('Petaling Jaya',), ('Kelang',), ('Kuala Terengganu',), ('Pinang',), ('Kota Bharu',), ('Kuantan',), ('Taiping',), ('Seremban',), ('Bamako',), ('Rabat',), ('Marrakech',), ('Fès',), ('Tanger',), ('Salé',), ('Meknès',), ('Oujda',), ('Kénitra',), ('Tétouan',), ('Safi',), ('Nouakchott',), ('Naucalpan de Juárez',), ('Mexicali',), ('Culiacán',), ('Acapulco de Juárez',), ('Tlalnepantla de Baz',), ('Mérida',), ('Chihuahua',), ('San Luis Potosí',), ('Guadalupe',), ('Toluca',), ('Aguascalientes',), ('Querétaro',), ('Morelia',), ('Hermosillo',), ('Saltillo',), ('Torreón',), ('Centro (Villahermosa)',), ('San Nicolás de los Garza',), ('Durango',), ('Chimalhuacán',), ('Tlaquepaque',), ('Atizapán de Zaragoza',), ('Veracruz',), ('Cuautitlán Izcalli',), ('Irapuato',), ('Tuxtla Gutiérrez',), ('Tultitlán',), ('Reynosa',), ('Benito Juárez',), ('Matamoros',), ('Xalapa',), ('Celaya',), ('Mazatlán',), ('Ensenada',), ('Ahome',), ('Cajeme',), ('Cuernavaca',), ('Tonalá',), ('Valle de Chalco Solidaridad',), ('Nuevo Laredo',), ('Tepic',), ('Tampico',), ('Ixtapaluca',), ('Apodaca',), ('Guasave',), ('Gómez Palacio',), ('Tapachula',), ('Nicolás Romero',), ('Coatzacoalcos',), ('Uruapan',), ('Victoria',), ('Oaxaca de Juárez',), ('Coacalco de Berriozábal',), ('Pachuca de Soto',), ('General Escobedo',), ('Salamanca',), ('Santa Catarina',), ('Tehuacán',), ('Chalco',), ('Cárdenas',), ('Campeche',), ('La Paz',), ('Othón P. Blanco (Chetumal)',), ('Texcoco',), ('La Paz',), ('Metepec',), ('Monclova',), ('Huixquilucan',), ('Chilpancingo de los Bravo',), ('Puerto Vallarta',), ('Fresnillo',), ('Ciudad Madero',), ('Soledad de Graciano Sánchez',), ('San Juan del Río',), ('San Felipe del Progreso',), ('Córdoba',), ('Tecámac',), ('Ocosingo',), ('Carmen',), ('Lázaro Cárdenas',), ('Jiutepec',), ('Papantla',), ('Comalcalco',), ('Zamora',), ('Chisinau',), ('Tiraspol',), ('Ulan Bator',), ('Matola',), ('Beira',), ('Nampula',), ('Chimoio',), ('Mandalay',), ('Moulmein (Mawlamyine)',), ('Pegu (Bago)',), ('Bassein (Pathein)',), ('Windhoek',), ('Kathmandu',), ('Niamey',), ('Ogbomosho',), ('Kano',), ('Oshogbo',), ('Ilorin',), ('Abeokuta',), ('Port Harcourt',), ('Zaria',), ('Ilesha',), ('Onitsha',), ('Iwo',), ('Ado-Ekiti',), ('Abuja',), ('Kaduna',), ('Mushin',), ('Maiduguri',), ('Enugu',), ('Ede',), ('Aba',), ('Ife',), ('Ila',), ('Oyo',), ('Ikerre',), ('Benin City',), ('Iseyin',), ('Katsina',), ('Jos',), ('Sokoto',), ('Ilobu',), ('Offa',), ('Ikorodu',), ('Ilawe-Ekiti',), ('Owo',), ('Ikirun',), ('Shaki',), ('Calabar',), ('Ondo',), ('Akure',), ('Oslo',), ('Bergen',), ('Bouaké',), ('Quetta',), ('Islamabad',), ('Sargodha',), ('Sialkot',), ('Bahawalpur',), ('Sukkur',), ('Jhang',), ('Sheikhupura',), ('Larkana',), ('Gujrat',), ('Mardan',), ('Kasur',), ('Rahim Yar Khan',), ('Sahiwal',), ('Okara',), ('Wah',), ('Dera Ghazi Khan',), ('Mirpur Khas',), ('Nawabshah',), ('Mingora',), ('Chiniot',), ('Ciudad de Panamá',), ('San Miguelito',), ('Port Moresby',), ('Asunción',), ('Arequipa',), ('Trujillo',), ('Chiclayo',), ('Callao',), ('Iquitos',), ('Chimbote',), ('Huancayo',), ('Piura',), ('Cusco',), ('Pucallpa',), ('Tacna',), ('Ica',), ('Lisboa',), ('Porto',), ('San Juan',), ('Bayamón',), ('Ponce',), ('Carolina',), ('Lódz',), ('Kraków',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzeszów',), ('Doha',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-Étienne',), ('Toulon',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('Târgu Mures',), ('Kigali',), ('Stockholm',), ('Gothenburg [Göteborg]',), ('Malmö',), ('Uppsala',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('Düsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('Nürnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('Münster',), ('Mönchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('Lübeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbrücken',), ('Mainz',), ('Hamm',), ('Herne',), ('Mülheim an der Ruhr',), ('Solingen',), ('Osnabrück',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Ndola',), ('Kitwe',), ('Medina',), ('al-Dammam',), ('al-Taif',), ('Tabuk',), ('Burayda',), ('al-Hufuf',), ('al-Mubarraz',), ('Khamis Mushayt',), ('Hail',), ('Pikine',), ('Dakar',), ('Thiès',), ('Kaolack',), ('Ziguinchor',), ('Freetown',), ('Bratislava',), ('Košice',), ('Ljubljana',), ('Colombo',), ('Dehiwala',), ('Moratuwa',), ('Sharq al-Nil',), ('Port Sudan',), ('Kassala',), ('Obeid',), ('Nyala',), ('Wad Madani',), ('al-Qadarif',), ('Kusti',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [Åbo]',), ('Zürich',), ('Geneve',), ('Basel',), ('Hims',), ('Hama',), ('Latakia',), ('Dushanbe',), ('Khujand',), ('Tainan',), ('Panchiao',), ('Chungho',), ('Keelung (Chilung)',), ('Sanchung',), ('Hsinchuang',), ('Hsinchu',), ('Chungli',), ('Fengshan',), ('Taoyuan',), ('Chiayi',), ('Hsintien',), ('Changhwa',), ('Yungho',), ('Tucheng',), ('Pingtung',), ('Yungkang',), ('Pingchen',), ('Tali',), ('Taiping',), ('Pate',), ('Fengyuan',), ('Luchou',), ('Dodoma',), ('Mwanza',), ('København',), ('Århus',), ('Odense',), ('Aalborg',), ('Nonthaburi',), ('Nakhon Ratchasima',), ('Chiang Mai',), ('Lomé',), ('N´Djaména',), ('Brno',), ('Ostrava',), ('Plzen',), ('Tunis',), ('Sfax',), ('Ariana',), ('Ettadhamen',), ('Gaziantep',), ('Konya',), ('Mersin (Içel)',), ('Antalya',), ('Diyarbakir',), ('Kayseri',), ('Eskisehir',), ('Sanliurfa',), ('Samsun',), ('Malatya',), ('Gebze',), ('Denizli',), ('Sivas',), ('Erzurum',), ('Tarsus',), ('Kahramanmaras',), ('Elâzig',), ('Van',), ('Sultanbeyli',), ('Izmit (Kocaeli)',), ('Manisa',), ('Batman',), ('Balikesir',), ('Sakarya (Adapazari)',), ('Ashgabat',), ('Chärjew',), ('Kampala',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('Tšernigiv',), ('Tšerkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('Tšernivtsi',), ('Rivne',), ('Krementšuk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kertš',), ('Debrecen',), ('Miskolc',), ('Auckland',), ('Christchurch',), ('Manukau',), ('North Shore',), ('Waitakere',), ('Wellington',), ('Namangan',), ('Samarkand',), ('Andijon',), ('Buhoro',), ('Karsi',), ('Nukus',), ('Kükon',), ('Fargona',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Brest',), ('Bobruisk',), ('Baranovitši',), ('Barquisimeto',), ('Valencia',), ('Ciudad Guayana',), ('Petare',), ('Maracay',), ('Barcelona',), ('Maturín',), ('San Cristóbal',), ('Ciudad Bolívar',), ('Cumaná',), ('Mérida',), ('Cabimas',), ('Barinas',), ('Turmero',), ('Baruta',), ('Puerto Cabello',), ('Santa Ana de Coro',), ('Los Teques',), ('Punto Fijo',), ('Guarenas',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje Tšelny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('Tšeboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sotši',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahatškala',), ('Tšerepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('Tšita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Joškar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Naltšik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagoveštšensk',), ('Šahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamtšatski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novotšerkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Haiphong',), ('Da Nang',), ('Biên Hoa',), ('Nha Trang',), ('Hue',), ('Can Tho',), ('Cam Pha',), ('Nam Dinh',), ('Quy Nhon',), ('Tallinn',), ('San Jose',), ('Indianapolis',), ('San Francisco',), ('Jacksonville',), ('Columbus',), ('Austin',), ('Baltimore',), ('Memphis',), ('Milwaukee',), ('Boston',), ('Washington',), ('Nashville-Davidson',), ('El Paso',), ('Seattle',), ('Denver',), ('Charlotte',), ('Fort Worth',), ('Portland',), ('Oklahoma City',), ('Tucson',), ('New Orleans',), ('Las Vegas',), ('Cleveland',), ('Long Beach',), ('Albuquerque',), ('Kansas City',), ('Fresno',), ('Virginia Beach',), ('Atlanta',), ('Sacramento',), ('Oakland',), ('Mesa',), ('Tulsa',), ('Omaha',), ('Minneapolis',), ('Honolulu',), ('Miami',), ('Colorado Springs',), ('Saint Louis',), ('Wichita',), ('Santa Ana',), ('Pittsburgh',), ('Arlington',), ('Cincinnati',), ('Anaheim',), ('Toledo',), ('Tampa',), ('Buffalo',), ('Saint Paul',), ('Corpus Christi',), ('Aurora',), ('Raleigh',), ('Newark',), ('Lexington-Fayette',), ('Anchorage',), ('Louisville',), ('Riverside',), ('Saint Petersburg',), ('Bakersfield',), ('Stockton',), ('Birmingham',), ('Jersey City',), ('Norfolk',), ('Baton Rouge',), ('Hialeah',), ('Lincoln',), ('Greensboro',), ('Plano',), ('Rochester',), ('Glendale',), ('Akron',), ('Garland',), ('Madison',), ('Fort Wayne',), ('Fremont',), ('Scottsdale',), ('Montgomery',), ('Shreveport',), ('Augusta-Richmond County',), ('Lubbock',), ('Chesapeake',), ('Mobile',), ('Des Moines',), ('Grand Rapids',), ('Richmond',), ('Yonkers',), ('Spokane',), ('Glendale',), ('Tacoma',), ('Irving',), ('Huntington Beach',), ('Modesto',), ('Durham',), ('Columbus',), ('Orlando',), ('Boise City',), ('Winston-Salem',), ('San Bernardino',), ('Jackson',), ('Little Rock',), ('Salt Lake City',), ('Reno',), ('Newport News',), ('Chandler',), ('Laredo',), ('Henderson',), ('Arlington',), ('Knoxville',), ('Amarillo',), ('Providence',), ('Chula Vista',), ('Worcester',), ('Oxnard',), ('Dayton',), ('Garden Grove',), ('Oceanside',), ('Bulawayo',), ('Chitungwiza',), ('Mount Darwin',), ('Gaza',)]

===== Eval Round 815 =====
Database         : world_1
Prediction SQL   : SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(CountryCode) DESC LIMIT 1
Gold SQL         : SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('English',)]
Gold Output      : [('English',)]

===== Eval Round 816 =====
Database         : world_1
Prediction SQL   : SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(CountryCode) DESC LIMIT 1
Gold SQL         : SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('English',)]
Gold Output      : [('English',)]

===== Eval Round 817 =====
Database         : world_1
Prediction SQL   : SELECT T1.Language FROM countrylanguage AS T1 INNER JOIN (SELECT CountryCode, MAX(Percentage) AS MaxPercentage FROM countrylanguage GROUP BY CountryCode) AS T2 ON T1.CountryCode = T2.CountryCode AND T1.Percentage = T2.MaxPercentage
Gold SQL         : SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Papiamento',), ('Pashto',), ('Ovimbundu',), ('English',), ('Albaniana',), ('Spanish',), ('Papiamento',), ('Arabic',), ('Spanish',), ('Armenian',), ('Samoan',), ('Creole English',), ('English',), ('German',), ('Azerbaijani',), ('Kirundi',), ('Dutch',), ('Fon',), ('Mossi',), ('Bengali',), ('Bulgariana',), ('Arabic',), ('Creole English',), ('Serbo-Croatian',), ('Belorussian',), ('English',), ('English',), ('Spanish',), ('Portuguese',), ('Bajan',), ('Malay',), ('Dzongkha',), ('Tswana',), ('Gbaya',), ('English',), ('English',), ('Malay',), ('German',), ('Spanish',), ('Chinese',), ('Akan',), ('Fang',), ('Luba',), ('Kongo',), ('English',), ('Maori',), ('Spanish',), ('Comorian',), ('Crioulo',), ('Spanish',), ('Spanish',), ('Chinese',), ('English',), ('English',), ('Greek',), ('Czech',), ('German',), ('Somali',), ('Creole English',), ('Danish',), ('Spanish',), ('Arabic',), ('Spanish',), ('Arabic',), ('Tigrinja',), ('Arabic',), ('Spanish',), ('Estonian',), ('Oromo',), ('Finnish',), ('Fijian',), ('English',), ('French',), ('Faroese',), ('Trukese',), ('Fang',), ('English',), ('Georgiana',), ('Akan',), ('English',), ('Ful',), ('Creole French',), ('Malinke',), ('Crioulo',), ('Fang',), ('Greek',), ('Creole English',), ('Greenlandic',), ('Spanish',), ('Creole French',), ('English',), ('Creole English',), ('Canton Chinese',), ('Spanish',), ('Serbo-Croatian',), ('Haiti Creole',), ('Hungarian',), ('Javanese',), ('Hindi',), ('English',), ('Persian',), ('Arabic',), ('Icelandic',), ('Hebrew',), ('Italian',), ('Creole English',), ('Arabic',), ('Japanese',), ('Kazakh',), ('Kikuyu',), ('Kirgiz',), ('Khmer',), ('Kiribati',), ('Creole English',), ('Korean',), ('Arabic',), ('Lao',), ('Arabic',), ('Kpelle',), ('Arabic',), ('Creole French',), ('German',), ('Singali',), ('Sotho',), ('Lithuanian',), ('Luxembourgish',), ('Latvian',), ('Canton Chinese',), ('Arabic',), ('French',), ('Romanian',), ('Malagasy',), ('Dhivehi',), ('Spanish',), ('Marshallese',), ('Macedonian',), ('Bambara',), ('Maltese',), ('Burmese',), ('Mongolian',), ('Philippene Languages',), ('Makua',), ('Hassaniya',), ('English',), ('Creole French',), ('Creole French',), ('Chichewa',), ('Malay',), ('Mahoré',), ('Ovambo',), ('Malenasian Languages',), ('Hausa',), ('English',), ('Joruba',), ('Spanish',), ('English',), ('Niue',), ('Dutch',), ('Norwegian',), ('Nepali',), ('Nauru',), ('English',), ('Arabic',), ('Punjabi',), ('Spanish',), ('Pitcairnese',), ('Spanish',), ('Pilipino',), ('Palau',), ('Papuan Languages',), ('Polish',), ('Spanish',), ('Korean',), ('Portuguese',), ('Spanish',), ('Arabic',), ('Tahitian',), ('Arabic',), ('Creole French',), ('Romanian',), ('Russian',), ('Rwanda',), ('Arabic',), ('Arabic',), ('Wolof',), ('Chinese',), ('English',), ('Norwegian',), ('Russian',), ('Malenasian Languages',), ('Mende',), ('Spanish',), ('Italian',), ('Somali',), ('French',), ('Crioulo',), ('Sranantonga',), ('Slovak',), ('Slovene',), ('Swedish',), ('Swazi',), ('Seselwa',), ('Arabic',), ('English',), ('Sara',), ('Ewe',), ('Thai',), ('Tadzhik',), ('English',), ('Tokelau',), ('Turkmenian',), ('Portuguese',), ('Sunda',), ('Tongan',), ('English',), ('Arabic',), ('Turkish',), ('Tuvalu',), ('Min',), ('Nyamwesi',), ('Ganda',), ('Ukrainian',), ('English',), ('Spanish',), ('English',), ('Uzbek',), ('Italian',), ('Creole English',), ('Spanish',), ('English',), ('English',), ('Vietnamese',), ('Bislama',), ('Futuna',), ('Wallis',), ('Samoan-English',), ('Arabic',), ('Serbo-Croatian',), ('Zulu',), ('Bemba',), ('Shona',)]
Gold Output      : [('Papiamento', 'ABW', 76.7), ('Pashto', 'AFG', 52.4), ('Ovimbundu', 'AGO', 37.2), ('English', 'AIA', 0.0), ('Albaniana', 'ALB', 97.9), ('Spanish', 'AND', 44.6), ('Papiamento', 'ANT', 86.2), ('Arabic', 'ARE', 42.0), ('Spanish', 'ARG', 96.8), ('Armenian', 'ARM', 93.4), ('Samoan', 'ASM', 90.6), ('Creole English', 'ATG', 95.7), ('English', 'AUS', 81.2), ('German', 'AUT', 92.0), ('Azerbaijani', 'AZE', 89.0), ('Kirundi', 'BDI', 98.1), ('Dutch', 'BEL', 59.2), ('Fon', 'BEN', 39.8), ('Mossi', 'BFA', 50.2), ('Bengali', 'BGD', 97.7), ('Bulgariana', 'BGR', 83.2), ('Arabic', 'BHR', 67.7), ('Creole English', 'BHS', 89.7), ('Serbo-Croatian', 'BIH', 99.2), ('Belorussian', 'BLR', 65.6), ('English', 'BLZ', 50.8), ('English', 'BMU', 100.0), ('Spanish', 'BOL', 87.7), ('Portuguese', 'BRA', 97.5), ('Bajan', 'BRB', 95.1), ('Malay', 'BRN', 45.5), ('Dzongkha', 'BTN', 50.0), ('Tswana', 'BWA', 75.5), ('Gbaya', 'CAF', 23.8), ('English', 'CAN', 60.4), ('English', 'CCK', 0.0), ('German', 'CHE', 63.6), ('Spanish', 'CHL', 89.7), ('Chinese', 'CHN', 92.0), ('Akan', 'CIV', 30.0), ('Fang', 'CMR', 19.7), ('Luba', 'COD', 18.0), ('Kongo', 'COG', 51.5), ('English', 'COK', 0.0), ('Spanish', 'COL', 99.0), ('Comorian', 'COM', 75.0), ('Crioulo', 'CPV', 100.0), ('Spanish', 'CRI', 97.5), ('Spanish', 'CUB', 100.0), ('Chinese', 'CXR', 0.0), ('English', 'CYM', 0.0), ('Greek', 'CYP', 74.1), ('Czech', 'CZE', 81.2), ('German', 'DEU', 91.3), ('Somali', 'DJI', 43.9), ('Creole English', 'DMA', 100.0), ('Danish', 'DNK', 93.5), ('Spanish', 'DOM', 98.0), ('Arabic', 'DZA', 86.0), ('Spanish', 'ECU', 93.0), ('Arabic', 'EGY', 98.8), ('Tigrinja', 'ERI', 49.1), ('Arabic', 'ESH', 100.0), ('Spanish', 'ESP', 74.4), ('Estonian', 'EST', 65.3), ('Oromo', 'ETH', 31.0), ('Finnish', 'FIN', 92.7), ('Fijian', 'FJI', 50.8), ('English', 'FLK', 0.0), ('French', 'FRA', 93.6), ('Faroese', 'FRO', 100.0), ('Trukese', 'FSM', 41.6), ('Fang', 'GAB', 35.8), ('English', 'GBR', 97.3), ('Georgiana', 'GEO', 71.7), ('Akan', 'GHA', 52.4), ('English', 'GIB', 88.9), ('Ful', 'GIN', 38.6), ('Creole French', 'GLP', 95.0), ('Malinke', 'GMB', 34.1), ('Crioulo', 'GNB', 36.4), ('Fang', 'GNQ', 84.8), ('Greek', 'GRC', 98.5), ('Creole English', 'GRD', 100.0), ('Greenlandic', 'GRL', 87.5), ('Spanish', 'GTM', 64.7), ('Creole French', 'GUF', 94.3), ('English', 'GUM', 37.5), ('Creole English', 'GUY', 96.4), ('Canton Chinese', 'HKG', 88.7), ('Spanish', 'HND', 97.2), ('Serbo-Croatian', 'HRV', 95.9), ('Haiti Creole', 'HTI', 100.0), ('Hungarian', 'HUN', 98.5), ('Javanese', 'IDN', 39.4), ('Hindi', 'IND', 39.9), ('English', 'IRL', 98.4), ('Persian', 'IRN', 45.7), ('Arabic', 'IRQ', 77.2), ('Icelandic', 'ISL', 95.7), ('Hebrew', 'ISR', 63.1), ('Italian', 'ITA', 94.1), ('Creole English', 'JAM', 94.2), ('Arabic', 'JOR', 97.9), ('Japanese', 'JPN', 99.1), ('Kazakh', 'KAZ', 46.0), ('Kikuyu', 'KEN', 20.9), ('Kirgiz', 'KGZ', 59.7), ('Khmer', 'KHM', 88.6), ('Kiribati', 'KIR', 98.9), ('Creole English', 'KNA', 100.0), ('Korean', 'KOR', 99.9), ('Arabic', 'KWT', 78.1), ('Lao', 'LAO', 67.2), ('Arabic', 'LBN', 93.0), ('Kpelle', 'LBR', 19.5), ('Arabic', 'LBY', 96.0), ('Creole French', 'LCA', 80.0), ('German', 'LIE', 89.0), ('Singali', 'LKA', 60.3), ('Sotho', 'LSO', 85.0), ('Lithuanian', 'LTU', 81.6), ('Luxembourgish', 'LUX', 64.4), ('Latvian', 'LVA', 55.1), ('Canton Chinese', 'MAC', 85.6), ('Arabic', 'MAR', 65.0), ('French', 'MCO', 41.9), ('Romanian', 'MDA', 61.9), ('Malagasy', 'MDG', 98.9), ('Dhivehi', 'MDV', 100.0), ('Spanish', 'MEX', 92.1), ('Marshallese', 'MHL', 96.8), ('Macedonian', 'MKD', 66.5), ('Bambara', 'MLI', 31.8), ('Maltese', 'MLT', 95.8), ('Burmese', 'MMR', 69.0), ('Mongolian', 'MNG', 78.8), ('Philippene Languages', 'MNP', 34.1), ('Makua', 'MOZ', 27.8), ('Hassaniya', 'MRT', 81.7), ('English', 'MSR', 0.0), ('Creole French', 'MTQ', 96.6), ('Creole French', 'MUS', 70.6), ('Chichewa', 'MWI', 58.3), ('Malay', 'MYS', 58.4), ('Mahoré', 'MYT', 41.9), ('Ovambo', 'NAM', 50.7), ('Malenasian Languages', 'NCL', 45.4), ('Hausa', 'NER', 53.1), ('English', 'NFK', 0.0), ('Joruba', 'NGA', 21.4), ('Spanish', 'NIC', 97.6), ('English', 'NIU', 0.0), ('Dutch', 'NLD', 95.6), ('Norwegian', 'NOR', 96.6), ('Nepali', 'NPL', 50.4), ('Nauru', 'NRU', 57.5), ('English', 'NZL', 87.0), ('Arabic', 'OMN', 76.7), ('Punjabi', 'PAK', 48.2), ('Spanish', 'PAN', 76.8), ('Pitcairnese', 'PCN', 0.0), ('Spanish', 'PER', 79.8), ('Pilipino', 'PHL', 29.3), ('Palau', 'PLW', 82.2), ('Papuan Languages', 'PNG', 78.1), ('Polish', 'POL', 97.6), ('Spanish', 'PRI', 51.3), ('Korean', 'PRK', 99.9), ('Portuguese', 'PRT', 99.0), ('Spanish', 'PRY', 55.1), ('Arabic', 'PSE', 95.9), ('Tahitian', 'PYF', 46.4), ('Arabic', 'QAT', 40.7), ('Creole French', 'REU', 91.5), ('Romanian', 'ROM', 90.7), ('Russian', 'RUS', 86.6), ('Rwanda', 'RWA', 100.0), ('Arabic', 'SAU', 95.0), ('Arabic', 'SDN', 49.4), ('Wolof', 'SEN', 48.1), ('Chinese', 'SGP', 77.1), ('English', 'SHN', 0.0), ('Norwegian', 'SJM', 0.0), ('Malenasian Languages', 'SLB', 85.6), ('Mende', 'SLE', 34.8), ('Spanish', 'SLV', 100.0), ('Italian', 'SMR', 100.0), ('Somali', 'SOM', 98.3), ('French', 'SPM', 0.0), ('Crioulo', 'STP', 86.3), ('Sranantonga', 'SUR', 81.0), ('Slovak', 'SVK', 85.6), ('Slovene', 'SVN', 87.9), ('Swedish', 'SWE', 89.5), ('Swazi', 'SWZ', 89.9), ('Seselwa', 'SYC', 91.3), ('Arabic', 'SYR', 90.0), ('English', 'TCA', 0.0), ('Sara', 'TCD', 27.7), ('Ewe', 'TGO', 23.2), ('Thai', 'THA', 52.6), ('Tadzhik', 'TJK', 62.2), ('English', 'TKL', 0.0), ('Turkmenian', 'TKM', 76.7), ('Portuguese', 'TMP', 0.0), ('Tongan', 'TON', 98.3), ('English', 'TTO', 93.5), ('Arabic', 'TUN', 69.9), ('Turkish', 'TUR', 87.6), ('Tuvalu', 'TUV', 92.5), ('Min', 'TWN', 66.7), ('Nyamwesi', 'TZA', 21.1), ('Ganda', 'UGA', 18.1), ('Ukrainian', 'UKR', 64.7), ('English', 'UMI', 0.0), ('Spanish', 'URY', 95.7), ('English', 'USA', 86.2), ('Uzbek', 'UZB', 72.6), ('Italian', 'VAT', 0.0), ('Creole English', 'VCT', 99.1), ('Spanish', 'VEN', 96.9), ('English', 'VGB', 0.0), ('English', 'VIR', 81.7), ('Vietnamese', 'VNM', 86.8), ('Bislama', 'VUT', 56.6), ('Futuna', 'WLF', 0.0), ('Samoan-English', 'WSM', 52.0), ('Arabic', 'YEM', 99.6), ('Serbo-Croatian', 'YUG', 75.2), ('Zulu', 'ZAF', 22.7), ('Bemba', 'ZMB', 29.7), ('Shona', 'ZWE', 72.1)]

===== Eval Round 818 =====
Database         : world_1
Prediction SQL   : SELECT c.Code, sub.Language FROM country c JOIN (SELECT CountryCode, Language, Percentage FROM countrylanguage ORDER BY Percentage DESC LIMIT 1 GROUP BY CountryCode) AS sub ON c.Code = sub.CountryCode
Gold SQL         : SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: near "GROUP": syntax error
Gold Output      : [('Papiamento', 'ABW', 76.7), ('Pashto', 'AFG', 52.4), ('Ovimbundu', 'AGO', 37.2), ('English', 'AIA', 0.0), ('Albaniana', 'ALB', 97.9), ('Spanish', 'AND', 44.6), ('Papiamento', 'ANT', 86.2), ('Arabic', 'ARE', 42.0), ('Spanish', 'ARG', 96.8), ('Armenian', 'ARM', 93.4), ('Samoan', 'ASM', 90.6), ('Creole English', 'ATG', 95.7), ('English', 'AUS', 81.2), ('German', 'AUT', 92.0), ('Azerbaijani', 'AZE', 89.0), ('Kirundi', 'BDI', 98.1), ('Dutch', 'BEL', 59.2), ('Fon', 'BEN', 39.8), ('Mossi', 'BFA', 50.2), ('Bengali', 'BGD', 97.7), ('Bulgariana', 'BGR', 83.2), ('Arabic', 'BHR', 67.7), ('Creole English', 'BHS', 89.7), ('Serbo-Croatian', 'BIH', 99.2), ('Belorussian', 'BLR', 65.6), ('English', 'BLZ', 50.8), ('English', 'BMU', 100.0), ('Spanish', 'BOL', 87.7), ('Portuguese', 'BRA', 97.5), ('Bajan', 'BRB', 95.1), ('Malay', 'BRN', 45.5), ('Dzongkha', 'BTN', 50.0), ('Tswana', 'BWA', 75.5), ('Gbaya', 'CAF', 23.8), ('English', 'CAN', 60.4), ('English', 'CCK', 0.0), ('German', 'CHE', 63.6), ('Spanish', 'CHL', 89.7), ('Chinese', 'CHN', 92.0), ('Akan', 'CIV', 30.0), ('Fang', 'CMR', 19.7), ('Luba', 'COD', 18.0), ('Kongo', 'COG', 51.5), ('English', 'COK', 0.0), ('Spanish', 'COL', 99.0), ('Comorian', 'COM', 75.0), ('Crioulo', 'CPV', 100.0), ('Spanish', 'CRI', 97.5), ('Spanish', 'CUB', 100.0), ('Chinese', 'CXR', 0.0), ('English', 'CYM', 0.0), ('Greek', 'CYP', 74.1), ('Czech', 'CZE', 81.2), ('German', 'DEU', 91.3), ('Somali', 'DJI', 43.9), ('Creole English', 'DMA', 100.0), ('Danish', 'DNK', 93.5), ('Spanish', 'DOM', 98.0), ('Arabic', 'DZA', 86.0), ('Spanish', 'ECU', 93.0), ('Arabic', 'EGY', 98.8), ('Tigrinja', 'ERI', 49.1), ('Arabic', 'ESH', 100.0), ('Spanish', 'ESP', 74.4), ('Estonian', 'EST', 65.3), ('Oromo', 'ETH', 31.0), ('Finnish', 'FIN', 92.7), ('Fijian', 'FJI', 50.8), ('English', 'FLK', 0.0), ('French', 'FRA', 93.6), ('Faroese', 'FRO', 100.0), ('Trukese', 'FSM', 41.6), ('Fang', 'GAB', 35.8), ('English', 'GBR', 97.3), ('Georgiana', 'GEO', 71.7), ('Akan', 'GHA', 52.4), ('English', 'GIB', 88.9), ('Ful', 'GIN', 38.6), ('Creole French', 'GLP', 95.0), ('Malinke', 'GMB', 34.1), ('Crioulo', 'GNB', 36.4), ('Fang', 'GNQ', 84.8), ('Greek', 'GRC', 98.5), ('Creole English', 'GRD', 100.0), ('Greenlandic', 'GRL', 87.5), ('Spanish', 'GTM', 64.7), ('Creole French', 'GUF', 94.3), ('English', 'GUM', 37.5), ('Creole English', 'GUY', 96.4), ('Canton Chinese', 'HKG', 88.7), ('Spanish', 'HND', 97.2), ('Serbo-Croatian', 'HRV', 95.9), ('Haiti Creole', 'HTI', 100.0), ('Hungarian', 'HUN', 98.5), ('Javanese', 'IDN', 39.4), ('Hindi', 'IND', 39.9), ('English', 'IRL', 98.4), ('Persian', 'IRN', 45.7), ('Arabic', 'IRQ', 77.2), ('Icelandic', 'ISL', 95.7), ('Hebrew', 'ISR', 63.1), ('Italian', 'ITA', 94.1), ('Creole English', 'JAM', 94.2), ('Arabic', 'JOR', 97.9), ('Japanese', 'JPN', 99.1), ('Kazakh', 'KAZ', 46.0), ('Kikuyu', 'KEN', 20.9), ('Kirgiz', 'KGZ', 59.7), ('Khmer', 'KHM', 88.6), ('Kiribati', 'KIR', 98.9), ('Creole English', 'KNA', 100.0), ('Korean', 'KOR', 99.9), ('Arabic', 'KWT', 78.1), ('Lao', 'LAO', 67.2), ('Arabic', 'LBN', 93.0), ('Kpelle', 'LBR', 19.5), ('Arabic', 'LBY', 96.0), ('Creole French', 'LCA', 80.0), ('German', 'LIE', 89.0), ('Singali', 'LKA', 60.3), ('Sotho', 'LSO', 85.0), ('Lithuanian', 'LTU', 81.6), ('Luxembourgish', 'LUX', 64.4), ('Latvian', 'LVA', 55.1), ('Canton Chinese', 'MAC', 85.6), ('Arabic', 'MAR', 65.0), ('French', 'MCO', 41.9), ('Romanian', 'MDA', 61.9), ('Malagasy', 'MDG', 98.9), ('Dhivehi', 'MDV', 100.0), ('Spanish', 'MEX', 92.1), ('Marshallese', 'MHL', 96.8), ('Macedonian', 'MKD', 66.5), ('Bambara', 'MLI', 31.8), ('Maltese', 'MLT', 95.8), ('Burmese', 'MMR', 69.0), ('Mongolian', 'MNG', 78.8), ('Philippene Languages', 'MNP', 34.1), ('Makua', 'MOZ', 27.8), ('Hassaniya', 'MRT', 81.7), ('English', 'MSR', 0.0), ('Creole French', 'MTQ', 96.6), ('Creole French', 'MUS', 70.6), ('Chichewa', 'MWI', 58.3), ('Malay', 'MYS', 58.4), ('Mahoré', 'MYT', 41.9), ('Ovambo', 'NAM', 50.7), ('Malenasian Languages', 'NCL', 45.4), ('Hausa', 'NER', 53.1), ('English', 'NFK', 0.0), ('Joruba', 'NGA', 21.4), ('Spanish', 'NIC', 97.6), ('English', 'NIU', 0.0), ('Dutch', 'NLD', 95.6), ('Norwegian', 'NOR', 96.6), ('Nepali', 'NPL', 50.4), ('Nauru', 'NRU', 57.5), ('English', 'NZL', 87.0), ('Arabic', 'OMN', 76.7), ('Punjabi', 'PAK', 48.2), ('Spanish', 'PAN', 76.8), ('Pitcairnese', 'PCN', 0.0), ('Spanish', 'PER', 79.8), ('Pilipino', 'PHL', 29.3), ('Palau', 'PLW', 82.2), ('Papuan Languages', 'PNG', 78.1), ('Polish', 'POL', 97.6), ('Spanish', 'PRI', 51.3), ('Korean', 'PRK', 99.9), ('Portuguese', 'PRT', 99.0), ('Spanish', 'PRY', 55.1), ('Arabic', 'PSE', 95.9), ('Tahitian', 'PYF', 46.4), ('Arabic', 'QAT', 40.7), ('Creole French', 'REU', 91.5), ('Romanian', 'ROM', 90.7), ('Russian', 'RUS', 86.6), ('Rwanda', 'RWA', 100.0), ('Arabic', 'SAU', 95.0), ('Arabic', 'SDN', 49.4), ('Wolof', 'SEN', 48.1), ('Chinese', 'SGP', 77.1), ('English', 'SHN', 0.0), ('Norwegian', 'SJM', 0.0), ('Malenasian Languages', 'SLB', 85.6), ('Mende', 'SLE', 34.8), ('Spanish', 'SLV', 100.0), ('Italian', 'SMR', 100.0), ('Somali', 'SOM', 98.3), ('French', 'SPM', 0.0), ('Crioulo', 'STP', 86.3), ('Sranantonga', 'SUR', 81.0), ('Slovak', 'SVK', 85.6), ('Slovene', 'SVN', 87.9), ('Swedish', 'SWE', 89.5), ('Swazi', 'SWZ', 89.9), ('Seselwa', 'SYC', 91.3), ('Arabic', 'SYR', 90.0), ('English', 'TCA', 0.0), ('Sara', 'TCD', 27.7), ('Ewe', 'TGO', 23.2), ('Thai', 'THA', 52.6), ('Tadzhik', 'TJK', 62.2), ('English', 'TKL', 0.0), ('Turkmenian', 'TKM', 76.7), ('Portuguese', 'TMP', 0.0), ('Tongan', 'TON', 98.3), ('English', 'TTO', 93.5), ('Arabic', 'TUN', 69.9), ('Turkish', 'TUR', 87.6), ('Tuvalu', 'TUV', 92.5), ('Min', 'TWN', 66.7), ('Nyamwesi', 'TZA', 21.1), ('Ganda', 'UGA', 18.1), ('Ukrainian', 'UKR', 64.7), ('English', 'UMI', 0.0), ('Spanish', 'URY', 95.7), ('English', 'USA', 86.2), ('Uzbek', 'UZB', 72.6), ('Italian', 'VAT', 0.0), ('Creole English', 'VCT', 99.1), ('Spanish', 'VEN', 96.9), ('English', 'VGB', 0.0), ('English', 'VIR', 81.7), ('Vietnamese', 'VNM', 86.8), ('Bislama', 'VUT', 56.6), ('Futuna', 'WLF', 0.0), ('Samoan-English', 'WSM', 52.0), ('Arabic', 'YEM', 99.6), ('Serbo-Croatian', 'YUG', 75.2), ('Zulu', 'ZAF', 22.7), ('Bemba', 'ZMB', 29.7), ('Shona', 'ZWE', 72.1)]

===== Eval Round 819 =====
Database         : world_1
Prediction SQL   : SELECT COUNT(T1.CountryCode) FROM countrylanguage AS T1 WHERE T1.Language = 'Spanish' AND T1.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
Gold SQL         : SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(2,)]
Gold Output      : [(1, 7.4), (1, 44.6), (1, 96.8), (1, 31.6), (1, 87.7), (1, 0.7), (1, 89.7), (1, 99.0), (1, 97.5), (1, 100.0), (1, 98.0), (1, 93.0), (1, 74.4), (1, 0.4), (1, 64.7), (1, 97.2), (1, 92.1), (1, 97.6), (1, 76.8), (1, 79.8), (1, 51.3), (1, 55.1), (1, 100.0), (1, 0.6), (1, 95.7), (1, 7.5), (1, 96.9), (1, 13.3)]

===== Eval Round 820 =====
Database         : world_1
Prediction SQL   : SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
Gold SQL         : SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(2,)]
Gold Output      : [(1, 7.4), (1, 44.6), (1, 96.8), (1, 31.6), (1, 87.7), (1, 0.7), (1, 89.7), (1, 99.0), (1, 97.5), (1, 100.0), (1, 98.0), (1, 93.0), (1, 74.4), (1, 0.4), (1, 64.7), (1, 97.2), (1, 92.1), (1, 97.6), (1, 76.8), (1, 79.8), (1, 51.3), (1, 55.1), (1, 100.0), (1, 0.6), (1, 95.7), (1, 7.5), (1, 96.9), (1, 13.3)]

===== Eval Round 821 =====
Database         : world_1
Prediction SQL   : SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1
Gold SQL         : SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('CUB',)]
Gold Output      : [('ABW', 7.4), ('AND', 44.6), ('ARG', 96.8), ('BLZ', 31.6), ('BOL', 87.7), ('CAN', 0.7), ('CHL', 89.7), ('COL', 99.0), ('CRI', 97.5), ('CUB', 100.0), ('DOM', 98.0), ('ECU', 93.0), ('ESP', 74.4), ('FRA', 0.4), ('GTM', 64.7), ('HND', 97.2), ('MEX', 92.1), ('NIC', 97.6), ('PAN', 76.8), ('PER', 79.8), ('PRI', 51.3), ('PRY', 55.1), ('SLV', 100.0), ('SWE', 0.6), ('URY', 95.7), ('USA', 7.5), ('VEN', 96.9), ('VIR', 13.3)]

===== Eval Round 822 =====
Database         : world_1
Prediction SQL   : SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > 50
Gold SQL         : SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('ARG',), ('BOL',), ('CHL',), ('COL',), ('CRI',), ('CUB',), ('DOM',), ('ECU',), ('ESP',), ('GTM',), ('HND',), ('MEX',), ('NIC',), ('PAN',), ('PER',), ('PRI',), ('PRY',), ('SLV',), ('URY',), ('VEN',)]
Gold Output      : [('ABW', 7.4), ('AND', 44.6), ('ARG', 96.8), ('BLZ', 31.6), ('BOL', 87.7), ('CAN', 0.7), ('CHL', 89.7), ('COL', 99.0), ('CRI', 97.5), ('CUB', 100.0), ('DOM', 98.0), ('ECU', 93.0), ('ESP', 74.4), ('FRA', 0.4), ('GTM', 64.7), ('HND', 97.2), ('MEX', 92.1), ('NIC', 97.6), ('PAN', 76.8), ('PER', 79.8), ('PRI', 51.3), ('PRY', 55.1), ('SLV', 100.0), ('SWE', 0.6), ('URY', 95.7), ('USA', 7.5), ('VEN', 96.9), ('VIR', 13.3)]

===== Eval Round 823 =====
Database         : orchestra
Prediction SQL   : SELECT COUNT(*) FROM conductor
Gold SQL         : SELECT count(*) FROM conductor
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(12,)]
Gold Output      : [(12,)]

===== Eval Round 824 =====
Database         : orchestra
Prediction SQL   : SELECT COUNT(*) FROM conductor
Gold SQL         : SELECT count(*) FROM conductor
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(12,)]
Gold Output      : [(12,)]

===== Eval Round 825 =====
Database         : orchestra
Prediction SQL   : SELECT Name FROM conductor ORDER BY Age ASC
Gold SQL         : SELECT Name FROM conductor ORDER BY Age ASC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Antal Doráti',), ('Igor Stravinsky',), ('Colin Davis',), ('Michael Tilson Thomas',), ('Paul Jorgensen',), ('Antal Brown',), ('Charles Dutoit',), ('Seiji Ozawa',), ('Valeri Gergiev',), ('Pierre Boulez',), ('Gerard Schwarz',), ('Robert Craft',)]
Gold Output      : [('Antal Doráti',), ('Igor Stravinsky',), ('Colin Davis',), ('Michael Tilson Thomas',), ('Paul Jorgensen',), ('Antal Brown',), ('Charles Dutoit',), ('Seiji Ozawa',), ('Valeri Gergiev',), ('Pierre Boulez',), ('Gerard Schwarz',), ('Robert Craft',)]

===== Eval Round 826 =====
Database         : orchestra
Prediction SQL   : SELECT Name FROM conductor ORDER BY Age
Gold SQL         : SELECT Name FROM conductor ORDER BY Age ASC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Antal Doráti',), ('Igor Stravinsky',), ('Colin Davis',), ('Michael Tilson Thomas',), ('Paul Jorgensen',), ('Antal Brown',), ('Charles Dutoit',), ('Seiji Ozawa',), ('Valeri Gergiev',), ('Pierre Boulez',), ('Gerard Schwarz',), ('Robert Craft',)]
Gold Output      : [('Antal Doráti',), ('Igor Stravinsky',), ('Colin Davis',), ('Michael Tilson Thomas',), ('Paul Jorgensen',), ('Antal Brown',), ('Charles Dutoit',), ('Seiji Ozawa',), ('Valeri Gergiev',), ('Pierre Boulez',), ('Gerard Schwarz',), ('Robert Craft',)]

===== Eval Round 827 =====
Database         : orchestra
Prediction SQL   : SELECT Name FROM conductor WHERE Nationality <> 'USA'
Gold SQL         : SELECT Name FROM conductor WHERE Nationality != 'USA'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Igor Stravinsky',), ('Paul Jorgensen',), ('Charles Dutoit',), ('Pierre Boulez',), ('Robert Craft',), ('Michael Tilson Thomas',)]
Gold Output      : [('Igor Stravinsky',), ('Paul Jorgensen',), ('Charles Dutoit',), ('Pierre Boulez',), ('Robert Craft',), ('Michael Tilson Thomas',)]

===== Eval Round 828 =====
Database         : orchestra
Prediction SQL   : SELECT Name FROM conductor WHERE Nationality <> 'USA'
Gold SQL         : SELECT Name FROM conductor WHERE Nationality != 'USA'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Igor Stravinsky',), ('Paul Jorgensen',), ('Charles Dutoit',), ('Pierre Boulez',), ('Robert Craft',), ('Michael Tilson Thomas',)]
Gold Output      : [('Igor Stravinsky',), ('Paul Jorgensen',), ('Charles Dutoit',), ('Pierre Boulez',), ('Robert Craft',), ('Michael Tilson Thomas',)]

===== Eval Round 829 =====
Database         : orchestra
Prediction SQL   : SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
Gold SQL         : SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Columbia Masterworks',), ('Philips',), ('Philips Classics Records',), ('RCA',), ('EMI',), ('Koch Records / Naxos Records',), ('Decca Records',), ('Mercury Records',), ('Deutsche Grammophon',), ('Kultur',), ('Decca Records',), ('Delos Records',)]
Gold Output      : [('Columbia Masterworks',), ('Philips',), ('Philips Classics Records',), ('RCA',), ('EMI',), ('Koch Records / Naxos Records',), ('Decca Records',), ('Mercury Records',), ('Deutsche Grammophon',), ('Kultur',), ('Decca Records',), ('Delos Records',)]

===== Eval Round 830 =====
Database         : orchestra
Prediction SQL   : SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
Gold SQL         : SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Columbia Masterworks',), ('Philips',), ('Philips Classics Records',), ('RCA',), ('EMI',), ('Koch Records / Naxos Records',), ('Decca Records',), ('Mercury Records',), ('Deutsche Grammophon',), ('Kultur',), ('Decca Records',), ('Delos Records',)]
Gold Output      : [('Columbia Masterworks',), ('Philips',), ('Philips Classics Records',), ('RCA',), ('EMI',), ('Koch Records / Naxos Records',), ('Decca Records',), ('Mercury Records',), ('Deutsche Grammophon',), ('Kultur',), ('Decca Records',), ('Delos Records',)]

===== Eval Round 831 =====
Database         : orchestra
Prediction SQL   : SELECT AVG(Attendance) FROM show
Gold SQL         : SELECT avg(Attendance) FROM SHOW
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1326.4,)]
Gold Output      : [(1326.4,)]

===== Eval Round 832 =====
Database         : orchestra
Prediction SQL   : SELECT avg(Attendance) FROM show
Gold SQL         : SELECT avg(Attendance) FROM SHOW
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1326.4,)]
Gold Output      : [(1326.4,)]

===== Eval Round 833 =====
Database         : orchestra
Prediction SQL   : SELECT MAX(Share), MIN(Share) FROM performance WHERE Type <> "Live final"
Gold SQL         : SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('44.7%', '22.7%')]
Gold Output      : [('44.7%', '22.7%')]

===== Eval Round 834 =====
Database         : orchestra
Prediction SQL   : SELECT MAX(Share), MIN(Share) FROM performance WHERE Type <> 'Live final'
Gold SQL         : SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('44.7%', '22.7%')]
Gold Output      : [('44.7%', '22.7%')]

===== Eval Round 835 =====
Database         : orchestra
Prediction SQL   : SELECT COUNT(DISTINCT Nationality) FROM conductor
Gold SQL         : SELECT count(DISTINCT Nationality) FROM conductor
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(3,)]
Gold Output      : [(3,)]

===== Eval Round 836 =====
Database         : orchestra
Prediction SQL   : SELECT COUNT(DISTINCT Nationality) FROM conductor
Gold SQL         : SELECT count(DISTINCT Nationality) FROM conductor
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(3,)]
Gold Output      : [(3,)]

===== Eval Round 837 =====
Database         : orchestra
Prediction SQL   : SELECT Name FROM conductor ORDER BY Year_of_Work DESC
Gold SQL         : SELECT Name FROM conductor ORDER BY Year_of_Work DESC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Robert Craft',), ('Antal Brown',), ('Gerard Schwarz',), ('Valeri Gergiev',), ('Charles Dutoit',), ('Michael Tilson Thomas',), ('Igor Stravinsky',), ('Paul Jorgensen',), ('Pierre Boulez',), ('Antal Doráti',), ('Seiji Ozawa',), ('Colin Davis',)]
Gold Output      : [('Robert Craft',), ('Antal Brown',), ('Gerard Schwarz',), ('Valeri Gergiev',), ('Charles Dutoit',), ('Michael Tilson Thomas',), ('Igor Stravinsky',), ('Paul Jorgensen',), ('Pierre Boulez',), ('Antal Doráti',), ('Seiji Ozawa',), ('Colin Davis',)]

===== Eval Round 838 =====
Database         : orchestra
Prediction SQL   : SELECT Name FROM conductor ORDER BY Year_of_Work DESC
Gold SQL         : SELECT Name FROM conductor ORDER BY Year_of_Work DESC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Robert Craft',), ('Antal Brown',), ('Gerard Schwarz',), ('Valeri Gergiev',), ('Charles Dutoit',), ('Michael Tilson Thomas',), ('Igor Stravinsky',), ('Paul Jorgensen',), ('Pierre Boulez',), ('Antal Doráti',), ('Seiji Ozawa',), ('Colin Davis',)]
Gold Output      : [('Robert Craft',), ('Antal Brown',), ('Gerard Schwarz',), ('Valeri Gergiev',), ('Charles Dutoit',), ('Michael Tilson Thomas',), ('Igor Stravinsky',), ('Paul Jorgensen',), ('Pierre Boulez',), ('Antal Doráti',), ('Seiji Ozawa',), ('Colin Davis',)]

===== Eval Round 839 =====
Database         : orchestra
Prediction SQL   : SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
Gold SQL         : SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Robert Craft',)]
Gold Output      : [('Robert Craft',)]

===== Eval Round 840 =====
Database         : orchestra
Prediction SQL   : SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
Gold SQL         : SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Robert Craft',)]
Gold Output      : [('Robert Craft',)]

===== Eval Round 841 =====
Database         : orchestra
Prediction SQL   : SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID
Gold SQL         : SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Antal Doráti', 'London Symphony Orchestra'), ('Igor Stravinsky', 'Columbia Symphony Orchestra'), ('Colin Davis', 'Royal Concertgebouw Orchestra'), ('Paul Jorgensen', 'Royal Danish Orchestra'), ('Antal Brown', 'Detroit Symphony Orchestra'), ('Charles Dutoit', 'Montreal Symphony Orchestra'), ('Gerard Schwarz', 'Seattle Symphony Orchestra'), ('Pierre Boulez', 'Chicago Symphony Orchestra'), ('Valeri Gergiev', 'Kirov Orchestra'), ('Robert Craft', 'Philharmonia Orchestra'), ('Seiji Ozawa', 'Orchestre de Paris'), ('Michael Tilson Thomas', 'San Francisco Symphony Orchestra')]
Gold Output      : [('Antal Doráti', 'London Symphony Orchestra'), ('Igor Stravinsky', 'Columbia Symphony Orchestra'), ('Colin Davis', 'Royal Concertgebouw Orchestra'), ('Paul Jorgensen', 'Royal Danish Orchestra'), ('Antal Brown', 'Detroit Symphony Orchestra'), ('Charles Dutoit', 'Montreal Symphony Orchestra'), ('Gerard Schwarz', 'Seattle Symphony Orchestra'), ('Pierre Boulez', 'Chicago Symphony Orchestra'), ('Valeri Gergiev', 'Kirov Orchestra'), ('Robert Craft', 'Philharmonia Orchestra'), ('Seiji Ozawa', 'Orchestre de Paris'), ('Michael Tilson Thomas', 'San Francisco Symphony Orchestra')]

===== Eval Round 842 =====
Database         : orchestra
Prediction SQL   : SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID
Gold SQL         : SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Antal Doráti', 'London Symphony Orchestra'), ('Igor Stravinsky', 'Columbia Symphony Orchestra'), ('Colin Davis', 'Royal Concertgebouw Orchestra'), ('Paul Jorgensen', 'Royal Danish Orchestra'), ('Antal Brown', 'Detroit Symphony Orchestra'), ('Charles Dutoit', 'Montreal Symphony Orchestra'), ('Gerard Schwarz', 'Seattle Symphony Orchestra'), ('Pierre Boulez', 'Chicago Symphony Orchestra'), ('Valeri Gergiev', 'Kirov Orchestra'), ('Robert Craft', 'Philharmonia Orchestra'), ('Seiji Ozawa', 'Orchestre de Paris'), ('Michael Tilson Thomas', 'San Francisco Symphony Orchestra')]
Gold Output      : [('Antal Doráti', 'London Symphony Orchestra'), ('Igor Stravinsky', 'Columbia Symphony Orchestra'), ('Colin Davis', 'Royal Concertgebouw Orchestra'), ('Paul Jorgensen', 'Royal Danish Orchestra'), ('Antal Brown', 'Detroit Symphony Orchestra'), ('Charles Dutoit', 'Montreal Symphony Orchestra'), ('Gerard Schwarz', 'Seattle Symphony Orchestra'), ('Pierre Boulez', 'Chicago Symphony Orchestra'), ('Valeri Gergiev', 'Kirov Orchestra'), ('Robert Craft', 'Philharmonia Orchestra'), ('Seiji Ozawa', 'Orchestre de Paris'), ('Michael Tilson Thomas', 'San Francisco Symphony Orchestra')]

===== Eval Round 843 =====
Database         : orchestra
Prediction SQL   : SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(*) > 1)
Gold SQL         : SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 844 =====
Database         : orchestra
Prediction SQL   : SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(*) > 1)
Gold SQL         : SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 845 =====
Database         : orchestra
Prediction SQL   : SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID ORDER BY count(*) DESC LIMIT 1)
Gold SQL         : SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Michael Tilson Thomas',)]
Gold Output      : [('Michael Tilson Thomas',)]

===== Eval Round 846 =====
Database         : orchestra
Prediction SQL   : SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1)
Gold SQL         : SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Michael Tilson Thomas',)]
Gold Output      : [('Michael Tilson Thomas',)]

===== Eval Round 847 =====
Database         : orchestra
Prediction SQL   : SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008
Gold SQL         : SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Igor Stravinsky',)]
Gold Output      : [('Igor Stravinsky',)]

===== Eval Round 848 =====
Database         : orchestra
Prediction SQL   : SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Year_of_Founded > 2008)
Gold SQL         : SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Igor Stravinsky',)]
Gold Output      : [('Igor Stravinsky',)]

===== Eval Round 849 =====
Database         : orchestra
Prediction SQL   : SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company
Gold SQL         : SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Columbia Masterworks', 1), ('Decca Records', 2), ('Delos Records', 1), ('Deutsche Grammophon', 1), ('EMI', 1), ('Koch Records / Naxos Records', 1), ('Kultur', 1), ('Mercury Records', 1), ('Philips', 1), ('Philips Classics Records', 1), ('RCA', 1)]
Gold Output      : [('Columbia Masterworks', 1), ('Decca Records', 2), ('Delos Records', 1), ('Deutsche Grammophon', 1), ('EMI', 1), ('Koch Records / Naxos Records', 1), ('Kultur', 1), ('Mercury Records', 1), ('Philips', 1), ('Philips Classics Records', 1), ('RCA', 1)]

===== Eval Round 850 =====
Database         : orchestra
Prediction SQL   : SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company
Gold SQL         : SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Columbia Masterworks', 1), ('Decca Records', 2), ('Delos Records', 1), ('Deutsche Grammophon', 1), ('EMI', 1), ('Koch Records / Naxos Records', 1), ('Kultur', 1), ('Mercury Records', 1), ('Philips', 1), ('Philips Classics Records', 1), ('RCA', 1)]
Gold Output      : [('Columbia Masterworks', 1), ('Decca Records', 2), ('Delos Records', 1), ('Deutsche Grammophon', 1), ('EMI', 1), ('Koch Records / Naxos Records', 1), ('Kultur', 1), ('Mercury Records', 1), ('Philips', 1), ('Philips Classics Records', 1), ('RCA', 1)]

===== Eval Round 851 =====
Database         : orchestra
Prediction SQL   : SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
Gold SQL         : SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('CD / LP',), ('DVD',), ('CD',)]
Gold Output      : [('CD / LP',), ('DVD',), ('CD',)]

===== Eval Round 852 =====
Database         : orchestra
Prediction SQL   : SELECT Major_Record_Format, COUNT(*) FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) DESC
Gold SQL         : SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('CD', 10), ('DVD', 1), ('CD / LP', 1)]
Gold Output      : [('CD / LP',), ('DVD',), ('CD',)]

===== Eval Round 853 =====
Database         : orchestra
Prediction SQL   : SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Decca Records',)]
Gold Output      : [('Decca Records',)]

===== Eval Round 854 =====
Database         : orchestra
Prediction SQL   : SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Decca Records',)]
Gold Output      : [('Decca Records',)]

===== Eval Round 855 =====
Database         : orchestra
Prediction SQL   : SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
Gold SQL         : SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('San Francisco Symphony Orchestra',)]
Gold Output      : [('San Francisco Symphony Orchestra',)]

===== Eval Round 856 =====
Database         : orchestra
Prediction SQL   : SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
Gold SQL         : SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('San Francisco Symphony Orchestra',)]
Gold Output      : [('San Francisco Symphony Orchestra',)]

===== Eval Round 857 =====
Database         : orchestra
Prediction SQL   : SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 UNION SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
Gold SQL         : SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Columbia Masterworks',), ('Decca Records',), ('Delos Records',), ('EMI',), ('Koch Records / Naxos Records',), ('Kultur',), ('Philips',), ('Philips Classics Records',), ('RCA',)]
Gold Output      : [('Decca Records',)]

===== Eval Round 858 =====
Database         : orchestra
Prediction SQL   : SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
Gold SQL         : SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Decca Records',)]
Gold Output      : [('Decca Records',)]

===== Eval Round 859 =====
Database         : orchestra
Prediction SQL   : SELECT count(Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'
Gold SQL         : SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(11,)]
Gold Output      : [(11,)]

===== Eval Round 860 =====
Database         : orchestra
Prediction SQL   : SELECT COUNT(Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
Gold SQL         : SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(11,)]
Gold Output      : [(11,)]

===== Eval Round 861 =====
Database         : orchestra
Prediction SQL   : SELECT DISTINCT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1)
Gold SQL         : SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 862 =====
Database         : orchestra
Prediction SQL   : SELECT DISTINCT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1)
Gold SQL         : SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 863 =====
Database         : network_1
Prediction SQL   : SELECT count(*) FROM Highschooler
Gold SQL         : SELECT count(*) FROM Highschooler
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(16,)]
Gold Output      : [(16,)]

===== Eval Round 864 =====
Database         : network_1
Prediction SQL   : SELECT count(*) FROM Highschooler
Gold SQL         : SELECT count(*) FROM Highschooler
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(16,)]
Gold Output      : [(16,)]

===== Eval Round 865 =====
Database         : network_1
Prediction SQL   : SELECT name, grade FROM Highschooler
Gold SQL         : SELECT name ,  grade FROM Highschooler
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Jordan', 9), ('Gabriel', 9), ('Tiffany', 9), ('Cassandra', 9), ('Haley', 10), ('Andrew', 10), ('Kris', 10), ('Brittany', 10), ('Alexis', 11), ('Austin', 11), ('Gabriel', 11), ('Jessica', 11), ('Jordan', 12), ('John', 12), ('Kyle', 12), ('Logan', 12)]
Gold Output      : [('Jordan', 9), ('Gabriel', 9), ('Tiffany', 9), ('Cassandra', 9), ('Haley', 10), ('Andrew', 10), ('Kris', 10), ('Brittany', 10), ('Alexis', 11), ('Austin', 11), ('Gabriel', 11), ('Jessica', 11), ('Jordan', 12), ('John', 12), ('Kyle', 12), ('Logan', 12)]

===== Eval Round 866 =====
Database         : network_1
Prediction SQL   : SELECT name, grade FROM Highschooler
Gold SQL         : SELECT name ,  grade FROM Highschooler
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Jordan', 9), ('Gabriel', 9), ('Tiffany', 9), ('Cassandra', 9), ('Haley', 10), ('Andrew', 10), ('Kris', 10), ('Brittany', 10), ('Alexis', 11), ('Austin', 11), ('Gabriel', 11), ('Jessica', 11), ('Jordan', 12), ('John', 12), ('Kyle', 12), ('Logan', 12)]
Gold Output      : [('Jordan', 9), ('Gabriel', 9), ('Tiffany', 9), ('Cassandra', 9), ('Haley', 10), ('Andrew', 10), ('Kris', 10), ('Brittany', 10), ('Alexis', 11), ('Austin', 11), ('Gabriel', 11), ('Jessica', 11), ('Jordan', 12), ('John', 12), ('Kyle', 12), ('Logan', 12)]

===== Eval Round 867 =====
Database         : network_1
Prediction SQL   : SELECT grade FROM Highschooler
Gold SQL         : SELECT grade FROM Highschooler
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(9,), (9,), (9,), (9,), (10,), (10,), (10,), (10,), (11,), (11,), (11,), (11,), (12,), (12,), (12,), (12,)]
Gold Output      : [(9,), (9,), (9,), (9,), (10,), (10,), (10,), (10,), (11,), (11,), (11,), (11,), (12,), (12,), (12,), (12,)]

===== Eval Round 868 =====
Database         : network_1
Prediction SQL   : SELECT grade FROM Highschooler
Gold SQL         : SELECT grade FROM Highschooler
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(9,), (9,), (9,), (9,), (10,), (10,), (10,), (10,), (11,), (11,), (11,), (11,), (12,), (12,), (12,), (12,)]
Gold Output      : [(9,), (9,), (9,), (9,), (10,), (10,), (10,), (10,), (11,), (11,), (11,), (11,), (12,), (12,), (12,), (12,)]

===== Eval Round 869 =====
Database         : network_1
Prediction SQL   : SELECT grade FROM Highschooler WHERE name = 'Kyle'
Gold SQL         : SELECT grade FROM Highschooler WHERE name  =  "Kyle"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(12,)]
Gold Output      : [(12,)]

===== Eval Round 870 =====
Database         : network_1
Prediction SQL   : SELECT grade FROM Highschooler WHERE name = 'Kyle'
Gold SQL         : SELECT grade FROM Highschooler WHERE name  =  "Kyle"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(12,)]
Gold Output      : [(12,)]

===== Eval Round 871 =====
Database         : network_1
Prediction SQL   : SELECT name FROM Highschooler WHERE grade = 10
Gold SQL         : SELECT name FROM Highschooler WHERE grade  =  10
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Haley',), ('Andrew',), ('Kris',), ('Brittany',)]
Gold Output      : [('Haley',), ('Andrew',), ('Kris',), ('Brittany',)]

===== Eval Round 872 =====
Database         : network_1
Prediction SQL   : SELECT name FROM Highschooler WHERE grade = 10
Gold SQL         : SELECT name FROM Highschooler WHERE grade  =  10
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Haley',), ('Andrew',), ('Kris',), ('Brittany',)]
Gold Output      : [('Haley',), ('Andrew',), ('Kris',), ('Brittany',)]

===== Eval Round 873 =====
Database         : network_1
Prediction SQL   : SELECT ID FROM Highschooler WHERE name = 'Kyle'
Gold SQL         : SELECT ID FROM Highschooler WHERE name  =  "Kyle"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1934,)]
Gold Output      : [(1934,)]

===== Eval Round 874 =====
Database         : network_1
Prediction SQL   : SELECT ID FROM Highschooler WHERE name = 'Kyle'
Gold SQL         : SELECT ID FROM Highschooler WHERE name  =  "Kyle"
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1934,)]
Gold Output      : [(1934,)]

===== Eval Round 875 =====
Database         : network_1
Prediction SQL   : SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)
Gold SQL         : SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(8,)]
Gold Output      : [(8,)]

===== Eval Round 876 =====
Database         : network_1
Prediction SQL   : SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)
Gold SQL         : SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(8,)]
Gold Output      : [(8,)]

===== Eval Round 877 =====
Database         : network_1
Prediction SQL   : SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade
Gold SQL         : SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(9, 4), (10, 4), (11, 4), (12, 4)]
Gold Output      : [(9, 4), (10, 4), (11, 4), (12, 4)]

===== Eval Round 878 =====
Database         : network_1
Prediction SQL   : SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade
Gold SQL         : SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(9, 4), (10, 4), (11, 4), (12, 4)]
Gold Output      : [(9, 4), (10, 4), (11, 4), (12, 4)]

===== Eval Round 879 =====
Database         : network_1
Prediction SQL   : SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(12,)]
Gold Output      : [(12,)]

===== Eval Round 880 =====
Database         : network_1
Prediction SQL   : SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(12,)]
Gold Output      : [(12,)]

===== Eval Round 881 =====
Database         : network_1
Prediction SQL   : SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4
Gold SQL         : SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(9,), (10,), (11,), (12,)]
Gold Output      : [(9,), (10,), (11,), (12,)]

===== Eval Round 882 =====
Database         : network_1
Prediction SQL   : SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4
Gold SQL         : SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(9,), (10,), (11,), (12,)]
Gold Output      : [(9,), (10,), (11,), (12,)]

===== Eval Round 883 =====
Database         : network_1
Prediction SQL   : SELECT student_id, COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id
Gold SQL         : SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1101, 1), (1247, 2), (1304, 1), (1316, 1), (1381, 1), (1468, 2), (1501, 1), (1510, 2), (1661, 1), (1689, 2), (1709, 1), (1782, 3), (1911, 1), (1934, 1)]
Gold Output      : [(1101, 1), (1247, 2), (1304, 1), (1316, 1), (1381, 1), (1468, 2), (1501, 1), (1510, 2), (1661, 1), (1689, 2), (1709, 1), (1782, 3), (1911, 1), (1934, 1)]

===== Eval Round 884 =====
Database         : network_1
Prediction SQL   : SELECT student_id, COUNT(friend_id) AS friend_count FROM Friend GROUP BY student_id
Gold SQL         : SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1101, 1), (1247, 2), (1304, 1), (1316, 1), (1381, 1), (1468, 2), (1501, 1), (1510, 2), (1661, 1), (1689, 2), (1709, 1), (1782, 3), (1911, 1), (1934, 1)]
Gold Output      : [(1101, 1), (1247, 2), (1304, 1), (1316, 1), (1381, 1), (1468, 2), (1501, 1), (1510, 2), (1661, 1), (1689, 2), (1709, 1), (1782, 3), (1911, 1), (1934, 1)]

===== Eval Round 885 =====
Database         : network_1
Prediction SQL   : SELECT H.name, COUNT(F.friend_id) AS num_friends FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID
Gold SQL         : SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('John', 0), ('Haley', 1), ('Alexis', 2), ('Jordan', 1), ('Austin', 1), ('Tiffany', 1), ('Kris', 2), ('Jessica', 1), ('Jordan', 2), ('Brittany', 0), ('Logan', 1), ('Gabriel', 2), ('Cassandra', 1), ('Andrew', 3), ('Gabriel', 1), ('Kyle', 1)]
Gold Output      : [('Haley', 1), ('Alexis', 2), ('Jordan', 1), ('Austin', 1), ('Tiffany', 1), ('Kris', 2), ('Jessica', 1), ('Jordan', 2), ('Logan', 1), ('Gabriel', 2), ('Cassandra', 1), ('Andrew', 3), ('Gabriel', 1), ('Kyle', 1)]

===== Eval Round 886 =====
Database         : network_1
Prediction SQL   : SELECT H.name, COUNT(F.friend_id) AS friend_count FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.name
Gold SQL         : SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Alexis', 2), ('Andrew', 3), ('Austin', 1), ('Brittany', 0), ('Cassandra', 1), ('Gabriel', 3), ('Haley', 1), ('Jessica', 1), ('John', 0), ('Jordan', 3), ('Kris', 2), ('Kyle', 1), ('Logan', 1), ('Tiffany', 1)]
Gold Output      : [('Haley', 1), ('Alexis', 2), ('Jordan', 1), ('Austin', 1), ('Tiffany', 1), ('Kris', 2), ('Jessica', 1), ('Jordan', 2), ('Logan', 1), ('Gabriel', 2), ('Cassandra', 1), ('Andrew', 3), ('Gabriel', 1), ('Kyle', 1)]

===== Eval Round 887 =====
Database         : network_1
Prediction SQL   : SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY COUNT(T2.friend_id) DESC LIMIT 1
Gold SQL         : SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Andrew',)]
Gold Output      : [('Andrew',)]

===== Eval Round 888 =====
Database         : network_1
Prediction SQL   : SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY COUNT(T2.friend_id) DESC LIMIT 1
Gold SQL         : SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Andrew',)]
Gold Output      : [('Andrew',)]

===== Eval Round 889 =====
Database         : network_1
Prediction SQL   : SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING COUNT(T2.friend_id) >= 3
Gold SQL         : SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Andrew',)]
Gold Output      : [('Andrew',)]

===== Eval Round 890 =====
Database         : network_1
Prediction SQL   : SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID HAVING COUNT(F.friend_id) >= 3
Gold SQL         : SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Andrew',)]
Gold Output      : [('Andrew',)]

===== Eval Round 891 =====
Database         : network_1
Prediction SQL   : SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id WHERE T2.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
Gold SQL         : SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Jordan',)]
Gold Output      : [('Jordan',)]

===== Eval Round 892 =====
Database         : network_1
Prediction SQL   : SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id WHERE T2.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
Gold SQL         : SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Jordan',)]
Gold Output      : [('Jordan',)]

===== Eval Round 893 =====
Database         : network_1
Prediction SQL   : SELECT COUNT(*) FROM Friend WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle')
Gold SQL         : SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1,)]
Gold Output      : [(1,)]

===== Eval Round 894 =====
Database         : network_1
Prediction SQL   : SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
Gold SQL         : SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1,)]
Gold Output      : [(1,)]

===== Eval Round 895 =====
Database         : network_1
Prediction SQL   : SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
Gold SQL         : SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1025,), (1641,)]
Gold Output      : [(1025,), (1641,)]

===== Eval Round 896 =====
Database         : network_1
Prediction SQL   : SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend WHERE student_id IS NOT NULL)
Gold SQL         : SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1025,), (1641,)]
Gold Output      : [(1025,), (1641,)]

===== Eval Round 897 =====
Database         : network_1
Prediction SQL   : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
Gold SQL         : SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Brittany',), ('John',)]
Gold Output      : [('Brittany',), ('John',)]

===== Eval Round 898 =====
Database         : network_1
Prediction SQL   : SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)
Gold SQL         : SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('Brittany',), ('John',)]

===== Eval Round 899 =====
Database         : network_1
Prediction SQL   : SELECT DISTINCT student_id FROM Friend WHERE EXISTS (SELECT 1 FROM Likes WHERE student_id = Friend.student_id)
Gold SQL         : SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(1247,), (1316,), (1501,), (1689,), (1709,), (1782,), (1911,), (1934,)]
Gold Output      : [(1101,), (1247,), (1304,), (1468,), (1501,), (1689,), (1709,), (1934,)]

===== Eval Round 900 =====
Database         : network_1
Prediction SQL   : SELECT DISTINCT student_id FROM Friend UNION SELECT DISTINCT student_id FROM Likes
Gold SQL         : SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(1025,), (1101,), (1247,), (1304,), (1316,), (1381,), (1468,), (1501,), (1510,), (1641,), (1661,), (1689,), (1709,), (1782,), (1911,), (1934,)]
Gold Output      : [(1101,), (1247,), (1304,), (1468,), (1501,), (1689,), (1709,), (1934,)]

===== Eval Round 901 =====
Database         : network_1
Prediction SQL   : SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE EXISTS (SELECT 1 FROM Likes WHERE student_id = h.ID)
Gold SQL         : SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Alexis',), ('Austin',), ('Jessica',), ('Gabriel',), ('Cassandra',), ('Andrew',), ('Kyle',)]
Gold Output      : [('Alexis',), ('Cassandra',), ('Gabriel',), ('Haley',), ('Jessica',), ('Jordan',), ('Kris',), ('Kyle',)]

===== Eval Round 902 =====
Database         : network_1
Prediction SQL   : SELECT DISTINCT h.name FROM Highschooler h WHERE h.ID IN (SELECT student_id FROM Friend) AND h.ID IN (SELECT liked_id FROM Likes)
Gold SQL         : SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Haley',), ('Alexis',), ('Jordan',), ('Kris',), ('Jessica',), ('Gabriel',), ('Cassandra',), ('Kyle',)]
Gold Output      : [('Alexis',), ('Cassandra',), ('Gabriel',), ('Haley',), ('Jessica',), ('Jordan',), ('Kris',), ('Kyle',)]

===== Eval Round 903 =====
Database         : network_1
Prediction SQL   : SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id
Gold SQL         : SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1025, 1), (1247, 1), (1316, 1), (1501, 1), (1641, 1), (1689, 1), (1709, 1), (1782, 1), (1911, 1), (1934, 1)]
Gold Output      : [(1025, 1), (1247, 1), (1316, 1), (1501, 1), (1641, 1), (1689, 1), (1709, 1), (1782, 1), (1911, 1), (1934, 1)]

===== Eval Round 904 =====
Database         : network_1
Prediction SQL   : SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id
Gold SQL         : SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1025, 1), (1247, 1), (1316, 1), (1501, 1), (1641, 1), (1689, 1), (1709, 1), (1782, 1), (1911, 1), (1934, 1)]
Gold Output      : [(1025, 1), (1247, 1), (1316, 1), (1501, 1), (1641, 1), (1689, 1), (1709, 1), (1782, 1), (1911, 1), (1934, 1)]

===== Eval Round 905 =====
Database         : network_1
Prediction SQL   : SELECT h.name, COUNT(l.student_id) AS num_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name
Gold SQL         : SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Alexis', 1), ('Andrew', 1), ('Austin', 1), ('Brittany', 1), ('Cassandra', 1), ('Gabriel', 2), ('Jessica', 1), ('John', 1), ('Kyle', 1)]
Gold Output      : [('John', 1), ('Alexis', 1), ('Austin', 1), ('Jessica', 1), ('Brittany', 1), ('Gabriel', 1), ('Cassandra', 1), ('Andrew', 1), ('Gabriel', 1), ('Kyle', 1)]

===== Eval Round 906 =====
Database         : network_1
Prediction SQL   : SELECT h.name, COUNT(l.student_id) AS likes_count FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name
Gold SQL         : SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Alexis', 1), ('Andrew', 1), ('Austin', 1), ('Brittany', 1), ('Cassandra', 1), ('Gabriel', 2), ('Jessica', 1), ('John', 1), ('Kyle', 1)]
Gold Output      : [('John', 1), ('Alexis', 1), ('Austin', 1), ('Jessica', 1), ('Brittany', 1), ('Gabriel', 1), ('Cassandra', 1), ('Andrew', 1), ('Gabriel', 1), ('Kyle', 1)]

===== Eval Round 907 =====
Database         : network_1
Prediction SQL   : SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY COUNT(T2.liked_id) DESC LIMIT 1
Gold SQL         : SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('John',)]
Gold Output      : [('John',)]

===== Eval Round 908 =====
Database         : network_1
Prediction SQL   : SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY COUNT(T2.liked_id) DESC LIMIT 1
Gold SQL         : SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('John',)]
Gold Output      : [('John',)]

===== Eval Round 909 =====
Database         : network_1
Prediction SQL   : SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY l.student_id HAVING COUNT(l.liked_id) >= 2
Gold SQL         : SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 910 =====
Database         : network_1
Prediction SQL   : SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING COUNT(T2.liked_id) >= 2
Gold SQL         : SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : []

===== Eval Round 911 =====
Database         : network_1
Prediction SQL   : SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID HAVING H.grade > 5 AND COUNT(F.friend_id) >= 2
Gold SQL         : SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Alexis',), ('Kris',), ('Jordan',), ('Gabriel',), ('Andrew',)]
Gold Output      : [('Alexis',), ('Kris',), ('Jordan',), ('Gabriel',), ('Andrew',)]

===== Eval Round 912 =====
Database         : network_1
Prediction SQL   : SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2)
Gold SQL         : SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Alexis',), ('Kris',), ('Jordan',), ('Gabriel',), ('Andrew',)]
Gold Output      : [('Alexis',), ('Kris',), ('Jordan',), ('Gabriel',), ('Andrew',)]

===== Eval Round 913 =====
Database         : network_1
Prediction SQL   : SELECT count(*) FROM Likes WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle')
Gold SQL         : SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1,)]
Gold Output      : [(1,)]

===== Eval Round 914 =====
Database         : network_1
Prediction SQL   : SELECT COUNT(*) FROM Likes WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle')
Gold SQL         : SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1,)]
Gold Output      : [(1,)]

===== Eval Round 915 =====
Database         : network_1
Prediction SQL   : SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
Gold SQL         : SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(10.428571428571429,)]
Gold Output      : [(10.428571428571429,)]

===== Eval Round 916 =====
Database         : network_1
Prediction SQL   : SELECT AVG(H.grade) FROM Highschooler H JOIN Friend F ON H.ID = F.student_id
Gold SQL         : SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(10.25,)]
Gold Output      : [(10.428571428571429,)]

===== Eval Round 917 =====
Database         : network_1
Prediction SQL   : SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
Gold SQL         : SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(10,)]
Gold Output      : [(10,)]

===== Eval Round 918 =====
Database         : network_1
Prediction SQL   : SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT liked_id FROM Likes)
Gold SQL         : SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(10,)]
Gold Output      : [(10,)]

===== Eval Round 919 =====
Database         : dog_kennels
Prediction SQL   : SELECT DISTINCT state FROM Owners INNER JOIN Professionals ON Owners.state = Professionals.state
Gold SQL         : SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: ambiguous column name: state
Gold Output      : [('Indiana',), ('Mississippi',), ('Wisconsin',)]

===== Eval Round 920 =====
Database         : dog_kennels
Prediction SQL   : SELECT DISTINCT state FROM Owners INTERSECT SELECT DISTINCT state FROM Professionals
Gold SQL         : SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Indiana',), ('Mississippi',), ('Wisconsin',)]
Gold Output      : [('Indiana',), ('Mississippi',), ('Wisconsin',)]

===== Eval Round 921 =====
Database         : dog_kennels
Prediction SQL   : SELECT AVG(D.age) FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id
Gold SQL         : SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(5.466666666666667,)]
Gold Output      : [(5.111111111111111,)]

===== Eval Round 922 =====
Database         : dog_kennels
Prediction SQL   : SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
Gold SQL         : SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(5.111111111111111,)]
Gold Output      : [(5.111111111111111,)]

===== Eval Round 923 =====
Database         : dog_kennels
Prediction SQL   : SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)
Gold SQL         : SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1, 'Braun', '(275)939-2435x80863'), (8, 'Hyatt', '328.842.3792'), (9, 'Kshlerin', '962-983-8109x3509')]
Gold Output      : [(1, 'Braun', '(275)939-2435x80863'), (8, 'Hyatt', '328.842.3792'), (9, 'Kshlerin', '962-983-8109x3509')]

===== Eval Round 924 =====
Database         : dog_kennels
Prediction SQL   : SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)
Gold SQL         : SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1, 'Braun', '(275)939-2435x80863'), (8, 'Hyatt', '328.842.3792'), (9, 'Kshlerin', '962-983-8109x3509')]
Gold Output      : [(1, 'Braun', '(275)939-2435x80863'), (8, 'Hyatt', '328.842.3792'), (9, 'Kshlerin', '962-983-8109x3509')]

===== Eval Round 925 =====
Database         : dog_kennels
Prediction SQL   : SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment <= 1000 GROUP BY d.dog_id HAVING SUM(t.cost_of_treatment) <= 1000
Gold SQL         : select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Kacey',), ('Hipolito',), ('Houston',), ('Narciso',), ('Holden',), ('Jesus',)]
Gold Output      : [('Kacey',), ('Hipolito',), ('Mavis',), ('Houston',), ('Jeffrey',), ('Merritt',), ('Narciso',), ('George',), ('Bessie',), ('Betty',), ('Holden',), ('Jesus',)]

===== Eval Round 926 =====
Database         : dog_kennels
Prediction SQL   : SELECT D.name FROM Dogs D JOIN Owners O ON D.owner_id = O.owner_id WHERE D.dog_id NOT IN (SELECT T.dog_id FROM Treatments T JOIN Charges C ON T.treatment_type_code = C.charge_type WHERE C.charge_amount > 1000)
Gold SQL         : select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Kacey',), ('Hipolito',), ('Mavis',), ('Houston',), ('Jeffrey',), ('Merritt',), ('Narciso',), ('George',), ('Bessie',), ('Troy',), ('Betty',), ('Holden',), ('Jesus',), ('Lyric',), ('Evangeline',)]
Gold Output      : [('Kacey',), ('Hipolito',), ('Mavis',), ('Houston',), ('Jeffrey',), ('Merritt',), ('Narciso',), ('George',), ('Bessie',), ('Betty',), ('Holden',), ('Jesus',)]

===== Eval Round 927 =====
Database         : dog_kennels
Prediction SQL   : SELECT DISTINCT p.first_name FROM Professionals p UNION SELECT DISTINCT o.first_name FROM Owners o EXCEPT SELECT DISTINCT name FROM Dogs
Gold SQL         : SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Adelle',), ('Brady',), ('Cindy',), ('Danny',), ('Domenica',), ('Emelie',), ('Ericka',), ('Gay',), ('Heather',), ('Jaclyn',), ('Jayson',), ('Johann',), ('Kade',), ('Karley',), ('Lesly',), ('Lorenz',), ('Melisa',), ('Monte',), ('Nora',), ('Olaf',), ('Orlando',), ('Rachelle',), ('Rolando',), ('Ruben',), ('Sigurd',), ('Taryn',), ('Tre',), ('Velva',), ('Vernice',), ('Winfield',)]
Gold Output      : [('Adelle',), ('Brady',), ('Cindy',), ('Danny',), ('Domenica',), ('Emelie',), ('Ericka',), ('Gay',), ('Heather',), ('Jaclyn',), ('Jayson',), ('Johann',), ('Kade',), ('Karley',), ('Lesly',), ('Lorenz',), ('Melisa',), ('Monte',), ('Nora',), ('Olaf',), ('Orlando',), ('Rachelle',), ('Rolando',), ('Ruben',), ('Sigurd',), ('Taryn',), ('Tre',), ('Velva',), ('Vernice',), ('Winfield',)]

===== Eval Round 928 =====
Database         : dog_kennels
Prediction SQL   : SELECT DISTINCT first_name FROM Owners UNION SELECT DISTINCT first_name FROM Professionals EXCEPT SELECT DISTINCT name FROM Dogs
Gold SQL         : SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Adelle',), ('Brady',), ('Cindy',), ('Danny',), ('Domenica',), ('Emelie',), ('Ericka',), ('Gay',), ('Heather',), ('Jaclyn',), ('Jayson',), ('Johann',), ('Kade',), ('Karley',), ('Lesly',), ('Lorenz',), ('Melisa',), ('Monte',), ('Nora',), ('Olaf',), ('Orlando',), ('Rachelle',), ('Rolando',), ('Ruben',), ('Sigurd',), ('Taryn',), ('Tre',), ('Velva',), ('Vernice',), ('Winfield',)]
Gold Output      : [('Adelle',), ('Brady',), ('Cindy',), ('Danny',), ('Domenica',), ('Emelie',), ('Ericka',), ('Gay',), ('Heather',), ('Jaclyn',), ('Jayson',), ('Johann',), ('Kade',), ('Karley',), ('Lesly',), ('Lorenz',), ('Melisa',), ('Monte',), ('Nora',), ('Olaf',), ('Orlando',), ('Rachelle',), ('Rolando',), ('Ruben',), ('Sigurd',), ('Taryn',), ('Tre',), ('Velva',), ('Vernice',), ('Winfield',)]

===== Eval Round 929 =====
Database         : dog_kennels
Prediction SQL   : SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p WHERE p.professional_id NOT IN (SELECT professional_id FROM Treatments)
Gold SQL         : SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1, 'Employee', 'deanna.schuster@example.com'), (2, 'Employee', 'lucile.shanahan@example.org'), (3, 'Employee', 'uboehm@example.org'), (11, 'Employee', 'west.eula@example.net'), (12, 'Veterenarian', 'marquardt.furman@example.org'), (13, 'Veterenarian', 'delphine29@example.com'), (15, 'Employee', 'jeichmann@example.com')]
Gold Output      : [(1, 'Employee', 'deanna.schuster@example.com'), (2, 'Employee', 'lucile.shanahan@example.org'), (3, 'Employee', 'uboehm@example.org'), (11, 'Employee', 'west.eula@example.net'), (12, 'Veterenarian', 'marquardt.furman@example.org'), (13, 'Veterenarian', 'delphine29@example.com'), (15, 'Employee', 'jeichmann@example.com')]

===== Eval Round 930 =====
Database         : dog_kennels
Prediction SQL   : SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
Gold SQL         : SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(1, 'Employee', 'deanna.schuster@example.com'), (2, 'Employee', 'lucile.shanahan@example.org'), (3, 'Employee', 'uboehm@example.org'), (11, 'Employee', 'west.eula@example.net'), (12, 'Veterenarian', 'marquardt.furman@example.org'), (13, 'Veterenarian', 'delphine29@example.com'), (15, 'Employee', 'jeichmann@example.com')]
Gold Output      : [(1, 'Employee', 'deanna.schuster@example.com'), (2, 'Employee', 'lucile.shanahan@example.org'), (3, 'Employee', 'uboehm@example.org'), (11, 'Employee', 'west.eula@example.net'), (12, 'Veterenarian', 'marquardt.furman@example.org'), (13, 'Veterenarian', 'delphine29@example.com'), (15, 'Employee', 'jeichmann@example.com')]

===== Eval Round 931 =====
Database         : dog_kennels
Prediction SQL   : SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1)
Gold SQL         : SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(14, 'Rachelle', 'Funk')]
Gold Output      : [(14, 'Rachelle', 'Funk')]

===== Eval Round 932 =====
Database         : dog_kennels
Prediction SQL   : SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1)
Gold SQL         : SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(14, 'Rachelle', 'Funk')]
Gold Output      : [(14, 'Rachelle', 'Funk')]

===== Eval Round 933 =====
Database         : dog_kennels
Prediction SQL   : SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id HAVING COUNT(T.treatment_id) >= 2
Gold SQL         : SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(4, 'Veterenarian', 'Vernice'), (6, 'Veterenarian', 'Ruben'), (8, 'Employee', 'Karley'), (9, 'Veterenarian', 'Monte'), (10, 'Employee', 'Domenica'), (14, 'Employee', 'Sigurd')]
Gold Output      : [(4, 'Veterenarian', 'Vernice'), (6, 'Veterenarian', 'Ruben'), (8, 'Employee', 'Karley'), (9, 'Veterenarian', 'Monte'), (10, 'Employee', 'Domenica'), (14, 'Employee', 'Sigurd')]

===== Eval Round 934 =====
Database         : dog_kennels
Prediction SQL   : SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2)
Gold SQL         : SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(4, 'Veterenarian', 'Vernice'), (6, 'Veterenarian', 'Ruben'), (8, 'Employee', 'Karley'), (9, 'Veterenarian', 'Monte'), (10, 'Employee', 'Domenica'), (14, 'Employee', 'Sigurd')]
Gold Output      : [(4, 'Veterenarian', 'Vernice'), (6, 'Veterenarian', 'Ruben'), (8, 'Employee', 'Karley'), (9, 'Veterenarian', 'Monte'), (10, 'Employee', 'Domenica'), (14, 'Employee', 'Sigurd')]

===== Eval Round 935 =====
Database         : dog_kennels
Prediction SQL   : SELECT T1.breed_name FROM Breeds AS T1 INNER JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_code ORDER BY COUNT(T2.dog_id) DESC LIMIT 1
Gold SQL         : SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Bulldog',)]
Gold Output      : [('Bulldog',)]

===== Eval Round 936 =====
Database         : dog_kennels
Prediction SQL   : SELECT breed_name FROM Breeds INNER JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : ERROR: ambiguous column name: breed_code
Gold Output      : [('Bulldog',)]

===== Eval Round 937 =====
Database         : dog_kennels
Prediction SQL   : SELECT O.owner_id, O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id ORDER BY COUNT(T.treatment_id) DESC LIMIT 1
Gold SQL         : SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(14, 'Funk')]
Gold Output      : [(14, 'Funk')]

===== Eval Round 938 =====
Database         : dog_kennels
Prediction SQL   : SELECT O.owner_id, O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id ORDER BY SUM(T.cost_of_treatment) DESC LIMIT 1
Gold SQL         : SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(3, 'Stoltenberg')]
Gold Output      : [(14, 'Funk')]

===== Eval Round 939 =====
Database         : dog_kennels
Prediction SQL   : SELECT ttd.treatment_type_description FROM Treatment_Types AS ttd JOIN Treatments AS t ON ttd.treatment_type_code = t.treatment_type_code GROUP BY ttd.treatment_type_code ORDER BY SUM(t.cost_of_treatment) LIMIT 1
Gold SQL         : SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Take for a Walk',)]
Gold Output      : [('Take for a Walk',)]

===== Eval Round 940 =====
Database         : dog_kennels
Prediction SQL   : SELECT TTD.treatment_type_description FROM Treatment_Types AS TTD JOIN Treatments AS T ON TTD.treatment_type_code = T.treatment_type_code GROUP BY TTD.treatment_type_code ORDER BY SUM(T.cost_of_treatment) LIMIT 1
Gold SQL         : SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Take for a Walk',)]
Gold Output      : [('Take for a Walk',)]

===== Eval Round 941 =====
Database         : dog_kennels
Prediction SQL   : SELECT O.owner_id, O.zip_code FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id ORDER BY SUM(T.cost_of_treatment) DESC LIMIT 1
Gold SQL         : SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(3, '02647')]
Gold Output      : [(3, '02647')]

===== Eval Round 942 =====
Database         : dog_kennels
Prediction SQL   : SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1
Gold SQL         : SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(3, '02647')]
Gold Output      : [(3, '02647')]

===== Eval Round 943 =====
Database         : dog_kennels
Prediction SQL   : SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(DISTINCT t.treatment_type_code) >= 2
Gold SQL         : SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(6, '139-321-7313'), (9, '962-983-8109x3509'), (10, '461-801-2600'), (14, '1-185-137-1945x409')]
Gold Output      : [(4, '00230569697'), (6, '139-321-7313'), (8, '328.842.3792'), (9, '962-983-8109x3509'), (10, '461-801-2600'), (14, '1-185-137-1945x409')]

===== Eval Round 944 =====
Database         : dog_kennels
Prediction SQL   : SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)
Gold SQL         : SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(6, '139-321-7313'), (9, '962-983-8109x3509'), (10, '461-801-2600'), (14, '1-185-137-1945x409')]
Gold Output      : [(4, '00230569697'), (6, '139-321-7313'), (8, '328.842.3792'), (9, '962-983-8109x3509'), (10, '461-801-2600'), (14, '1-185-137-1945x409')]

===== Eval Round 945 =====
Database         : dog_kennels
Prediction SQL   : SELECT T1.first_name, T1.last_name FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
Gold SQL         : SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Domenica', 'Jacobs'), ('Vernice', 'Tillman'), ('Karley', 'Hyatt'), ('Vernice', 'Tillman'), ('Ruben', "O'Reilly"), ('Domenica', 'Jacobs'), ('Monte', 'Kshlerin'), ('Monte', 'Kshlerin')]
Gold Output      : [('Taryn', 'Braun'), ('Jayson', 'Ullrich'), ('Olaf', 'Watsica'), ('Vernice', 'Tillman'), ('Danny', 'Considine'), ('Ruben', "O'Reilly"), ('Velva', 'Hayes'), ('Karley', 'Hyatt'), ('Monte', 'Kshlerin'), ('Domenica', 'Jacobs'), ('Brady', 'Pouros'), ('Winfield', 'Christiansen'), ('Ericka', 'Murazik'), ('Sigurd', 'Frami'), ('Lesly', 'Walter')]

===== Eval Round 946 =====
Database         : dog_kennels
Prediction SQL   : SELECT DISTINCT T1.first_name, T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
Gold SQL         : SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
Exec Accuracy(EX): 0
Exact Match(EM)  : True
Pred Output      : [('Domenica', 'Jacobs'), ('Vernice', 'Tillman'), ('Karley', 'Hyatt'), ('Ruben', "O'Reilly"), ('Monte', 'Kshlerin')]
Gold Output      : [('Taryn', 'Braun'), ('Jayson', 'Ullrich'), ('Olaf', 'Watsica'), ('Vernice', 'Tillman'), ('Danny', 'Considine'), ('Ruben', "O'Reilly"), ('Velva', 'Hayes'), ('Karley', 'Hyatt'), ('Monte', 'Kshlerin'), ('Domenica', 'Jacobs'), ('Brady', 'Pouros'), ('Winfield', 'Christiansen'), ('Ericka', 'Murazik'), ('Sigurd', 'Frami'), ('Lesly', 'Walter')]

===== Eval Round 947 =====
Database         : dog_kennels
Prediction SQL   : SELECT T.date_of_treatment, P.first_name FROM Treatments T JOIN Professionals P ON T.professional_id = P.professional_id
Gold SQL         : SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('2018-03-19 04:39:54', 'Monte'), ('2018-03-15 20:25:34', 'Domenica'), ('2018-03-08 05:26:23', 'Vernice'), ('2018-03-01 04:14:46', 'Karley'), ('2018-03-23 13:52:10', 'Sigurd'), ('2018-03-11 04:23:15', 'Vernice'), ('2018-03-10 11:45:58', 'Sigurd'), ('2018-03-24 22:25:58', 'Ruben'), ('2018-03-14 19:10:40', 'Domenica'), ('2018-02-28 17:09:43', 'Velva'), ('2018-03-13 12:22:58', 'Danny'), ('2018-03-16 10:27:36', 'Monte'), ('2018-02-26 09:08:53', 'Karley'), ('2018-03-04 20:33:43', 'Monte'), ('2018-03-15 19:10:02', 'Ruben')]
Gold Output      : [('2018-03-19 04:39:54', 'Monte'), ('2018-03-15 20:25:34', 'Domenica'), ('2018-03-08 05:26:23', 'Vernice'), ('2018-03-01 04:14:46', 'Karley'), ('2018-03-23 13:52:10', 'Sigurd'), ('2018-03-11 04:23:15', 'Vernice'), ('2018-03-10 11:45:58', 'Sigurd'), ('2018-03-24 22:25:58', 'Ruben'), ('2018-03-14 19:10:40', 'Domenica'), ('2018-02-28 17:09:43', 'Velva'), ('2018-03-13 12:22:58', 'Danny'), ('2018-03-16 10:27:36', 'Monte'), ('2018-02-26 09:08:53', 'Karley'), ('2018-03-04 20:33:43', 'Monte'), ('2018-03-15 19:10:02', 'Ruben')]

===== Eval Round 948 =====
Database         : dog_kennels
Prediction SQL   : SELECT date_of_treatment, p.first_name FROM Treatments T JOIN Professionals p ON T.professional_id = p.professional_id
Gold SQL         : SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('2018-03-19 04:39:54', 'Monte'), ('2018-03-15 20:25:34', 'Domenica'), ('2018-03-08 05:26:23', 'Vernice'), ('2018-03-01 04:14:46', 'Karley'), ('2018-03-23 13:52:10', 'Sigurd'), ('2018-03-11 04:23:15', 'Vernice'), ('2018-03-10 11:45:58', 'Sigurd'), ('2018-03-24 22:25:58', 'Ruben'), ('2018-03-14 19:10:40', 'Domenica'), ('2018-02-28 17:09:43', 'Velva'), ('2018-03-13 12:22:58', 'Danny'), ('2018-03-16 10:27:36', 'Monte'), ('2018-02-26 09:08:53', 'Karley'), ('2018-03-04 20:33:43', 'Monte'), ('2018-03-15 19:10:02', 'Ruben')]
Gold Output      : [('2018-03-19 04:39:54', 'Monte'), ('2018-03-15 20:25:34', 'Domenica'), ('2018-03-08 05:26:23', 'Vernice'), ('2018-03-01 04:14:46', 'Karley'), ('2018-03-23 13:52:10', 'Sigurd'), ('2018-03-11 04:23:15', 'Vernice'), ('2018-03-10 11:45:58', 'Sigurd'), ('2018-03-24 22:25:58', 'Ruben'), ('2018-03-14 19:10:40', 'Domenica'), ('2018-02-28 17:09:43', 'Velva'), ('2018-03-13 12:22:58', 'Danny'), ('2018-03-16 10:27:36', 'Monte'), ('2018-02-26 09:08:53', 'Karley'), ('2018-03-04 20:33:43', 'Monte'), ('2018-03-15 19:10:02', 'Ruben')]

===== Eval Round 949 =====
Database         : dog_kennels
Prediction SQL   : SELECT T.cost_of_treatment, TT.treatment_type_description FROM Treatments T JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code
Gold SQL         : SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(567, 'Take for a Walk'), (147, 'Vaccination'), (429, 'Physical examination'), (266, 'Vaccination'), (668, 'Vaccination'), (313, 'Physical examination'), (852, 'Physical examination'), (407, 'Physical examination'), (139, 'Take for a Walk'), (681, 'Take for a Walk'), (514, 'Vaccination'), (428, 'Physical examination'), (945, 'Vaccination'), (349, 'Take for a Walk'), (656, 'Take for a Walk')]
Gold Output      : [(567, 'Take for a Walk'), (147, 'Vaccination'), (429, 'Physical examination'), (266, 'Vaccination'), (668, 'Vaccination'), (313, 'Physical examination'), (852, 'Physical examination'), (407, 'Physical examination'), (139, 'Take for a Walk'), (681, 'Take for a Walk'), (514, 'Vaccination'), (428, 'Physical examination'), (945, 'Vaccination'), (349, 'Take for a Walk'), (656, 'Take for a Walk')]

===== Eval Round 950 =====
Database         : dog_kennels
Prediction SQL   : SELECT T.cost_of_treatment, TT.treatment_type_description FROM Treatments T JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code
Gold SQL         : SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(567, 'Take for a Walk'), (147, 'Vaccination'), (429, 'Physical examination'), (266, 'Vaccination'), (668, 'Vaccination'), (313, 'Physical examination'), (852, 'Physical examination'), (407, 'Physical examination'), (139, 'Take for a Walk'), (681, 'Take for a Walk'), (514, 'Vaccination'), (428, 'Physical examination'), (945, 'Vaccination'), (349, 'Take for a Walk'), (656, 'Take for a Walk')]
Gold Output      : [(567, 'Take for a Walk'), (147, 'Vaccination'), (429, 'Physical examination'), (266, 'Vaccination'), (668, 'Vaccination'), (313, 'Physical examination'), (852, 'Physical examination'), (407, 'Physical examination'), (139, 'Take for a Walk'), (681, 'Take for a Walk'), (514, 'Vaccination'), (428, 'Physical examination'), (945, 'Vaccination'), (349, 'Take for a Walk'), (656, 'Take for a Walk')]

===== Eval Round 951 =====
Database         : dog_kennels
Prediction SQL   : SELECT O.first_name, O.last_name, S.size_description FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Sizes S ON D.size_code = S.size_code
Gold SQL         : SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Jaclyn', 'Stoltenberg', 'Large'), ('Gay', 'Feil', 'Large'), ('Nora', 'Haley', 'Medium'), ('Rachelle', 'Funk', 'Large'), ('Emelie', 'Mertz', 'Medium'), ('Johann', 'Fisher', 'Medium'), ('Jaclyn', 'Stoltenberg', 'Medium'), ('Rachelle', 'Funk', 'Small'), ('Melisa', 'DuBuque', 'Medium'), ('Kade', 'Rippin', 'Medium'), ('Cindy', 'Schmitt', 'Large'), ('Orlando', 'Price', 'Medium'), ('Rolando', 'Prohaska', 'Small'), ('Rachelle', 'Funk', 'Medium'), ('Lorenz', 'Nicolas', 'Medium')]
Gold Output      : [('Jaclyn', 'Stoltenberg', 'LGE'), ('Gay', 'Feil', 'LGE'), ('Nora', 'Haley', 'MED'), ('Rachelle', 'Funk', 'LGE'), ('Emelie', 'Mertz', 'MED'), ('Johann', 'Fisher', 'MED'), ('Jaclyn', 'Stoltenberg', 'MED'), ('Rachelle', 'Funk', 'SML'), ('Melisa', 'DuBuque', 'MED'), ('Kade', 'Rippin', 'MED'), ('Cindy', 'Schmitt', 'LGE'), ('Orlando', 'Price', 'MED'), ('Rolando', 'Prohaska', 'SML'), ('Rachelle', 'Funk', 'MED'), ('Lorenz', 'Nicolas', 'MED')]

===== Eval Round 952 =====
Database         : dog_kennels
Prediction SQL   : SELECT O.first_name, O.last_name, S.size_description FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Sizes S ON D.size_code = S.size_code
Gold SQL         : SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Jaclyn', 'Stoltenberg', 'Large'), ('Gay', 'Feil', 'Large'), ('Nora', 'Haley', 'Medium'), ('Rachelle', 'Funk', 'Large'), ('Emelie', 'Mertz', 'Medium'), ('Johann', 'Fisher', 'Medium'), ('Jaclyn', 'Stoltenberg', 'Medium'), ('Rachelle', 'Funk', 'Small'), ('Melisa', 'DuBuque', 'Medium'), ('Kade', 'Rippin', 'Medium'), ('Cindy', 'Schmitt', 'Large'), ('Orlando', 'Price', 'Medium'), ('Rolando', 'Prohaska', 'Small'), ('Rachelle', 'Funk', 'Medium'), ('Lorenz', 'Nicolas', 'Medium')]
Gold Output      : [('Jaclyn', 'Stoltenberg', 'LGE'), ('Gay', 'Feil', 'LGE'), ('Nora', 'Haley', 'MED'), ('Rachelle', 'Funk', 'LGE'), ('Emelie', 'Mertz', 'MED'), ('Johann', 'Fisher', 'MED'), ('Jaclyn', 'Stoltenberg', 'MED'), ('Rachelle', 'Funk', 'SML'), ('Melisa', 'DuBuque', 'MED'), ('Kade', 'Rippin', 'MED'), ('Cindy', 'Schmitt', 'LGE'), ('Orlando', 'Price', 'MED'), ('Rolando', 'Prohaska', 'SML'), ('Rachelle', 'Funk', 'MED'), ('Lorenz', 'Nicolas', 'MED')]

===== Eval Round 953 =====
Database         : dog_kennels
Prediction SQL   : SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id
Gold SQL         : SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Jaclyn', 'Kacey'), ('Gay', 'Hipolito'), ('Nora', 'Mavis'), ('Rachelle', 'Houston'), ('Emelie', 'Jeffrey'), ('Johann', 'Merritt'), ('Jaclyn', 'Narciso'), ('Rachelle', 'George'), ('Melisa', 'Bessie'), ('Kade', 'Troy'), ('Cindy', 'Betty'), ('Orlando', 'Holden'), ('Rolando', 'Jesus'), ('Rachelle', 'Lyric'), ('Lorenz', 'Evangeline')]
Gold Output      : [('Jaclyn', 'Kacey'), ('Gay', 'Hipolito'), ('Nora', 'Mavis'), ('Rachelle', 'Houston'), ('Emelie', 'Jeffrey'), ('Johann', 'Merritt'), ('Jaclyn', 'Narciso'), ('Rachelle', 'George'), ('Melisa', 'Bessie'), ('Kade', 'Troy'), ('Cindy', 'Betty'), ('Orlando', 'Holden'), ('Rolando', 'Jesus'), ('Rachelle', 'Lyric'), ('Lorenz', 'Evangeline')]

===== Eval Round 954 =====
Database         : dog_kennels
Prediction SQL   : SELECT O.first_name, D.name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id
Gold SQL         : SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Jaclyn', 'Kacey'), ('Gay', 'Hipolito'), ('Nora', 'Mavis'), ('Rachelle', 'Houston'), ('Emelie', 'Jeffrey'), ('Johann', 'Merritt'), ('Jaclyn', 'Narciso'), ('Rachelle', 'George'), ('Melisa', 'Bessie'), ('Kade', 'Troy'), ('Cindy', 'Betty'), ('Orlando', 'Holden'), ('Rolando', 'Jesus'), ('Rachelle', 'Lyric'), ('Lorenz', 'Evangeline')]
Gold Output      : [('Jaclyn', 'Kacey'), ('Gay', 'Hipolito'), ('Nora', 'Mavis'), ('Rachelle', 'Houston'), ('Emelie', 'Jeffrey'), ('Johann', 'Merritt'), ('Jaclyn', 'Narciso'), ('Rachelle', 'George'), ('Melisa', 'Bessie'), ('Kade', 'Troy'), ('Cindy', 'Betty'), ('Orlando', 'Holden'), ('Rolando', 'Jesus'), ('Rachelle', 'Lyric'), ('Lorenz', 'Evangeline')]

===== Eval Round 955 =====
Database         : dog_kennels
Prediction SQL   : SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id JOIN Breeds b ON d.breed_code = b.breed_code WHERE b.breed_code = (SELECT breed_code FROM Breeds GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1)
Gold SQL         : SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Hipolito', '2018-03-01 04:14:46'), ('Evangeline', '2018-03-10 11:45:58'), ('Hipolito', '2018-03-24 22:25:58'), ('Evangeline', '2018-03-13 12:22:58'), ('Narciso', '2018-02-26 09:08:53')]
Gold Output      : [('Lyric', '2018-03-19 04:39:54'), ('Houston', '2018-03-15 20:25:34'), ('Lyric', '2018-03-08 05:26:23'), ('Lyric', '2018-03-14 19:10:40'), ('Kacey', '2018-03-15 19:10:02')]

===== Eval Round 956 =====
Database         : dog_kennels
Prediction SQL   : SELECT D.name, T.date_of_treatment FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id JOIN Breeds B ON D.breed_code = B.breed_code WHERE B.breed_code IN (SELECT breed_code FROM Breeds GROUP BY breed_code ORDER BY COUNT(*) LIMIT 1) ORDER BY T.date_of_treatment
Gold SQL         : SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Narciso', '2018-02-26 09:08:53'), ('Hipolito', '2018-03-01 04:14:46'), ('Evangeline', '2018-03-10 11:45:58'), ('Evangeline', '2018-03-13 12:22:58'), ('Hipolito', '2018-03-24 22:25:58')]
Gold Output      : [('Lyric', '2018-03-19 04:39:54'), ('Houston', '2018-03-15 20:25:34'), ('Lyric', '2018-03-08 05:26:23'), ('Lyric', '2018-03-14 19:10:40'), ('Kacey', '2018-03-15 19:10:02')]

===== Eval Round 957 =====
Database         : dog_kennels
Prediction SQL   : SELECT O.first_name, D.name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id WHERE O.state = 'VA'
Gold SQL         : SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('Melisa', 'Bessie')]

===== Eval Round 958 =====
Database         : dog_kennels
Prediction SQL   : SELECT O.first_name, D.name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id WHERE O.state = 'VA'
Gold SQL         : SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('Melisa', 'Bessie')]

===== Eval Round 959 =====
Database         : dog_kennels
Prediction SQL   : SELECT D.date_arrived, D.date_departed FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id
Gold SQL         : SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-09-08 20:10:13', '2018-03-25 06:58:44')]
Gold Output      : [('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-09-08 20:10:13', '2018-03-25 06:58:44')]

===== Eval Round 960 =====
Database         : dog_kennels
Prediction SQL   : SELECT D.date_arrived, D.date_departed FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id
Gold SQL         : SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-09-08 20:10:13', '2018-03-25 06:58:44')]
Gold Output      : [('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-09-08 20:10:13', '2018-03-25 06:58:44')]

===== Eval Round 961 =====
Database         : dog_kennels
Prediction SQL   : SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age ASC LIMIT 1
Gold SQL         : SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Nicolas',)]
Gold Output      : [('Feil',), ('Fisher',), ('Rippin',)]

===== Eval Round 962 =====
Database         : dog_kennels
Prediction SQL   : SELECT T1.last_name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age ASC LIMIT 1
Gold SQL         : SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Nicolas',)]
Gold Output      : [('Feil',), ('Fisher',), ('Rippin',)]

===== Eval Round 963 =====
Database         : dog_kennels
Prediction SQL   : SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')
Gold SQL         : SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('uboehm@example.org',), ('mekhi.little@example.org',)]
Gold Output      : [('uboehm@example.org',), ('mekhi.little@example.org',)]

===== Eval Round 964 =====
Database         : dog_kennels
Prediction SQL   : SELECT email_address FROM Professionals WHERE state IN ('HI', 'WI')
Gold SQL         : SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('uboehm@example.org',), ('mekhi.little@example.org',)]

===== Eval Round 965 =====
Database         : dog_kennels
Prediction SQL   : SELECT date_arrived, date_departed FROM Dogs
Gold SQL         : SELECT date_arrived ,  date_departed FROM Dogs
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('2017-09-08 20:10:13', '2018-03-25 06:58:44'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-06-25 10:14:05', '2018-03-25 10:25:46'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-10-25 00:55:34', '2018-03-25 04:50:22'), ('2017-04-15 09:25:31', '2018-03-25 13:07:04'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-10-16 20:06:21', '2018-03-25 02:47:40'), ('2018-01-17 11:44:16', '2018-03-25 06:46:07'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-07-25 15:19:07', '2018-03-25 15:05:16'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59')]
Gold Output      : [('2017-09-08 20:10:13', '2018-03-25 06:58:44'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-06-25 10:14:05', '2018-03-25 10:25:46'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-10-25 00:55:34', '2018-03-25 04:50:22'), ('2017-04-15 09:25:31', '2018-03-25 13:07:04'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-10-16 20:06:21', '2018-03-25 02:47:40'), ('2018-01-17 11:44:16', '2018-03-25 06:46:07'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-07-25 15:19:07', '2018-03-25 15:05:16'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59')]

===== Eval Round 966 =====
Database         : dog_kennels
Prediction SQL   : SELECT date_arrived, date_departed FROM Dogs
Gold SQL         : SELECT date_arrived ,  date_departed FROM Dogs
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('2017-09-08 20:10:13', '2018-03-25 06:58:44'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-06-25 10:14:05', '2018-03-25 10:25:46'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-10-25 00:55:34', '2018-03-25 04:50:22'), ('2017-04-15 09:25:31', '2018-03-25 13:07:04'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-10-16 20:06:21', '2018-03-25 02:47:40'), ('2018-01-17 11:44:16', '2018-03-25 06:46:07'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-07-25 15:19:07', '2018-03-25 15:05:16'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59')]
Gold Output      : [('2017-09-08 20:10:13', '2018-03-25 06:58:44'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-06-25 10:14:05', '2018-03-25 10:25:46'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-10-25 00:55:34', '2018-03-25 04:50:22'), ('2017-04-15 09:25:31', '2018-03-25 13:07:04'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-10-16 20:06:21', '2018-03-25 02:47:40'), ('2018-01-17 11:44:16', '2018-03-25 06:46:07'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-07-25 15:19:07', '2018-03-25 15:05:16'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59')]

===== Eval Round 967 =====
Database         : dog_kennels
Prediction SQL   : SELECT COUNT(DISTINCT dog_id) FROM Treatments
Gold SQL         : SELECT count(DISTINCT dog_id) FROM Treatments
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(9,)]
Gold Output      : [(9,)]

===== Eval Round 968 =====
Database         : dog_kennels
Prediction SQL   : SELECT COUNT(DISTINCT dog_id) FROM Treatments
Gold SQL         : SELECT count(DISTINCT dog_id) FROM Treatments
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(9,)]
Gold Output      : [(9,)]

===== Eval Round 969 =====
Database         : dog_kennels
Prediction SQL   : SELECT COUNT(DISTINCT professional_id) FROM Treatments
Gold SQL         : SELECT count(DISTINCT professional_id) FROM Treatments
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(8,)]
Gold Output      : [(8,)]

===== Eval Round 970 =====
Database         : dog_kennels
Prediction SQL   : SELECT COUNT(DISTINCT professional_id) FROM Treatments
Gold SQL         : SELECT count(DISTINCT professional_id) FROM Treatments
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(8,)]
Gold Output      : [(8,)]

===== Eval Round 971 =====
Database         : dog_kennels
Prediction SQL   : SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
Gold SQL         : SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Employee', '6915 Oberbrunner Point Suite 491\nGleasonville, LA ', 'West Heidi', 'Indiana')]
Gold Output      : [('Employee', '6915 Oberbrunner Point Suite 491\nGleasonville, LA ', 'West Heidi', 'Indiana')]

===== Eval Round 972 =====
Database         : dog_kennels
Prediction SQL   : SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
Gold SQL         : SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Employee', '6915 Oberbrunner Point Suite 491\nGleasonville, LA ', 'West Heidi', 'Indiana')]
Gold Output      : [('Employee', '6915 Oberbrunner Point Suite 491\nGleasonville, LA ', 'West Heidi', 'Indiana')]

===== Eval Round 973 =====
Database         : dog_kennels
Prediction SQL   : SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
Gold SQL         : SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Johann', 'Fisher', 'zboncak.madonna@example.net'), ('Cindy', 'Schmitt', 'wpfeffer@example.net')]
Gold Output      : [('Johann', 'Fisher', 'zboncak.madonna@example.net'), ('Cindy', 'Schmitt', 'wpfeffer@example.net')]

===== Eval Round 974 =====
Database         : dog_kennels
Prediction SQL   : SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
Gold SQL         : SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Johann', 'Fisher', 'zboncak.madonna@example.net'), ('Cindy', 'Schmitt', 'wpfeffer@example.net')]
Gold Output      : [('Johann', 'Fisher', 'zboncak.madonna@example.net'), ('Cindy', 'Schmitt', 'wpfeffer@example.net')]

===== Eval Round 975 =====
Database         : dog_kennels
Prediction SQL   : SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
Gold SQL         : SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(9,)]
Gold Output      : [(9,)]

===== Eval Round 976 =====
Database         : dog_kennels
Prediction SQL   : SELECT COUNT(dog_id) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
Gold SQL         : SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(9,)]
Gold Output      : [(9,)]

===== Eval Round 977 =====
Database         : dog_kennels
Prediction SQL   : SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
Gold SQL         : SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(407,)]
Gold Output      : [(407,)]

===== Eval Round 978 =====
Database         : dog_kennels
Prediction SQL   : SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
Gold SQL         : SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(407,)]
Gold Output      : [(407,)]

===== Eval Round 979 =====
Database         : dog_kennels
Prediction SQL   : SELECT COUNT(dog_id) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
Gold SQL         : SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(6,)]
Gold Output      : [(6,)]

===== Eval Round 980 =====
Database         : dog_kennels
Prediction SQL   : SELECT count(dog_id) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
Gold SQL         : select count(*) from dogs where dog_id not in ( select dog_id from treatments )
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(6,)]
Gold Output      : [(6,)]

===== Eval Round 981 =====
Database         : dog_kennels
Prediction SQL   : SELECT COUNT(owner_id) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_adopted IS NULL OR date_adopted > date('now'))
Gold SQL         : SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(15,)]
Gold Output      : [(3,)]

===== Eval Round 982 =====
Database         : dog_kennels
Prediction SQL   : SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_adopted IS NULL OR date_adopted > CURRENT_DATE)
Gold SQL         : SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [(15,)]
Gold Output      : [(3,)]

===== Eval Round 983 =====
Database         : dog_kennels
Prediction SQL   : SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
Gold SQL         : SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(7,)]
Gold Output      : [(7,)]

===== Eval Round 984 =====
Database         : dog_kennels
Prediction SQL   : SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
Gold SQL         : SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(7,)]
Gold Output      : [(7,)]

===== Eval Round 985 =====
Database         : dog_kennels
Prediction SQL   : SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
Gold SQL         : SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Kacey', '6', '7.57'), ('Lyric', '4', '4.36'), ('Evangeline', '1', '4.01')]
Gold Output      : [('Kacey', '6', '7.57'), ('Lyric', '4', '4.36'), ('Evangeline', '1', '4.01')]

===== Eval Round 986 =====
Database         : dog_kennels
Prediction SQL   : SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
Gold SQL         : SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Kacey', '6', '7.57'), ('Lyric', '4', '4.36'), ('Evangeline', '1', '4.01')]
Gold Output      : [('Kacey', '6', '7.57'), ('Lyric', '4', '4.36'), ('Evangeline', '1', '4.01')]

===== Eval Round 987 =====
Database         : dog_kennels
Prediction SQL   : SELECT AVG(age) FROM Dogs
Gold SQL         : SELECT avg(age) FROM Dogs
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(5.066666666666666,)]
Gold Output      : [(5.066666666666666,)]

===== Eval Round 988 =====
Database         : dog_kennels
Prediction SQL   : SELECT AVG(age) FROM Dogs
Gold SQL         : SELECT avg(age) FROM Dogs
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(5.066666666666666,)]
Gold Output      : [(5.066666666666666,)]

===== Eval Round 989 =====
Database         : dog_kennels
Prediction SQL   : SELECT MAX(age) FROM Dogs
Gold SQL         : SELECT max(age) FROM Dogs
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('9',)]
Gold Output      : [('9',)]

===== Eval Round 990 =====
Database         : dog_kennels
Prediction SQL   : SELECT MAX(age) FROM Dogs
Gold SQL         : SELECT max(age) FROM Dogs
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('9',)]
Gold Output      : [('9',)]

===== Eval Round 991 =====
Database         : dog_kennels
Prediction SQL   : SELECT charge_type, charge_amount FROM Charges
Gold SQL         : SELECT charge_type ,  charge_amount FROM Charges
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Daily Accommodation', 98), ('Drugs', 322), ('Health Check', 640)]
Gold Output      : [('Daily Accommodation', 98), ('Drugs', 322), ('Health Check', 640)]

===== Eval Round 992 =====
Database         : dog_kennels
Prediction SQL   : SELECT charge_type, charge_amount FROM Charges
Gold SQL         : SELECT charge_type ,  charge_amount FROM Charges
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Daily Accommodation', 98), ('Drugs', 322), ('Health Check', 640)]
Gold Output      : [('Daily Accommodation', 98), ('Drugs', 322), ('Health Check', 640)]

===== Eval Round 993 =====
Database         : dog_kennels
Prediction SQL   : SELECT MAX(charge_amount) FROM Charges
Gold SQL         : SELECT max(charge_amount) FROM Charges
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(640,)]
Gold Output      : [(640,)]

===== Eval Round 994 =====
Database         : dog_kennels
Prediction SQL   : SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1
Gold SQL         : SELECT max(charge_amount) FROM Charges
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [(640,)]
Gold Output      : [(640,)]

===== Eval Round 995 =====
Database         : dog_kennels
Prediction SQL   : SELECT email_address, cell_number, home_phone FROM Professionals
Gold SQL         : SELECT email_address ,  cell_number ,  home_phone FROM professionals
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('deanna.schuster@example.com', '(275)939-2435x80863', '+71(6)2898266914'), ('lucile.shanahan@example.org', '889-940-2676', '+02(1)0259033559'), ('uboehm@example.org', '(369)908-7311x065', '325-155-0801x7005'), ('lourdes.lowe@example.net', '00230569697', '312.216.3352'), ('mekhi.little@example.org', '011.193.9081x3186', '1-609-566-2752x25197'), ('jacynthe.mclaughlin@example.net', '139-321-7313', '+43(5)1132733868'), ('lambert62@example.org', '499-434-0215x1628', '022.529.0550x1319'), ('goyette.roosevelt@example.net', '328.842.3792', '891.475.2256'), ('schneider.kathryne@example.org', '962-983-8109x3509', '320-508-6023'), ('jerrod.bahringer@example.org', '461-801-2600', '(230)338-3342x585'), ('west.eula@example.net', '609-405-2990', '(920)304-4499x59146'), ('marquardt.furman@example.org', '1-181-670-9466', '246-951-0080x76716'), ('delphine29@example.com', '880-659-7577x736', '346.594.3739'), ('cole.margarita@example.org', '1-185-137-1945x409', '971.048.3763x9404'), ('jeichmann@example.com', '1-258-285-4707x8020', '1-138-287-3775')]
Gold Output      : [('deanna.schuster@example.com', '(275)939-2435x80863', '+71(6)2898266914'), ('lucile.shanahan@example.org', '889-940-2676', '+02(1)0259033559'), ('uboehm@example.org', '(369)908-7311x065', '325-155-0801x7005'), ('lourdes.lowe@example.net', '00230569697', '312.216.3352'), ('mekhi.little@example.org', '011.193.9081x3186', '1-609-566-2752x25197'), ('jacynthe.mclaughlin@example.net', '139-321-7313', '+43(5)1132733868'), ('lambert62@example.org', '499-434-0215x1628', '022.529.0550x1319'), ('goyette.roosevelt@example.net', '328.842.3792', '891.475.2256'), ('schneider.kathryne@example.org', '962-983-8109x3509', '320-508-6023'), ('jerrod.bahringer@example.org', '461-801-2600', '(230)338-3342x585'), ('west.eula@example.net', '609-405-2990', '(920)304-4499x59146'), ('marquardt.furman@example.org', '1-181-670-9466', '246-951-0080x76716'), ('delphine29@example.com', '880-659-7577x736', '346.594.3739'), ('cole.margarita@example.org', '1-185-137-1945x409', '971.048.3763x9404'), ('jeichmann@example.com', '1-258-285-4707x8020', '1-138-287-3775')]

===== Eval Round 996 =====
Database         : dog_kennels
Prediction SQL   : SELECT email_address, cell_number, home_phone FROM Professionals
Gold SQL         : SELECT email_address ,  cell_number ,  home_phone FROM professionals
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('deanna.schuster@example.com', '(275)939-2435x80863', '+71(6)2898266914'), ('lucile.shanahan@example.org', '889-940-2676', '+02(1)0259033559'), ('uboehm@example.org', '(369)908-7311x065', '325-155-0801x7005'), ('lourdes.lowe@example.net', '00230569697', '312.216.3352'), ('mekhi.little@example.org', '011.193.9081x3186', '1-609-566-2752x25197'), ('jacynthe.mclaughlin@example.net', '139-321-7313', '+43(5)1132733868'), ('lambert62@example.org', '499-434-0215x1628', '022.529.0550x1319'), ('goyette.roosevelt@example.net', '328.842.3792', '891.475.2256'), ('schneider.kathryne@example.org', '962-983-8109x3509', '320-508-6023'), ('jerrod.bahringer@example.org', '461-801-2600', '(230)338-3342x585'), ('west.eula@example.net', '609-405-2990', '(920)304-4499x59146'), ('marquardt.furman@example.org', '1-181-670-9466', '246-951-0080x76716'), ('delphine29@example.com', '880-659-7577x736', '346.594.3739'), ('cole.margarita@example.org', '1-185-137-1945x409', '971.048.3763x9404'), ('jeichmann@example.com', '1-258-285-4707x8020', '1-138-287-3775')]
Gold Output      : [('deanna.schuster@example.com', '(275)939-2435x80863', '+71(6)2898266914'), ('lucile.shanahan@example.org', '889-940-2676', '+02(1)0259033559'), ('uboehm@example.org', '(369)908-7311x065', '325-155-0801x7005'), ('lourdes.lowe@example.net', '00230569697', '312.216.3352'), ('mekhi.little@example.org', '011.193.9081x3186', '1-609-566-2752x25197'), ('jacynthe.mclaughlin@example.net', '139-321-7313', '+43(5)1132733868'), ('lambert62@example.org', '499-434-0215x1628', '022.529.0550x1319'), ('goyette.roosevelt@example.net', '328.842.3792', '891.475.2256'), ('schneider.kathryne@example.org', '962-983-8109x3509', '320-508-6023'), ('jerrod.bahringer@example.org', '461-801-2600', '(230)338-3342x585'), ('west.eula@example.net', '609-405-2990', '(920)304-4499x59146'), ('marquardt.furman@example.org', '1-181-670-9466', '246-951-0080x76716'), ('delphine29@example.com', '880-659-7577x736', '346.594.3739'), ('cole.margarita@example.org', '1-185-137-1945x409', '971.048.3763x9404'), ('jeichmann@example.com', '1-258-285-4707x8020', '1-138-287-3775')]

===== Eval Round 997 =====
Database         : dog_kennels
Prediction SQL   : SELECT B.breed_name, S.size_description FROM Breeds B JOIN Dogs D ON B.breed_code = D.breed_code JOIN Sizes S ON D.size_code = S.size_code
Gold SQL         : SELECT DISTINCT breed_code ,  size_code FROM dogs
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Eskimo', 'Large'), ('Bulldog', 'Large'), ('Bulldog', 'Medium'), ('Eskimo', 'Large'), ('Bulldog', 'Medium'), ('Husky', 'Medium'), ('Bulldog', 'Medium'), ('Eskimo', 'Small'), ('Bulldog', 'Medium'), ('Husky', 'Medium'), ('Bulldog', 'Large'), ('Husky', 'Medium'), ('Husky', 'Small'), ('Eskimo', 'Medium'), ('Bulldog', 'Medium')]
Gold Output      : [('ESK', 'LGE'), ('BUL', 'LGE'), ('BUL', 'MED'), ('HUS', 'MED'), ('ESK', 'SML'), ('HUS', 'SML'), ('ESK', 'MED')]

===== Eval Round 998 =====
Database         : dog_kennels
Prediction SQL   : SELECT DISTINCT B.breed_name, S.size_description FROM Dogs D JOIN Breeds B ON D.breed_code = B.breed_code JOIN Sizes S ON D.size_code = S.size_code
Gold SQL         : SELECT DISTINCT breed_code ,  size_code FROM dogs
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Eskimo', 'Large'), ('Bulldog', 'Large'), ('Bulldog', 'Medium'), ('Husky', 'Medium'), ('Eskimo', 'Small'), ('Husky', 'Small'), ('Eskimo', 'Medium')]
Gold Output      : [('ESK', 'LGE'), ('BUL', 'LGE'), ('BUL', 'MED'), ('HUS', 'MED'), ('ESK', 'SML'), ('HUS', 'SML'), ('ESK', 'MED')]

===== Eval Round 999 =====
Database         : dog_kennels
Prediction SQL   : SELECT P.first_name, TTD.treatment_type_description FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id JOIN Treatment_Types TTD ON T.treatment_type_code = TTD.treatment_type_code
Gold SQL         : SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Monte', 'Take for a Walk'), ('Domenica', 'Vaccination'), ('Vernice', 'Physical examination'), ('Karley', 'Vaccination'), ('Sigurd', 'Vaccination'), ('Vernice', 'Physical examination'), ('Sigurd', 'Physical examination'), ('Ruben', 'Physical examination'), ('Domenica', 'Take for a Walk'), ('Velva', 'Take for a Walk'), ('Danny', 'Vaccination'), ('Monte', 'Physical examination'), ('Karley', 'Vaccination'), ('Monte', 'Take for a Walk'), ('Ruben', 'Take for a Walk')]
Gold Output      : [('Monte', 'Take for a Walk'), ('Domenica', 'Vaccination'), ('Vernice', 'Physical examination'), ('Karley', 'Vaccination'), ('Sigurd', 'Vaccination'), ('Sigurd', 'Physical examination'), ('Ruben', 'Physical examination'), ('Domenica', 'Take for a Walk'), ('Velva', 'Take for a Walk'), ('Danny', 'Vaccination'), ('Monte', 'Physical examination'), ('Ruben', 'Take for a Walk')]

===== Eval Round 1000 =====
Database         : dog_kennels
Prediction SQL   : SELECT P.first_name, TT.treatment_type_description FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code
Gold SQL         : SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Monte', 'Take for a Walk'), ('Domenica', 'Vaccination'), ('Vernice', 'Physical examination'), ('Karley', 'Vaccination'), ('Sigurd', 'Vaccination'), ('Vernice', 'Physical examination'), ('Sigurd', 'Physical examination'), ('Ruben', 'Physical examination'), ('Domenica', 'Take for a Walk'), ('Velva', 'Take for a Walk'), ('Danny', 'Vaccination'), ('Monte', 'Physical examination'), ('Karley', 'Vaccination'), ('Monte', 'Take for a Walk'), ('Ruben', 'Take for a Walk')]
Gold Output      : [('Monte', 'Take for a Walk'), ('Domenica', 'Vaccination'), ('Vernice', 'Physical examination'), ('Karley', 'Vaccination'), ('Sigurd', 'Vaccination'), ('Sigurd', 'Physical examination'), ('Ruben', 'Physical examination'), ('Domenica', 'Take for a Walk'), ('Velva', 'Take for a Walk'), ('Danny', 'Vaccination'), ('Monte', 'Physical examination'), ('Ruben', 'Take for a Walk')]

===== Eval Round 1001 =====
Database         : singer
Prediction SQL   : SELECT COUNT(*) FROM singer
Gold SQL         : SELECT count(*) FROM singer
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(8,)]
Gold Output      : [(8,)]

===== Eval Round 1002 =====
Database         : singer
Prediction SQL   : SELECT COUNT(*) FROM singer
Gold SQL         : SELECT count(*) FROM singer
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(8,)]
Gold Output      : [(8,)]

===== Eval Round 1003 =====
Database         : singer
Prediction SQL   : SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
Gold SQL         : SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Abigail Johnson',), ('Susanne Klatten',), ('Gina Rinehart',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Alice Walton',), ('Christy Walton',), ('Liliane Bettencourt',)]
Gold Output      : [('Abigail Johnson',), ('Susanne Klatten',), ('Gina Rinehart',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Alice Walton',), ('Christy Walton',), ('Liliane Bettencourt',)]

===== Eval Round 1004 =====
Database         : singer
Prediction SQL   : SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
Gold SQL         : SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Abigail Johnson',), ('Susanne Klatten',), ('Gina Rinehart',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Alice Walton',), ('Christy Walton',), ('Liliane Bettencourt',)]
Gold Output      : [('Abigail Johnson',), ('Susanne Klatten',), ('Gina Rinehart',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Alice Walton',), ('Christy Walton',), ('Liliane Bettencourt',)]

===== Eval Round 1005 =====
Database         : singer
Prediction SQL   : SELECT Birth_Year, Citizenship FROM singer
Gold SQL         : SELECT Birth_Year ,  Citizenship FROM singer
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1944.0, 'France'), (1948.0, 'United States'), (1949.0, 'United States'), (1942.0, 'Chile'), (1940.0, 'United States'), (1953.0, 'Australia'), (1962.0, 'Germany'), (1961.0, 'United States')]
Gold Output      : [(1944.0, 'France'), (1948.0, 'United States'), (1949.0, 'United States'), (1942.0, 'Chile'), (1940.0, 'United States'), (1953.0, 'Australia'), (1962.0, 'Germany'), (1961.0, 'United States')]

===== Eval Round 1006 =====
Database         : singer
Prediction SQL   : SELECT Birth_Year, Citizenship FROM singer
Gold SQL         : SELECT Birth_Year ,  Citizenship FROM singer
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(1944.0, 'France'), (1948.0, 'United States'), (1949.0, 'United States'), (1942.0, 'Chile'), (1940.0, 'United States'), (1953.0, 'Australia'), (1962.0, 'Germany'), (1961.0, 'United States')]
Gold Output      : [(1944.0, 'France'), (1948.0, 'United States'), (1949.0, 'United States'), (1942.0, 'Chile'), (1940.0, 'United States'), (1953.0, 'Australia'), (1962.0, 'Germany'), (1961.0, 'United States')]

===== Eval Round 1007 =====
Database         : singer
Prediction SQL   : SELECT Name FROM singer WHERE Citizenship <> 'France'
Gold SQL         : SELECT Name FROM singer WHERE Citizenship != "France"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Christy Walton',), ('Alice Walton',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Gina Rinehart',), ('Susanne Klatten',), ('Abigail Johnson',)]
Gold Output      : [('Christy Walton',), ('Alice Walton',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Gina Rinehart',), ('Susanne Klatten',), ('Abigail Johnson',)]

===== Eval Round 1008 =====
Database         : singer
Prediction SQL   : SELECT Name FROM singer WHERE Citizenship <> 'French'
Gold SQL         : SELECT Name FROM singer WHERE Citizenship != "France"
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('Liliane Bettencourt',), ('Christy Walton',), ('Alice Walton',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Gina Rinehart',), ('Susanne Klatten',), ('Abigail Johnson',)]
Gold Output      : [('Christy Walton',), ('Alice Walton',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Gina Rinehart',), ('Susanne Klatten',), ('Abigail Johnson',)]

===== Eval Round 1009 =====
Database         : singer
Prediction SQL   : SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949
Gold SQL         : SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Christy Walton',), ('Alice Walton',)]
Gold Output      : [('Christy Walton',), ('Alice Walton',)]

===== Eval Round 1010 =====
Database         : singer
Prediction SQL   : SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949
Gold SQL         : SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Christy Walton',), ('Alice Walton',)]
Gold Output      : [('Christy Walton',), ('Alice Walton',)]

===== Eval Round 1011 =====
Database         : singer
Prediction SQL   : SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
Gold SQL         : SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Liliane Bettencourt',)]
Gold Output      : [('Liliane Bettencourt',)]

===== Eval Round 1012 =====
Database         : singer
Prediction SQL   : SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
Gold SQL         : SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Liliane Bettencourt',)]
Gold Output      : [('Liliane Bettencourt',)]

===== Eval Round 1013 =====
Database         : singer
Prediction SQL   : SELECT Citizenship, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Citizenship
Gold SQL         : SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Australia', 1), ('Chile', 1), ('France', 1), ('Germany', 1), ('United States', 4)]
Gold Output      : [('Australia', 1), ('Chile', 1), ('France', 1), ('Germany', 1), ('United States', 4)]

===== Eval Round 1014 =====
Database         : singer
Prediction SQL   : SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship
Gold SQL         : SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Australia', 1), ('Chile', 1), ('France', 1), ('Germany', 1), ('United States', 4)]
Gold Output      : [('Australia', 1), ('Chile', 1), ('France', 1), ('Germany', 1), ('United States', 4)]

===== Eval Round 1015 =====
Database         : singer
Prediction SQL   : SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('United States',)]
Gold Output      : [('United States',)]

===== Eval Round 1016 =====
Database         : singer
Prediction SQL   : SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
Gold SQL         : select citizenship from singer group by citizenship order by count(*) desc limit 1
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('United States',)]
Gold Output      : [('United States',)]

===== Eval Round 1017 =====
Database         : singer
Prediction SQL   : SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
Gold SQL         : SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Australia', 17.0), ('Chile', 17.4), ('France', 30.0), ('Germany', 14.3), ('United States', 28.8)]
Gold Output      : [('Australia', 17.0), ('Chile', 17.4), ('France', 30.0), ('Germany', 14.3), ('United States', 28.8)]

===== Eval Round 1018 =====
Database         : singer
Prediction SQL   : SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
Gold SQL         : SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Australia', 17.0), ('Chile', 17.4), ('France', 30.0), ('Germany', 14.3), ('United States', 28.8)]
Gold Output      : [('Australia', 17.0), ('Chile', 17.4), ('France', 30.0), ('Germany', 14.3), ('United States', 28.8)]

===== Eval Round 1019 =====
Database         : singer
Prediction SQL   : SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
Gold SQL         : SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [("Do They Know It's Christmas", 'Liliane Bettencourt'), ("F**k It (I Don't Want You Back)", 'Liliane Bettencourt'), ('Cha Cha Slide', 'Christy Walton'), ('Call on Me', 'Iris Fontbona'), ('Yeah', 'Christy Walton'), ('All This Time', 'Gina Rinehart'), ('Left Outside Alone', 'Jacqueline Mars'), ('Mysterious Girl', 'Susanne Klatten')]
Gold Output      : [("Do They Know It's Christmas", 'Liliane Bettencourt'), ("F**k It (I Don't Want You Back)", 'Liliane Bettencourt'), ('Cha Cha Slide', 'Christy Walton'), ('Call on Me', 'Iris Fontbona'), ('Yeah', 'Christy Walton'), ('All This Time', 'Gina Rinehart'), ('Left Outside Alone', 'Jacqueline Mars'), ('Mysterious Girl', 'Susanne Klatten')]

===== Eval Round 1020 =====
Database         : singer
Prediction SQL   : SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
Gold SQL         : SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [("Do They Know It's Christmas", 'Liliane Bettencourt'), ("F**k It (I Don't Want You Back)", 'Liliane Bettencourt'), ('Cha Cha Slide', 'Christy Walton'), ('Call on Me', 'Iris Fontbona'), ('Yeah', 'Christy Walton'), ('All This Time', 'Gina Rinehart'), ('Left Outside Alone', 'Jacqueline Mars'), ('Mysterious Girl', 'Susanne Klatten')]
Gold Output      : [("Do They Know It's Christmas", 'Liliane Bettencourt'), ("F**k It (I Don't Want You Back)", 'Liliane Bettencourt'), ('Cha Cha Slide', 'Christy Walton'), ('Call on Me', 'Iris Fontbona'), ('Yeah', 'Christy Walton'), ('All This Time', 'Gina Rinehart'), ('Left Outside Alone', 'Jacqueline Mars'), ('Mysterious Girl', 'Susanne Klatten')]

===== Eval Round 1021 =====
Database         : singer
Prediction SQL   : SELECT DISTINCT s.Name FROM singer s JOIN song ON s.Singer_ID = song.Singer_ID WHERE song.Sales > 300000
Gold SQL         : SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Liliane Bettencourt',), ('Christy Walton',), ('Iris Fontbona',)]
Gold Output      : [('Liliane Bettencourt',), ('Christy Walton',), ('Iris Fontbona',)]

===== Eval Round 1022 =====
Database         : singer
Prediction SQL   : SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000
Gold SQL         : SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Liliane Bettencourt',), ('Christy Walton',), ('Iris Fontbona',)]
Gold Output      : [('Liliane Bettencourt',), ('Christy Walton',), ('Iris Fontbona',)]

===== Eval Round 1023 =====
Database         : singer
Prediction SQL   : SELECT s.Name FROM singer s JOIN song ON s.Singer_ID = song.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(song.Song_ID) > 1
Gold SQL         : SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Liliane Bettencourt',), ('Christy Walton',)]
Gold Output      : [('Christy Walton',), ('Liliane Bettencourt',)]

===== Eval Round 1024 =====
Database         : singer
Prediction SQL   : SELECT s.Name FROM singer s JOIN song sa ON s.Singer_ID = sa.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(sa.Song_ID) > 1
Gold SQL         : SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Liliane Bettencourt',), ('Christy Walton',)]
Gold Output      : [('Christy Walton',), ('Liliane Bettencourt',)]

===== Eval Round 1025 =====
Database         : singer
Prediction SQL   : SELECT s.Name, SUM(so.Sales) FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name
Gold SQL         : SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Christy Walton', 651421.0), ('Gina Rinehart', 292000.0), ('Iris Fontbona', 335000.0), ('Jacqueline Mars', 275000.0), ('Liliane Bettencourt', 1646407.0), ('Susanne Klatten', 261000.0)]
Gold Output      : [('Christy Walton', 651421.0), ('Gina Rinehart', 292000.0), ('Iris Fontbona', 335000.0), ('Jacqueline Mars', 275000.0), ('Liliane Bettencourt', 1646407.0), ('Susanne Klatten', 261000.0)]

===== Eval Round 1026 =====
Database         : singer
Prediction SQL   : SELECT s.Name, SUM(so.Sales) FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name
Gold SQL         : SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Christy Walton', 651421.0), ('Gina Rinehart', 292000.0), ('Iris Fontbona', 335000.0), ('Jacqueline Mars', 275000.0), ('Liliane Bettencourt', 1646407.0), ('Susanne Klatten', 261000.0)]
Gold Output      : [('Christy Walton', 651421.0), ('Gina Rinehart', 292000.0), ('Iris Fontbona', 335000.0), ('Jacqueline Mars', 275000.0), ('Liliane Bettencourt', 1646407.0), ('Susanne Klatten', 261000.0)]

===== Eval Round 1027 =====
Database         : singer
Prediction SQL   : SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
Gold SQL         : SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Alice Walton',), ('Abigail Johnson',)]
Gold Output      : [('Alice Walton',), ('Abigail Johnson',)]

===== Eval Round 1028 =====
Database         : singer
Prediction SQL   : SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
Gold SQL         : SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [('Alice Walton',), ('Abigail Johnson',)]
Gold Output      : [('Alice Walton',), ('Abigail Johnson',)]

===== Eval Round 1029 =====
Database         : singer
Prediction SQL   : SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955
Gold SQL         : SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('France',), ('Chile',), ('United States',), ('Germany',)]
Gold Output      : [('United States',)]

===== Eval Round 1030 =====
Database         : singer
Prediction SQL   : SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955
Gold SQL         : SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('France',), ('Chile',), ('United States',), ('Germany',)]
Gold Output      : [('United States',)]

===== Eval Round 1031 =====
Database         : real_estate_properties
Prediction SQL   : SELECT COUNT(*) FROM Other_Available_Features
Gold SQL         : SELECT count(*) FROM Other_Available_Features
Exec Accuracy(EX): 1
Exact Match(EM)  : True
Pred Output      : [(3,)]
Gold Output      : [(3,)]

===== Eval Round 1032 =====
Database         : real_estate_properties
Prediction SQL   : SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code IN (SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon')
Gold SQL         : SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  "AirCon"
Exec Accuracy(EX): 1
Exact Match(EM)  : 0
Pred Output      : [('Amenity, eg Pool.',)]
Gold Output      : [('Amenity, eg Pool.',)]

===== Eval Round 1033 =====
Database         : real_estate_properties
Prediction SQL   : SELECT T1.property_type_code FROM Properties AS T1
Gold SQL         : SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : [('House',), ('House',), ('Other',), ('Field',), ('Apartment',), ('Shop',), ('Shop',), ('Apartment',), ('Apartment',), ('Apartment',), ('Other',), ('Apartment',), ('Other',), ('Other',), ('Apartment',)]
Gold Output      : [('Apartment, Flat, Condo, etc.',), ('Field, Meadow.',), ('House, Bungalow, etc.',), ('Other, to be determined.',), ('Shop, Retail Outlet.',)]

===== Eval Round 1034 =====
Database         : real_estate_properties
Prediction SQL   : SELECT property_name FROM Properties WHERE property_type_code IN ('APT', 'HSE') AND room_count > 1
Gold SQL         : SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1
Exec Accuracy(EX): 0
Exact Match(EM)  : 0
Pred Output      : []
Gold Output      : [('longacre',), ('parc coliseum',), ('parc east',), ('park',), ('renoir',), ('ten tower',), ('the cole',), ('vogue',)]

